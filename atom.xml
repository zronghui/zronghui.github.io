<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-07-05T14:20:51.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 583. Delete Operation for Two Strings</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-583-Delete-Operation-for-Two-Strings.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-583-Delete-Operation-for-Two-Strings.html</id>
    <published>2020-07-05T14:17:14.000Z</published>
    <updated>2020-07-05T14:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/delete-operation-for-two-strings/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/delete-operation-for-two-strings/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two words <em>word1</em> and <em>word2</em> , find the minimum number of steps<br>required to make <em>word1</em> and <em>word2</em> the same, where in each step you can<br>delete one character in either string.</p><p><strong>Example 1:</strong>  </p><pre><code>Input: &quot;sea&quot;, &quot;eat&quot;Output: 2Explanation: You need one step to make &quot;sea&quot; to &quot;ea&quot; and another step to make &quot;eat&quot; to &quot;ea&quot;.</code></pre><p><strong>Note:</strong>  </p><ol><li>The length of given words won’t exceed 500.</li><li>Characters in given words can only be lower-case letters.</li></ol><p><strong>Tags:</strong> String</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, s1: str, s2: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#     s e a</span></span><br><span class="line">        <span class="comment">#   0 1 2 3</span></span><br><span class="line">        <span class="comment"># e 1 2 1 2</span></span><br><span class="line">        <span class="comment"># a 2 3 2 1</span></span><br><span class="line">        <span class="comment"># t 3 4 3 2</span></span><br><span class="line">        <span class="comment"># s1[i]==s2[j]: dp[i][j] = dp[i-1][j-1]</span></span><br><span class="line">        <span class="comment"># else: dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+2)</span></span><br><span class="line">        n, m = len(s1), len(s2)</span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 初始化第一行、第一列</span></span><br><span class="line">        dp[<span class="number">0</span>] = list(range(m+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s1[i<span class="number">-1</span>]==s2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>, dp[i][j<span class="number">-1</span>]+<span class="number">1</span>, dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">2</span>)</span><br><span class="line">                print(s1[i<span class="number">-1</span>], s2[j<span class="number">-1</span>], dp[i][j], <span class="string">''</span>)</span><br><span class="line">            print()</span><br><span class="line">        print(dp)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/delete-operation-for-two-strings/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/delete-operation-for-two-strings/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two words &lt;em&gt;word1&lt;/em&gt; and &lt;em&gt;word2&lt;/em&gt; , find the minimum number of steps&lt;br&gt;required to make &lt;em&gt;word1&lt;/em&gt; and &lt;em&gt;word2&lt;/em&gt; the same, where in each step you can&lt;br&gt;delete one character in either string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;sea&amp;quot;, &amp;quot;eat&amp;quot;
Output: 2
Explanation: You need one step to make &amp;quot;sea&amp;quot; to &amp;quot;ea&amp;quot; and another step to make &amp;quot;eat&amp;quot; to &amp;quot;ea&amp;quot;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The length of given words won’t exceed 500.&lt;/li&gt;
&lt;li&gt;Characters in given words can only be lower-case letters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 10. Regular Expression Matching</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-10-Regular-Expression-Matching.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-10-Regular-Expression-Matching.html</id>
    <published>2020-07-05T13:55:46.000Z</published>
    <updated>2020-07-05T14:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/regular-expression-matching/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/regular-expression-matching/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression<br>matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.<br>            ‘.’ Matches any single character.    ‘*’ Matches zero or more of the preceding element.    </p><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Note:</strong></p><ul><li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li><li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li></ul><p><strong>Example 1:</strong><br>            Input:    s = “aa”    p = “a”    Output: false    Explanation: “a” does not match the entire string “aa”.    </p><p><strong>Example 2:</strong><br>            Input:    s = “aa”    p = “a*”    Output: true    Explanation:  ‘*’ means zero or more of the preceding element, ‘a’. Therefore, by repeating ‘a’ once, it becomes “aa”.    </p><p><strong>Example 3:</strong><br>            Input:    s = “ab”    p = “.*”    Output: true    Explanation:  “.*” means “zero or more (*) of any character (.)”.    </p><p><strong>Example 4:</strong><br>            Input:    s = “aab”    p = “c<em>a</em>b”    Output: true    Explanation:  c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches “aab”.    </p><p><strong>Example 5:</strong><br>            Input:    s = “mississippi”    p = “mis<em>is*p</em>.”    Output: false    </p><p><strong>Tags:</strong> String, Dynamic Programming, Backtracking</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment">#     a a b</span></span><br><span class="line">        <span class="comment">#   1 0 0 0</span></span><br><span class="line">        <span class="comment"># c 0 0 0 0</span></span><br><span class="line">        <span class="comment"># * 1 0 0 0</span></span><br><span class="line">        <span class="comment"># a 0 1 0 0</span></span><br><span class="line">        <span class="comment"># * 1 1 1 0</span></span><br><span class="line">        <span class="comment"># b 0 0 0 1</span></span><br><span class="line">        <span class="comment"># 更复杂的情况："mississippi"   "mis*is*p*."</span></span><br><span class="line">        n, m = len(p), len(s)</span><br><span class="line">        dp = [[<span class="literal">False</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 更新 dp 第一列的值</span></span><br><span class="line">        nums = <span class="number">0</span> <span class="comment"># 当前字母个数，遇到 * -1, 大于 1 break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i<span class="number">-1</span>]==<span class="string">'*'</span>:</span><br><span class="line">                nums -= <span class="number">1</span></span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> nums&gt;<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 开头一个*, 或连续 2 个* ,格式错误</span></span><br><span class="line">            <span class="keyword">if</span> p[i<span class="number">-1</span>]==<span class="string">'*'</span> <span class="keyword">and</span> (i==<span class="number">1</span> <span class="keyword">or</span> p[i<span class="number">-2</span>]==<span class="string">'*'</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[i<span class="number">-1</span>]==<span class="string">'.'</span> <span class="keyword">or</span> p[i<span class="number">-1</span>]==s[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[i<span class="number">-1</span>]==<span class="string">'*'</span>:</span><br><span class="line">                    <span class="comment"># dp[i-2][j] 当 * 表示 0 次</span></span><br><span class="line">                    <span class="comment"># dp[i-1][j] 当 * 表示 1 次</span></span><br><span class="line">                    <span class="comment"># 当 * 表示 多 次: </span></span><br><span class="line">                    <span class="comment">#  条件 1. p[i-2] in [s[j-1], '.'] (当前字符匹配*前的字符)</span></span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-2</span>][j] <span class="keyword">or</span> (dp[i<span class="number">-1</span>][j]) <span class="keyword">or</span> (p[i<span class="number">-2</span>] <span class="keyword">in</span> [s[j<span class="number">-1</span>], <span class="string">'.'</span>] <span class="keyword">and</span> dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/regular-expression-matching/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an input string (&lt;code&gt;s&lt;/code&gt;) and a pattern (&lt;code&gt;p&lt;/code&gt;), implement regular expression&lt;br&gt;matching with support for &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt;.&lt;br&gt;            ‘.’ Matches any single character.    ‘*’ Matches zero or more of the preceding element.    &lt;/p&gt;
&lt;p&gt;The matching should cover the &lt;strong&gt;entire&lt;/strong&gt; input string (not partial).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;, and characters like &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;            Input:    s = “aa”    p = “a”    Output: false    Explanation: “a” does not match the entire string “aa”.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;            Input:    s = “aa”    p = “a*”    Output: true    Explanation:  ‘*’ means zero or more of the preceding element, ‘a’. Therefore, by repeating ‘a’ once, it becomes “aa”.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;            Input:    s = “ab”    p = “.*”    Output: true    Explanation:  “.*” means “zero or more (*) of any character (.)”.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;br&gt;            Input:    s = “aab”    p = “c&lt;em&gt;a&lt;/em&gt;b”    Output: true    Explanation:  c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches “aab”.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;br&gt;            Input:    s = “mississippi”    p = “mis&lt;em&gt;is*p&lt;/em&gt;.”    Output: false    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String, Dynamic Programming, Backtracking&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Backtracking" scheme="https://zronghui.github.io/tags/Backtracking/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 44. Wildcard Matching</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-4**/leetcode-44-Wildcard-Matching.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-4**/leetcode-44-Wildcard-Matching.html</id>
    <published>2020-07-05T10:13:46.000Z</published>
    <updated>2020-07-05T14:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/wildcard-matching/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/wildcard-matching/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern<br>matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.</p><pre><code>&apos;?&apos; Matches any single character.&apos;*&apos; Matches any sequence of characters (including the empty sequence).</code></pre><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Note:</strong></p><ul><li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li><li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>?</code> or <code>*</code>.</li></ul><p><strong>Example 1:</strong></p><pre><code>Input:s = &quot;aa&quot;p = &quot;a&quot;Output: falseExplanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:s = &quot;aa&quot;p = &quot;*&quot;Output: trueExplanation:  &apos;*&apos; matches any sequence.</code></pre><p><strong>Example 3:</strong></p><pre><code>Input:s = &quot;cb&quot;p = &quot;?a&quot;Output: falseExplanation:  &apos;?&apos; matches &apos;c&apos;, but the second letter is &apos;a&apos;, which does not match &apos;b&apos;.</code></pre><p><strong>Example 4:</strong></p><pre><code>Input:s = &quot;adceb&quot;p = &quot;*a*b&quot;Output: trueExplanation:  The first &apos;*&apos; matches the empty sequence, while the second &apos;*&apos; matches the substring &quot;dce&quot;.</code></pre><p><strong>Example 5:</strong></p><pre><code>Input:s = &quot;acdcb&quot;p = &quot;a*c?b&quot;Output: false</code></pre><p><strong>Tags:</strong> String, Dynamic Programming, Backtracking, Greedy</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/wildcard-matching/solution/zi-fu-chuan-dong-tai-gui-hua-bi-xu-miao-dong-by-sw/">字符串动态规划，🤷‍♀️ 必须秒懂！ - 通配符匹配 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/wildcard-matching/submissions/">44. 通配符匹配 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 思路参考：</span></span><br><span class="line">        <span class="comment"># [字符串动态规划，🤷‍♀️ 必须秒懂！ - 通配符匹配 - 力扣（LeetCode）](https://leetcode-cn.com/problems/wildcard-matching/solution/zi-fu-chuan-dong-tai-gui-hua-bi-xu-miao-dong-by-sw/)</span></span><br><span class="line">        m, n = len(s), len(p)</span><br><span class="line">        <span class="comment"># dp[n][m]: 表示 p 的前 i 个字符和 s 的前 j 个字符是否匹配</span></span><br><span class="line">        <span class="comment"># 一个很好的例子解释代码：(0表示 false，1 表示 true)</span></span><br><span class="line">        <span class="comment">#     a d c e b</span></span><br><span class="line">        <span class="comment">#   1 0 0 0 0 0 </span></span><br><span class="line">        <span class="comment"># * 1 1 1 1 1 1</span></span><br><span class="line">        <span class="comment"># a 0 1 0 0 0 0</span></span><br><span class="line">        <span class="comment"># * 0 1 1 1 1 1 ( *a 匹配所以后面都是 1)</span></span><br><span class="line">        <span class="comment"># b 0 0 0 0 0 1</span></span><br><span class="line">        dp = [[<span class="literal">False</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span> <span class="comment"># 空串匹配空串</span></span><br><span class="line">        <span class="comment"># p 的前若干个* 匹配空串</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i<span class="number">-1</span>]!=<span class="string">'*'</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[i<span class="number">-1</span>]==<span class="string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j]|dp[i][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[i<span class="number">-1</span>]==<span class="string">'?'</span> <span class="keyword">or</span> p[i<span class="number">-1</span>]==s[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/wildcard-matching/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/wildcard-matching/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an input string (&lt;code&gt;s&lt;/code&gt;) and a pattern (&lt;code&gt;p&lt;/code&gt;), implement wildcard pattern&lt;br&gt;matching with support for &lt;code&gt;&amp;#39;?&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;apos;?&amp;apos; Matches any single character.
&amp;apos;*&amp;apos; Matches any sequence of characters (including the empty sequence).&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The matching should cover the &lt;strong&gt;entire&lt;/strong&gt; input string (not partial).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; could be empty and contains only lowercase letters &lt;code&gt;a-z&lt;/code&gt;, and characters like &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;aa&amp;quot;
p = &amp;quot;a&amp;quot;
Output: false
Explanation: &amp;quot;a&amp;quot; does not match the entire string &amp;quot;aa&amp;quot;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;aa&amp;quot;
p = &amp;quot;*&amp;quot;
Output: true
Explanation:  &amp;apos;*&amp;apos; matches any sequence.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;cb&amp;quot;
p = &amp;quot;?a&amp;quot;
Output: false
Explanation:  &amp;apos;?&amp;apos; matches &amp;apos;c&amp;apos;, but the second letter is &amp;apos;a&amp;apos;, which does not match &amp;apos;b&amp;apos;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;adceb&amp;quot;
p = &amp;quot;*a*b&amp;quot;
Output: true
Explanation:  The first &amp;apos;*&amp;apos; matches the empty sequence, while the second &amp;apos;*&amp;apos; matches the substring &amp;quot;dce&amp;quot;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
s = &amp;quot;acdcb&amp;quot;
p = &amp;quot;a*c?b&amp;quot;
Output: false&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String, Dynamic Programming, Backtracking, Greedy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-4**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-4/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Backtracking" scheme="https://zronghui.github.io/tags/Backtracking/"/>
    
      <category term="Greedy" scheme="https://zronghui.github.io/tags/Greedy/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>医学健康相关</title>
    <link href="https://zronghui.github.io/other/%E5%8C%BB%E5%AD%A6%E5%81%A5%E5%BA%B7%E7%9B%B8%E5%85%B3.html"/>
    <id>https://zronghui.github.io/other/%E5%8C%BB%E5%AD%A6%E5%81%A5%E5%BA%B7%E7%9B%B8%E5%85%B3.html</id>
    <published>2020-07-05T01:12:29.000Z</published>
    <updated>2020-07-05T14:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="体检"><a href="#体检" class="headerlink" title="体检"></a>体检</h2><h3 id="体检的误区，不需要做的体检"><a href="#体检的误区，不需要做的体检" class="headerlink" title="体检的误区，不需要做的体检"></a>体检的误区，不需要做的体检</h3><ul><li>拍胸片 现在基本没有任何作用，完全是浪费钱</li><li>基因检测 价格昂贵，而且没有必要</li></ul><h3 id="需要做的体检"><a href="#需要做的体检" class="headerlink" title="需要做的体检"></a>需要做的体检</h3><p>常规：血压、血脂、血糖、腰围、口腔、肛门、指检、心电图、肝胆胰超声</p><ul><li>1 个细菌：幽门螺杆菌（查胃癌），一人查出，全家治疗</li><li>2 种病毒：HPV（2-3 年一次，女，查 宫颈内病毒的存在）、乙肝</li><li>3种检查：肺癌（低剂量CT）、无痛胃肠镜（没问题的话五年一次，2000 一次）、前列腺彩超+PSA（男，40 岁后）、乳腺的 第一次 彩超+钼靶射线，之后只查彩超即可</li></ul><h3 id="体检后需要做的事"><a href="#体检后需要做的事" class="headerlink" title="体检后需要做的事"></a>体检后需要做的事</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>夏天吃西瓜能缓解被晒中暑的情况；空调房里吹着凉喝 霍强正气水</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-07</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-07.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-07.html</id>
    <published>2020-07-04T08:01:34.000Z</published>
    <updated>2020-07-05T14:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c7e23636787075656e6a59ed0c1e21646813abfab3125f5c868f5c246f38ccb8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 32. Longest Valid Parentheses</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-3**/leetcode-32-Longest-Valid-Parentheses.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-3**/leetcode-32-Longest-Valid-Parentheses.html</id>
    <published>2020-07-04T00:36:37.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/longest-valid-parentheses/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/longest-valid-parentheses/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length<br>of the longest valid (well-formed) parentheses substring.</p><p><strong>Example 1:</strong></p><pre><code>Input: &quot;(()&quot;Output: 2Explanation: The longest valid parentheses substring is &quot;()&quot;</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: &quot;)()())&quot;Output: 4Explanation: The longest valid parentheses substring is &quot;()()&quot;</code></pre><p><strong>Tags:</strong> String, Dynamic Programming</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># )()()) </span></span><br><span class="line">        <span class="comment"># [('', -1), (')', 0), ('(', 5), ('', 6)] 5-0-1</span></span><br><span class="line">        l = [(<span class="string">''</span>, <span class="number">-1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">')'</span> <span class="keyword">and</span> l[<span class="number">-1</span>][<span class="number">0</span>]==<span class="string">'('</span>:</span><br><span class="line">                l.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l.append((c, i))</span><br><span class="line">        l.append((<span class="string">''</span>, len(s)))</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(l[<span class="number">1</span>:], start=<span class="number">1</span>):</span><br><span class="line">            res = max(res, v[<span class="number">1</span>]-l[i<span class="number">-1</span>][<span class="number">1</span>]<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-valid-parentheses/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/longest-valid-parentheses/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length&lt;br&gt;of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(()&amp;quot;
Output: 2
Explanation: The longest valid parentheses substring is &amp;quot;()&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;)()())&amp;quot;
Output: 4
Explanation: The longest valid parentheses substring is &amp;quot;()()&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-3**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-3/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 231. Power of Two</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-231-Power-of-Two.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-231-Power-of-Two.html</id>
    <published>2020-07-03T11:38:39.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/power-of-two/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/power-of-two/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an integer, write a function to determine if it is a power of two.</p><p><strong>Example 1:</strong></p><pre><code>Input: 1Output: true Explanation: 20 = 1</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 16Output: trueExplanation: 24 = 16</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: 218Output: false</code></pre><p><strong>Tags:</strong> Math, Bit Manipulation</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:pyt</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            n &amp;= n<span class="number">-1</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> cnt==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/power-of-two/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/power-of-two/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an integer, write a function to determine if it is a power of two.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 1
Output: true 
Explanation: 20 = 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 16
Output: true
Explanation: 24 = 16&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 218
Output: false&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Math, Bit Manipulation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
      <category term="Bit Manipulation" scheme="https://zronghui.github.io/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 153. Find Minimum in Rotated Sorted Array</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-153-Find-Minimum-in-Rotated-Sorted-Array.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-153-Find-Minimum-in-Rotated-Sorted-Array.html</id>
    <published>2020-07-02T00:24:31.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/find-minimum-in-rotated-sorted-array/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to<br>you beforehand.</p><p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p><p>Find the minimum element.</p><p>You may assume no duplicate exists in the array.</p><p><strong>Example 1:</strong></p><pre><code>Input: [3,4,5,1,2] Output: 1</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [4,5,6,7,0,1,2]Output: 0</code></pre><p><strong>Tags:</strong> Array, Binary Search</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;j:</span><br><span class="line">            m = i+(j-i)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[m]&gt;nums[j]:</span><br><span class="line">                i = m+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = m</span><br><span class="line">        <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/find-minimum-in-rotated-sorted-array/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to&lt;br&gt;you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e.,  &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; might become  &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,4,5,1,2] 
Output: 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [4,5,6,7,0,1,2]
Output: 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Binary Search&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Binary Search" scheme="https://zronghui.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 154. Find Minimum in Rotated Sorted Array II</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-154-Find-Minimum-in-Rotated-Sorted-Array-II.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-154-Find-Minimum-in-Rotated-Sorted-Array-II.html</id>
    <published>2020-07-02T00:24:16.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/find-minimum-in-rotated-sorted-array-ii/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to<br>you beforehand.</p><p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p><p>Find the minimum element.</p><p>The array may contain duplicates.</p><p><strong>Example 1:</strong></p><pre><code>Input: [1,3,5]Output: 1</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [2,2,2,0,1]Output: 0</code></pre><p><strong>Note:</strong></p><ul><li>This is a follow up problem to <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/">Find Minimum in Rotated Sorted Array</a>.</li><li>Would allow duplicates affect the run-time complexity? How and why?</li></ul><p><strong>Tags:</strong> Array, Binary Search</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;j:</span><br><span class="line">            m = i+(j-i)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[m]&gt;nums[j]:</span><br><span class="line">                i = m+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[m]&lt;nums[j]:</span><br><span class="line">                j = m</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/find-minimum-in-rotated-sorted-array-ii/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to&lt;br&gt;you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e.,  &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; might become  &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;The array may contain duplicates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [1,3,5]
Output: 1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,2,2,0,1]
Output: 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a follow up problem to &lt;a href=&quot;https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/&quot;&gt;Find Minimum in Rotated Sorted Array&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Would allow duplicates affect the run-time complexity? How and why?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Binary Search&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Binary Search" scheme="https://zronghui.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 00 题解</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-00-%E9%A2%98%E8%A7%A3.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-00-%E9%A2%98%E8%A7%A3.html</id>
    <published>2020-07-01T03:27:28.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://krahets.gitee.io/views/sword-for-offer/2020-05-20-sword-for-offer-00.html">「 剑指 OFFER 系列题解 」 扬帆，起航 | Krahets’s Blog</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://krahets.gitee.io/views/sword-for-offer/2020-05-20-sword-for-offer-00.html&quot;&gt;「 剑指 OFFER 系列题解 」 扬帆，起航 | Krahets’s Blog&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 718. Maximum Length of Repeated Subarray</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-718-Maximum-Length-of-Repeated-Subarray.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-718-Maximum-Length-of-Repeated-Subarray.html</id>
    <published>2020-07-01T01:33:32.000Z</published>
    <updated>2020-07-04T08:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-length-of-repeated-subarray/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/maximum-length-of-repeated-subarray/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two integer arrays <code>A</code> and <code>B</code>, return the maximum length of an subarray<br>that appears in both arrays.</p><p><strong>Example 1:</strong></p><pre><code>Input:A: [1,2,3,2,1]B: [3,2,1,4,7]Output: 3Explanation: The repeated subarray with maximum length is [3, 2, 1].</code></pre><p><strong>Note:</strong></p><ol><li>1 &lt;= len(A), len(B) &lt;= 1000</li><li>0 &lt;= A[i], B[i] &lt; 100</li></ol><p><strong>Tags:</strong> Array, Hash Table, Binary Search, Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://mp.weixin.qq.com/s/XJyujBI5nofVE9CUbStemA">370，最长公共子串和子序列</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLength</span><span class="params">(self, A: List[int], B: List[int])</span> -&gt; int:</span></span><br><span class="line">        n, m = len(A), len(B)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># n = 3 m=5 A:[3, 2, 1]  B:[4, 7, 3, 2, 1]</span></span><br><span class="line">        <span class="comment">#   [1, 7, 3, 2, 1]</span></span><br><span class="line">        <span class="comment"># 3: 0  0  1  0  0</span></span><br><span class="line">        <span class="comment"># 2: 0  0  0  2  0</span></span><br><span class="line">        <span class="comment"># 1: 1  0  0  0  3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> A[i<span class="number">-1</span>]==B[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">                    res = max(res, dp[i][j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLength</span><span class="params">(self, A: List[int], B: List[int])</span> -&gt; int:</span></span><br><span class="line">        n, m = len(A), len(B)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>]*(m+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># n = 3 m=5 A:[3, 2, 1]  B:[4, 7, 3, 2, 1]</span></span><br><span class="line">        <span class="comment">#   [1, 7, 3, 2, 1]</span></span><br><span class="line">        <span class="comment"># 3: 0  0  1  0  0</span></span><br><span class="line">        <span class="comment"># 2: 0  0  0  2  0</span></span><br><span class="line">        <span class="comment"># 1: 1  0  0  0  3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> reversed(range(<span class="number">1</span>, m+<span class="number">1</span>)):</span><br><span class="line">                <span class="keyword">if</span> A[i<span class="number">-1</span>]==B[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[j] = dp[j<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">                    res = max(res, dp[j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-length-of-repeated-subarray/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/maximum-length-of-repeated-subarray/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two integer arrays &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, return the maximum length of an subarray&lt;br&gt;that appears in both arrays.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 &amp;lt;= len(A), len(B) &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= A[i], B[i] &amp;lt; 100&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Hash Table, Binary Search, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Binary Search" scheme="https://zronghui.github.io/tags/Binary-Search/"/>
    
      <category term="Hash Table" scheme="https://zronghui.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 68 - II 二叉树的最近公共祖先</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-68-II-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-68-II-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html</id>
    <published>2020-06-30T13:56:49.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 68 - I 二叉搜索树的最近公共祖先</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-68-I-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-68-I-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html</id>
    <published>2020-06-30T13:56:47.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 67 把字符串转换成整数</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-67-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-67-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0.html</id>
    <published>2020-06-30T13:56:46.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 66 构建乘积数组</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-66-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-66-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84.html</id>
    <published>2020-06-30T13:56:44.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 65 不用加减乘除做加法</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-65-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-65-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95.html</id>
    <published>2020-06-30T13:56:42.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 64 求1+2+…+n</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-64-%E6%B1%821-2-%E2%80%A6-n.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-64-%E6%B1%821-2-%E2%80%A6-n.html</id>
    <published>2020-06-30T13:56:40.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 63 股票的最大利润</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-63-%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-63-%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6.html</id>
    <published>2020-06-30T13:56:38.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 62 圆圈中最后剩下的数字</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-62-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-62-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97.html</id>
    <published>2020-06-30T13:56:37.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 61 扑克牌中的顺子</title>
    <link href="https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-61-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87-Offer-61-%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90.html</id>
    <published>2020-06-30T13:56:35.000Z</published>
    <updated>2020-06-30T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="剑指offer" scheme="https://zronghui.github.io/categories/leetcode/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
</feed>
