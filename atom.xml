<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-06-14T09:27:16.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-1300-sum-of-mutated-array-closest-to-target</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1300-sum-of-mutated-array-closest-to-target.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1300-sum-of-mutated-array-closest-to-target.html</id>
    <published>2020-06-14T05:14:05.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。</p><p>如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。</p><p>请注意，答案不一定是 arr 中的数字。</p><p>示例 1：</p><p>输入：arr = [4,9,3], target = 10<br>输出：3<br>解释：当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。<br>示例 2：</p><p>输入：arr = [2,3,5], target = 10<br>输出：5<br>示例 3：</p><p>输入：arr = [60864,25176,27249,21296,20204], target = 56803<br>输出：11361</p><p>提示：</p><p>1 &lt;= arr.length &lt;= 10^4<br>1 &lt;= arr[i], target &lt;= 10^5</p><a id="more"></a><p><a href="https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/solution/ben-lai-yi-wei-7-xing-dai-ma-jiu-gou-de-by-zronghu/">本来以为 7 行代码就够的 - 转变数组后最接近目标值的数组和 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findBestValue</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        arr.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        _sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(arr))):</span><br><span class="line">            <span class="comment"># sum(arr[i+1:]) + (i+1)*arr[i] &gt; target</span></span><br><span class="line">            <span class="keyword">if</span> _sum + (i+<span class="number">1</span>)*arr[i]&gt;target:</span><br><span class="line">                <span class="comment"># bug: [3, 4, 9] 10 输出 4 而不是 3，abs相等，但是 3 更小</span></span><br><span class="line">                <span class="comment"># return round((target-_sum)/(i+1))</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 比较 int 和 ceil</span></span><br><span class="line">                a = int((target-_sum)/(i+<span class="number">1</span>))</span><br><span class="line">                b = a + <span class="number">1</span></span><br><span class="line">                aabs = abs(target-_sum-(i+<span class="number">1</span>)*a)</span><br><span class="line">                babs = abs(target-_sum-(i+<span class="number">1</span>)*b)</span><br><span class="line">                <span class="keyword">if</span> aabs&lt;=babs:</span><br><span class="line">                    <span class="keyword">return</span> a</span><br><span class="line">                <span class="keyword">return</span> b</span><br><span class="line">            _sum += arr[i]</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。&lt;/p&gt;
&lt;p&gt;如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。&lt;/p&gt;
&lt;p&gt;请注意，答案不一定是 arr 中的数字。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：arr = [4,9,3], target = 10&lt;br&gt;输出：3&lt;br&gt;解释：当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：arr = [2,3,5], target = 10&lt;br&gt;输出：5&lt;br&gt;示例 3：&lt;/p&gt;
&lt;p&gt;输入：arr = [60864,25176,27249,21296,20204], target = 56803&lt;br&gt;输出：11361&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;1 &amp;lt;= arr.length &amp;lt;= 10^4&lt;br&gt;1 &amp;lt;= arr[i], target &amp;lt;= 10^5&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-193</title>
    <link href="https://zronghui.github.io/weekly-contest-193.html"/>
    <id>https://zronghui.github.io/weekly-contest-193.html</id>
    <published>2020-06-14T04:01:23.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>380，最靠前的一次了吧</p><p><img src="https://i.loli.net/2020/06/14/QGMqoUYwNjgmxkO.png" alt="image-20200614120137141"></p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-193/problems/running-sum-of-1d-array/">一维数组的动态和</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-193/problems/least-number-of-unique-integers-after-k-removals/">不同整数的最少数目</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-193/problems/minimum-number-of-days-to-make-m-bouquets/">制作 m 束花所需的最少天数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-193/problems/kth-ancestor-of-a-tree-node/">树节点的第 K 个祖先</a><strong>6</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runningSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLeastNumOfUniqueInts</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        m = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            m[i] += <span class="number">1</span></span><br><span class="line">        print(m, m.values())</span><br><span class="line">        l = [i <span class="keyword">for</span> i <span class="keyword">in</span> m.values()]</span><br><span class="line">        l.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">while</span> k&gt;<span class="number">0</span>:</span><br><span class="line">            i = l.pop()</span><br><span class="line">            k -= i</span><br><span class="line">        <span class="keyword">return</span> len(l) <span class="keyword">if</span> k==<span class="number">0</span> <span class="keyword">else</span> len(l)+<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDays</span><span class="params">(self, bloomDay: List[int], m: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 将 l 并入排好序的 exclude 中</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(exclude, l)</span>:</span></span><br><span class="line">            <span class="comment"># print(exclude, l)</span></span><br><span class="line">            <span class="comment"># 还能优化，l 好像也是排好序的</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">                bisect.insort(exclude, i)</span><br><span class="line">            <span class="comment"># print(exclude)</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 判断去除 exclude 后是否满足条件</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">satisfy</span><span class="params">(n, m, k, exclude)</span>:</span></span><br><span class="line">            <span class="comment"># 还能优化，可以在上次的结果里去除一部分不符合条件的</span></span><br><span class="line">            <span class="keyword">if</span> m*k&gt;n-len(exclude):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            pre = <span class="number">-1</span></span><br><span class="line">            <span class="comment"># 能收多少束花 satisfied_m</span></span><br><span class="line">            sm = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 0 1 2 3 4 5 6    n=7</span></span><br><span class="line">            <span class="comment"># x x x x _ x x</span></span><br><span class="line">            exclude.append(n) <span class="comment"># 考虑列表最后一部分</span></span><br><span class="line">            <span class="comment"># 若 exclude [4, 6]  n 10</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> exclude:</span><br><span class="line">                sm += int((i-pre<span class="number">-1</span>)/k)</span><br><span class="line">                <span class="keyword">if</span> sm&gt;=m:</span><br><span class="line">                    exclude.pop()</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                pre = i</span><br><span class="line">            exclude.pop()</span><br><span class="line">            <span class="keyword">return</span> sm&gt;=m</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算最后一天可不可以，然后倒回去，直到有一天不行</span></span><br><span class="line">        n = len(bloomDay)</span><br><span class="line">        <span class="keyword">if</span> m*k&gt;n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        exclude = []</span><br><span class="line">        </span><br><span class="line">        dic = collections.defaultdict(list)</span><br><span class="line">        <span class="comment"># dic 存放哪一天开了哪些位置的花</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            dic[bloomDay[i]].append(i)</span><br><span class="line">            </span><br><span class="line">        days = [i <span class="keyword">for</span> i <span class="keyword">in</span> dic.keys()]</span><br><span class="line">        days.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(days)):</span><br><span class="line">            day = days[i]</span><br><span class="line">            merge(exclude, dic[day])</span><br><span class="line">            <span class="comment"># print(n, m, k, exclude)</span></span><br><span class="line">            <span class="comment"># print(satisfy(n, m, k, exclude))</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> satisfy(n, m, k, exclude):</span><br><span class="line">                <span class="keyword">return</span> days[i]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">            <span class="comment"># m 束花 k 朵花</span></span><br><span class="line">            <span class="comment"># 0 1 2 3 4 5 6 7 8 9  n=10 m=4 k=2</span></span><br><span class="line">            <span class="comment"># x _ x _ x x x x x x</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;380，最靠前的一次了吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/14/QGMqoUYwNjgmxkO.png&quot; alt=&quot;image-20200614120137141&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-193/problems/running-sum-of-1d-array/&quot;&gt;一维数组的动态和&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-193/problems/least-number-of-unique-integers-after-k-removals/&quot;&gt;不同整数的最少数目&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-193/problems/minimum-number-of-days-to-make-m-bouquets/&quot;&gt;制作 m 束花所需的最少天数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-193/problems/kth-ancestor-of-a-tree-node/&quot;&gt;树节点的第 K 个祖先&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 70. Climbing Stairs</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-70-Climbing-Stairs.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-70-Climbing-Stairs.html</id>
    <published>2020-06-13T06:59:48.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/climbing-stairs/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/climbing-stairs/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you<br>climb to the top?</p><p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p><p><strong>Example 1:</strong></p><pre><code>Input: 2Output: 2Explanation: There are two ways to climb to the top.1. 1 step + 1 step2. 2 steps</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 3Output: 3Explanation: There are three ways to climb to the top.1. 1 step + 1 step + 1 step2. 1 step + 2 steps3. 2 steps + 1 step</code></pre><p><strong>Tags:</strong> Dynamic Programming</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="meta">    @functools.lru_cache(maxsize=None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self.climbStairs(n<span class="number">-1</span>)+self.climbStairs(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/climbing-stairs/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;You are climbing a stair case. It takes &lt;em&gt;n&lt;/em&gt; steps to reach to the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb 1 or 2 steps. In how many distinct ways can you&lt;br&gt;climb to the top?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Given &lt;em&gt;n&lt;/em&gt; will be a positive integer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 15. 3Sum</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-15-3Sum.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-15-3Sum.html</id>
    <published>2020-06-12T07:25:11.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/3sum/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/3sum/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em> , <em>b</em> , <em>c</em> in<br><code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array<br>which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><p><strong>Example:</strong></p><pre><code>Given array nums = [-1, 0, 1, 2, -1, -4],A solution set is:[  [-1, 0, 1],  [-1, -1, 2]]</code></pre><p><strong>Tags:</strong> Array, Two Pointers</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> len(nums)&lt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="comment"># for i in range(len(nums)-2):</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;len(nums)<span class="number">-2</span>:</span><br><span class="line">            l = i+<span class="number">1</span></span><br><span class="line">            r = len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r:</span><br><span class="line">                _sum = nums[i]+nums[l]+nums[r]</span><br><span class="line">                <span class="keyword">if</span> _sum==<span class="number">0</span>:</span><br><span class="line">                    res.append([nums[i], nums[l], nums[r]])</span><br><span class="line">                    <span class="keyword">while</span> l&lt;r<span class="number">-1</span> <span class="keyword">and</span> nums[l]==nums[l+<span class="number">1</span>]:</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> _sum&gt;<span class="number">0</span>:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i&lt;len(nums)<span class="number">-2</span> <span class="keyword">and</span> nums[i]==nums[i+<span class="number">1</span>]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/3sum/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers, are there elements &lt;em&gt;a&lt;/em&gt; , &lt;em&gt;b&lt;/em&gt; , &lt;em&gt;c&lt;/em&gt; in&lt;br&gt;&lt;code&gt;nums&lt;/code&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; = 0? Find all unique triplets in the array&lt;br&gt;which gives the sum of zero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solution set must not contain duplicate triplets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Two Pointers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Two Pointers" scheme="https://zronghui.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 739. Daily Temperatures</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-739-Daily-Temperatures.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-739-Daily-Temperatures.html</id>
    <published>2020-06-11T08:31:51.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/daily-temperatures/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/daily-temperatures/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a list of daily temperatures <code>T</code>, return a list such that, for each day<br>in the input, tells you how many days you would have to wait until a warmer<br>temperature. If there is no future day for which this is possible, put <code>0</code><br>instead.</p><p>For example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76,73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p><p><strong>Note:</strong> The length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>. Each<br>temperature will be an integer in the range <code>[30, 100]</code>.</p><p><strong>Tags:</strong> Hash Table, Stack</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a href="https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/">LeetCode 图解 | 739.每日温度 - 每日温度 - 力扣（LeetCode）</a></p><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, T: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(T)</span><br><span class="line">        res = [<span class="number">0</span>] * n</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">1</span>]&lt;T[i]:</span><br><span class="line">                res[stack[<span class="number">-1</span>][<span class="number">0</span>]] = i - stack[<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">                stack.pop()</span><br><span class="line">            stack.append((i, T[i]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/daily-temperatures/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/daily-temperatures/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a list of daily temperatures &lt;code&gt;T&lt;/code&gt;, return a list such that, for each day&lt;br&gt;in the input, tells you how many days you would have to wait until a warmer&lt;br&gt;temperature. If there is no future day for which this is possible, put &lt;code&gt;0&lt;/code&gt;&lt;br&gt;instead.&lt;/p&gt;
&lt;p&gt;For example, given the list of temperatures &lt;code&gt;T = [73, 74, 75, 71, 69, 72, 76,
73]&lt;/code&gt;, your output should be &lt;code&gt;[1, 1, 4, 2, 1, 1, 0, 0]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The length of &lt;code&gt;temperatures&lt;/code&gt; will be in the range &lt;code&gt;[1, 30000]&lt;/code&gt;. Each&lt;br&gt;temperature will be an integer in the range &lt;code&gt;[30, 100]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Hash Table, Stack&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/&quot;&gt;LeetCode 图解 | 739.每日温度 - 每日温度 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Stack" scheme="https://zronghui.github.io/tags/Stack/"/>
    
      <category term="Hash Table" scheme="https://zronghui.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 983. Minimum Cost For Tickets</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-9**/leetcode-983-Minimum-Cost-For-Tickets.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-9**/leetcode-983-Minimum-Cost-For-Tickets.html</id>
    <published>2020-06-10T13:35:32.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/minimum-cost-for-tickets/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>In a country popular for train travel, you have planned some train travelling<br>one year in advance.  The days of the year that you will travel is given as an<br>array <code>days</code>.  Each day is an integer from <code>1</code> to <code>365</code>.</p><p>Train tickets are sold in 3 different ways:</p><ul><li>a 1-day pass is sold for <code>costs[0]</code> dollars;</li><li>a 7-day pass is sold for <code>costs[1]</code> dollars;</li><li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li></ul><p>The passes allow that many days of consecutive travel.  For example, if we get<br>a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7,<br>and 8.</p><p>Return the minimum number of dollars you need to travel every day in the given<br>list of <code>days</code>.</p><p><strong>Example 1:</strong></p><pre><code>Input: days = [1,4,6,7,8,20], costs = [2,7,15]Output: 11Explanation:For example, here is one way to buy passes that lets you travel your travel plan:On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.In total you spent $11 and covered all the days of your travel.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]Output: 17Explanation:For example, here is one way to buy passes that lets you travel your travel plan:On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.In total you spent $17 and covered all the days of your travel.</code></pre><p><strong>Note:</strong></p><ol><li><code>1 &lt;= days.length &lt;= 365</code></li><li><code>1 &lt;= days[i] &lt;= 365</code></li><li><code>days</code> is in strictly increasing order.</li><li><code>costs.length == 3</code></li><li><code>1 &lt;= costs[i] &lt;= 1000</code></li></ol><p><strong>Tags:</strong> Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>遇到一道不算简单的 DP，好不容易吭哧吭哧写出来，结果：</p><img src="https://i.loli.net/2020/06/11/tpRq6cuehr2OJ9Q.png" alt="image-20200610213723057" style="zoom:50%;" /><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mincostTickets</span><span class="params">(self, days: List[int], costs: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp[n][4]  n: 最多n天，4: -1(不买) 1 7 30 这 4 种选择</span></span><br><span class="line">        <span class="comment"># 主要考虑：n 在不在 days 中； -1 买没买</span></span><br><span class="line">        <span class="comment"># n 不在 days 中，一定不用买，其他三种情况存 sys.maxsize</span></span><br><span class="line">        </span><br><span class="line">        n = days[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># start 和 nxt 都存放 index</span></span><br><span class="line">        start = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> days:</span><br><span class="line">            nxt = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        dp = [[sys.maxsize <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        dp[start] = [sys.maxsize, costs[<span class="number">0</span>], costs[<span class="number">1</span>], costs[<span class="number">2</span>]]</span><br><span class="line">        </span><br><span class="line">        m = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">7</span>, <span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nxt!=i:</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> days:</span><br><span class="line">                nxt = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">0</span>]</span><br><span class="line">            dp[i][<span class="number">2</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">1</span>]</span><br><span class="line">            dp[i][<span class="number">3</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">2</span>]</span><br><span class="line">            <span class="comment"># 要求：i-j &gt;= start -&gt; j &lt;= i-start</span></span><br><span class="line">            mj = i-start</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, min(<span class="number">29</span>, mj)+<span class="number">1</span>):</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i-j][<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, min(<span class="number">6</span>, mj)+<span class="number">1</span>):</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i-j][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/minimum-cost-for-tickets/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;In a country popular for train travel, you have planned some train travelling&lt;br&gt;one year in advance.  The days of the year that you will travel is given as an&lt;br&gt;array &lt;code&gt;days&lt;/code&gt;.  Each day is an integer from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;365&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Train tickets are sold in 3 different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 1-day pass is sold for &lt;code&gt;costs[0]&lt;/code&gt; dollars;&lt;/li&gt;
&lt;li&gt;a 7-day pass is sold for &lt;code&gt;costs[1]&lt;/code&gt; dollars;&lt;/li&gt;
&lt;li&gt;a 30-day pass is sold for &lt;code&gt;costs[2]&lt;/code&gt; dollars.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The passes allow that many days of consecutive travel.  For example, if we get&lt;br&gt;a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7,&lt;br&gt;and 8.&lt;/p&gt;
&lt;p&gt;Return the minimum number of dollars you need to travel every day in the given&lt;br&gt;list of &lt;code&gt;days&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation:
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total you spent $11 and covered all the days of your travel.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation:
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total you spent $17 and covered all the days of your travel.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= days.length &amp;lt;= 365&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= days[i] &amp;lt;= 365&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;days&lt;/code&gt; is in strictly increasing order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;costs.length == 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= costs[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;遇到一道不算简单的 DP，好不容易吭哧吭哧写出来，结果：&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2020/06/11/tpRq6cuehr2OJ9Q.png&quot; alt=&quot;image-20200610213723057&quot; style=&quot;zoom:50%;&quot; /&gt;

&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-9**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-9/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>qq机器人</title>
    <link href="https://zronghui.github.io/Mac/qq%E6%9C%BA%E5%99%A8%E4%BA%BA.html"/>
    <id>https://zronghui.github.io/Mac/qq%E6%9C%BA%E5%99%A8%E4%BA%BA.html</id>
    <published>2020-06-09T06:24:46.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9088046d5351f7fe3d7a6617e69894c32f80abdcbf5059c1189fe353f8743747">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d3ef55391930c1e05b3595486b916f45ddd93d21127fff6ed5ecd98e642a95bf3a05e88975056bb05558235f0e1ec87a5141695a7ceb1e704866fcead3b64474f01c82cf4ab9d0677a93142bb59fc57b033771479bd563846c258f34f28780a12f070e9cf12fd8364949201a0cf827be440976dcf958a2f6929bc2e9be4cd737b35d15867291356a7afd6b454bb81965ba7de8af6b99079f0688d0262a8d3a30e390350382ea296857ab95876142015caa6ef365e33b5db16594a975f4ed447c78c3e092bbdea87a804c160f8e908fd35efacade5d486a3a4ab19db13b26d607e220ffb31a73a57d97a60cdadcb2962003fd294b07e5ecc5354ffed006f5d82b91e7b3b53ef96b892d5b6eacf783ba7eca74a39d5637d08c79569458f0d530c65ad0a1e8a778884f8b6d225b5733cb82166d909573a068c11569cb8921a062ef772e1ebe4391f956974b547867bce937e4bf248d383f4217e41bac88a570388791277ff8dad62c2e2b731e3553f96c47568d4ab6d20e2b38c829867d7d4d916bd96b450311cdab5e0d6926c9f64f20333ab55942887e27dc7e67ad6a9dc5f60e65474684b247227e479537d96e78cdbc11833e04be725c09be6fc0073986e5ace7999f18bc1e494fdc7d30fc49e85fdc4a541537706c9332b121c86cb1cc88aa40c7f3287f39b2fc7fb2a57e7c81ae98ffbdaeb8d8aff06b25e71a114a8e40e47f86730918e7c252b555228aa0e6bcba54651415420746e8e8d7c9a3f169bba0fa78d924304730f4a7d235b39c26db46cd37756c5cd3bb1696b8c7d2f181a76ecbf2a1405d1a5e0155c25f278e76810e24150f71d94ca12ed07877b20ca411771cdaf1d9507633c8be3c1916292921ec0f772f245ca0f923894322218fddc5121d93caf326fc38202e52a7835dfceb2e39ad1ff971905e8e36034ed8a9426cb75eef8a22cf76a65aa9b75eca3cdd2652916623de276a82755e8655e22c0965bfdb4aded3bf582af96ba5cdcfc9d0562aea668f99f42c3dd4a7df23251158fb73c5f10767ee4d3a13a386aff6e4975213a757b7ffee92840ee048b607b45ea83e6a635373f18a18117b17610acbbe8484c9fe19e69107897b7507741ac16ec6a1a7287961856bea80f3a5ddb45a9779eabef2351579d805b01ce7fd938967f1c1e326573622c35b128c3d0c152a20e36fe47f6b9a8b9caa09b5aebeadcf146b5c5d7a410f79033e5bdef7d24d78e71f548f9c56aee4bc9c0f1846942d8214ab591d0b5ec4d6d55a005a14e7e876c05175c3cd7c27fc0eb38c94648eb3f844df3b0ffc67671c3e168d291380aff0947311ad24c93b65d1d36f3b08431ba6fb6680156a71a862e8fc40051d7a1a62f18e9558978e7f24d9469b9ba40f2253739411903c050297629f4bff70f01f130ec696237fcd7eff4612fb1a7b5d11d5b66b28c10ba37b83a3cb6454d9d358d9b2a418d577105eb13a06f118ac1e2f3badb90da152d6a53ac9509c9e1e19b86ae8f4b9831bcea5ffb94b1ccd9a4ed4e4cef7d9d6963333c58b56678898daafe3d54f87afb915b4ed227a8c84e01bfe8297b8f42018b832b8c64cc03b82d186230ca776ddb1c5bf67ebb03eac3a1888d8ff243f3ef8a4872c8c4de850ec8039370f0a8880c06322d2e8ff73437f6aa95c4b190735594846ada9945b10d543bb74ef510692e9985d3f5193fa5a0003c0aa9d5ef7ee26bebfdcc52c7f2ccb4642972c3ad7f51113089b70fe15740ec94c41e1881e84985956d4bd7bc85889c39d739bdfef909c16651cea343f68f15b60f3135b39c4c529028d815e9c21457f6a5d4a0bc55dd779ec3b8bf5eb0ccdbed8cbf0c64cf4943840b3577e3ab8082f369948af450aa766b780a018717699b9a28011b2e97208d327d70177978d30125394ce39c33262b5a54ccb6c75382fa3f9e68f801501c92ee443afc79f3aaae638738da2ddd3da2deefd9cd463672333ee1fd21c927eb50686e8e87c99e510df9e32d094fdc0e6126a48f2b34eee1381bc00c3d9e144c8f1273dd1aa9c00d939b64dae5f7d821bc0ebb3ec94b93331da34436763e2ee870557cc626a682a4149fc270e268ffa848af26970b744761039c20d8b5e85af185cd65fc2127d8cf33c4cb9f71eb23a5ee540da62eb9d9370f5c65e034b768918fc71691449cc04aef51b0109c83b86d17d47f1b57233eaef4639e7809824f8129967ad98eed406208a0a6728594244c3517834842add5c7bb6914abd6898ac7c20e5439fcb535f27630bec16221b6953c60d92f38dbcf77f8c13e95eda5d81e4ca692ddc66a480543ba774c5e90fde296632923c89fd87fdf7f4de222dfe6c537014d6b2498280a285415f6c80250948cef060586fd2a90852f4e0d206945dbd45d803b596e572b2480cdd07cdb2530c8bedd7030495855714f6662b78ce7d092ccaf8e5ef8aa58406949a14754f73cc7da59d0210f58e127c8cc76855baa5ca933edddfde5e645ac6f8578cb9c1a3935e886218c07294f1e499fbe1ccee0e6ad49c2ee502056988c2567ed93f48c659e413cca680c86c2d1d15cd4f36e4933f0ddbdd98ab453b0c41779374e287756518c27a40f0c553f0fc939180c6af68cdd161ab4cf171fbb13a271c8ed77cb57ed5ef246f2732007f2efa9e005f35d97a00014643e92907f6ce36c8c320fcb4137616ce7bbf26e4bba159750cb29ac86a2e14d3dd94b8b45a012c178136619d178f5c3133df70bb6493edf65ed4e7a8abd2727eaee4c80962b879a9973bac74995e753ee344850af4fd0a01547801186393f01f886a81c73259e7edca564aaa67ab23d9c44feac8ac7b93114b3ccefbf6448cfa9b9ec5c4aa3df6988f4fbd3bb70ca730ba5e2beb0a9ecd87ee051d932ff723c416e60841520d565656e9e106509910dfd40d2a8fcdc36c41f4cf63821231fa5feb980849f87ff6977f7c2d11c015b69e6cb19d4b730ebbf07f63e62245765bdc60fe25e405c58f55be0f46f67156c04d063f53689d55481281cc7793a29dbb99eb591420444e211db2a46e96a5b70dfb5598d09ff655fae5da456326f068fa9e3d11ffac06ebb5f213775a986995849eab317bdb73b03016a9dad5f6b3f45974409a15f4b3b733554de781a197045f89e6970b7857317cc47e3329fec2136cdb792d880e31343ba0aa83c0f06a6f3b0d555eedce0b93a74b12fde7dd3732785f5aba8a41b3696039f339a21cef7a05bd3bcbf577f9429d9fdf09da6e80f78d9a0e23ad425414110751ee9c04a77e335deebd40d81101ce30dee969bce12f51d291df27b829bf88e26490cf01f9f2e3048f366add12f6152862b562a6fdfb5350368426090f9d24f7e4c23997229f5bde5ae8c19144423067776bae42a2f11b72fa7b34c18886403c5bf124f964f9447538b969600611060982cb495212c0962a000f595980735523809ee5f717b554bb393676d1f3f12d5c51ce40ecf2e21380b652cb9cec76a4706a62efb420287300b5331f81e4956d3ac13c68dd41d85b3e3ce18030cfedb9dc9b268738a2234d42d378712fae2df161d62c2eef4e628297b1d4f98e17fccd216b60d04c6100d9670914668d26be92d4890cb0e9127b57f9eee0f13092d831d345625f131829b6dc8b9f9b0068155b56af64237abdeec07bef78a337f72de3509102a4e8dfe072496aa3bc1ded70bf3d9aa820719562deed438b1d1b287ad476d235d922fffb81c86b9902097472a1c5d68d4dd7be52db7b2ae7d8d47dbe2b9af52a2b852553ea82da4b5e9f3ee6736307186f1adca5792cf26069d8eb130547bb421330dad03cbecf7b98c3d43cad428b4508f8c955e7b004d47906ec2a11d439087d261c533c66b06b411de856b293e7b45719c5193624eada66fc164745ea02c6db312066e57a40a2169f5064c36fe4bf14761768dfb520fb513d5a046de7cf0610a2dc197b788e323ea393aea0ba08606392707187aa6626fb3af85e83a07904d05707f781464e6dbc924f8e9b17706445492780dcae7eadc8f7f188cea68357e7dbf46087d8055b16973b700888d98f05ec90c183feb745c6e1f509695be3c33e692d9af5e9d4048e8465cc095a6942ff1d68b81aa36f0d3b467ae67411d1605cd204257e390bd67d3d39f68448d5d32391f0cb2bf7a9cc795effb7afccb90a0e28fbb9bde000c0e470b34af8fc4e6d938790b1d9e7461ebe45a7b841bec59a9ba38b84c64c4df90494fba4d76a3f0a5e523bda612108527043386df87cccd17d0ea9e806e8fc6901738aadecdd4fc4cd82499d9d8102867ed595a3e21c1198dd7eb1463d7a6cf0b8a745da69c1386e5a514cebbb54a12b228fc71c0c8734aa35f759288500361e1c86a842e012332545e9651445e6b6cda0fcb67f0ad98ef43782d182a2efd8942b19d34a6c3f7cd8e2b52ca5f3ac98c4130df40b4e0f923bc8d22e0a76efc5a72d8cfeeffa6bc47de1f66efa655861f669cb3086da60de63f74be1d1c3d41fc361cf5d91c7c2c1abca5d3a8048996482ec0c3ab133b240fd73747b930de7060dd73fd0484eb20b9a01933b10b5d6ee3544d3cdb6721d5a8bdb8f4efbcce7f6567dbd8235171fea64c8a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>软件测试读论文作业</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E8%AE%BA%E6%96%87%E4%BD%9C%E4%B8%9A.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E8%AE%BA%E6%96%87%E4%BD%9C%E4%B8%9A.html</id>
    <published>2020-06-09T05:02:15.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="《具有堆快照的超扩展静态分析》论文阅读笔记"><a href="#《具有堆快照的超扩展静态分析》论文阅读笔记" class="headerlink" title="《具有堆快照的超扩展静态分析》论文阅读笔记"></a>《具有堆快照的超扩展静态分析》论文阅读笔记</h1><p>张荣辉 2019140740</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><img src="https://i.loli.net/2020/06/13/4pnVyEuiMJw9azG.png" alt="image-20200613131807618"></p><p>提出了一个“<strong>轻量化</strong>”分析，该分析将堆的动态快照与对程序行为的完全静态分析结合在一起。该分析具有极强的可<strong>扩展性</strong>，提供了超过3倍的<strong>加速</strong>。尽管它永远无法完全捕获所有程序行为（即，它不能与完全静态分析的近乎完美的调用相匹配），但它通常会非常接近它同时达到<strong>更高的（3.5x）精度</strong></p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p>程序分析，堆快照，可伸缩性</p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p><img src="https://i.loli.net/2020/06/13/vNSxoRLZg4maGbC.png" alt="image-20200613131858833"></p><p><img src="https://i.loli.net/2020/06/13/d3qRJ2LU4T7eIxp.png" alt="image-20200613131908147"></p><p><strong>主要优点</strong>：</p><p>完整性，即对实际行为的完美（或实际上是近乎完美的）回忆。</p><p><strong>通常存在两个主要缺点</strong>：</p><p>（i）计算量大并且存在可伸缩性问题</p><p>（ii）静态分析可能缺乏准确性，通常会产生大量误报，即预测的行为不会匹配实际执行。</p><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p><img src="https://i.loli.net/2020/06/13/cEIfzO6SQ4LFRK3.png" alt="image-20200613132008272"></p><p><strong>优点</strong>：</p><p>通过将自己限制在执行程序所显示的信息上，避免了计算量大的分析，还充分利用了学习到的运行时信息的优势，例如具体的参数和内存值（否则将很难静态推断）</p><p><strong>缺点</strong></p><p>并不详尽</p><p><strong>因此</strong>，程序分析的空间是由竞争质量标准定义的：完整性，准确性和可伸缩性。</p><p>本文提出了一个折衷方案，该方案试图在静态分析中合并有限的动态信息，以一定的完整性（即召回实际执行）的代价大幅度提高可伸缩性和精度。</p><h2 id="3-轻量化混合分析"><a href="#3-轻量化混合分析" class="headerlink" title="3.轻量化混合分析"></a>3.轻量化混合分析</h2><p>该方法包括对程序的静态分析，但仅考虑程序堆的动态视图</p><h3 id="3-1轻量级静态分析"><a href="#3-1轻量级静态分析" class="headerlink" title="3.1轻量级静态分析"></a>3.1轻量级静态分析</h3><p><img src="https://i.loli.net/2020/06/13/BHZeI13z64MURmw.png" alt="image-20200613132128040"></p><p>堆的建模是静态分析不可伸缩性的主要来源，为了避免建模，我们的轻量级静态分析是一个点到点的分析，它仅对堆负载（例如，从字段和数组读取）建模，而对存储（例如，字段更新）不建模</p><h3 id="3-2动态分析"><a href="#3-2动态分析" class="headerlink" title="3.2动态分析"></a>3.2动态分析</h3><p><img src="https://i.loli.net/2020/06/13/qMF43aYAbrRZVkc.png" alt="image-20200613132529141"></p><p>要生成我们的混合分析，需要为轻量级静态分析提供标准Java中的动态堆信息 HPROF 堆转储，是在程序执行期间堆和堆栈的快照 </p><p>继Grech等， 我们的 HPROF堆转储分析器充分利用了基于Java的运行时环境中对堆分析的标准跨平台支持，即能够生成包含堆中分配的所有对象以及这些对象之间的引用（堆）。堆快照脱机分析。堆快照还提供有关堆栈形状的见解：它们包括创建任何对象时产生的完整堆栈跟踪。Grech等总结了现代堆快照技术的这种功能，因为典型的堆快照还集成了成千上万的堆快照。</p><p>通常，堆转储反映了程序复杂动态行为的很大一部分，而不管这种行为的原因如何：堆转储记录了累积语义，而不是观察特定动作（例如，反射或动态加载操作）发生了什么。程序执行在其本机环境和复杂环境中的影响。同时，堆转储不会丢失捕获动态操作（例如，动态调用图），因为每个对象在分配动态对象时都会记录描述动态上下文的信息。</p><h3 id="3-3合并分析"><a href="#3-3合并分析" class="headerlink" title="3.3合并分析"></a>3.3合并分析</h3><p><img src="https://i.loli.net/2020/06/13/7YuI6e2KCl9rxZF.png" alt="image-20200613132551898"></p><p><strong>必须强调的是，轻量级混合分析是静态分析</strong></p><p><strong>混合分析可以利用动态分析的优势</strong>，同时避免整个程序Java的某些弱点指针分析；反之亦然，与全面的静态分析相比，轻量级分析的主要好处是可伸缩性：动态分析在获取非常精确的堆信息方面具有出色的能力，该信息仍然可以完全捕获观察到的动态行为（但可能不会捕获其他行为）。与独立的动态分析相比，预期的好处是可以覆盖可能的程序行为，从而具有更高的完整性。</p><h2 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h2><p><img src="https://i.loli.net/2020/06/13/dkFRItKhPj281G9.png" alt="image-20200613132638938"></p><p>我们在 Doop 指针和 taint 分析框架上实现 轻量混合分析。Doop 是全功能的，可处理Java语言的多个复杂语义方面，例如反射，隐式初始化，异常等。为了进行动态分析，我们使用了 heapdl 。</p><p>此外，我们对将堆快照集成到静态分析中：单例 、 缺失字段数据、反射分析</p><h2 id="5-实验评估"><a href="#5-实验评估" class="headerlink" title="5.实验评估"></a>5.实验评估</h2><p>介绍轻量级分析的实验评估结果</p><h3 id="5-1可扩展性"><a href="#5-1可扩展性" class="headerlink" title="5.1可扩展性"></a>5.1可扩展性</h3><p><img src="https://i.loli.net/2020/06/13/VwmPdLstzyn2H9i.png" alt="image-20200613132910456"></p><p>结论：所有基准测试结果表明，对于大型应用程序，权重分析至少比全静态分析快3.5倍；对于较小的应用程序，快达10倍以上。权重分析具有恒定的开销，这些开销在运行时占主导地位，例如可能无法访问的代码的预计算属性。</p><h3 id="5-2完整性和准确性"><a href="#5-2完整性和准确性" class="headerlink" title="5.2完整性和准确性"></a>5.2完整性和准确性</h3><p><img src="https://i.loli.net/2020/06/13/XJHNfY5sFel2im3.png" alt="image-20200613132934447"></p><p><strong>完整性：</strong></p><p>全静态分析是高度完整的，可以预期得到最新的静态分析。</p><p>轻量级分析在召回率方面也很不错</p><p><strong>准确性</strong>：</p><p>与全静态分析相比，轻量级分析的精度指标明显更高（方法提高2.2倍，边缘提高3.5倍）</p><h2 id="6-相关工作"><a href="#6-相关工作" class="headerlink" title="6.相关工作"></a>6.相关工作</h2><p><img src="https://i.loli.net/2020/06/13/SncVr6tHaFCOJ3d.png" alt="image-20200613132954761"></p><p><img src="https://i.loli.net/2020/06/13/462YIEO79k3QZeM.png" alt="image-20200613133006841"></p><p>静态和动态分析的组合空间很大。我们对相关工作的讨论只是一个示例。类似的一些工作：</p><p>使用静态分析来优化/减少运行时检查；堆快照；静态-动态分析组合；使用混合分析来发现错误；动态语言功能分析；捕获有关反射的运行时信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="软件测试" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 680. Valid Palindrome II</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-680-Valid-Palindrome-II.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-680-Valid-Palindrome-II.html</id>
    <published>2020-06-09T04:59:14.000Z</published>
    <updated>2020-06-09T12:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-palindrome-ii/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/valid-palindrome-ii/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a non-empty string <code>s</code>, you may delete <strong>at most</strong> one character. Judge<br>whether you can make it a palindrome.</p><p><strong>Example 1:</strong>  </p><pre><code>Input: &quot;aba&quot;Output: True</code></pre><p><strong>Example 2:</strong>  </p><pre><code>Input: &quot;abca&quot;Output: TrueExplanation: You could delete the character &apos;c&apos;.</code></pre><p><strong>Note:</strong>  </p><ol><li>The string will only contain lowercase characters a-z. The maximum length of the string is 50000.</li></ol><p><strong>Tags:</strong> String</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">if</span> s[l]!=s[r]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validPalindrome</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">if</span> s[l]!=s[r]:</span><br><span class="line">                <span class="keyword">return</span> self.isPalindrome(s[l:r]) <span class="keyword">or</span> self.isPalindrome(s[l+<span class="number">1</span>:r+<span class="number">1</span>])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-palindrome-ii/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/valid-palindrome-ii/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a non-empty string &lt;code&gt;s&lt;/code&gt;, you may delete &lt;strong&gt;at most&lt;/strong&gt; one character. Judge&lt;br&gt;whether you can make it a palindrome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;aba&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;abca&amp;quot;
Output: True
Explanation: You could delete the character &amp;apos;c&amp;apos;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The string will only contain lowercase characters a-z. The maximum length of the string is 50000.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 572. Subtree of Another Tree</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-572-Subtree-of-Another-Tree.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-572-Subtree-of-Another-Tree.html</id>
    <published>2020-06-08T12:23:46.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/subtree-of-another-tree/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/subtree-of-another-tree/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two non-empty binary trees <strong>s</strong> and <strong>t</strong> , check whether tree <strong>t</strong><br>has exactly the same structure and node values with a subtree of <strong>s</strong>. A<br>subtree of <strong>s</strong> is a tree consists of a node in <strong>s</strong> and all of this node’s<br>descendants. The tree <strong>s</strong> could also be considered as a subtree of itself.</p><p><strong>Example 1:</strong><br>Given tree s:</p><pre><code>    3   / \  4   5 / \1   2</code></pre><p>Given tree t:</p><pre><code>  4  / \1   2</code></pre><p>Return <strong>true</strong> , because t has the same structure and node values with a<br>subtree of s.</p><p><strong>Example 2:</strong><br>Given tree s:</p><pre><code>    3   / \  4   5 / \1   2   /  0</code></pre><p>Given tree t:</p><pre><code>  4 / \1   2</code></pre><p>Return <strong>false</strong>.</p><p><strong>Tags:</strong> Tree</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSubtree(s.left, t) <span class="keyword">or</span> self.isSubtree(s.right, t) <span class="keyword">or</span> self.isSameTree(s, t)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> t <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> any([s <span class="keyword">is</span> <span class="literal">None</span>, t <span class="keyword">is</span> <span class="literal">None</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> s.val==t.val <span class="keyword">and</span> self.isSameTree(s.left, t.left) <span class="keyword">and</span> self.isSameTree(s.right, t.right)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subtree-of-another-tree/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/subtree-of-another-tree/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two non-empty binary trees &lt;strong&gt;s&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt; , check whether tree &lt;strong&gt;t&lt;/strong&gt;&lt;br&gt;has exactly the same structure and node values with a subtree of &lt;strong&gt;s&lt;/strong&gt;. A&lt;br&gt;subtree of &lt;strong&gt;s&lt;/strong&gt; is a tree consists of a node in &lt;strong&gt;s&lt;/strong&gt; and all of this node’s&lt;br&gt;descendants. The tree &lt;strong&gt;s&lt;/strong&gt; could also be considered as a subtree of itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;Given tree s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    3
   / \
  4   5
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Given tree t:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  4 
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;strong&gt;true&lt;/strong&gt; , because t has the same structure and node values with a&lt;br&gt;subtree of s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;Given tree s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    3
   / \
  4   5
 / \
1   2
   /
  0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Given tree t:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  4
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Tree&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Tree" scheme="https://zronghui.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-192</title>
    <link href="https://zronghui.github.io/weekly-contest-192.html"/>
    <id>https://zronghui.github.io/weekly-contest-192.html</id>
    <published>2020-06-07T03:38:18.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>我好菜</p><p><img src="https://i.loli.net/2020/06/07/tPdg3qjHvmWRhJz.png" alt="image-20200607113911523"></p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/shuffle-the-array/">重新排列数组</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/the-k-strongest-values-in-an-array/">数组中的 k 个最强值</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/design-browser-history/">设计浏览器历史记录</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/paint-house-iii/">给房子涂色 III</a><strong>6</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self, nums: List[int], n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            ans.append(nums[i])</span><br><span class="line">            ans.append(nums[n+i])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStrongest</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        arr.sort()</span><br><span class="line">        n = len(arr)</span><br><span class="line">        m = arr[int((n<span class="number">-1</span>)/<span class="number">2</span>)]</span><br><span class="line">        print(m)</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @functools.lru_cache(maxsize=None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sortkey</span><span class="params">(a, b)</span>:</span></span><br><span class="line">            x = abs(a-m)-abs(b-m)</span><br><span class="line">            <span class="keyword">if</span> x==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> a-b</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="comment"># 选择排序</span></span><br><span class="line">        <span class="comment"># for i in range(k):</span></span><br><span class="line">        <span class="comment">#     mi = i</span></span><br><span class="line">        <span class="comment">#     for j in range(i+1, n):</span></span><br><span class="line">        <span class="comment">#         if sortkey(arr[j], arr[mi])&gt;0:</span></span><br><span class="line">        <span class="comment">#             mi = j</span></span><br><span class="line">        <span class="comment">#     arr[mi], arr[i] = arr[i], arr[mi]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 双指针</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n<span class="number">-1</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="comment"># while left&lt;=right:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> sortkey(arr[left], arr[right])&gt;=<span class="number">0</span>:</span><br><span class="line">                ans.append(arr[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(arr[right])</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserHistory</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, homepage: str)</span>:</span></span><br><span class="line">        self.his = [homepage]</span><br><span class="line">        self.cur = <span class="number">1</span> <span class="comment"># 当前位置到开头 URL 的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(self, url: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.his = self.his[:self.cur]</span><br><span class="line">        self.his.append(url)</span><br><span class="line">        self.cur = self.cur+<span class="number">1</span></span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back</span><span class="params">(self, steps: int)</span> -&gt; str:</span></span><br><span class="line">        self.cur = max(<span class="number">1</span>, self.cur-steps)</span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line">        <span class="keyword">return</span> self.his[self.cur<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, steps: int)</span> -&gt; str:</span></span><br><span class="line">        self.cur = min(len(self.his), self.cur+steps)</span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line">        <span class="keyword">return</span> self.his[self.cur<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your BrowserHistory object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = BrowserHistory(homepage)</span></span><br><span class="line"><span class="comment"># obj.visit(url)</span></span><br><span class="line"><span class="comment"># param_2 = obj.back(steps)</span></span><br><span class="line"><span class="comment"># param_3 = obj.forward(steps)</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;我好菜&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/07/tPdg3qjHvmWRhJz.png&quot; alt=&quot;image-20200607113911523&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-27</title>
    <link href="https://zronghui.github.io/biweekly-contest-27.html"/>
    <id>https://zronghui.github.io/biweekly-contest-27.html</id>
    <published>2020-06-06T14:02:30.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/">通过翻转子数组使两个数组相等</a><strong>3</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/">检查一个字符串是否包含所有长度为 K 的二进制子串</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/course-schedule-iv/">课程安排 IV</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/cherry-pickup-ii/">摘樱桃 II</a><strong>6</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canBeEqual</span><span class="params">(self, l1: List[int], l2: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getcount</span><span class="params">(l)</span>:</span></span><br><span class="line">            m = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> m:</span><br><span class="line">                    m[i] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    m[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        m1 = getcount(l1)</span><br><span class="line">        m2 = getcount(l2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m1:</span><br><span class="line">            <span class="keyword">if</span> m2.get(i)!=m1.get(i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasAllCodes</span><span class="params">(self, s: str, k: int)</span> -&gt; bool:</span></span><br><span class="line">        ss = set()</span><br><span class="line">        <span class="keyword">if</span> len(s)&lt;=k:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k, len(s)+<span class="number">1</span>):</span><br><span class="line">            ss.add(s[i-k:i])</span><br><span class="line">        print(ss, len(ss), <span class="number">2</span>**k)</span><br><span class="line">        <span class="keyword">return</span> len(ss)==<span class="number">2</span>**k</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="法一：dfs-functools-lru-cache"><a href="#法一：dfs-functools-lru-cache" class="headerlink" title="法一：dfs  + functools.lru_cache"></a>法一：dfs  + functools.lru_cache</h2><p>collections.defaultdict</p><p>@functools.lru_cache</p><p>执行用时 :692 ms, 在所有<em>Python</em>3 提交中击败了53.77%的用户</p><p>内存消耗 :31.8 MB, 在所有<em>Python</em>3 提交中击败了100.00%的用户</p><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/solution/dfs-ji-yi-hua-hua-fu-xiu-wei-shen-qi-by-fuxuemingz/">DFS + 记忆化，化腐朽为神奇 - 课程安排 IV - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        self.graph = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres:</span><br><span class="line">            self.graph[a].append(b)</span><br><span class="line">        <span class="keyword">return</span> [self.dfs(start, end) <span class="keyword">for</span> start, end <span class="keyword">in</span> qs]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 默认 maxsize 128 ，即存储最近 128 次调用</span></span><br><span class="line"><span class="meta">    @functools.lru_cache(maxsize=None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start==end:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> any(self.dfs(nxt, end) <span class="keyword">for</span> nxt <span class="keyword">in</span> self.graph[start])</span><br></pre></td></tr></table></figure><h2 id="法二：Floyd"><a href="#法二：Floyd" class="headerlink" title="法二：Floyd"></a>法二：Floyd</h2><p>执行用时 :956 ms, 在所有<em>Python</em>3 提交中击败了48.57%的用户</p><p>内存消耗 :15.5 MB, 在所有<em>Python</em>3 提交中击败了100.00%的用户</p><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/solution/pythonbu-fu-za-de-da-biao-fa-by-bestfitting/">Python双百，不要DFS，不要BFS，只要最简单的打表法 - 课程安排 IV - 力扣（LeetCode）</a></p><p><a href="https://zh.wikipedia.org/zh-hans/Floyd-Warshall%E7%AE%97%E6%B3%95">Floyd-Warshall算法 - 维基百科，自由的百科全书</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres:</span><br><span class="line">            dp[a][b] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> [dp[a][b] <span class="keyword">for</span> a, b <span class="keyword">in</span> qs]</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 25. Reverse Nodes in k-Group</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-25-Reverse-Nodes-in-k-Group.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-25-Reverse-Nodes-in-k-Group.html</id>
    <published>2020-06-06T13:39:13.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/reverse-nodes-in-k-group/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and<br>return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the<br>linked list. If the number of nodes is not a multiple of <em>k</em> then left-out<br>nodes in the end should remain as it is.</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><p><strong>Tags:</strong> Linked List</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>虽说效率有点低，但是图很直观</p><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/">图解k个一组翻转链表 - K 个一组翻转链表 - 力扣（LeetCode）</a></p><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        pre = dummy</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> cur.next:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">                cur = cur.next</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            start = pre.next</span><br><span class="line">            next = cur.next</span><br><span class="line">            cur.next = <span class="literal">None</span></span><br><span class="line">            pre.next = self.reverse(start)</span><br><span class="line">            start.next = next</span><br><span class="line">            pre = start</span><br><span class="line">            cur = start</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            next = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = next</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/reverse-nodes-in-k-group/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and&lt;br&gt;return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt; is a positive integer and is less than or equal to the length of the&lt;br&gt;linked list. If the number of nodes is not a multiple of &lt;em&gt;k&lt;/em&gt; then left-out&lt;br&gt;nodes in the end should remain as it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given this linked list: &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;k&lt;/em&gt; = 2, you should return: &lt;code&gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;k&lt;/em&gt; = 3, you should return: &lt;code&gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only constant extra memory is allowed.&lt;/li&gt;
&lt;li&gt;You may not alter the values in the list’s nodes, only nodes itself may be changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Linked List&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;虽说效率有点低，但是图很直观&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/&quot;&gt;图解k个一组翻转链表 - K 个一组翻转链表 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Linked List" scheme="https://zronghui.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-191</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-191.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-191.html</id>
    <published>2020-06-05T13:15:03.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/maximum-product-of-two-elements-in-an-array/">数组中两元素的最大乘积</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/">切割后面积最大的<em>蛋糕</em></a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/">重新规划路线</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/">两个盒子中球的颜色数相同的概率</a><strong>7</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        m1 = m2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i&gt;m1:</span><br><span class="line">                m1, m2 = i, m1</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> i&gt;m2:</span><br><span class="line">                m2 = i</span><br><span class="line">        print(m1, m2)</span><br><span class="line">        <span class="keyword">return</span> (m1<span class="number">-1</span>)*(m2<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, h: int, w: int, hCuts: List[int], vCuts: List[int])</span> -&gt; int:</span></span><br><span class="line">        hCuts.append(<span class="number">0</span>)</span><br><span class="line">        hCuts.append(h)</span><br><span class="line">        vCuts.append(<span class="number">0</span>)</span><br><span class="line">        vCuts.append(w)</span><br><span class="line">        hCuts.sort()</span><br><span class="line">        vCuts.sort()</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxInterval</span><span class="params">(cuts)</span>:</span></span><br><span class="line">            m = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(cuts)):</span><br><span class="line">                m = max(m, cuts[i]-cuts[i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        <span class="keyword">return</span> (maxInterval(hCuts)*maxInterval(vCuts))%(<span class="number">1000000007</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minReorder</span><span class="params">(self, n: int, connections: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        To, In = [set() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)], [set() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        To[x] -&gt; y</span></span><br><span class="line"><span class="string">        In[y] -&gt; x</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> connections:</span><br><span class="line">            To[x].add(y)</span><br><span class="line">            In[y].add(x)</span><br><span class="line">        </span><br><span class="line">        queue = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="comment"># 不为空，添加所有与 cur 相连的节点，若反向，添加到 ans 里</span></span><br><span class="line">            </span><br><span class="line">            cur = queue.pop()</span><br><span class="line">            <span class="comment"># 如 0 -&gt; 1 ，所以 To 里面都是需要纠正的</span></span><br><span class="line">            <span class="comment"># To 添加到 queue 里面后，discard In 里面对应的数据</span></span><br><span class="line">            <span class="comment"># In 添加到 queue 里面后，discard To 里面对应的数据</span></span><br><span class="line">            ans += len(To[cur])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> To[cur]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                In[i].discard(cur)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> In[cur]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                To[i].discard(cur)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-06</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-06.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-06.html</id>
    <published>2020-06-02T03:40:59.000Z</published>
    <updated>2020-06-14T09:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="bd3a7235dfab1d6019f7b0429e8004655550bf42d11694fb0a08862c1189a0c8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>tools to use</title>
    <link href="https://zronghui.github.io/todo/tools-to-use.html"/>
    <id>https://zronghui.github.io/todo/tools-to-use.html</id>
    <published>2020-06-01T12:37:37.000Z</published>
    <updated>2020-06-14T09:27:23.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="501e4885af35ae51213c57cd2d9b79ae09a87e5f9c80c3c7693a4c1724d3f1bb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://zronghui.github.io/redis/redis.html"/>
    <id>https://zronghui.github.io/redis/redis.html</id>
    <published>2020-05-29T07:56:39.000Z</published>
    <updated>2020-06-14T09:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>cv 学习法。。。</p><h3 id="redis-七种数据类型"><a href="#redis-七种数据类型" class="headerlink" title="redis 七种数据类型"></a>redis 七种数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># string        key-&gt;value,像是 map</span><br><span class="line">set k v</span><br><span class="line">mset k1 v1 k2 v2</span><br><span class="line">get k</span><br><span class="line">mget k1 k2</span><br><span class="line"></span><br><span class="line"># hash        key-&gt; &#123;k1: v1, k2: v2&#125;  像是 map 的 map</span><br><span class="line">hmset key k1 v1 k2 v2</span><br><span class="line">hgetall key</span><br><span class="line"></span><br><span class="line"># list        name -&gt; [i1, i2...]    value 是个 list</span><br><span class="line">lpush name i1</span><br><span class="line">lpush name i2</span><br><span class="line">lrange name 0 10</span><br><span class="line"></span><br><span class="line"># set        name -&gt; &#123;i1, i2, ...&#125;</span><br><span class="line">哈希表实现的，增删查 复杂度都是 o1</span><br><span class="line">sadd name i1</span><br><span class="line">sadd name i2</span><br><span class="line">smembers name</span><br><span class="line"></span><br><span class="line"># zset       name -&gt; &#123;i1-&gt;score1, i2-&gt;score2, ...&#125;</span><br><span class="line">#  有序 set 为什么是 z 而不是 s(sort) sset</span><br><span class="line">每个元素关联一个分数</span><br><span class="line">zadd name score1 i1</span><br><span class="line">zincreby name i1 自动加一</span><br><span class="line">zrangebyscore name 0 1000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Bitmaps</span><br><span class="line">通过类似 map 的结果存放 0 1</span><br><span class="line">可以用来统计状态，如日活？ 是否浏览过某个东西</span><br><span class="line"></span><br><span class="line"># HyperLogLogs </span><br><span class="line">接受许多个元素作为输入，以很少空间给出元素的基数估算值</span><br><span class="line">基数：len(set(l))</span><br><span class="line">估算值：可能有一点误差</span><br><span class="line">PFADD unique::ip::counter &#39;192.168.0.1&#39;</span><br><span class="line">PFADD unique::ip::counter &#39;127.0.0.1&#39;</span><br><span class="line">PFCOUNT unique::ip::counter</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="Redis-键-key-命令"><a href="#Redis-键-key-命令" class="headerlink" title="Redis 键(key) 命令"></a>Redis 键(key) 命令</h3><p>如 del key, del 则是一个 key 命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-del.html">DEL</a></td><td>用于删除 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-dump.html">DUMP</a></td><td>序列化给定 key ，并返回被序列化的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-exists.html">EXISTS</a></td><td>检查给定 key 是否存在</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-expire.html">EXPIRE</a></td><td>为给定 key 设置过期时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-expireat.html">EXPIREAT</a></td><td>用于为 key 设置过期时间点 接受的时间参数是 UNIX 时间戳</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pexpire.html">PEXPIRE</a></td><td>设置 key 的过期时间，以毫秒计</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pexpireat.html">PEXPIREAT</a></td><td>设置 key 过期时间的时间戳(unix timestamp)，以毫秒计</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-keys.html">KEYS</a></td><td>查找所有符合给定模式的 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-move.html">MOVE</a></td><td>将当前<em>数据库</em>的 key 移动到给定的<em>数据库</em>中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-persist.html">PERSIST</a></td><td>移除 key 的过期时间，key 将<strong>持久保持</strong></td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pttl.html">PTTL</a></td><td>以毫秒为单位返回 key 的剩余的过期时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-ttl.html">TTL</a></td><td>以秒为单位，返回给定 key 的剩余生存时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-randomkey.html">RANDOMKEY</a></td><td>从当前<em>数据库</em>中随机返回一个 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-rename.html">RENAME</a></td><td>修改 key 的名称</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-renamenx.html">RENAMENX</a></td><td>仅当 newkey 不存在时，将 key 改名为 newkey</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-type.html">TYPE</a></td><td>返回 key 所储存的值的类型</td></tr></tbody></table><h3 id="Redis-字符串-String-命令"><a href="#Redis-字符串-String-命令" class="headerlink" title="Redis 字符串(String) 命令"></a>Redis 字符串(String) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-set.html">SET</a></td><td>设置指定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-get.html">GET</a></td><td>获取指定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getrange.html">GETRANGE</a></td><td>返回 key 中字符串值的子字符</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getset.html">GETSET</a></td><td>将给定 key 的值设为 value ，并返回 key 的旧值 ( old value )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getbit.html">GETBIT</a></td><td>对 key 所储存的字符串值，获取指定偏移量上的位 ( bit )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-mget.html">MGET</a></td><td>获取所有(一个或多个)给定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setbit.html">SETBIT</a></td><td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setex.html">SETEX</a></td><td>设置 key 的值为 value 同时将过期时间设为 seconds</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setnx.html">SETNX</a></td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setrange.html">SETRANGE</a></td><td>从偏移量 offset 开始用 value 覆写给定 key 所储存的字符串值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-strlen.html">STRLEN</a></td><td>返回 key 所储存的字符串值的长度</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-mset.html">MSET</a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-msetnx.html">MSETNX</a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-psetex.html">PSETEX</a></td><td>以毫秒为单位设置 key 的生存时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incr.html">INCR</a></td><td>将 key 中储存的数字值增一</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incrby.html">INCRBY</a></td><td>将 key 所储存的值加上给定的增量值 ( increment )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incrbyfloat.html">INCRBYFLOAT</a></td><td>将 key 所储存的值加上给定的浮点增量值 ( increment )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-decr.html">DECR</a></td><td>将 key 中储存的数字值减一</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-decrby.html">DECRBY</a></td><td>将 key 所储存的值减去给定的减量值 ( decrement )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-append.html">APPEND</a></td><td>将 value 追加到 key 原来的值的末尾</td></tr></tbody></table><h3 id="Redis-哈希-Hash-命令"><a href="#Redis-哈希-Hash-命令" class="headerlink" title="Redis 哈希(Hash) 命令"></a>Redis 哈希(Hash) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hdel.html">HDEL</a></td><td>删除一个或多个哈希表字段</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hexists.html">HEXISTS</a></td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hget.html">HGET</a></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hgetall.html">HGETALL</a></td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hincrby.html">HINCRBY</a></td><td>为哈希表 key 中的指定字段的整数值加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hincrbyfloat.html">HINCRBYFLOAT</a></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hkeys.html">HKEYS</a></td><td>获取所有哈希表中的字段</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hlen.html">HLEN</a></td><td>获取哈希表中字段的数量</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hmget.html">HMGET</a></td><td>获取所有给定字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hmset.html">HMSET</a></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hset.html">HSET</a></td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hsetnx.html">HSETNX</a></td><td>只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hvals.html">HVALS</a></td><td>获取哈希表中所有值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hscan.html">HSCAN</a></td><td>迭代哈希表中的键值对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hstrlen.html">HSTRLEN</a></td><td>返回哈希表 key 中， 与给定域 field 相关联的值的字符串长度</td></tr></tbody></table><h3 id="Redis-列表-List-命令"><a href="#Redis-列表-List-命令" class="headerlink" title="Redis 列表(List) 命令"></a>Redis 列表(List) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-blpop.html">BLPOP</a></td><td>移出并获取列表的第一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-brpop.html">BRPOP</a></td><td>移出并获取列表的最后一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-brpoplpush.html">BRPOPLPUSH</a></td><td>从列表中弹出一个值，并将该值插入到另外一个列表中并返回它</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lindex.html">LINDEX</a></td><td>通过索引获取列表中的元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-linsert.html">LINSERT</a></td><td>在列表的元素前或者后插入元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-llen.html">LLEN</a></td><td>获取列表长度</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpop.html">LPOP</a></td><td>移出并获取列表的第一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpush.html">LPUSH</a></td><td>将一个或多个值插入到列表头部</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpushx.html">LPUSHX</a></td><td>将一个值插入到已存在的列表头部</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lrange.html">LRANGE</a></td><td>获取列表指定范围内的元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lrem.html">LREM</a></td><td>移除列表元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lset.html">LSET</a></td><td>通过索引设置列表元素的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-ltrim.html">LTRIM</a></td><td>对一个列表进行修剪(trim)</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpop.html">RPOP</a></td><td>移除并获取列表最后一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpoplpush.html">RPOPLPUSH</a></td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpush.html">RPUSH</a></td><td>在列表中添加一个或多个值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpushx.html">RPUSHX</a></td><td>为已存在的列表添加值</td></tr></tbody></table><h3 id="Redis-集合-Set-命令"><a href="#Redis-集合-Set-命令" class="headerlink" title="Redis 集合(Set) 命令"></a>Redis 集合(Set) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sadd.html">SADD</a></td><td>向集合添加一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-scard.html">SCARD</a></td><td>获取集合的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sdiff.html">SDIFF</a></td><td>返回给定所有集合的差集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sdiffstore.html">SDIFFSTORE</a></td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sinter.html">SINTER</a></td><td>返回给定所有集合的交集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sinterstore.html">SINTERSTORE</a></td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sismember.html">SISMEMBER</a></td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-smembers.html">SMEMBERS</a></td><td>返回集合中的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-smove.html">SMOVE</a></td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-spop.html">SPOP</a></td><td>移除并返回集合中的一个随机元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-srandmember.html">SRANDMEMBER</a></td><td>返回集合中一个或多个随机数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-srem.html">SREM</a></td><td>移除集合中一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sunion.html">SUNION</a></td><td>返回所有给定集合的并集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sunionstore.html">SUNIONSTORE</a></td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sscan.html">SSCAN</a></td><td>迭代集合中的元素</td></tr></tbody></table><h3 id="Redis-有序集合-sorted-set-命令"><a href="#Redis-有序集合-sorted-set-命令" class="headerlink" title="Redis 有序集合(sorted set) 命令"></a>Redis 有序集合(sorted set) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zadd.html">ZADD</a></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zcard.html">ZCARD</a></td><td>获取有序集合的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zcount.html">ZCOUNT</a></td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zincrby.html">ZINCRBY</a></td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zinterstore.html">ZINTERSTORE</a></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zlexcount.html">ZLEXCOUNT</a></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrange.html">ZRANGE</a></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrangebylex.html">ZRANGEBYLEX</a></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrangebyscore.html">ZRANGEBYSCORE</a></td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrank.html">ZRANK</a></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrem.html">ZREM</a></td><td>移除有序集合中的一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX</a></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK</a></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE</a></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrange.html">ZREVRANGE</a></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrangebyscore.html">ZREVRANGEBYSCORE</a></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrank.html">ZREVRANK</a></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zscore.html">ZSCORE</a></td><td>返回有序集中，成员的分数值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zunionstore.html">ZUNIONSTORE</a></td><td>计算一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zscan.html">ZSCAN</a></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h3 id="Redis-HyperLogLog-命令"><a href="#Redis-HyperLogLog-命令" class="headerlink" title="Redis HyperLogLog 命令"></a>Redis HyperLogLog 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfadd.html">PFADD</a></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfcount.html">PFCOUNT</a></td><td>返回给定 HyperLogLog 的基数估算值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfmerge.html">PFMERGE</a></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><h3 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h3><p><a href="https://www.twle.cn/l/yufei/redis/redis-basic-pub-sub.html">Redis 发布订阅 - Redis 基础教程 - 简单教程，简单编程</a></p><h3 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h3><h3 id="Redis-Script-脚本-命令"><a href="#Redis-Script-脚本-命令" class="headerlink" title="Redis Script( 脚本 ) 命令"></a>Redis Script( 脚本 ) 命令</h3><h3 id="Redis-连接命令"><a href="#Redis-连接命令" class="headerlink" title="Redis 连接命令"></a>Redis 连接命令</h3><h3 id="Redis-服务器"><a href="#Redis-服务器" class="headerlink" title="Redis 服务器"></a>Redis 服务器</h3><h3 id="Java-使用-Redis"><a href="#Java-使用-Redis" class="headerlink" title="Java 使用 Redis"></a>Java 使用 Redis</h3><h3 id="PHP-和-Redis"><a href="#PHP-和-Redis" class="headerlink" title="PHP 和 Redis"></a>PHP 和 Redis</h3><h3 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h3><h3 id="Redis-服务安全"><a href="#Redis-服务安全" class="headerlink" title="Redis 服务安全"></a>Redis 服务安全</h3><h3 id="Redis-性能测试"><a href="#Redis-性能测试" class="headerlink" title="Redis 性能测试"></a>Redis 性能测试</h3><h3 id="Redis-客户端连接"><a href="#Redis-客户端连接" class="headerlink" title="Redis 客户端连接"></a>Redis 客户端连接</h3><h3 id="Redis-管道技术"><a href="#Redis-管道技术" class="headerlink" title="Redis 管道技术"></a>Redis 管道技术</h3><h3 id="Redis-分区"><a href="#Redis-分区" class="headerlink" title="Redis 分区"></a>Redis 分区</h3><h3 id="redis安全学习小记"><a href="#redis安全学习小记" class="headerlink" title="redis安全学习小记"></a>redis安全学习小记</h3><p><a href="https://mp.weixin.qq.com/s/W9joCtUQfNA62ZWXwqMmsw">redis安全学习小记</a></p><p><strong>REDIS连接命令</strong></p><p>redis-cli -h host -p port</p><p><strong>获取配置</strong></p><p>config get *</p><p><strong>编辑配置</strong></p><p>修改 redis.conf 文件或使用 config set 命令来修改配置</p><p><strong>数据类型</strong></p><p>五种：string list set zset hash</p><p><strong>服务器配置</strong></p><p>用 sed 修改配置（值得学习的装逼技术）：</p><p>sed -i ‘s/daemonize no/daemonize yes/g’ /etc/redis-5.0.8/redis.conf</p><p><strong><em>redis</em>设置密码的两种方法</strong><br><em>redis</em>-<em>cli<em>连上去<br><code>config set requirepass 123456</code><br>或者修改</em>redis</em>.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;# requirepass foobared&#x2F;requirepass 123456&#x2F;g&#39; &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>第二种方法设置完之后需要重启<em>redis</em>。</p><p>然后再用<em>redis</em>-<em>cli*去连的时候需要先执行 AUTH 命令才可以执行其他命令。<br><code>AUTH 123456</code><br>*redis</em>-<em>cli</em> -a 的参数本质是就是 AUTH 命令</p><p><strong>数据库备份</strong><br>Redis SAVE 命令用于创建当前数据库的备份。常见利用其来写文件达到 getshell 的目的。</p><p>redis-cli -h 127.0.0.1 flushall #清空所有key<br>redis-cli -h 127.0.0.1 config set dir /var/www #设置数据库备份保存的目录<br>redis-cli -h 127.0.0.1 config set dbfilename shell.php #设置数据库备份保存的文件名<br>redis-cli -h 127.0.0.1 set webshell “<?php phpinfo();?>“ #将想写入的内容写进key值<br>redis-cli -h 127.0.0.1 save # 备份</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Mac："><a href="#Mac：" class="headerlink" title="Mac："></a>Mac：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> To have launchd start redis now and restart at login:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   brew services start redis</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span></span><br><span class="line">brew update;brew services start redis</span><br><span class="line"></span><br><span class="line">cotEdit /usr/local/etc/redis.conf</span><br><span class="line">注释 bind 127.0.0.1</span><br><span class="line">取消注释 requirepass foobare， 并配置密码</span><br><span class="line"></span><br><span class="line">brew services list                </span><br><span class="line"><span class="meta">#</span><span class="bash"> Name          Status  User         Plist</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> elasticsearch stopped</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis         started zhangronghui /Users/zhangronghui/Library/LaunchAgents/homebrew.mxcl.redis.plist</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unbound       stopped</span></span><br><span class="line"></span><br><span class="line">brew services restart redis</span><br><span class="line">pip install iredis</span><br><span class="line">redis-cli/iredis -a redispassword --raw</span><br></pre></td></tr></table></figure><h3 id="Linux-上"><a href="#Linux-上" class="headerlink" title="Linux 上"></a>Linux 上</h3><p><a href="https://juejin.im/post/5ecc754bf265da770f51f373">centos安装redis - 掘金</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span></span><br><span class="line">rsync -azvhP ~/Downloads/Compressed/redis-5.0.7.tar.gz  root@47.93.53.47:/tmp</span><br><span class="line">cd /tmp</span><br><span class="line">tar xf /tmp/redis-5.0.7.tar.gz</span><br><span class="line">cd redis-5.0.7</span><br><span class="line">make</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/redis/etc</span><br><span class="line">cp redis.conf /usr/local/redis/etc</span><br><span class="line">vim /usr/local/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line">1）配置redis为后台启动：daemonize no  修改为 daemonize yes</span><br><span class="line">2）开启外网访问：bind 127.0.01  注释掉</span><br><span class="line">3）配置密码：requirepass 设置密码</span><br><span class="line"></span><br><span class="line">pip install iredis</span><br><span class="line">iredis --raw</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export PATH=/usr/local/redis/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line">iredis --raw</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/03/12/CXDx73TjfPUGYwL.png" alt="CXDx73TjfPUGYwL" style="zoom:33%;" /><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/laixintao/iredis">laixintao/iredis: Interactive Redis: A Terminal Client for Redis with AutoCompletion and Syntax Highlighting.</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install iredis</span><br></pre></td></tr></table></figure><p>启动 redis-cli 或者更好的替代品 iredis ( pip install iredis )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iredis -a redispassword --raw # --raw 为了可以查看中文</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mylxsw/redis-tui">mylxsw/redis-tui: A Redis Text-based UI client in CLI</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://zronghui.github.io/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>待总结</title>
    <link href="https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html"/>
    <id>https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html</id>
    <published>2020-05-25T12:26:42.000Z</published>
    <updated>2020-06-03T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://mp.weixin.qq.com/s/MA1CLXdknLvnPV_s3ZQUSg">通俗易懂 限流算法原理剖析</a></p><p>3 种限流算法</p><p><a href="https://www.cnblogs.com/keyyang/p/4128424.html">Thread.sleep(0)的意义&amp; 多线程详解 - 走过路过ボ不要错过 - 博客园</a></p><p>为了重新竞争 CPU ，防止系统假死</p><p><a href="https://www.tracholar.top/2018/07/19/how-to-simulate-the-environment-cron-executes-a-script-with/">如何模拟环境cron执行脚本？ | 智子</a></p><p>感觉就是把 env 保存下来，再删除当前 shell 的 env</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>books to read</title>
    <link href="https://zronghui.github.io/todo/books-to-read.html"/>
    <id>https://zronghui.github.io/todo/books-to-read.html</id>
    <published>2020-05-23T09:29:44.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>TXT、EPUB、UMD</p><h2 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h2><h2 id="放松"><a href="#放松" class="headerlink" title="放松"></a>放松</h2><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27029890/">外婆的道歉信 (豆瓣)</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/30140436/">清单人生 (豆瓣)</a></li></ul><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> 放学后  东野圭吾</li><li><input disabled="" type="checkbox"> 恶意   东野圭吾</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>to read</title>
    <link href="https://zronghui.github.io/to-read.html"/>
    <id>https://zronghui.github.io/to-read.html</id>
    <published>2020-05-23T09:29:02.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
