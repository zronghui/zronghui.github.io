<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-12-02T10:40:36.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《MySQL8 cookbook》 阅读笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMySQL8-cookbook%E3%80%8B-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMySQL8-cookbook%E3%80%8B-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-12-01T14:15:50.000Z</published>
    <updated>2020-12-02T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/12/02/tRZSAP1h7oBfli6.jpg" alt="MySQL 8 Cookbook（中文版）"></p><p><strong>豆瓣评分</strong></p><p>7.4</p><p><strong>内容简介</strong><br>MySQL 8.0 的发布是 MySQL 发展历史上的一个重要里程碑，也是开源数据库领域内的一个大事件。针对这个版本，MySQL 官方团队做了太多的工作，从查询优化到集群架构，从参数调整到特性支持，MySQL 都有了革命性的变化。《MySQL 8 Cookbook（中文版）》基于 MySQL 8.0，以基础知识为入手点，以讲解技术特性为目标，以案例作为理论的补充，详细介绍了 MySQL 的方方面面，提供了超过 150 个高性能数据库查询与管理技巧，是 MySQL 入门者和管理者的必读之作。</p><p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/02/tRZSAP1h7oBfli6.jpg&quot; alt=&quot;MySQL 8 Cookbook（中文版）&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;豆瓣评分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;7.4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容简介&lt;/strong&gt;&lt;br&gt;MySQL 8.0 的发布是 MySQL 发展历史上的一个重要里程碑，也是开源数据库领域内的一个大事件。针对这个版本，MySQL 官方团队做了太多的工作，从查询优化到集群架构，从参数调整到特性支持，MySQL 都有了革命性的变化。《MySQL 8 Cookbook（中文版）》基于 MySQL 8.0，以基础知识为入手点，以讲解技术特性为目标，以案例作为理论的补充，详细介绍了 MySQL 的方方面面，提供了超过 150 个高性能数据库查询与管理技巧，是 MySQL 入门者和管理者的必读之作。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://zronghui.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>《Redis 设计与实现》</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ARedis-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B.html</id>
    <published>2020-11-29T14:16:28.000Z</published>
    <updated>2020-12-02T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://redisbook.com/">Redis 设计与实现 — Redis 设计与实现</a></p><p><img src="https://i.loli.net/2020/11/30/BqafkQPmG3lWXU6.png" alt="_images/cover.png"></p><p>[TOC]</p><a id="more"></a><h1 id="第一部分：数据结构与对象"><a href="#第一部分：数据结构与对象" class="headerlink" title="第一部分：数据结构与对象"></a>第一部分：数据结构与对象</h1><h2 id="2-简单动态字符串"><a href="#2-简单动态字符串" class="headerlink" title="2. 简单动态字符串"></a>2. 简单动态字符串</h2><p>SDS 的定义<br>SDS 与 C 字符串的区别<br>SDS API</p><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><p>Redis 只会使用 C 字符串作为字面量， 在大多数情况下， Redis 使用 SDS （Simple Dynamic String，简单动态字符串）作为字符串表示。</p><p>比起 C 字符串， SDS 具有以下优点：</p><ul><li>常数复杂度获取字符串长度。</li><li>杜绝缓冲区溢出。</li><li>减少修改字符串长度时所需的内存重分配次数。</li><li>二进制安全。</li><li>兼容部分 C 字符串函数。</li></ul><h2 id="3-链表"><a href="#3-链表" class="headerlink" title="3. 链表"></a>3. 链表</h2><p>链表和链表节点的实现<br>链表和链表节点的 API</p><h3 id="重点回顾-1"><a href="#重点回顾-1" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>链表被广泛用于实现 Redis 的各种功能， 比如列表键， 发布与订阅， 慢查询， 监视器， 等等。</li><li>每个链表节点由一个 <code>listNode</code> 结构来表示， 每个节点都有一个指向前置节点和后置节点的指针， 所以 Redis 的链表实现是双端链表。</li><li>每个链表使用一个 <code>list</code> 结构来表示， 这个结构带有表头节点指针、表尾节点指针、以及链表长度等信息。</li><li>因为链表表头节点的前置节点和表尾节点的后置节点都指向 <code>NULL</code> ， 所以 Redis 的链表实现是无环链表。</li><li>通过为链表设置不同的类型特定函数， Redis 的链表可以用于保存各种不同类型的值。</li></ul><h2 id="4-字典"><a href="#4-字典" class="headerlink" title="4. 字典"></a>4. 字典</h2><p>字典的实现<br>哈希算法<br>解决键冲突<br>rehash</p><h3 id="渐进式-rehash"><a href="#渐进式-rehash" class="headerlink" title="渐进式 rehash"></a>渐进式 rehash</h3><p><strong>rehash 的过程：</strong></p><ol><li>为 ht[1] 分配空间</li><li>将字典中 rehashidx 设为 0，表示 rehash 工作正式开始(rehashidx 表示 ht[0] 中下一个需要 rehash 的索引位置)</li><li>每次对字典进行增删改查，检测到 rehashidx&gt;=0, 则程序除了处理指定的操作，还会顺带将 ht[0] 在 rehashidx 索引上的所有键值对 rehash 到 ht[1] 中，rehashidx++</li><li>rehashidx 等于 ht[0] 的长度时，rehash结束，将 rehashidx 设为 -1</li></ol><p>渐进式 rehash 的好处在于采取分而治之的方式，将 rehash 键值对的工作均摊到每次增删改查的操作上，避免了几种 rehash 而带来的庞大计算量。</p><p>字典 API</p><h3 id="重点回顾-2"><a href="#重点回顾-2" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>字典被广泛用于实现 Redis 的各种功能， 其中包括数据库和哈希键。</li><li>Redis 中的字典使用哈希表作为底层实现， 每个字典带有两个哈希表， 一个用于平时使用， 另一个仅在进行 rehash 时使用。</li><li>当字典被用作数据库的底层实现， 或者哈希键的底层实现时， Redis 使用 MurmurHash2 算法来计算键的哈希值。</li><li>哈希表使用链地址法来解决键冲突， 被分配到同一个索引上的多个键值对会连接成一个单向链表。</li><li>在对哈希表进行扩展或者收缩操作时， 程序需要将现有哈希表包含的所有键值对 rehash 到新哈希表里面， 并且这个 rehash 过程并不是一次性地完成的， 而是渐进式地完成的。</li></ul><h2 id="5-跳跃表"><a href="#5-跳跃表" class="headerlink" title="5. 跳跃表"></a>5. 跳跃表</h2><h3 id="跳跃表的实现"><a href="#跳跃表的实现" class="headerlink" title="跳跃表的实现"></a>跳跃表的实现</h3><p><strong>跳跃表</strong></p><p>包含的属性：</p><p>header </p><p>tail </p><p>level 目前跳跃表内，层数最大的节点的层数</p><p>length</p><p><strong>跳跃表节点</strong></p><p>包含的属性：</p><p>level: 每个节点的 level 数量可能不同。每个 level 包括当前 level 指向下一个节点的指针和这 2 个节点之间的跨度</p><p>backward 指针</p><p>score</p><p>obj</p><p>每次创建一个新跳跃表节点，程序根据幂次定律（越大的数出现的概率越小）随机生成一个 1~32之间的值作为 level 数组的大小，这个大小就是层的高度。如：高度为 3 的节点有 level[0] level[1] level[2] 三个向前的指针。</p><p>跳跃表 API</p><h3 id="重点回顾-3"><a href="#重点回顾-3" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>跳跃表是有序集合的底层实现之一， 除此之外它在 Redis 中没有其他应用。</li><li>Redis 的跳跃表实现由 <code>zskiplist</code> 和 <code>zskiplistNode</code> 两个结构组成， 其中 <code>zskiplist</code> 用于保存跳跃表信息（比如表头节点、表尾节点、长度）， 而 <code>zskiplistNode</code> 则用于表示跳跃表节点。</li><li>每个跳跃表节点的层高都是 <code>1</code> 至 <code>32</code> 之间的随机数。</li><li>在同一个跳跃表中， 多个节点可以包含相同的分值， 但每个节点的成员对象必须是唯一的。</li><li>跳跃表中的节点按照分值大小进行排序， 当分值相同时， 节点按照成员对象的大小进行排序。</li></ul><h2 id="6-整数集合-intset"><a href="#6-整数集合-intset" class="headerlink" title="6. 整数集合 intset"></a>6. 整数集合 intset</h2><h3 id="整数集合的实现"><a href="#整数集合的实现" class="headerlink" title="整数集合的实现"></a>整数集合的实现</h3><p>intset 包括的属性：</p><p>encoding</p><p>length</p><p>contents[]</p><p>encoding 可以是 intset_enc_int16 intset_enc_int32 intset_enc_int64，表示 contents 数组中元素的整数类型</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>新增元素大于当前 intset 类型的整数上限是，需要对 intset 进行升级</p><h3 id="升级的好处"><a href="#升级的好处" class="headerlink" title="升级的好处"></a>升级的好处</h3><p>降级</p><p>整数集合 API</p><h3 id="重点回顾-4"><a href="#重点回顾-4" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>整数集合是集合键的底层实现之一。</li><li>整数集合的底层实现为数组， 这个数组以有序、无重复的方式保存集合元素， 在有需要时， 程序会根据新添加元素的类型， 改变这个数组的类型。</li><li>升级操作为整数集合带来了操作上的灵活性， 并且尽可能地节约了内存。</li><li>整数集合只支持升级操作， 不支持降级操作。</li></ul><h2 id="7-压缩列表"><a href="#7-压缩列表" class="headerlink" title="7. 压缩列表"></a>7. 压缩列表</h2><h3 id="压缩列表的构成"><a href="#压缩列表的构成" class="headerlink" title="压缩列表的构成"></a>压缩列表的构成</h3><p>压缩列表是为了节约内存开发的</p><h3 id="压缩列表节点的构成"><a href="#压缩列表节点的构成" class="headerlink" title="压缩列表节点的构成"></a>压缩列表节点的构成</h3><p>previous_entry_length </p><p>encoding </p><p>content</p><p>连锁更新<br>压缩列表 API</p><h3 id="重点回顾-5"><a href="#重点回顾-5" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>压缩列表是一种为节约内存而开发的顺序型数据结构。</li><li>压缩列表被用作列表键和哈希键的底层实现之一。</li><li>压缩列表可以包含多个节点，每个节点可以保存一个字节数组或者整数值。</li><li>添加新节点到压缩列表， 或者从压缩列表中删除节点， 可能会引发连锁更新操作， 但这种操作出现的几率并不高。</li></ul><h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8. 对象"></a>8. 对象</h2><h3 id="对象的类型与编码"><a href="#对象的类型与编码" class="headerlink" title="对象的类型与编码"></a>对象的类型与编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line">  <span class="comment">// 类型</span></span><br><span class="line">  <span class="keyword">unsigned</span> type: <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 编码</span></span><br><span class="line">  <span class="keyword">unsigned</span> encoding: <span class="number">4</span>;</span><br><span class="line">  <span class="comment">// 指向底层实现数据结构的指针</span></span><br><span class="line">  <span class="keyword">void</span> *ptr;</span><br><span class="line">  <span class="comment">// 引用计数</span></span><br><span class="line">  <span class="keyword">int</span> refcount;</span><br><span class="line">  <span class="comment">// 最后一次被程序访问的时间</span></span><br><span class="line">  <span class="keyword">unsigned</span> lru;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>指的是 Redis 数据库中保存的值的类型，可以是 redis_string , redis_list, redis_hash, redis_set, redis_zset</p><p>使用 type key 查询键对应的值的类型</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>底层实际使用的数据结构</p><p>使用 object encoding key 可以查询编码</p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>字符串 对象的编码可以是 int、raw、embstr，分别针对 整数 长字符 和 短字符</p><h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>列表 对象的编码可以是 ziplist 或者 linkedlist</p><p>某一类型采用不同的编码主要是综合考虑 空间和时间</p><p>编码使用 ziplsit 的条件：</p><ul><li>列表中所有字符串长度小于64字节</li><li>元素数量少于 512 个</li></ul><p>以上 2 个条件的上限值可以修改</p><h3 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h3><p>哈希 对象的编码可以是 ziplist 和 hashtable</p><h3 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h3><p>集合 对象的编码可以是 intset 和 hashtable</p><h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><p>有序集合 对象的编码可以是 ziplist 和 skiplist</p><p><strong>skiplist 编码的有序集合 同时用了 跳跃表 和 字典</strong></p><p>原因：为了让查找元素的分值与范围查找的复杂度降到最低</p><ul><li>如果只用字典实现有序集合，每次范围操作时都要对所有元素进行排序，消耗 O(NlogN) 的时间复杂度和 O(N) 的额外内存空间。</li><li>如果只使用跳跃表，查找分值的复杂度为 O(logN) , 利用字典可以将复杂度降到 O(1)</li></ul><h3 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h3><p>Redis 操作建的命令基本分为 2 类：一种可以操作所有类型的键，如 del expire rename type object 等</p><p>另一种只能对特定类型的键执行</p><p>redis 服务器收到命令后，会对命令的合法性进行检查</p><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><p>c 语言不具备自动内存回收功能，索引 Redis 自己构造了利用引用计数技术实现的内存回收机制，程序可以根据对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。</p><h3 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h3><p>Redis 在初始化服务器的时候，创建 0-9999 1 万个字符串对象，</p><h3 id="对象的空转时长"><a href="#对象的空转时长" class="headerlink" title="对象的空转时长"></a>对象的空转时长</h3><p>根据对象的 lru 属性计算出对象的空转时长</p><p>object idletime key</p><h3 id="重点回顾-6"><a href="#重点回顾-6" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>Redis 数据库中的每个键值对的键和值都是一个对象。</li><li>Redis 共有字符串、列表、哈希、集合、有序集合五种类型的对象， 每种类型的对象至少都有两种或以上的编码方式， 不同的编码可以在不同的使用场景上优化对象的使用效率。</li><li>服务器在执行某些命令之前， 会先检查给定键的类型能否执行指定的命令， 而检查一个键的类型就是检查键的值对象的类型。</li><li>Redis 的对象系统带有引用计数实现的内存回收机制， 当一个对象不再被使用时， 该对象所占用的内存就会被自动释放。</li><li>Redis 会共享值为 <code>0</code> 到 <code>9999</code> 的字符串对象。</li><li>对象会记录自己的最后一次被访问的时间， 这个时间可以用于计算对象的空转时间。</li></ul><h1 id="第二部分：单机数据库的实现"><a href="#第二部分：单机数据库的实现" class="headerlink" title="第二部分：单机数据库的实现"></a>第二部分：单机数据库的实现</h1><h2 id="9-数据库"><a href="#9-数据库" class="headerlink" title="9. 数据库"></a>9. 数据库</h2><p>服务器中的数据库<br>切换数据库<br>数据库键空间<br>设置键的生存时间或过期时间<br>过期键删除策略<br>Redis 的过期键删除策略<br>AOF 、RDB 和复制功能对过期键的处理<br>数据库通知</p><h3 id="重点回顾-7"><a href="#重点回顾-7" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>Redis 服务器的所有数据库都保存在 <code>redisServer.db</code> 数组中， 而数据库的数量则由 <code>redisServer.dbnum</code> 属性保存。</li><li>客户端通过修改目标数据库指针， 让它指向 <code>redisServer.db</code> 数组中的不同元素来切换不同的数据库。</li><li>数据库主要由 <code>dict</code> 和 <code>expires</code> 两个字典构成， 其中 <code>dict</code> 字典负责保存键值对， 而 <code>expires</code> 字典则负责保存键的过期时间。</li><li>因为数据库由字典构成， 所以对数据库的操作都是建立在字典操作之上的。</li><li>数据库的键总是一个字符串对象， 而值则可以是任意一种 Redis 对象类型， 包括字符串对象、哈希表对象、集合对象、列表对象和有序集合对象， 分别对应字符串键、哈希表键、集合键、列表键和有序集合键。</li><li><code>expires</code> 字典的键指向数据库中的某个键， 而值则记录了数据库键的过期时间， 过期时间是一个以毫秒为单位的 UNIX 时间戳。</li><li>Redis 使用惰性删除和定期删除两种策略来删除过期的键： 惰性删除策略只在碰到过期键时才进行删除操作， 定期删除策略则每隔一段时间， 主动查找并删除过期键。</li><li>执行 SAVE 命令或者 BGSAVE 命令所产生的新 RDB 文件不会包含已经过期的键。</li><li>执行 BGREWRITEAOF 命令所产生的重写 AOF 文件不会包含已经过期的键。</li><li>当一个过期键被删除之后， 服务器会追加一条 DEL 命令到现有 AOF 文件的末尾， 显式地删除过期键。</li><li>当主服务器删除一个过期键之后， 它会向所有从服务器发送一条 DEL 命令， 显式地删除过期键。</li><li>从服务器即使发现过期键， 也不会自作主张地删除它， 而是等待主节点发来 DEL 命令， 这种统一、中心化的过期键删除策略可以保证主从服务器数据的一致性。</li><li>当 Redis 命令对数据库进行修改之后， 服务器会根据配置， 向客户端发送数据库通知。</li></ul><h2 id="10-RDB-持久化"><a href="#10-RDB-持久化" class="headerlink" title="10. RDB 持久化"></a>10. RDB 持久化</h2><p>RDB 文件的创建与载入<br>自动间隔性保存<br>RDB 文件结构<br>分析 RDB 文件</p><h3 id="重点回顾-8"><a href="#重点回顾-8" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>RDB 文件用于保存和还原 Redis 服务器所有数据库中的所有键值对数据。</li><li>SAVE 命令由服务器进程直接执行保存操作，所以该命令会阻塞服务器。</li><li>BGSAVE 命令由子进程执行保存操作，所以该命令不会阻塞服务器。</li><li>服务器状态中会保存所有用 <code>save</code> 选项设置的保存条件，当任意一个保存条件被满足时，服务器会自动执行 BGSAVE 命令。</li><li>RDB 文件是一个经过压缩的二进制文件，由多个部分组成。</li><li>对于不同类型的键值对， RDB 文件会使用不同的方式来保存它们。</li></ul><h2 id="11-AOF-持久化"><a href="#11-AOF-持久化" class="headerlink" title="11. AOF 持久化"></a>11. AOF 持久化</h2><p>AOF 持久化的实现<br>AOF 文件的载入与数据还原<br>AOF 重写</p><h3 id="重点回顾-9"><a href="#重点回顾-9" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>AOF 文件通过保存所有修改数据库的写命令请求来记录服务器的数据库状态。</li><li>AOF 文件中的所有命令都以 Redis 命令请求协议的格式保存。</li><li><strong>命令请求会先保存到 AOF 缓冲区里面， 之后再定期写入并同步到 AOF 文件。</strong></li><li><code>appendfsync</code> 选项的不同值对 AOF 持久化功能的安全性、以及 Redis 服务器的性能有很大的影响。</li><li>服务器只要载入并重新执行保存在 AOF 文件中的命令， 就可以还原数据库本来的状态。</li><li>AOF 重写可以产生一个新的 AOF 文件， 这个新的 AOF 文件和原有的 AOF 文件所保存的数据库状态一样， 但体积更小。</li><li><strong>AOF 重写是一个有歧义的名字， 该功能是通过读取数据库中的键值对来实现的， 程序无须对现有 AOF 文件进行任何读入、分析或者写入操作。</strong></li><li>在执行 BGREWRITEAOF 命令时， Redis 服务器会维护一个 AOF 重写缓冲区， 该缓冲区会在子进程创建新 AOF 文件的期间， 记录服务器执行的所有写命令。 当子进程完成创建新 AOF 文件的工作之后， 服务器会将重写缓冲区中的所有内容追加到新 AOF 文件的末尾， 使得新旧两个 AOF 文件所保存的数据库状态一致。 最后， 服务器用新的 AOF 文件替换旧的 AOF 文件， 以此来完成 AOF 文件重写操作。(这跟 MySQL 的 recreate 重建表类似，为了不阻塞其他修改，将修改记录到日志，重建完成后将日志应用到新表)</li></ul><h2 id="12-事件"><a href="#12-事件" class="headerlink" title="12. 事件"></a>12. 事件</h2><p>这一节没有太看懂</p><h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><p>Redis 基于 <a href="http://en.wikipedia.org/wiki/Reactor_pattern">Reactor 模式</a>开发了自己的网络事件处理器： 这个处理器被称为文件事件处理器（file event handler）：</p><ul><li>文件事件处理器使用 <a href="http://en.wikipedia.org/wiki/Multiplexing"><strong>I/O 多路复用（multiplexing）</strong></a>程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p><strong>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性</strong>。</p><p>Redis 的 I/O 多路复用程序的所有功能都是通过包装常见的 <code>select</code> 、 <code>epoll</code> 、 <code>evport</code> 和 <code>kqueue</code> 这些 I/O 多路复用函数库来实现的</p><p>时间事件<br>事件的调度与执行</p><h3 id="重点回顾-10"><a href="#重点回顾-10" class="headerlink" title="重点回顾"></a>重点回顾</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li>Redis 服务器是一个事件驱动程序， 服务器处理的事件分为时间事件和文件事件两类。</li><li>文件事件处理器是基于 Reactor 模式实现的网络通讯程序。</li><li>文件事件是对套接字操作的抽象： 每次套接字变得可应答（acceptable）、可写（writable）或者可读（readable）时， 相应的文件事件就会产生。</li><li>文件事件分为 <code>AE_READABLE</code> 事件（读事件）和 <code>AE_WRITABLE</code> 事件（写事件）两类。</li><li>时间事件分为定时事件和周期性事件： 定时事件只在指定的时间达到一次， 而周期性事件则每隔一段时间到达一次。</li><li>服务器在一般情况下只执行 <code>serverCron</code> 函数一个时间事件， 并且这个事件是周期性事件。</li><li>文件事件和时间事件之间是合作关系， 服务器会轮流处理这两种事件， 并且处理事件的过程中也不会进行抢占。</li><li>时间事件的实际处理时间通常会比设定的到达时间晚一些。</li></ul><p>参考资料</p><h2 id="13-客户端"><a href="#13-客户端" class="headerlink" title="13. 客户端"></a>13. 客户端</h2><p>这一节没有太看懂</p><p>客户端属性<br>客户端的创建与关闭</p><h3 id="重点回顾-11"><a href="#重点回顾-11" class="headerlink" title="重点回顾"></a>重点回顾</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul><li>服务器状态结构使用 <code>clients</code> 链表连接起多个客户端状态， 新添加的客户端状态会被放到链表的末尾。</li><li>客户端状态的 <code>flags</code> 属性使用不同标志来表示客户端的角色， 以及客户端当前所处的状态。</li><li>输入缓冲区记录了客户端发送的命令请求， 这个缓冲区的大小不能超过 1 GB 。</li><li>命令的参数和参数个数会被记录在客户端状态的 <code>argv</code> 和 <code>argc</code> 属性里面， 而 <code>cmd</code> 属性则记录了客户端要执行命令的实现函数。</li><li>客户端有固定大小缓冲区和可变大小缓冲区两种缓冲区可用， 其中固定大小缓冲区的最大大小为 16 KB ， 而可变大小缓冲区的最大大小不能超过服务器设置的硬性限制值。</li><li>输出缓冲区限制值有两种， 如果输出缓冲区的大小超过了服务器设置的硬性限制， 那么客户端会被立即关闭； 除此之外， 如果客户端在一定时间内， 一直超过服务器设置的软性限制， 那么客户端也会被关闭。</li><li>当一个客户端通过网络连接连上服务器时， 服务器会为这个客户端创建相应的客户端状态。 网络连接关闭、 发送了不合协议格式的命令请求、 成为 CLIENT_KILL 命令的目标、 空转时间超时、 输出缓冲区的大小超出限制， 以上这些原因都会造成客户端被关闭。</li><li>处理 Lua 脚本的伪客户端在服务器初始化时创建， 这个客户端会一直存在， 直到服务器关闭。</li><li>载入 AOF 文件时使用的伪客户端在载入工作开始时动态创建， 载入工作完毕之后关闭。</li></ul><h2 id="14-服务器"><a href="#14-服务器" class="headerlink" title="14. 服务器"></a>14. 服务器</h2><p>命令请求的执行过程<br>serverCron 函数<br>初始化服务器</p><h3 id="重点回顾-12"><a href="#重点回顾-12" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>一个命令请求从发送到完成主要包括以下步骤： 1. 客户端将命令请求发送给服务器； 2. 服务器读取命令请求，并分析出命令参数； 3. 命令执行器根据参数查找命令的实现函数，然后执行实现函数并得出命令回复； 4. 服务器将命令回复返回给客户端。</li><li><code>serverCron</code> 函数默认每隔 <code>100</code> 毫秒执行一次， 它的工作主要包括更新服务器状态信息， 处理服务器接收的 <code>SIGTERM</code> 信号， 管理客户端资源和数据库状态， 检查并执行持久化操作， 等等。</li><li>服务器从启动到能够处理客户端的命令请求需要执行以下步骤： 1. 初始化服务器状态； 2. 载入服务器配置； 3. 初始化服务器数据结构； 4. 还原数据库状态； 5. 执行事件循环。</li></ul><h1 id="第三部分：多机数据库的实现"><a href="#第三部分：多机数据库的实现" class="headerlink" title="第三部分：多机数据库的实现"></a>第三部分：多机数据库的实现</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>旧版复制功能的实现<br>旧版复制功能的缺陷<br>新版复制功能的实现<br>部分重同步的实现<br>PSYNC 命令的实现<br>复制的实现<br>心跳检测<br>重点回顾</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>启动并初始化 Sentinel<br>获取主服务器信息<br>获取从服务器信息<br>向主服务器和从服务器发送信息<br>接收来自主服务器和从服务器的频道信息<br>检测主观下线状态<br>检查客观下线状态<br>选举领头 Sentinel<br>故障转移<br>重点回顾<br>参考资料</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>节点<br>槽指派<br>在集群中执行命令<br>重新分片<br>ASK 错误<br>复制与故障转移<br>消息<br>重点回顾</p><h1 id="第四部分：独立功能的实现"><a href="#第四部分：独立功能的实现" class="headerlink" title="第四部分：独立功能的实现"></a>第四部分：独立功能的实现</h1><h2 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h2><p>频道的订阅与退订<br>模式的订阅与退订<br>发送消息<br>查看订阅信息<br>重点回顾<br>参考资料</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务的实现<br>WATCH 命令的实现<br>事务的 ACID 性质<br>重点回顾<br>参考资料</p><h2 id="Lua-脚本"><a href="#Lua-脚本" class="headerlink" title="Lua 脚本"></a>Lua 脚本</h2><p>创建并修改 Lua 环境<br>Lua 环境协作组件<br>EVAL 命令的实现<br>EVALSHA 命令的实现<br>脚本管理命令的实现<br>脚本复制<br>重点回顾<br>参考资料</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>SORT <key> 命令的实现<br>ALPHA 选项的实现<br>ASC 选项和 DESC 选项的实现<br>BY 选项的实现<br>带有 ALPHA 选项的 BY 选项的实现<br>LIMIT 选项的实现<br>GET 选项的实现<br>STORE 选项的实现<br>多个选项的执行顺序<br>重点回顾</p><h2 id="二进制位数组"><a href="#二进制位数组" class="headerlink" title="二进制位数组"></a>二进制位数组</h2><p>位数组的表示<br>GETBIT 命令的实现<br>SETBIT 命令的实现<br>BITCOUNT 命令的实现<br>BITOP 命令的实现<br>重点回顾<br>参考资料</p><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>慢查询记录的保存<br>慢查询日志的阅览和删除<br>添加新日志<br>重点回顾</p><h2 id="监视器"><a href="#监视器" class="headerlink" title="监视器"></a>监视器</h2><p>成为监视器<br>向监视器发送命令信息<br>重点回顾</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://redisbook.com/&quot;&gt;Redis 设计与实现 — Redis 设计与实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/30/BqafkQPmG3lWXU6.png&quot; alt=&quot;_images/cover.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://zronghui.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>《MongoDB 实战》阅读笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMongoDB-%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMongoDB-%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-11-29T14:16:13.000Z</published>
    <updated>2020-12-02T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/12/02/n58zIYeCqKAUfmR.jpg" alt="MongoDB实战(第二版)"></p><p><strong>豆瓣评分</strong>：5.5</p><p>本书分三部分通过大量的实例代码介绍了 MongoDB 数据库底层的实现以及大型互联网 Web 项目数据库设计原则。部分对 MongoDB 进行了整体介绍，并介绍了实际的开发例子，另外还介绍了 JavaScript shell 和 Ruby 驱动。第二部分通过逐步实现一个电商数据模型和实现必要的 CRUD 操作来详细介绍了 MongoDB 的文档数据模型、查询语言和 CRUD（新增、读取、更新和删除）操作。本书的后部分从数据库专家的角度来看待 MongoDB，介绍了数据库的性能、部署、容错和伸缩性等所有的知识。</p><p>本书适合想深入学习 MongoDB 的开发人员，主要关注 MongoDB 数据库。</p><p>[TOC]</p><a id="more"></a><blockquote><p>图书馆借阅的书，网上也没有电子版，只能自己记了</p></blockquote><h2 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h2><p>MongoDB 数据存在哪里？内存 or 磁盘？缓存是怎样的？</p><p>默认有没有索引？有的话是哪个？id?</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="MongoDB-提供了几个命令行工具"><a href="#MongoDB-提供了几个命令行工具" class="headerlink" title="MongoDB 提供了几个命令行工具"></a>MongoDB 提供了几个命令行工具</h3><p>mongodump mongostore 备份和恢复数据库的工具</p><p>mongoexport mongoimport 导入或导出 json CSV等格式的数据</p><p>mongosniff 查看发送给数据库的命令，会把 BSON 转换成人类可读的</p><p>mongostat 与 iostat 类似，查看 MongoDB 数据库的状态，包括，每秒的操作数，分配虚拟内存的数量，以及服务器的连接数量</p><p>mongotop 显示 MongoDB 在每个集合里话费的读取和写入数据的时间总数</p><p>mongoperf MongoDB 操作磁盘情况</p><p>mongoplog 展示 MongoDB 日志</p><p>Bsondump bson-&gt;json 等格式</p><p>如 将 json 数据导入 MongoDB 数据库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat sample.json | mongoimport -c tweets</span><br></pre></td></tr></table></figure><h3 id="Why-MongoDB"><a href="#Why-MongoDB" class="headerlink" title="Why MongoDB ?"></a>Why MongoDB ?</h3><p>关系型数据库最大的特点是支持 SQL 查询语句，故 SQL 数据库的适用场景为 需要事务的系统（银行或金融）或 SQL、规范化数据模型</p><p>而像 MongoDB 的 NoSQL 更适用于 高吞吐量（如消息队列），缓存，web 网站等场景</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="动态操作数据"><a href="#动态操作数据" class="headerlink" title="动态操作数据"></a>动态操作数据</h3><p>只有在第一次插入数据库和集合是才会创建数据库，所以文档的数据结构不用提前定义</p><h3 id="shell-操作"><a href="#shell-操作" class="headerlink" title="shell 操作"></a>shell 操作</h3><p>以操作 db 数据库中的 users 集合为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">use db</span><br><span class="line">db.users.insert(&#123;username: "smith"&#125;)</span><br><span class="line"></span><br><span class="line">db.users.find()</span><br><span class="line">db.users.find(&#123;username: "jones"&#125;)</span><br><span class="line">db.users.find(&#123;username: "jones"&#125;).pretty()</span><br><span class="line"><span class="meta">#</span><span class="bash"> find 里的 json 的多个字段默认的联合逻辑是 AND</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用 <span class="variable">$and</span> 和 <span class="variable">$or</span> 组合多个条件</span></span><br><span class="line"></span><br><span class="line">db.users.update(&#123;查询条件&#125;, &#123;$set: &#123;更新的字段 json&#125;&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加 <span class="built_in">set</span> 就整个替换为后面的 json，之前的字段全部不保留</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者用 <span class="variable">$addToSet</span> 将查询的数据插入其他集合</span></span><br><span class="line"></span><br><span class="line">db.users.remove()</span><br><span class="line">db.users.remove(&#123;限制条件&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建和查询索引"><a href="#创建和查询索引" class="headerlink" title="创建和查询索引"></a>创建和查询索引</h3><p>可以从 shell 方便地创建索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.createIndex(&#123;num: 1&#125;)</span><br></pre></td></tr></table></figure><p>explain</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;...&#125;).explain("executionStats")</span><br></pre></td></tr></table></figure><p>explain 输出的结果的 json 中包括 totalDocsExamined 扫描的条数 indexName 使用的索引(没有使用索引就不显示这个字段)</p><h3 id="查看数据库状态"><a href="#查看数据库状态" class="headerlink" title="查看数据库状态"></a>查看数据库状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以在数据库或集合中使用 stats</span></span><br><span class="line">db.stats()</span><br><span class="line">db.users.stats()</span><br></pre></td></tr></table></figure><h3 id="数据库-集合-文档"><a href="#数据库-集合-文档" class="headerlink" title="数据库 集合 文档"></a>数据库 集合 文档</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/02/n58zIYeCqKAUfmR.jpg&quot; alt=&quot;MongoDB实战(第二版)&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;豆瓣评分&lt;/strong&gt;：5.5&lt;/p&gt;
&lt;p&gt;本书分三部分通过大量的实例代码介绍了 MongoDB 数据库底层的实现以及大型互联网 Web 项目数据库设计原则。部分对 MongoDB 进行了整体介绍，并介绍了实际的开发例子，另外还介绍了 JavaScript shell 和 Ruby 驱动。第二部分通过逐步实现一个电商数据模型和实现必要的 CRUD 操作来详细介绍了 MongoDB 的文档数据模型、查询语言和 CRUD（新增、读取、更新和删除）操作。本书的后部分从数据库专家的角度来看待 MongoDB，介绍了数据库的性能、部署、容错和伸缩性等所有的知识。&lt;/p&gt;
&lt;p&gt;本书适合想深入学习 MongoDB 的开发人员，主要关注 MongoDB 数据库。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://zronghui.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>《Linux Shell 脚本攻略》阅读笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ALinux-Shell-%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ALinux-Shell-%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-11-29T14:15:56.000Z</published>
    <updated>2020-12-02T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/12/02/dv682s35TMNV7Qz.jpg" alt="Linux Shell脚本攻略"></p><p><strong>豆瓣评分</strong></p><p>8.1</p><p><strong>内容简介</strong></p><p>《Linux Shell 脚本攻略》通过细致剖析实际应用中的 110 多个案例，使许多看似复杂的 Linux shell 脚本任务迎刃而解。《Linux Shell 脚本攻略》会帮助读者利用少量命令的组合完成诸如文本处理、文件管理、备份等复杂的数据管理工作。它将告诉你如何利用 shell 命令快速开发常规任务，综合应用 grep、find、sed 和 awk 等常用命令，凭借短短几个命令行从 Web 挖掘数据的 shell 脚本，利用归档工具运行并自动化各种任务，诸如自动备份和存储；帮助你理解文件系统、文件类型以及文件管理；用 shell 创建以及维护文件或目录归档、压缩格式和加密技术；通过 srlell 脚本设置以太网和无线 LAN；使用登录技术监控网络上的各种动态。</p><p>[TOC]</p><a id="more"></a><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://zsh.sourceforge.net/FAQ/zshfaq03.html">Z-Shell Frequently-Asked Questions</a></p><h2 id="第-1-章-小试牛刀"><a href="#第-1-章-小试牛刀" class="headerlink" title="第 1 章 小试牛刀"></a>第 1 章 小试牛刀</h2><h3 id="1-2-终端打印"><a href="#1-2-终端打印" class="headerlink" title="1.2 终端打印"></a>1.2 终端打印</h3><p>echo 双引号 中需要转移 单引号不用</p><p>printf 不会自己添加换行</p><p>printf “%-5s %-10s %-4s\n” No Name Mark</p><p>-5: 左对齐占 5 的长度</p><p>%s %c %n %f</p><p>echo -e “1\t2\t3” 用-e 不输出默认的换行</p><p>echo 还能输出彩色文本</p><h3 id="1-3-玩转变量和环境变量"><a href="#1-3-玩转变量和环境变量" class="headerlink" title="1.3 玩转变量和环境变量"></a>1.3 玩转变量和环境变量</h3><p>env 输出当前 shell 中全部的环境变量</p><p><strong>怎么查看其它进程的环境变量？</strong></p><p>1.通过 pgrep 获取 gedit 进程的 ID</p><p>pgrep gedit</p><p>2.cat /proc/$PID/environ</p><h3 id="使用函数添加环境变量"><a href="#使用函数添加环境变量" class="headerlink" title="使用函数添加环境变量"></a>使用函数添加环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prepend() &#123; [ -d "$2" ] &amp;&amp; eval $1=\"$2':'\$$1\" &amp;&amp; export $1; &#125;</span><br><span class="line">prepend PATH /opt/myapp/bin</span><br></pre></td></tr></table></figure><p>先检查第二个参数的目录是否存在，eval 表达式将第一个参数的变量值设置为 第二个参数加上 : ，再加上第一个参数的原始值</p><p>如果$1 为空，会多一个： , 书中还改进了，太复杂了，当场去世</p><h3 id="1-4-通过-shell-进行数学运算"><a href="#1-4-通过-shell-进行数学运算" class="headerlink" title="1.4 通过 shell 进行数学运算"></a>1.4 通过 shell 进行数学运算</h3><h4 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h4><p>let result=no1+no2</p><p>使用 let 不需要变量前添加 $</p><p>let no1++</p><p>let no1–</p><p>let no+=6</p><p>[] 的用法和 let 一样</p><p>result=$[ no1 + no2 ]</p><h4 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=`echo "$no * 1.5" | bc`</span><br></pre></td></tr></table></figure><p>bc 还能设置浮点数的精度，支持进度转换</p><h3 id="1-5-玩转文件描述符和重定向"><a href="#1-5-玩转文件描述符和重定向" class="headerlink" title="**1.5 玩转文件描述符和重定向"></a>**1.5 玩转文件描述符和重定向</h3><p>文件描述符 0 1 2 </p><p>0： 输入 stdin</p><p>1： 输出 stdout</p><p>2： 错误 stderr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &gt; 等价于 1&gt;</span></span><br><span class="line">ls 1&gt;stdout.txt 2&gt;stderr.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 stderr 转换成 stdout</span></span><br><span class="line">ls &gt; out.txt 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">ls &amp;&gt; out.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以追加到 /dev/null, 它会丢弃接收到的任何任何数据，null 也被称为黑洞</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若既想输出到文件，又想再次使用输出，可以使用 tee</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tee 默认覆盖文件， tee -a 追加</span></span><br><span class="line">cat a* | tee -a out.txt | cat -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tee - 可以将输出输出 2 次给 stdout 如:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我测试了下，并不行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> aaa | tee -</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &lt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件重定向到命令</span></span><br><span class="line">cmd &lt; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在脚本中，可以将多行文本输入到 log.txt 中</span></span><br><span class="line">cat&lt;&lt;EOF&gt;log.txt</span><br><span class="line">sfsadfasdfas</span><br><span class="line">asdfasd</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般是追加 &gt;&gt;</span></span><br><span class="line">cat&lt;&lt;EOF&gt;&gt;log.txt</span><br></pre></td></tr></table></figure><h3 id="1-6-数组和关联数组"><a href="#1-6-数组和关联数组" class="headerlink" title="1.6 数组和关联数组"></a>1.6 数组和关联数组</h3><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 等号周围不能有空格</span></span><br><span class="line">arr=(1 2 3 4)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者直接赋值</span></span><br><span class="line">arr[0]=1 # 赋值失败，因为索引从 1 开始</span><br><span class="line">arr[5]=5</span><br><span class="line"></span><br><span class="line">echo $&#123;arr[0]&#125; # 失败，因为索引从 1 开始</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出数组所有的元素</span></span><br><span class="line">echo $&#123;arr[*]&#125;</span><br><span class="line">echo $&#123;arr[@]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印数组长度</span></span><br><span class="line">echo $&#123;#arr[@]&#125;</span><br><span class="line">echo $&#123;#arr[*]&#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/01/XLCsT3lcwGBxFez.png" alt="image-20201201011042251" style="zoom: 33%;" /><img src="https://i.loli.net/2020/12/01/2GHCatKWzoTgRbk.png" alt="image-20201201011810102" style="zoom:33%;" /><h4 id="关联数组-（字典？）"><a href="#关联数组-（字典？）" class="headerlink" title="关联数组 （字典？）"></a>关联数组 （字典？）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 声明为关联数组</span></span><br><span class="line">declare -A d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加元素</span></span><br><span class="line">d=([k1]=v1 [k2]=v2)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样添加更加方便</span></span><br><span class="line">d[k3]=v3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取元素</span></span><br><span class="line">echo $&#123;d[k3]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取数组的索引</span></span><br><span class="line">echo $&#123;!d[*]&#125; # iterm 使用失败</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/01/XLCsT3lcwGBxFez.png" alt="image-20201201011042251" style="zoom: 33%;" /><img src="https://i.loli.net/2020/12/01/2GHCatKWzoTgRbk.png" alt="image-20201201011810102" style="zoom:33%;" /><h3 id="1-7-使用别名"><a href="#1-7-使用别名" class="headerlink" title="1.7 使用别名"></a>1.7 使用别名</h3><p>alias 输出所有的别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias rm='cp $@ ~/backup &amp;&amp; rm $@'</span><br></pre></td></tr></table></figure><p>\cmd 执行 alias 之前的命令</p><h3 id="1-8-获取终端信息"><a href="#1-8-获取终端信息" class="headerlink" title="1.8 获取终端信息"></a>1.8 获取终端信息</h3><p>tput stty 是两款终端处理工具</p><p>用tput 可以获取终端的行数和列数，终端名，移动光标，设置终端背景色等</p><p>用 stty 可以 实现输入密码时不显示输入内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo -e "Enter password: "</span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止回显</span></span><br><span class="line">stty -echo</span><br><span class="line">read password</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许回显</span></span><br><span class="line">stty echo</span><br></pre></td></tr></table></figure><h3 id="1-9-获取、设置日期和延时"><a href="#1-9-获取、设置日期和延时" class="headerlink" title="1.9 获取、设置日期和延时"></a>1.9 获取、设置日期和延时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 日期及延时</span></span><br><span class="line">date</span><br><span class="line">date +"%T"</span><br><span class="line">date +"%s"</span><br><span class="line"><span class="meta">#</span><span class="bash"> --date 指定日期输入，但是我使用一直不行</span></span><br><span class="line">date --date "jan 20 2001" +"%s"</span><br><span class="line">date --date "Jan 20 2001" +"%s"</span><br><span class="line">date -date "Jan 20 2001" +"%s"</span><br><span class="line">date -d "Jan 20 2001" +"%s"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 记录程序运行时间</span></span><br><span class="line">start=$(date +%s)</span><br></pre></td></tr></table></figure><h3 id="1-10-调试脚本"><a href="#1-10-调试脚本" class="headerlink" title="1.10 调试脚本"></a>1.10 调试脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 -x 参数开启调试</span></span><br><span class="line">bash -x 1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者再脚本中 <span class="built_in">set</span> -x 打开调试 <span class="built_in">set</span> +x 关闭调试</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/12/01/TJCYEBqLZVyHpAj.png" alt="image-20201201211210147" style="zoom: 33%;" /><img src="https://i.loli.net/2020/12/01/BJELDl2tmj9TvR4.png" alt="image-20201201211508575" style="zoom:33%;" /><h3 id="1-11-函数和参数"><a href="#1-11-函数和参数" class="headerlink" title="1.11 函数和参数"></a>1.11 函数和参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两种建立连续序列的方法</span></span><br><span class="line">echo $(seq 0 19)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数字和 .. 之间没有空格</span></span><br><span class="line">for i in &#123;1..10&#125;</span><br><span class="line">do</span><br><span class="line"> echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 函数定义</span></span><br><span class="line">f()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 函数调用</span></span><br><span class="line">f;</span><br><span class="line">f arg1 arg2;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">0 脚本名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash">1 第一个参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash">@ 全部参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment"># 参数数量</span></span></span><br></pre></td></tr></table></figure><h3 id="1-12-读取命令序列输出"><a href="#1-12-读取命令序列输出" class="headerlink" title="1.12 读取命令序列输出"></a>1.12 读取命令序列输出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将命令的输出赋值给变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.子 shell 法</span></span><br><span class="line">out=$(ls | cat -n)</span><br><span class="line">echo $out</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.反引用法</span></span><br><span class="line">out=`ls | cat -n`</span><br><span class="line">echo $out</span><br></pre></td></tr></table></figure><h3 id="1-13-以不按回车键的方式读取字符"><a href="#1-13-以不按回车键的方式读取字符" class="headerlink" title="1.13 以不按回车键的方式读取字符"></a>1.13 以不按回车键的方式读取字符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读取 2 个字符到 var 中</span></span><br><span class="line">read -n 2 var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将你输入的每一行存入 array 数组中</span></span><br><span class="line">read -a array</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他参数</span></span><br><span class="line">-s 无回显 silent</span><br><span class="line">-t timeout 超时</span><br><span class="line">-p "sdfsd" 先显示提示信息</span><br><span class="line">-d delim_char 指定定界符</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如：</span></span><br><span class="line">read -n 8 -t 10 -p "请在 10 秒内输入 8 个字符：" -s password</span><br><span class="line">echo $password</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mac + zsh 上很多<span class="built_in">read</span> 参数 都不能使用</span></span><br></pre></td></tr></table></figure><h3 id="持续运行命令直至成功"><a href="#持续运行命令直至成功" class="headerlink" title="持续运行命令直至成功"></a>持续运行命令直至成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repeat ()  &#123; while true; do $@ &amp;&amp; return; sleep 10; done; &#125;</span><br></pre></td></tr></table></figure><p>zsh 又抽风了，函数定义必须添加 function， $@ 不知道怎么改</p><p>虽然书上说 while :; 比 while true; 快，但是 zsh 用不了 while :;</p><p>还不如我之前写的重试函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">retry () &#123;</span><br><span class="line">while ! $1</span><br><span class="line">do</span><br><span class="line">sleep $2</span><br><span class="line">done</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/01/xCvEZXRTBwqJy6V.png" alt="image-20201201214117930"></p><h3 id="1-14-字段分隔符和迭代器"><a href="#1-14-字段分隔符和迭代器" class="headerlink" title="1.14 字段分隔符和迭代器"></a>1.14 字段分隔符和迭代器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">line="root:x:0:0:root:/root:/bin/bash"</span><br><span class="line">oldIFS=$IFS</span><br><span class="line">IFS=":"</span><br><span class="line">count=0</span><br><span class="line">for item in $line;</span><br><span class="line">do</span><br><span class="line">  [ $count -eq 0 ] &amp;&amp; user=$item;</span><br><span class="line">  [ $count -eq 6 ] &amp;&amp; shell=$item;</span><br><span class="line">  let count++;</span><br><span class="line">done;</span><br><span class="line">IFS=oldIFS</span><br><span class="line">echo "$user $shell"</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 遍历列表</span></span><br><span class="line">for i in list;</span><br><span class="line">do</span><br><span class="line">  commands;</span><br><span class="line">done;</span><br><span class="line"></span><br><span class="line">for i in &#123;1..50&#125; &#123;a..z&#125; &#123;A..Z&#125;;</span><br><span class="line">do</span><br><span class="line">  echo -n $i;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure><p>最后那个%有点奇怪</p><p><img src="https://i.loli.net/2020/12/01/8w4pJPTofRDam3O.png" alt="image-20201201220322509"></p><h3 id="1-15-比较与测试"><a href="#1-15-比较与测试" class="headerlink" title="1.15 比较与测试"></a>1.15 比较与测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span></span></span><br><span class="line">if condition;</span><br><span class="line">then</span><br><span class="line">command;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if condition;</span><br><span class="line">then</span><br><span class="line">command;</span><br><span class="line">else if condition; then</span><br><span class="line">command;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用逻辑运算符可以让代码更简洁</span></span><br><span class="line">[ condition ] &amp;&amp; command;</span><br><span class="line">[ condition ] || command;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 算术比较</span></span><br><span class="line">[ 1 -eq 2 ] # =</span><br><span class="line">-ne ≠</span><br><span class="line">-gt &gt;</span><br><span class="line">-lt &lt;</span><br><span class="line">-ge ≥</span><br><span class="line">-le ≤</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件系统相关</span></span><br><span class="line">[ -f var ] # 存在正常的文件或文件夹</span><br><span class="line">-e 存在文件 </span><br><span class="line">-d 存在文件夹</span><br><span class="line">-x 文件可执行</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符串比较</span></span><br><span class="line">[[ s1 == s2 ]] # 也可以只使用 =</span><br><span class="line">[[ s1 != s2 ]]</span><br><span class="line">[[ s1 &gt; s2 ]]</span><br><span class="line">[[ s1 &lt; s2 ]]</span><br><span class="line">[[ -z s1 ]] # s1 是空串</span><br><span class="line">[[ -n s1 ]] # s1 不是空串</span><br></pre></td></tr></table></figure><h2 id="第-2-章-命令之乐"><a href="#第-2-章-命令之乐" class="headerlink" title="第 2 章 命令之乐"></a>第 2 章 命令之乐</h2><p>2.1 简介</p><h3 id="2-2-用-cat-进行拼接"><a href="#2-2-用-cat-进行拼接" class="headerlink" title="2.2 用 cat 进行拼接"></a>2.2 用 cat 进行拼接</h3><p>2.2.1 预备知识<br>2.2.2 实战演练<br>2.2.3 工作原理<br>2.2.4 补充内容</p><h3 id="2-3-录制与回放终端会话"><a href="#2-3-录制与回放终端会话" class="headerlink" title="2.3 录制与回放终端会话"></a>2.3 录制与回放终端会话</h3><p>2.3.1 预备知识<br>2.3.2 实战演练<br>2.3.3 工作原理</p><h3 id="2-4-文件查找与文件列表"><a href="#2-4-文件查找与文件列表" class="headerlink" title="2.4 文件查找与文件列表"></a>2.4 文件查找与文件列表</h3><p>2.4.1 预备知识<br>2.4.2 实战演练<br>2.4.3 补充内容</p><h3 id="2-5-玩转-xargs"><a href="#2-5-玩转-xargs" class="headerlink" title="2.5 玩转 xargs"></a>2.5 玩转 xargs</h3><p>2.5.1 预备知识<br>2.5.2 实战演练<br>2.5.3 工作原理<br>2.5.4 补充内容</p><h3 id="2-6-用-tr-进行转换"><a href="#2-6-用-tr-进行转换" class="headerlink" title="2.6 用 tr 进行转换"></a>2.6 用 tr 进行转换</h3><p>2.6.1 预备知识<br>2.6.2 实战演练<br>2.6.3 工作原理<br>2.6.4 补充内容</p><h3 id="2-7-校验和与核实"><a href="#2-7-校验和与核实" class="headerlink" title="2.7 校验和与核实"></a>2.7 校验和与核实</h3><p>2.7.1 预备知识<br>2.7.2 实战演练<br>2.7.3 工作原理<br>2.7.4 补充内容</p><h3 id="2-8-排序、单一与重复"><a href="#2-8-排序、单一与重复" class="headerlink" title="2.8 排序、单一与重复"></a>2.8 排序、单一与重复</h3><p>2.8.1 预备知识<br>2.8.2 实战演练<br>2.8.3 工作原理<br>2.8.4 补充内容</p><h3 id="2-9-临时文件命名与随机数"><a href="#2-9-临时文件命名与随机数" class="headerlink" title="2.9 临时文件命名与随机数"></a>2.9 临时文件命名与随机数</h3><p>2.9.1 实战演练<br>2.9.2 工作原理</p><h3 id="2-10-分割文件和数据"><a href="#2-10-分割文件和数据" class="headerlink" title="2.10 分割文件和数据"></a>2.10 分割文件和数据</h3><p>2.10.1 工作原理<br>2.10.2 补充内容</p><h3 id="2-11-根据扩展名切分文件名"><a href="#2-11-根据扩展名切分文件名" class="headerlink" title="2.11 根据扩展名切分文件名"></a>2.11 根据扩展名切分文件名</h3><p>2.11.1 实战演练<br>2.11.2 工作原理</p><h3 id="2-12-批量重命名和移动"><a href="#2-12-批量重命名和移动" class="headerlink" title="2.12 批量重命名和移动"></a>2.12 批量重命名和移动</h3><p>2.12.1 预备知识<br>2.12.2 实战演练<br>2.12.3 工作原理</p><h3 id="2-13-拼写检查与词典操作"><a href="#2-13-拼写检查与词典操作" class="headerlink" title="2.13 拼写检查与词典操作"></a>2.13 拼写检查与词典操作</h3><p>2.13.1 实战演练<br>2.13.2 工作原理</p><h3 id="2-14-交互输入自动化"><a href="#2-14-交互输入自动化" class="headerlink" title="2.14 交互输入自动化"></a>2.14 交互输入自动化</h3><p>2.14.1 预备知识<br>2.14.2 实战演练<br>2.14.3 工作原理<br>2.14.4 补充内容</p><h2 id="第-3-章-以文件之名"><a href="#第-3-章-以文件之名" class="headerlink" title="第 3 章 以文件之名"></a>第 3 章 以文件之名</h2><p>3.1 简介</p><h3 id="3-2-生成任意大小的文件"><a href="#3-2-生成任意大小的文件" class="headerlink" title="3.2 生成任意大小的文件"></a>3.2 生成任意大小的文件</h3><h3 id="3-3-文本文件的交集与差集"><a href="#3-3-文本文件的交集与差集" class="headerlink" title="3.3 文本文件的交集与差集"></a>3.3 文本文件的交集与差集</h3><p>3.3.1 预备知识<br>3.3.2 实战演练</p><h3 id="3-4-查找并删除重复文件"><a href="#3-4-查找并删除重复文件" class="headerlink" title="3.4 查找并删除重复文件"></a>3.4 查找并删除重复文件</h3><p>3.4.1 预备知识<br>3.4.2 实战演练<br>3.4.3 工作原理<br>3.4.4 参考</p><h3 id="3-5-创建长路径目录"><a href="#3-5-创建长路径目录" class="headerlink" title="3.5 创建长路径目录"></a>3.5 创建长路径目录</h3><p>3.5.1 预备知识<br>3.5.2 实战演练</p><h3 id="3-6-文件权限、所有权和粘滞位"><a href="#3-6-文件权限、所有权和粘滞位" class="headerlink" title="3.6 文件权限、所有权和粘滞位"></a>3.6 文件权限、所有权和粘滞位</h3><p>3.6.1 预备知识<br>3.6.2 实战演练<br>3.6.3 补充内容</p><h3 id="3-7-创建不可修改文件"><a href="#3-7-创建不可修改文件" class="headerlink" title="3.7 创建不可修改文件"></a>3.7 创建不可修改文件</h3><p>3.7.1 预备知识</p><p>3.7.2 实战演练</p><h3 id="3-8-批量生成空白文件"><a href="#3-8-批量生成空白文件" class="headerlink" title="3.8 批量生成空白文件"></a>3.8 批量生成空白文件</h3><p>3.8.1 预备知识<br>3.8.2 实战演练</p><h3 id="3-9-查找符号链接及其指向目标"><a href="#3-9-查找符号链接及其指向目标" class="headerlink" title="3.9 查找符号链接及其指向目标"></a>3.9 查找符号链接及其指向目标</h3><p>3.9.1 预备知识<br>3.9.2 实战演练</p><h3 id="3-10-列举文件类型统计信息"><a href="#3-10-列举文件类型统计信息" class="headerlink" title="3.10 列举文件类型统计信息"></a>3.10 列举文件类型统计信息</h3><p>3.10.1 预备知识<br>3.10.2 实战演练<br>3.10.3 工作原理</p><h3 id="3-11-环回文件与挂载"><a href="#3-11-环回文件与挂载" class="headerlink" title="3.11 环回文件与挂载"></a>3.11 环回文件与挂载</h3><p>3.11.1 预备知识<br>3.11.2 实战演练<br>3.11.3 补充内容</p><h3 id="3-12-生成-ISO-文件及混合-ISO"><a href="#3-12-生成-ISO-文件及混合-ISO" class="headerlink" title="3.12 生成 ISO 文件及混合 ISO"></a>3.12 生成 ISO 文件及混合 ISO</h3><p>3.12.1 预备知识<br>3.12.2 实战演练<br>3.12.3 补充内容</p><h3 id="3-13-查找文件差异并进行修补"><a href="#3-13-查找文件差异并进行修补" class="headerlink" title="3.13 查找文件差异并进行修补"></a>3.13 查找文件差异并进行修补</h3><p>3.13.1 实战演练<br>3.13.2 补充内容</p><h3 id="3-14-head-与-tail——-打印文件的前-10-行和后-10-行"><a href="#3-14-head-与-tail——-打印文件的前-10-行和后-10-行" class="headerlink" title="3.14 head 与 tail—— 打印文件的前 10 行和后 10 行"></a>3.14 head 与 tail—— 打印文件的前 10 行和后 10 行</h3><h3 id="3-15-只列出目录的其他方法"><a href="#3-15-只列出目录的其他方法" class="headerlink" title="3.15 只列出目录的其他方法"></a>3.15 只列出目录的其他方法</h3><p>3.15.1 预备知识<br>3.15.2 实战演练</p><h3 id="3-16-在命令行中用-pushd-和-popd-快速定位"><a href="#3-16-在命令行中用-pushd-和-popd-快速定位" class="headerlink" title="3.16 在命令行中用 pushd 和 popd 快速定位"></a>3.16 在命令行中用 pushd 和 popd 快速定位</h3><p>3.16.1 预备知识<br>3.16.2 实战演练<br>3.16.3 补充内容</p><h3 id="3-17-统计文件的行数、单词数和字符数"><a href="#3-17-统计文件的行数、单词数和字符数" class="headerlink" title="3.17 统计文件的行数、单词数和字符数"></a>3.17 统计文件的行数、单词数和字符数</h3><p>3.17.1 预备知识</p><p>3.17.2 实战演练<br>3.17.3 补充知识</p><h3 id="3-18-打印目录树"><a href="#3-18-打印目录树" class="headerlink" title="3.18 打印目录树"></a>3.18 打印目录树</h3><p>3.18.1 预备知识<br>3.18.2 实战演练<br>3.18.3 补充内容</p><h2 id="第-4-章-让文本飞"><a href="#第-4-章-让文本飞" class="headerlink" title="第 4 章 让文本飞"></a>第 4 章 让文本飞</h2><p>4.1 简介<br>4.2 正则表达式入门<br>4.2.1 预备知识<br>4.2.2 实战演练<br>4.2.3 工作原理<br>4.2.4 补充内容<br>4.3 用 grep 在文件中搜索文本<br>4.3.1 预备知识<br>4.3.2 实战演练<br>4.3.3 补充内容<br>4.4 用 cut 按列切分文件<br>4.4.1 预备知识<br>4.4.2 实战演练<br>4.4.3 补充内容<br>4.5 统计特定文件中的词频<br>4.5.1 预备知识<br>4.5.2 实战演练<br>4.5.3 工作原理<br>4.5.4 参考<br>4.6 sed 入门<br>4.6.1 实战演练<br>4.6.2 补充内容<br>4.7 awk 入门<br>4.7.1 实战演练<br>4.7.2 工作原理<br>4.7.3 补充内容<br>4.8 替换文本或文件中的字符串<br>4.8.1 预备知识<br>4.8.2 实战演练<br>4.8.3 补充内容<br>4.8.4 参考<br>4.9 压缩或解压缩 JavaScript<br>4.9.1 预备知识<br>4.9.2 工作原理<br>4.9.3 工作原理<br>4.9.4 参考<br>4.10 对文件中的行、单词和字符进行迭代<br>4.10.1 预备知识<br>4.10.2 实战演练<br>4.10.3 工作原理<br>4.10.4 参考<br>4.11 按列合并文件<br>4.11.1 工作原理<br>4.11.2 参考<br>4.12 打印文件或行中的第 n 个单词或列<br>4.12.1 预备知识<br>4.12.2 实战演练<br>4.12.3 参考<br>4.13 打印不同行或样式之间的文本<br>4.13.1 预备知识<br>4.13.2 实战演练<br>4.13.3 参考<br>4.14 用脚本检验回文字符串<br>4.14.1 预备知识<br>4.14.2 工作原理<br>4.14.3 工作原理<br>4.14.4 补充内容<br>4.14.5 参考<br>4.15 以逆序形式打印行<br>4.15.1 预备知识<br>4.15.2 实战演练<br>4.15.3 工作原理<br>4.15.4 参考<br>4.16 解析文本中的电子邮件地址和 URL<br>4.16.1 预备知识<br>4.16.2 实战演练<br>4.16.3 工作原理<br>4.16.4 参考<br>4.17 打印文件中某个样式之前或之后的 n 行<br>4.17.1 预备知识<br>4.17.2 实战演练<br>4.17.3 参考<br>4.18 在文件中移除包含某个单词的句子<br>4.18.1 预备知识<br>4.18.2 实战演练<br>4.18.3 工作原理<br>4.18.4 参考<br>4.19 用 awk 实现 head、tail 和 tac<br>4.19.1 预备知识<br>4.19.2 实战演练<br>4.19.3 工作原理<br>4.19.4 参考<br>4.20 文本切片与参数操作<br>4.20.1 实战演练<br>4.20.2 参考</p><h2 id="第-5-章-一团乱麻？没这回事"><a href="#第-5-章-一团乱麻？没这回事" class="headerlink" title="第 5 章 一团乱麻？没这回事"></a>第 5 章 一团乱麻？没这回事</h2><p>5.1 入门<br>5.2 网站下载<br>5.2.1 预备知识<br>5.2.2 实战演练<br>5.2.3 补充内容<br>5.3 以格式化纯文本形式下载网页<br>5.4 cURL 入门<br>5.4.1 预备知识<br>5.4.2 实战演练<br>5.4.3 补充内容<br>5.4.4 参考<br>5.5 从命令行访问 Gmail<br>5.5.1 实战演练<br>5.5.2 工作原理<br>5.5.3 参考<br>5.6 解析网站数据<br>5.6.1 实战演练<br>5.6.2 工作原理<br>5.6.3 参考<br>5.7 制作图片抓取器及下载工具<br>5.7.1 实战演练<br>5.7.2 工作原理<br>5.7.3 参考<br>5.8 网页相册生成器<br>5.8.1 预备知识<br>5.8.2 实战演练<br>5.8.3 工作原理<br>5.8.4 参考<br>5.9 Twitter 命令行客户端<br>5.9.1 预备知识<br>5.9.2 实战演练<br>5.9.3 工作原理<br>5.9.4 参考<br>5.10 基于 Web 后端的定义查询工具<br>5.10.1 预备知识<br>5.10.2 实战演练<br>5.10.3 工作原理<br>5.10.4 参考<br>5.11 查找网站中的无效链接<br>5.11.1 预备知识<br>5.11.2 实战演练<br>5.11.3 工作原理<br>5.11.4 参考<br>5.12 跟踪网站变更<br>5.12.1 预备知识<br>5.12.2 实战演练<br>5.12.3 工作原理<br>5.12.4 参考<br>5.13 以 POST 方式发送网页并读取响应<br>5.13.1 预备知识<br>5.13.2 实战演练<br>5.13.3 补充内容<br>5.13.4 参考</p><h2 id="第-6-章-B-计划"><a href="#第-6-章-B-计划" class="headerlink" title="第 6 章 B 计划"></a>第 6 章 B 计划</h2><p>6.1 简介<br>6.2 用 tar 归档<br>6.2.1 预备知识<br>6.2.2 实战演练<br>6.2.3 补充知识<br>6.2.4 参考<br>6.3 用 cpio 归档<br>6.4 用 gunzip 或 gzip 压缩<br>6.4.1 实战演练<br>6.4.2 补充内容<br>6.4.3 参考<br>6.5 用 bunzip 或 bzip 压缩<br>6.5.1 实战演练<br>6.5.2 补充内容<br>6.5.3 参考<br>6.6 用 lzma 压缩<br>6.6.1 实战演练<br>6.6.2 补充内容<br>6.6.3 参考<br>6.7 用 zip 归档和压缩<br>6.8 超高压缩率的 squashfs 文件系统<br>6.8.1 预备知识<br>6.8.2 实战演练<br>6.8.3 补充内容<br>6.9 加密工具与散列<br>6.10 用 raync 备份系统快照<br>6.10.1 实战演练<br>6.10.2 补充内容<br>6.11 用 Git 备份版本控制<br>6.11.1 预备知识<br>6.11.2 实战演练<br>6.12 用 dd 克隆磁盘<br>6.12.1 预备知识<br>6.12.2 实战演练<br>6.12.3 补充内容<br>6.12.4 参考</p><h2 id="第-7-章-无网不利"><a href="#第-7-章-无网不利" class="headerlink" title="第 7 章 无网不利"></a>第 7 章 无网不利</h2><p>7.1 简介<br>7.2 联网知识入门<br>7.2.1 新手上路<br>7.2.2 实战演练<br>7.2.3 补充内容<br>7.2.4 参考<br>7.3 使用 ping<br>7.3.1 实战演练<br>7.3.2 补充内容<br>7.4 列出网络上所有的活动主机<br>7.4.1 新手上路<br>7.4.2 实战演练<br>7.4.3 工作原理<br>7.4.4 补充内容<br>7.4.5 参考<br>7.5 传输文件<br>7.5.1 新手上路<br>7.5.2 实战演练<br>7.5.3 补充内容<br>7.5.4 参考<br>7.6 用脚本设置以太网与无线 LAN<br>7.6.1 新手上路<br>7.6.2 实战演练<br>7.6.3 工作原理<br>7.6.4 参考<br>7.7 用 SSH 实现无密码自动登录<br>7.8 用 SSH 在远程主机上运行命令<br>7.8.1 新手上路<br>7.8.2 实战演练<br>7.8.3 补充内容<br>7.8.4 参考<br>7.9 在本地挂载点上挂载远程驱动器<br>7.9.1 新手上路<br>7.9.2 实战演练<br>7.9.3 参考<br>7.10 在网络上发送多播式窗口消息<br>7.10.1 新手上路<br>7.10.2 实战演练<br>7.10.3 工作原理<br>7.10.4 参考<br>7.11 网络流量与端口分析<br>7.11.1 新手上路<br>7.11.2 实战演练<br>7.11.3 补充内容</p><h2 id="第-8-章-当个好管家"><a href="#第-8-章-当个好管家" class="headerlink" title="第 8 章 当个好管家"></a>第 8 章 当个好管家</h2><p>8.1 简介<br>8.2 统计磁盘的使用情况<br>8.2.1 新手上路<br>8.2.2 实战演练<br>8.2.3 补充内容<br>8.3 计算命令执行时间<br>8.4 与当前登录用户、启动日志及启动故障的相关信息<br>8.4.1 新手上路<br>8.4.2 实战演练<br>8.5 打印出 10 条最常使用的命令<br>8.5.1 新手上路<br>8.5.2 实战演练<br>8.5.3 工作原理<br>8.6 列出 1 小时内占用 CPU 最多的 10 个进程<br>8.6.1 新手上路<br>8.6.2 实战演练<br>8.6.3 工作原理<br>8.6.4 参考<br>8.7 用 watch 监视命令输出<br>8.7.1 实战演练<br>8.7.2 补充内容<br>8.8 对文件及目录访问进行记录<br>8.8.1 新手上路<br>8.8.2 实战演练<br>8.8.3 工作原理<br>8.9 用 logrotate 管理日志文件<br>8.9.1 新手上路<br>8.9.2 实战演练<br>8.10 用 syslog 记录日志<br>8.10.1 新手上路<br>8.10.2 实战演练<br>8.10.3 参考<br>8.11 通过监视用户登录找出入侵者<br>8.11.1 新手上路<br>8.11.2 实战演练<br>8.11.3 工作原理<br>8.12 监视远程磁盘的健康情况<br>8.12.1 新手上路<br>8.12.2 实战演练<br>8.12.3 工作原理<br>8.12.4 参考<br>8.13 找出系统中用户的活动时段<br>8.13.1 新手上路<br>8.13.2 实战演练<br>8.13.3 工作原理</p><h2 id="第-9-章-管理重任"><a href="#第-9-章-管理重任" class="headerlink" title="第 9 章 管理重任"></a>第 9 章 管理重任</h2><p>9.1 简介<br>9.2 收集进程信息<br>9.2.1 新手上路<br>9.2.2 实战演练<br>9.2.3 补充内容<br>9.2.4 参考<br>9.3 杀死进程以及发送或响应信号<br>9.3.1 新手上路<br>9.3.2 实战演练<br>9.3.3 补充内容<br>9.4 which、whereis、file、whatis 与平均负载<br>9.5 向用户终端发送消息<br>9.5.1 新手上路<br>9.5.2 实战演练<br>9.5.3 工作原理<br>9.6 收集系统信息<br>9.7 用 /proc 收集信息<br>9.8 用 cron 进行调度<br>9.8.1 新手上路<br>9.8.2 实战演练<br>9.8.3 补充内容<br>9.9 从 Bash 中读写 MySQL 数据库<br>9.9.1 新手上路<br>9.9.2 实战演练<br>9.9.3 工作原理<br>9.10 用户管理脚本<br>9.10.1 实战演练<br>9.10.2 工作原理<br>9.11 图像文件的批量缩放及格式转换<br>9.11.1 新手上路<br>9.11.2 实战演练<br>9.11.3 工作原理<br>9.11.4 参考</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/12/02/dv682s35TMNV7Qz.jpg&quot; alt=&quot;Linux Shell脚本攻略&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;豆瓣评分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;8.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《Linux Shell 脚本攻略》通过细致剖析实际应用中的 110 多个案例，使许多看似复杂的 Linux shell 脚本任务迎刃而解。《Linux Shell 脚本攻略》会帮助读者利用少量命令的组合完成诸如文本处理、文件管理、备份等复杂的数据管理工作。它将告诉你如何利用 shell 命令快速开发常规任务，综合应用 grep、find、sed 和 awk 等常用命令，凭借短短几个命令行从 Web 挖掘数据的 shell 脚本，利用归档工具运行并自动化各种任务，诸如自动备份和存储；帮助你理解文件系统、文件类型以及文件管理；用 shell 创建以及维护文件或目录归档、压缩格式和加密技术；通过 srlell 脚本设置以太网和无线 LAN；使用登录技术监控网络上的各种动态。&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://zronghui.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>极客时间-MYSQL45讲-笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-MYSQL45%E8%AE%B2-%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-MYSQL45%E8%AE%B2-%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-11-29T07:52:12.000Z</published>
    <updated>2020-12-02T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="困惑-总结"><a href="#困惑-总结" class="headerlink" title="困惑|总结"></a>困惑|总结</h2><p>两阶段锁 两阶段提交</p><p>间隙锁的规则</p><h3 id="不建议使用长事务的几个原因"><a href="#不建议使用长事务的几个原因" class="headerlink" title="不建议使用长事务的几个原因"></a>不建议使用长事务的几个原因</h3><ul><li>用不到的 undo log 在事务结束才会删除，长事务会导致占用存储空间</li><li>事务的 MDL 锁在事务结束才会释放，长事务可能导致 MDL 写锁阻塞，写锁阻塞，其他读锁也被阻塞，影响系统正常使用</li></ul><p>幻读怎么导致的</p><h1 id="基础篇-8-讲"><a href="#基础篇-8-讲" class="headerlink" title="基础篇 (8 讲)"></a>基础篇 (8 讲)</h1><h2 id="01-基础架构：一条-SQL-查询语句是如何执行的？"><a href="#01-基础架构：一条-SQL-查询语句是如何执行的？" class="headerlink" title="01 | 基础架构：一条 SQL 查询语句是如何执行的？"></a>01 | 基础架构：一条 SQL 查询语句是如何执行的？</h2><p><img src="https://i.loli.net/2020/11/29/s1eAQVUMnLorXzh.jpg" alt="800B45CC-7F33-47BE-ABC6-DFDA23871E3E"></p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是 尽量使用长连接。</p><p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候 才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现 象看就是 MySQL 异常重启了。</p><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</p><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此 很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库 来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。 比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没 有这个功能了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>分析器先会做“<strong>词法分析</strong>”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。 MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识 别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>做完了这些识别以后，就要做“<strong>语法分析</strong>”。根据词法分析的结果，语法分析器会根据语法规 则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join） 的时候，决定各个表的连接顺序。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>先判断一下你对这个表 T 有没有执行查询的权限</p><p>如果有权限，就打开表继续执行。打开表的时候，优化器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><h2 id="02-日志系统：一条-SQL-更新语句是如何执行的？"><a href="#02-日志系统：一条-SQL-更新语句是如何执行的？" class="headerlink" title="02 | 日志系统：一条 SQL 更新语句是如何执行的？"></a>02 | 日志系统：一条 SQL 更新语句是如何执行的？</h2><p>更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主 角：redo log（重做日志）和 binlog（归档日志）</p><p>如果接触 MySQL，那这两个词肯定是绕 不过的</p><h3 id="重要的日志模块：redo-log"><a href="#重要的日志模块：redo-log" class="headerlink" title="重要的日志模块：redo log"></a>重要的日志模块：redo log</h3><p>如果有人要赊账或者还账的话，掌柜一般有两种做法： 一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉； 另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。 在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。</p><p> 同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到 对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高</p><p><strong>WAL</strong> 的全称是 Write-Ahead Logging</p><p>粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL</p><p>它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p><p>InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大 小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开 头循环写</p><p>wirte pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。</p><p>checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失， 这个能力称为crash-safe。</p><h3 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h3><p>redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p><strong>为什么会有两份日志呢</strong></p><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系 统——也就是 redo log 来实现 crash-safe 能力。</p><p>这两种日志有以下三点不同。</p><ol><li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可 以使用。</p></li><li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志， 记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p></li><li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></li></ol><p><strong>update 语句的执行流程图</strong>，图中浅色框表示是在 InnoDB 内部执行的，深色 框表示是在执行器中执行的</p><img src="https://i.loli.net/2020/11/29/bwM5zlRdmDyhNxF.jpg" alt="FD3928E3-1993-4F7A-99F1-631ADDE44D06" style="zoom:50%;" /><p>将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”<strong>两阶段提交</strong>“。</p><p>如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库 的状态不一致。</p><p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。 </p><p>redo log 用于保证 crash-safe 能力。<strong>innodb_flush_log_at_trx_commit</strong> 这个参数设置成 1 的 时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以 保证 MySQL 异常重启之后数据不丢失。 </p><p><strong>sync_binlog</strong> 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我 也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。 我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据 逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。</p><h2 id="03-事务隔离：为什么你改了我还看不见？"><a href="#03-事务隔离：为什么你改了我还看不见？" class="headerlink" title="03 | 事务隔离：为什么你改了我还看不见？"></a>03 | 事务隔离：为什么你改了我还看不见？</h2><h3 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h3><p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）</p><p>当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non reapeatable read）、幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><p>隔离得越严实，效率就会越低。因此很多时候，我们都要 在二者之间寻找一个平衡点</p><p>SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化 （serializable ）。</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现 读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、V2、 V3 的返回值分别是什么。</p><img src="https://i.loli.net/2020/11/29/rDAXUHhFvsJfSaZ.jpg" alt="919DEDDD-C592-4188-80C3-419FBD380AE9" style="zoom: 33%;" /><ul><li>若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果 已经被 A 看到了。因此，V2、V3 也都是 2。</li><li>若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看 到。所以， V3 的值也是 2。</li><li>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这 个要求：事务在执行期间看到的数据前后必须是一致的。</li><li>若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</li></ul><p><strong>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准</strong>。在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在“读提交”隔 离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；而“串行化”隔离级别下直接用加锁 的方式来避免并行访问。</p><p>那什么时候需要“可重复读”的场景呢</p><p>假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。 你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。</p><p>这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。</p><h3 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h3><p>这里我们展开说明“可重复 读”。</p><p><strong>undo log:  回滚日志</strong></p><p>记录上的最新值，通过回滚操作，都可以得到前一个状态的值。</p><p>MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作</p><p><img src="https://i.loli.net/2020/11/29/lEON4y6cFvDeW3a.jpg" alt="148DE056-1DE8-4E14-BEAE-3B3CC76A86EE"></p><p>当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中 看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存 在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须 将当前值依次执行图中所有的回滚操作得到。</p><p>当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p><p>讨论一下为什么<strong>建议你尽量不要使用长事务</strong></p><p>长事务意味着系统里面会存在很老的事务视图</p><p>显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。</p><p>set autocommit=0 会将这个线程的自动提交关掉 这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。 有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致接下 来的查询都在事务中，如果是长连接，就导致了意外的长事务。</p><p><strong>建议你总是使用 set autocommit=1 通过显式语句的方式来启动事务。</strong></p><p>如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次 执行 begin 语句的开销。</p><p>可以在 information_schema 库的 innodb_trx 这个表中查询长事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>这篇文章里面，我介绍了 MySQL 的事务隔离级别的现象和实现，根据实现原理分析了长事务存在的风险，以及如何用正确的方式避免长事务。希望我举的例子能够帮助你理解事务，并更好地使用 MySQL 的事务特性。</p><h2 id="04-深入浅出索引（上）"><a href="#04-深入浅出索引（上）" class="headerlink" title="04 | 深入浅出索引（上）"></a>04 | 深入浅出索引（上）</h2><p>索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。</p><h3 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h3><p>介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。</p><p>因为不是有序的，所以哈希索引做区间查询的速度是很慢 的。 哈希表这种结构适用于只有等值查询的场景</p><p>有序数组在等值查询和范围查询场景中的性能就都非常优秀但是，在需要更新数据的时候就麻烦 了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。有序数组索引只适用于静态存储引擎</p><p>二叉搜索树 更新的时间复杂度也是 O(log(N)) 实际上大多数的数据库存储却并不使用二叉树。其原因 是，索引不止存在内存中，还要写到磁盘上。 为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该 使用二叉树，而是要使用“N 叉”树。N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中 了。</p><p> 数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我 们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</p><p>在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索 引的工作方式并不一样  即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不 同。</p><h3 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h3><p><img src="https://i.loli.net/2020/11/29/6YWjsZ4hfFV9OGz.jpg" alt="E9AA314C-ECAB-4588-BCD6-46046C116878"></p><p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。</p><p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p><p>在 InnoDB 里，非主键索引也被称为二级索引 （secondary index）。</p><p>非主键索引的叶子节点内容是主键的值</p><p><strong>基于主键索引和普通索引的查询有什么区别？</strong></p><p>主键查询方式，则只需要搜索 ID 这棵 B+ 树；</p><p>普通索引查询方式，则需要先搜索 k 索引树， 得到 ID 的值为 500，再到 ID 索引树搜索一次</p><p>这个过程称为回表。</p><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，这时候需要申请一个新 的数据页，然后挪动部分数据过去.这个过程称为页分裂</p><p>当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并</p><p>自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条 新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂</p><p>有业务逻辑的字段做主键，则往往不容易保证有序插入</p><p>主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小</p><p><strong>从性能和存储空间方面考量，自增主键往往是更合理的选择</strong></p><p>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样 的： 1. 只有一个索引； 2. 该索引必须是唯一索引。这就是典型的 KV 场景。</p><p>这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主 键，可以避免每次查询需要搜索两棵树。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>今天，我跟你分析了数据库引擎可用的数据结构，介绍了 InnoDB 采用的 B+ 树结构，以及为 什么 InnoDB 要这么选择。B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次 数。 由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用 的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。</p><h2 id="05-深入浅出索引（下）"><a href="#05-深入浅出索引（下）" class="headerlink" title="05 | 深入浅出索引（下）"></a>05 | 深入浅出索引（下）</h2><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，<strong>在这个查 询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引</strong>。</p><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能 优化手段。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>用（name，age）这个联合索引来分析</p><p>如果你要查的是所有名字第一个字是“张”的人，你也能够用上这个索引</p><p>不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索</p><p><strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</strong></p><p>在建立联合索引的时候，如何安排索引内的字段顺序。</p><p>这里我们的评估标准是，索引的复用能力。第一原则是，如果通过调整顺序， 可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tuser where name like &#39;张 %&#39; and age&#x3D;10 and ismale&#x3D;1;</span><br></pre></td></tr></table></figure><p><strong>MySQL 5.6 引入的索引下推</strong>优化（index condition pushdown)， 可以<strong>在索引遍历过程 中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数</strong>。</p><p><img src="https://i.loli.net/2020/11/29/XpBhyjQVvG73MWE.jpg" alt="图 3 无索引下推执行流程"></p><p><img src="https://i.loli.net/2020/11/29/7Q9HdVTcmq8eWzP.jpg" alt="图 4 索引下推执行流程"></p><p>在图 3 和 4 这两个图里面，每一个虚线箭头表示回表一次。</p><p>图 3 中，在 (name,age) 索引里面我特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次。</p><p>图 4 跟图 3 的区别是，InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等 于 10 的记录，直接判断并跳过。在我们的这个例子中，只需要对 ID4、ID5 这两条记录回表取 数据判断，就只需要回表 2 次。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>今天这篇文章，我和你继续讨论了数据库索引的概念，包括了<strong>覆盖索引、前缀索引、索引下推</strong>。 你可以看到，在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我 们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标。</p><h2 id="06-全局锁和表锁-：给表加个字段怎么有这么多阻碍？"><a href="#06-全局锁和表锁-：给表加个字段怎么有这么多阻碍？" class="headerlink" title="06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？"></a>06 | 全局锁和表锁 ：给表加个字段怎么有这么多阻碍？</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><strong>根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类。</strong></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>全局锁就是对整个数据库实例加锁</p><p>MySQL 提供了一个加全局读锁的方法，命令是 <strong>Flush tables with read lock (FTWRL)</strong></p><p>之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包 括建表、修改表结构等）和更新类事务的提交语句。</p><p><strong>全局锁的典型使用场景是，做全库逻辑备份</strong>。</p><p>让整库都只读，听上去就很危险： 如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆； 如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。</p><p>不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致 的。</p><p>官方自带的逻辑备份工具是 mysqldump。<strong>当 mysqldump 使用参数–single-transaction 的时 候，导数据之前就会启动一个事务，来确保拿到一致性视图</strong>。而由于 MVCC 的支持，这个过程 中数据是可以正常更新的。</p><p><strong>对于 MyISAM 这种不支持事务的引擎 就需要使用 FTWRL 命令</strong></p><p>single-transaction 方法只适用于所有的表使用事务引擎的库。如果有的表使用了不支 持事务的引擎，那么备份就只能通过 FTWRL 方法。这往往是 DBA 要求业务开发人员使用 InnoDB 替代 MyISAM 的原因之一。</p><p><strong>为什么不使用 set global readonly=true 的方式呢</strong></p><p>一是，在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是 备库。</p><p>二是，在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那 么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致 整个库长时间处于不可写状态，风险较高。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p><strong>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</strong></p><p><strong>表锁的语法是 lock tables … read/write</strong></p><p>与 FTWRL 类似，可以用 unlock tables 主动释放 锁，也可以在客户端断开的时候自动释放。</p><p>需要注意，lock tables 语法除了会限制别的线程的 读写外，也限定了本线程接下来的操作对象。</p><p>举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、 写 t2 的操作。连读 t2 都不允许，自然也不能访问其他表。</p><p>对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p><strong>另一类表级的锁是 MDL（metadata lock)</strong></p><p><strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上</strong>。MDL 的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个 表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果 跟表结构对不上，肯定是不行的。</p><p><strong>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</strong></p><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</p><p>读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p><p>事务中的 MDL 锁，在语句执行开始时申请，但是语句结束后并不会马上释放，而会等到整个事务提交后再释放。</p><p><strong>如何安全地给小表加字段</strong></p><p><strong>首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁</strong></p><p>如果你要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p><p><strong>比较理想的机制是，在 alter table 语句 里面设定等待时间</strong></p><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>今天，我跟你介绍了 MySQL 的全局锁和表级锁。 <strong>全局锁主要用在逻辑备份过程中</strong>。对于全部是 InnoDB 引擎的库，我建议你选择使用–singletransaction 参数，对应用会更友好。 <strong>表锁一般是在数据库引擎不支持行锁的时候才会被用到</strong>的。如果你发现你的<strong>应用程序里有 lock tables 这样的语句</strong>，你需要追查一下，比较可能的情况是：</p><p>要么是你的系统现在还在用 <strong>MyISAM 这类不支持事务的引擎</strong>，那要安排升级换引擎；</p><p>要么是你的引擎升级了，但是<strong>代码还没升级</strong>。我见过这样的情况，最后业务开发就是把 lock</p><p>tables 和 unlock tables 改成 begin 和 commit，问题就解决了。 MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查询和 更新。</p><h2 id="07-行锁功过：怎么减少行锁对性能的影响？"><a href="#07-行锁功过：怎么减少行锁对性能的影响？" class="headerlink" title="07 | 行锁功过：怎么减少行锁对性能的影响？"></a>07 | 行锁功过：怎么减少行锁对性能的影响？</h2><h3 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h3><p><strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释 放，而是要等到事务结束时才释放。这个就是两阶段锁协议</strong></p><img src="https://i.loli.net/2020/11/30/gB32PHGSvKTZQr4.png" alt="image-20201130133057077" style="zoom: 50%;" /><p>如果你的事务中需要锁多个行，要把 最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</p><h3 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a>死锁和死锁检测</h3><img src="https://i.loli.net/2020/11/30/QV7j4kgs1SYiyWz.png" alt="image-20201130133128986" style="zoom:50%;" /><p>这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态</p><p>当出现死锁以后，有<strong>两种策略</strong>：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事 务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><p>在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s。 对于在线服务来说，这个等待时间往往是无法接受的。但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候， 确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话， 会出现很多误伤。</p><p>所以，正常情况下我们还是要采用第二种策略，即：主动死锁检测</p><p>主动死锁检测在发生死锁的时候，是能够快 速发现并进行处理的，但是它也是有额外负担的。</p><p>innodb_deadlock_detect 的默认值本身就是 on</p><p><strong>每个新来的被堵住的线程</strong>，都要判断会不会由于自己的加入导致了死锁，这是一个<strong>时间复杂度是 O(n) 的操作</strong>。假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个 量级的。</p><p>虽然最终检测的结果是没有死锁，但是这期间要消耗大量的 CPU 资源。因此，你就会看到 CPU 利用率很高，但是每秒却执行不了几个事务</p><p><strong>怎么解决由这种热点行更新导致的性能问题呢</strong></p><ul><li>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关 掉。</li><li>另一个思路是控制并发度</li></ul><p>一个直接的想法就是，在客户端做并发控制。但是，你会很快发现这个方法不太可行，因为客户端很多</p><p>因此，<strong>这个并发控制要做在数据库服务端</strong>。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更 新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。</p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>今天，我和你介绍了 MySQL 的行锁，涉及了两阶段锁协议、死锁和死锁检测这两大部分内容。</p><p>其中，我以两阶段协议为起点，和你一起讨论了在开发的时候如何安排正确的事务语句。这里的 原则 / 我给你的建议是：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并 发度的锁的申请时机尽量往后放。</p><p>但是，调整语句顺序并不能完全避免死锁。所以我们引入了死锁和死锁检测的概念，以及提供了 三个方案，来减少死锁对数据库的影响。减少死锁的主要方向，就是控制访问相同资源的并发事 务量。</p><h2 id="08-事务到底是隔离的还是不隔离的？"><a href="#08-事务到底是隔离的还是不隔离的？" class="headerlink" title="08 | 事务到底是隔离的还是不隔离的？"></a>08 | 事务到底是隔离的还是不隔离的？</h2><p>考虑这道题：</p><p>insert into t(id, k) values(1,1),(2,2);</p><p><img src="https://i.loli.net/2020/11/30/QRDNIPyAvE2BrZ4.png" alt="image-20201130144011712"></p><p>语句 Q1 返回的 k 的值是 3，而语句 Q2 返回的 k 的值是 1</p><p>在 MySQL 里，有两个“视图”的概念：</p><ul><li>一个是 view。它是一个用查询语句定义的虚拟表</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于 支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复度）隔离级别的 实现。</li></ul><p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。</p><p>把 transaction id 赋值给这个数据版本的事务 ID ：row trx_id</p><p>语句更新会生成 undo log（回滚日志）</p><p><img src="https://i.loli.net/2020/11/30/Ol21Hq74h9ZDmct.png" alt="image-20201130144506859"></p><p>V1、V2、V3 并不是物理上真实存在 的，而是每次需要的时候根据当前版本和 undo log 计算出来的</p><p>三个虚线箭头，就是 undo log</p><p>InnoDB 代码实现上，一个事务只需要在启动的时候，找到所有已经提交的事务 ID 的最 大值，记为 up_limit_id。然后声明说，“如果一个数据版本的 row trx_id 大于 up_limit_id，我就不认，我必须要找到它的上一个版本”</p><p>这里，我们不妨做如下假设： 1. 事务 A 开始前，系统里面已经提交的事务最大 ID 是 99； 2. 事务 A、B、C 的版本号分别是 100、101、102，且当前系统里没有别的事务； 3. 三个事务开始前，(1,1）这一行数据的 row trx_id 是 90。 这样，事务 A、B、C 的 up_limit_id 的值就都是 99。</p><p>(1,1) 这个历史版本，什么时候可以被删除掉呢？在事务 A 提交后,（1,1) 这个版本就可以被删掉了</p><h3 id="更新逻辑"><a href="#更新逻辑" class="headerlink" title="更新逻辑"></a>更新逻辑</h3><p>事务 B 前面的查询语句，拿到的 k 也是 1。但是，当它要去更新数据的时候，不能再在历史版 本上更新了，否则事务 C 的更新就丢失了。</p><p><strong>更新数据都是先读后写的，而这个读，只能读当前的值，称为“当前读（current read）”。</strong></p><p>当前读 之后，事务的 up_limit_id 就发生了变化</p><p>除了 update 语句外，select 语句如果加锁，也是当前读。</p><p>加上 lock in share mode 或 for update</p><p>下面这两个 select 语句，分别加了读锁（S 锁，共享锁）和 写锁（X 锁，排他锁）。</p><p>select k from t where id=1 lock in share mode;</p><p>select k from t where id=1 for update;</p><p>可重复读的核心就是一致性读（consistent read）</p><p>而事务更新数据的时候，只能用当前读。 如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。</p><p>读提交和可重复读最主要的区别是</p><ul><li>在可重复读隔离级别下，只需要在事务开始的时候找到那个 up_limit_id，之后事务里的其他查询都共用这个 up_limit_id；（除非用了 当前读）</li><li>在读提交隔离级别下，每一个语句执行前都会重新算一次 up_limit_id 的值。</li><li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据； 对于读提交，查询只承认在语句启动前就已经提交完成的数据；</li></ul><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>InnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的 up_limit_id。普通查询语句是一致性读，一致性读会根据 row trx_id 和 up_limit_id 的大小决 定数据版本的可见性。</p><p>对于可重复读，查询只承认在事务启动前就已经提交完成的数据； 对于读提交，查询只承认在语句启动前就已经提交完成的数据；</p><p>而当前读，总是读取已经提交完成的最新版本。</p><h1 id="实践篇-37-讲"><a href="#实践篇-37-讲" class="headerlink" title="实践篇 (37 讲)"></a>实践篇 (37 讲)</h1><h2 id="09-普通索引和唯一索引，应该怎么选择？"><a href="#09-普通索引和唯一索引，应该怎么选择？" class="headerlink" title="09 | 普通索引和唯一索引，应该怎么选择？"></a>09 | 普通索引和唯一索引，应该怎么选择？</h2><p>从这两种索引对查询语句和更新语句的性能影响来进行分析</p><h3 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h3><ul><li><p>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到 碰到第一个不满足 k=5 条件的记录。</p></li><li><p>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</p><p>那么，这个不同带来的性能差距会有多少呢？答案是，微乎其微。</p></li></ul><p>InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候， 并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中， 每个数据页的大小默认是 16KB。</p><p>当找到 k=5 的记录的时候，它所在的数据页就都在内存里 了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一 次指针寻找和一次计算。</p><h3 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h3><p>当需要更新一个数据页时，如果数据页在内存中就直接更新；而如果这个数据页还没有在内存中 的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中。这样就不需要从磁盘中读入这个数据页了</p><p>在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作</p><p>通过这种方式就能保证这个数据逻 辑的正确性。</p><p>​    </p><p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 <strong>purge</strong></p><p>除了访问这个 数据页会触发 purge 外，系统有后台线程会定期 purge。在数据库正常关闭（shutdown）的 过程中，也会执行 purge 操作。</p><p>purge 的执行流程： </p><ol><li>从磁盘读入数据页到内存（老版本的数据页）； </li><li>从 change buffer 里找出这个数据页的 change buffer 记录 (可能有多个），依次应用， 得到新版数据页； </li><li>写 redo log。这个 redo log 包含了数据的变更和 change buffer 的变更。</li></ol><p>如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显 的提升</p><p>什么条件下可以使用 change buffer 呢</p><p><strong>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束</strong>。比如，要插入 (4,400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而<strong>这必须要将数据页读入内存才能判断</strong>。如果都已经读入到内存了，那直接更新内存会更快，就<strong>没必要使用 change buffer</strong> 了。</p><p><strong>因此，唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用</strong></p><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p>第一种情况是，这个记录要更新的目标页在内存中。这不是我们关注的重点</p><p>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下： 对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束； 对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</p><p>将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>change buffer 的使用场景通过上面的分析，你已经清楚了使用 change buffer 对更新过程的加速作用，也清楚了 change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。</p><p>普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</p><p>对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询， 那么即使满足了条件，将更新先记录在 change buffer，但之后由于马上要访问这个数据页，会立即触发 purge 过程。这样随机 访问 IO 的次数不会减少，反而增加了 change buffer 的维护代价</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>两类索引在查询能力上 是没差别的，主要考虑的是对更新性能的影响</p><p><strong>建议你尽量选择普通索引</strong></p><p>特别地，在使用机械硬盘时，change buffer 这个机制的收效是非常显著</p><p><strong>个人理解 change buffer 和 redo log 的区别</strong></p><p>change buffer: 在 MySQL 用到的内存中，有这么一块区域，叫 change buffer, 暂存对内存中还没有包含的数据的修改，以后读取的时候从磁盘中读取到内存，再应用change buffer<br>而 redo log 将对数据库的操作暂存，到一定程度才对数据库进行真正的更新，所以避免频繁的随机写磁盘</p><p>如原文所说：如果要简单地对比这两个机制在提升更新性能上的收益的话，redo log 主要节省的是随 机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消 耗。</p><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>今天，我从普通索引和唯一索引的选择开始，和你分享了数据的查询和更新过程，然后说明了 change buffer 的机制以及应用场景，最后讲到了索引选择的实践。 由于唯一索引用不上 change buffer 的优化机制，因此如果业务可以接受，从性能角度出发我 建议你优先考虑非唯一索引。</p><h2 id="10-MySQL-为什么有时候会选错索引？"><a href="#10-MySQL-为什么有时候会选错索引？" class="headerlink" title="10 | MySQL 为什么有时候会选错索引？"></a>10 | MySQL 为什么有时候会选错索引？</h2><h3 id="优化器的逻辑"><a href="#优化器的逻辑" class="headerlink" title="优化器的逻辑"></a>优化器的逻辑</h3><p><strong>选择索引是优化器的工作</strong></p><p>优化器会结合扫描行数、是否使用临时表、是否排序等因素进行综合判断。</p><h3 id="扫描行数是怎么判断的？"><a href="#扫描行数是怎么判断的？" class="headerlink" title="扫描行数是怎么判断的？"></a>扫描行数是怎么判断的？</h3><p>MySQL 在真正开始执行语句之前，并不能精确地知道满足这个条件的记录有多少条，而只能根据统计信息来估算记录数。</p><p>一个索引上不同的值的个数，我们称之为“<strong>基数</strong>”（cardinality）。也就是说，这个基数越大，索引的区分度越好</p><p>可以使用 show index 方法，看到一个索引的基数</p><h3 id="MySQL-是怎样得到索引的基数的呢？"><a href="#MySQL-是怎样得到索引的基数的呢？" class="headerlink" title="MySQL 是怎样得到索引的基数的呢？"></a>MySQL 是怎样得到索引的基数的呢？</h3><p>为什么要采样统计呢？因为把整张表取出来一行行统计，虽然可以得到精确的结果，但是代价太 高了，所以只能选择“采样统计”。</p><p> InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</p><p>当变更的数据行数超过 1/M 的时候，会自动触发重新做一次索引统计。</p><p>rows 这个字段表示的是预计扫描行数</p><p>使用普通索引需要把回表的代价算进去</p><p>analyze table t 命令，可以用来重新统计索引信息。</p><h3 id="索引选择异常和处理"><a href="#索引选择异常和处理" class="headerlink" title="索引选择异常和处理"></a>索引选择异常和处理</h3><p>一种方法是，像我们第一个例子一样，采用 force index 强行选择一个索引。如果 force index 指定的索引在候选索引列表中，就直接选择这个索引，不再评估 其他索引的执行代价。</p><p>第二种方法就是，我们可以考虑修改语 句，引导 MySQL 使用我们期望的索引，在这个例子里，显然把“order by b limit 1” 改成 “order by b,a limit 1” ，语义的逻辑是相同的。这种修改并不是通用的优化手段，不具备通用性</p><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><p>今天我们一起聊了聊索引统计的更新机制，并提到了优化器存在选错索引的可能性。 对于由于索引统计信息不准确导致的问题，你可以用 analyze table 来解决。 而对于其他优化器误判的情况，你可以在应用端用 force index 来强行指定索引，也可以通过修 改语句来引导优化器，还可以通过增加或者删除索引来绕过这个问题。</p><h2 id="11-怎么给字符串字段加索引？"><a href="#11-怎么给字符串字段加索引？" class="headerlink" title="11 | 怎么给字符串字段加索引？"></a>11 | 怎么给字符串字段加索引？</h2><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>使用<strong>前缀索引</strong>，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成 本。</p><p>当要给字符串创建前缀索引时，有什么方法能够确定我应该使用多长的前 缀呢？</p><p>我们在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的 键值越少。</p><p>因此，我们可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>首先，你可以使用下面这个语句，算出这个列上有多少个不同的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) as L from SUser;</span><br></pre></td></tr></table></figure><p>然后，依次选取不同长度的前缀来看这个值，比如我们要看一下 4~7 个字节的前缀索引，可以 用这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">count(distinct left(email,4)）as L4, </span><br><span class="line">  count(distinct left(email,5)）as L5, </span><br><span class="line">  count(distinct left(email,6)）as L6,</span><br><span class="line">  count(distinct left(email,7)）as L7, </span><br><span class="line">from SUser;</span><br></pre></td></tr></table></figure><p>当然，使用前缀索引很可能会损失区分度，所以你需要预先设定一个可以接受的损失比例，比如 5%。然后，在返回的 L4~L7 中，找出不小于 L * 95% 的值，假设这里 L6、L7 都满足，你就可 以选择前缀长度为 6。</p><p><strong>前缀索引对覆盖索引的影响</strong></p><p>使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><p>比如，我们国家的身份证号</p><p><strong>第一种方式是使用倒序存储</strong></p><p>如果你存储身份证号的时候把它倒过来存，每次查询的时候，你可 以这么写：</p><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p><p><strong>第二种方式是使用 hash 字段</strong></p><p>你可以在表上再创建一个整数字段，来保存身份证的校验码，同 时在这个字段上创建索引。</p><p>alter table t add id_card_crc int unsigned, add index(id_card_crc);</p><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段</p><p>由于校验 码可能存在冲突，也就是说两个不同的身份证号通过 crc32() 函数得到的结果可能是相同的，所 以你的查询语句 where 部分要判断 id_card 的值是否精确相同。</p><h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><p>在今天这篇文章中，我跟你聊了聊字符串字段创建索引的场景。我们来回顾一下，你可以使用的 方式有：</p><ol><li>直接创建完整索引，这样可能比较占用空间；</li><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。</li></ol><p>在实际应用中，你要根据业务字段的特点选择使用哪种方式。</p><h2 id="12-为什么我的-MySQL-会-“抖”-一下"><a href="#12-为什么我的-MySQL-会-“抖”-一下" class="headerlink" title="12 | 为什么我的 MySQL 会 “抖” 一下"></a>12 | 为什么我的 MySQL 会 “抖” 一下</h2><p>InnoDB 在处理更新语句的时候，只做了写日志这一个磁盘操作。这个日志叫作 redo log（重做日志）。InnoDB 在处理更新语句的时候，只做了写日志这一个磁盘操作，在更新内存写完 redo log 后，就返回给客户端，本次更新成功。</p><p>掌柜总要找时间把账本更新一下，这对应的就是<strong>把内存里的数据写入磁盘的过程，术语就是 flush</strong>。</p><p>在这个 flush 操作执行之前，孔乙己的赊账总额，其实跟掌柜手中账本里面的记录是不 一致的。因为孔乙己今天的赊账金额还只在粉板上，而账本里的记录是老的，还没把今天的赊账 算进去。</p><p><strong>当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到 磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。</strong></p><p><strong>不论是脏页还是干净页，都在内存中。</strong>在这个例子里，内存对应的就是掌柜的记忆。</p><p>MySQL 偶尔“抖”一下的那个瞬间，可能就是在刷脏页（flush）。</p><h3 id="什么情况会引发数据库的-flush-过程"><a href="#什么情况会引发数据库的-flush-过程" class="headerlink" title="什么情况会引发数据库的 flush 过程"></a><strong>什么情况会引发数据库的 flush 过程</strong></h3><ul><li>第一种场景是，InnoDB 的 redo log 写满了</li></ul><p>把 checkpoint 位置从 CP 推进到 CP’，就需要将两个点之间的日志（浅绿色部分），对应的所有脏页都 flush 到磁盘</p><ul><li><p>第二种场景，掌柜发现自己快记不住了，系统内存不足</p></li><li><p>第三种场景是，MySQL 认为系统“空闲”的时候</p></li><li><p>第四种场景，MySQL 正常关闭的</p></li></ul><p>第一种是“redo log 写满了，要 flush 脏页”，这种情况是 InnoDB 要尽量避免的。因为出现 这种情况的时候，整个系统就不能再接受更新了，所有的更新都必须堵住。如果你从监控上看， 这时候更新数会跌为 0</p><p>第二种是“内存不够用了，要先将脏页写到磁盘”，这种情况其实是常态。InnoDB 用缓冲池 （buffer pool）管理内存，缓冲池中的内存页有三种状态：</p><p>第一种是，还没有使用的</p><p>第二种是，使用了并且是干净页</p><p>第三种是，使用了并且是脏页</p><h3 id="flush-的相关参数"><a href="#flush-的相关参数" class="headerlink" title="flush 的相关参数"></a>flush 的相关参数</h3><p><strong>innodb_io_capacity</strong></p><p>首先，你要正确地告诉 InnoDB 所在主机的 IO 能力，这样 InnoDB 才能知道需要全力刷脏页的 时候，可以刷多快。一般设置成磁盘的 IOPS，磁盘的 IOPS 可以通过 fio 这个工具来测试</p><p> <strong>innodb_max_dirty_pages_pct</strong> </p><p>是脏页比例上限，默认值是 75%</p><p>根据上述算得的 F1(M) 和 F2(N) 两个值，取其中较大的值记为 R，之后引擎就可以按照 innodb_io_capacity 定义的能力乘以 R% 来控制刷脏页的速度。</p><p>平时要多关注脏页比 例，不要让它经常接近 75%。</p><p>脏页比例是通过 Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total 得到的</p><p><strong>innodb_flush_neighbors</strong></p><p>而 MySQL 中的一个机制，可能让你的查询会更慢</p><p><strong>在准备刷一个脏页的时候，如果这个数据页旁边的数据页刚好是脏页，就会把这个“邻居”也带着一起刷掉</strong>。而且这个把“邻居”拖下水的逻 辑还可以继续蔓延，也就是对于每个邻居数据页，如果跟它相邻的数据页也还是脏页的话，也会 被放到一起刷。</p><p>值为 1 的时候会有上 述的“连坐”机制，值为 0 时表示不找邻居，自己刷自己的。</p><p>找“邻居”这个优化在机械硬盘时代是很有意义的，可以减少很多随机 IO</p><p>而如果使用的是 SSD 这类 IOPS 比较高的设备的话，我就建议你把 innodb_flush_neighbors 的值设置成 0。因为这时候 IOPS 往往不是瓶颈，而“只刷自己”，就能更快地执行完必要的刷 脏页操作，减少 SQL 语句响应时间。</p><p>在 MySQL 8.0 中，innodb_flush_neighbors 参数的默认值已经是 0 了。</p><h3 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h3><p>今天这篇文章，我延续第 2 篇中介绍的 WAL 的概念，和你解释了这个机制后续需要的刷脏页操 作和执行时机。利用 WAL 技术，数据库将随机写转换成了顺序写，大大提升了数据库的性能。</p><p>但是，由此也带来了内存脏页的问题。脏页会被后台线程自动 flush，也会由于数据页淘汰而触 发 flush，而刷脏页的过程由于会占用资源，可能会让你的更新和查询语句的响应时间长一些。 在文章里，我也给你介绍了控制刷脏页的方法和对应的监控方式。</p><h2 id="13-为什么表数据删掉一半，表文件大小不变？"><a href="#13-为什么表数据删掉一半，表文件大小不变？" class="headerlink" title="13 | 为什么表数据删掉一半，表文件大小不变？"></a>13 | 为什么表数据删掉一半，表文件大小不变？</h2><p> 正确回收空间的方法</p><p>为什么简单地删除表数据达不到表空间回收的效果</p><h3 id="innodb-file-per-table"><a href="#innodb-file-per-table" class="headerlink" title="innodb_file_per_table"></a>innodb_file_per_table</h3><p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：</p><ol><li><p>这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一 起；</p></li><li><p>这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。</p></li></ol><p>从 MySQL 5.6.6 版本开始，它的默认值就是 ON 了。</p><p>因为，一个表单独存储为一个 文件更容易管理，而且在你不需要这个表的时候，通过 drop table 命令，系统就会直接删除这 个文件。而如果是放在共享表空间中，即使表删掉了，空间也是不会回收</p><p>建议你不论使用 MySQL 的哪个版本，都将这个值设置为 ON</p><p>在删除整个表的时候，可以使用 drop table 命令回收表空间。但是，我们遇到的更多的删 除数据的场景是删除某些行，这时就遇到了我们文章开头的问题：表中的数据被删除了，但是表空间却没有被回收。</p><h3 id="数据删除流程"><a href="#数据删除流程" class="headerlink" title="数据删除流程"></a>数据删除流程</h3><p>数据页的复用跟记录的复用是不同的</p><p>如果我们用 delete 命令把整个表的数据删除呢？结果就是，所有的数据页都会被标 记为可复用。但是磁盘上，文件不会变小。</p><p>delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘 文件的大小是不会变的。也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而 没有被使用的空间，看起来就像是“空洞”。</p><p>不止是删除数据会造成空洞，插入数据也会。所以，如果能够把这些空洞去掉，就 能达到收缩表空间的目的。经过大量增删改的表，都是可能是存在空洞的. 而重建表，就可以达到这样的目的。</p><h3 id="重建表"><a href="#重建表" class="headerlink" title="重建表"></a>重建表</h3><p>新建一个与表 A 结构相同的表 B，然后按照主键 ID 递增的顺序，把数据一行一行地从表 A 里读出来再插入到表 B 中。数据从表 A 导入表 B 的操作完成后，用表 B 替换 A，从效果上看，就起到了收缩表 A 空间的作用。</p><p><strong>alter table A engine=InnoDB</strong> 命令来重建表。</p><p>这个临时表 B 不需要你自己创建， MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</p><p>在整个 DDL 过程中，表 A 中不能有更新。也就是说， 这个 DDL 不是 Online 的。</p><p>MySQL 5.6 版本开始引入的 Online DDL, 对这个操作流程做了优化</p><ol start="3"><li><p>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中</p></li><li><p>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同 的数据文件</p></li></ol><p>方案在重建表的过程中，允许对表 A 做增删改操作。这也就是 Online DDL 名字的来源</p><ul><li>alter table t engine = InnoDB（也就是 recreate）</li><li>analyze table t 只是对表的索引信息做重新统计</li><li>optimize table t 等于 recreate+analyze。</li></ul><h3 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h3><p>今天这篇文章，我和你讨论了数据库中收缩表空间的方法。 现在你已经知道了，如果要收缩一个表，只是 delete 掉表里面不用的数据的话，表文件的大小 是不会变的，你还要通过 alter table 命令重建表，才能达到表文件变小的目的。我跟你介绍了 重建表的两种实现方式，Online DDL 的方式是可以考虑在业务低峰期使用的，而 MySQL 5.5 及之前的版本，这个命令是会阻塞 DML 的，这个你需要特别小心。</p><h2 id="14-count-这么慢，我该怎么办？"><a href="#14-count-这么慢，我该怎么办？" class="headerlink" title="14 | count (*) 这么慢，我该怎么办？"></a>14 | count (*) 这么慢，我该怎么办？</h2><h3 id="count-的实现方式"><a href="#count-的实现方式" class="headerlink" title="count(*) 的实现方式"></a>count(*) 的实现方式</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个 数，效率很高；</p><p>而 InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出 来，然后累积计数。</p><p>我们在这篇文章里讨论的是没有过滤条件的 count(*)，如果加了 where 条件的话，MyISAM 表也是不能返回得这么快的。</p><p>即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的</p><p>当然，现在这个看上去笨笨的 MySQL，在执行 count(*) 操作的时候还是做了优化的。</p><p> InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是 主键值。所以，普通索引树比主键索引树小很多。对于 count(<em>) 这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，*</em>MySQL 优化器会找到最小的那棵树来遍历**。在保证逻辑 正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p><ul><li>MyISAM 表虽然 count(*) 很快，但是不支持事务</li><li>show table status 命令虽然返回很快，但是不准确</li><li>InnoDB 表直接 count(*) 会遍历全表，虽然结果准确，但会导致性能问题。</li></ul><h3 id="count-这么慢，我们只能自己计数"><a href="#count-这么慢，我们只能自己计数" class="headerlink" title="count (*) 这么慢，我们只能自己计数"></a>count (*) 这么慢，我们只能自己计数</h3><p>在数据库保存计数</p><p>要解决的问题，都是由于 InnoDB 要支持事务，从而导致 InnoDB 表不能把 count(*) 直接存起来，然后查询的时候直接返回形成的。</p><p>所谓以子之矛攻子之盾，现在我们就利用“事务”这个特性，把问题解决掉。</p><p>将 插入删除数据和更新计数值 作为一个事务提交，确保任何时刻获得的都是逻辑正确的计数值</p><img src="https://i.loli.net/2020/12/01/rIWCebVmp7K1lto.png" alt="图 4 会话 A、B 的执行时序图" style="zoom:50%;" /><h3 id="不同的-count-用法"><a href="#不同的-count-用法" class="headerlink" title="不同的 count 用法"></a>不同的 count 用法</h3><p>如果 count 函数的参数不是 NULL，累计值就加 1，否则不加</p><p><strong>count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数（因为它们都不肯为 null）；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</strong></p><p>现在的优化器只优化了 count(*) 的语义为“取行数”</p><p>对于 count(主键 id) 来说，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p><p>对于 count(1) 来说，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一 个数字“1”进去，判断是不可能为空的，按行累加。</p><p>count(<em>) 是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(</em>) 肯定 不是 null，按行累加。</p><p><strong>按照效率排序的话，count(字段)&lt;count(主键 id)&lt;count(1)≈count(*)，所以我 建议你，尽量使用 count(*)</strong></p><h3 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h3><p>今天，我和你聊了聊 MySQL 中获得表行数的两种方法。我们提到了在不同引擎中 count(*) 的 实现方式是不一样的，也分析了用缓存系统来存储计数值存在的问题。</p><p>其实，把计数放在 Redis 里面，不能够保证计数和 MySQL 表里的数据精确一致的原因，是这 两个不同的存储构成的系统，不支持分布式事务，无法拿到精确一致的视图。而把计数值也放在 MySQL 中，就解决了一致性视图的问题。 InnoDB 引擎支持事务，我们利用好事务的原子性和隔离性，就可以简化在业务开发时的逻辑。 这也是 InnoDB 引擎备受青睐的原因之一。</p><h2 id="15-答疑文章（一）：日志和索引相关问题"><a href="#15-答疑文章（一）：日志和索引相关问题" class="headerlink" title="15 | 答疑文章（一）：日志和索引相关问题"></a>15 | 答疑文章（一）：日志和索引相关问题</h2><h2 id="16-“order-by”-是怎么工作的？"><a href="#16-“order-by”-是怎么工作的？" class="headerlink" title="16 | “order by” 是怎么工作的？"></a>16 | “order by” 是怎么工作的？</h2><h2 id="17-如何正确地显示随机消息？"><a href="#17-如何正确地显示随机消息？" class="headerlink" title="17 | 如何正确地显示随机消息？"></a>17 | 如何正确地显示随机消息？</h2><h2 id="18-为什么这些-SQL-语句逻辑相同，性能却差异巨大？"><a href="#18-为什么这些-SQL-语句逻辑相同，性能却差异巨大？" class="headerlink" title="18 | 为什么这些 SQL 语句逻辑相同，性能却差异巨大？"></a>18 | 为什么这些 SQL 语句逻辑相同，性能却差异巨大？</h2><h2 id="19-为什么我只查一行的语句，也执行这么慢？"><a href="#19-为什么我只查一行的语句，也执行这么慢？" class="headerlink" title="19 | 为什么我只查一行的语句，也执行这么慢？"></a>19 | 为什么我只查一行的语句，也执行这么慢？</h2><h2 id="20-幻读是什么，幻读有什么问题？"><a href="#20-幻读是什么，幻读有什么问题？" class="headerlink" title="20 | 幻读是什么，幻读有什么问题？"></a>20 | 幻读是什么，幻读有什么问题？</h2><h2 id="21-为什么我只改一行的语句，锁这么多？"><a href="#21-为什么我只改一行的语句，锁这么多？" class="headerlink" title="21 | 为什么我只改一行的语句，锁这么多？"></a>21 | 为什么我只改一行的语句，锁这么多？</h2><h2 id="22-MySQL-有哪些-“饮鸩止渴”-提高性能的方法？"><a href="#22-MySQL-有哪些-“饮鸩止渴”-提高性能的方法？" class="headerlink" title="22 | MySQL 有哪些 “饮鸩止渴” 提高性能的方法？"></a>22 | MySQL 有哪些 “饮鸩止渴” 提高性能的方法？</h2><h2 id="23-MySQL-是怎么保证数据不丢的？"><a href="#23-MySQL-是怎么保证数据不丢的？" class="headerlink" title="23 | MySQL 是怎么保证数据不丢的？"></a>23 | MySQL 是怎么保证数据不丢的？</h2><h2 id="24-MySQL-是怎么保证主备一致的？"><a href="#24-MySQL-是怎么保证主备一致的？" class="headerlink" title="24 | MySQL 是怎么保证主备一致的？"></a>24 | MySQL 是怎么保证主备一致的？</h2><h2 id="25-MySQL-是怎么保证高可用的？"><a href="#25-MySQL-是怎么保证高可用的？" class="headerlink" title="25 | MySQL 是怎么保证高可用的？"></a>25 | MySQL 是怎么保证高可用的？</h2><h2 id="26-备库为什么会延迟好几个小时？"><a href="#26-备库为什么会延迟好几个小时？" class="headerlink" title="26 | 备库为什么会延迟好几个小时？"></a>26 | 备库为什么会延迟好几个小时？</h2><h2 id="27-主库出问题了，从库怎么办？"><a href="#27-主库出问题了，从库怎么办？" class="headerlink" title="27 | 主库出问题了，从库怎么办？"></a>27 | 主库出问题了，从库怎么办？</h2><h2 id="28-读写分离有哪些坑？"><a href="#28-读写分离有哪些坑？" class="headerlink" title="28 | 读写分离有哪些坑？"></a>28 | 读写分离有哪些坑？</h2><h2 id="29-如何判断一个数据库是不是出问题了？"><a href="#29-如何判断一个数据库是不是出问题了？" class="headerlink" title="29 | 如何判断一个数据库是不是出问题了？"></a>29 | 如何判断一个数据库是不是出问题了？</h2><h2 id="30-答疑文章（二）：用动态的观点看加锁"><a href="#30-答疑文章（二）：用动态的观点看加锁" class="headerlink" title="30 | 答疑文章（二）：用动态的观点看加锁"></a>30 | 答疑文章（二）：用动态的观点看加锁</h2><h2 id="31-误删数据后除了跑路，还能怎么办？"><a href="#31-误删数据后除了跑路，还能怎么办？" class="headerlink" title="31 | 误删数据后除了跑路，还能怎么办？"></a>31 | 误删数据后除了跑路，还能怎么办？</h2><h2 id="32-为什么还有-kill-不掉的语句？"><a href="#32-为什么还有-kill-不掉的语句？" class="headerlink" title="32 | 为什么还有 kill 不掉的语句？"></a>32 | 为什么还有 kill 不掉的语句？</h2><h2 id="33-我查这么多数据，会不会把数据库内存打爆？"><a href="#33-我查这么多数据，会不会把数据库内存打爆？" class="headerlink" title="33 | 我查这么多数据，会不会把数据库内存打爆？"></a>33 | 我查这么多数据，会不会把数据库内存打爆？</h2><h2 id="34-到底可不可以使用-join？"><a href="#34-到底可不可以使用-join？" class="headerlink" title="34 | 到底可不可以使用 join？"></a>34 | 到底可不可以使用 join？</h2><h2 id="35-join-语句怎么优化？"><a href="#35-join-语句怎么优化？" class="headerlink" title="35 | join 语句怎么优化？"></a>35 | join 语句怎么优化？</h2><h2 id="36-为什么临时表可以重名？"><a href="#36-为什么临时表可以重名？" class="headerlink" title="36 | 为什么临时表可以重名？"></a>36 | 为什么临时表可以重名？</h2><h2 id="37-什么时候会使用内部临时表？"><a href="#37-什么时候会使用内部临时表？" class="headerlink" title="37 | 什么时候会使用内部临时表？"></a>37 | 什么时候会使用内部临时表？</h2><h2 id="38-都说-InnoDB-好，那还要不要使用-Memory-引擎？"><a href="#38-都说-InnoDB-好，那还要不要使用-Memory-引擎？" class="headerlink" title="38 | 都说 InnoDB 好，那还要不要使用 Memory 引擎？"></a>38 | 都说 InnoDB 好，那还要不要使用 Memory 引擎？</h2><h2 id="39-自增主键为什么不是连续的？"><a href="#39-自增主键为什么不是连续的？" class="headerlink" title="39 | 自增主键为什么不是连续的？"></a>39 | 自增主键为什么不是连续的？</h2><h2 id="40-insert-语句的锁为什么这么多？"><a href="#40-insert-语句的锁为什么这么多？" class="headerlink" title="40 | insert 语句的锁为什么这么多？"></a>40 | insert 语句的锁为什么这么多？</h2><h2 id="41-怎么最快地复制一张表？"><a href="#41-怎么最快地复制一张表？" class="headerlink" title="41 | 怎么最快地复制一张表？"></a>41 | 怎么最快地复制一张表？</h2><h2 id="42-grant-之后要跟着-flush-privileges-吗？"><a href="#42-grant-之后要跟着-flush-privileges-吗？" class="headerlink" title="42 | grant 之后要跟着 flush privileges 吗？"></a>42 | grant 之后要跟着 flush privileges 吗？</h2><h2 id="43-要不要使用分区表？"><a href="#43-要不要使用分区表？" class="headerlink" title="43 | 要不要使用分区表？"></a>43 | 要不要使用分区表？</h2><h2 id="44-答疑文章（三）：说一说这些好问题"><a href="#44-答疑文章（三）：说一说这些好问题" class="headerlink" title="44 | 答疑文章（三）：说一说这些好问题"></a>44 | 答疑文章（三）：说一说这些好问题</h2><h2 id="45-自增-id-用完怎么办？"><a href="#45-自增-id-用完怎么办？" class="headerlink" title="45 | 自增 id 用完怎么办？"></a>45 | 自增 id 用完怎么办？</h2><h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><h3 id="MySQL-6-种日志文件"><a href="#MySQL-6-种日志文件" class="headerlink" title="MySQL 6 种日志文件"></a>MySQL 6 种日志文件</h3><p><a href="https://www.cnblogs.com/wy123/p/8365234.html">MySQL 中的重做日志（redo log），回滚日志（undo log），以及二进制日志（binlog）的简单总结 - MSSQL123 - 博客园</a></p><h3 id="MySQL-面试题"><a href="#MySQL-面试题" class="headerlink" title="MySQL 面试题"></a>MySQL 面试题</h3><h3 id="MySQL-思维导图"><a href="#MySQL-思维导图" class="headerlink" title="MySQL 思维导图"></a>MySQL 思维导图</h3><p>主要为了复习的时候，能快速检查自己是否了解某一概念</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://zronghui.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-217</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-217.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-217.html</id>
    <published>2020-11-29T06:46:21.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>自闭，只是打卡</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/richest-customer-wealth/">最富有客户的资产总量</a><strong>3</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/">找出最具竞争力的子序列</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/">使数组互补的最少操作次数</a><strong>6</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/minimize-deviation-in-array/">数组的最小偏移量</a><strong>7</strong></li></ul><p><img src="https://i.loli.net/2020/11/29/qTHvnxBpZwaPbiF.png" alt="image-20201129144906240"></p><a id="more"></a><p><a href="https://www.bilibili.com/video/BV1bD4y1X7Aa">【算法实况】下周执行比赛新规！思维量都比较大的一场周赛题目 - 力扣周赛 - LeetCode Weekly 217_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili</a></p><p>看大师兄讲解👆</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>先差分数组，再前缀和，太妙了</p><p><img src="https://i.loli.net/2020/11/29/IBEfVw23suQXaC1.png" alt="mpv260908575-1-30080-00:09:17"></p><p><img src="https://i.loli.net/2020/11/29/b8IOqu69EzisxCZ.png" alt="mpv260908575-1-30080-00:10:11"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p><img src="https://i.loli.net/2020/11/29/pU8ePNxd9qW27rw.png" alt="【算法实况】下周执行比赛新规！思维量都比较大的一场周赛题目 - 力扣周赛 - LeetCode Weekly 217 - 5616. 数组的最小偏移量 @06-10.54 1606632748272"></p><p><img src="https://i.loli.net/2020/11/29/3Pr5bzIYHjv4LKm.png" alt="mpv260908648-1-30080-00:10:46"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;自闭，只是打卡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/richest-customer-wealth/&quot;&gt;最富有客户的资产总量&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-the-most-competitive-subsequence/&quot;&gt;找出最具竞争力的子序列&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/minimum-moves-to-make-array-complementary/&quot;&gt;使数组互补的最少操作次数&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/minimize-deviation-in-array/&quot;&gt;数组的最小偏移量&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/29/qTHvnxBpZwaPbiF.png&quot; alt=&quot;image-20201129144906240&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-40</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-40.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-40.html</id>
    <published>2020-11-28T16:01:12.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/">最大重复子字符串</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/">合并两个链表</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/">设计前中后队列</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/minimum-number-of-removals-to-make-mountain-array/">得到山形数组的最少删除次数</a><strong>6</strong></li></ul><p>前三题半小时，第四题做了一小时，一开始没有思路。最后 23:59:47 做完，很极限了</p><p><img src="https://i.loli.net/2020/11/29/i3vGcAyVq4Ob8Co.png" alt="image-20201129000232986"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRepeating</span><span class="params">(String s, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), m = word.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=word.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i+j)!=word.charAt(j%m))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, j/m);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// System.out.println(j+"|"+m);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeInBetween</span><span class="params">(ListNode list1, <span class="keyword">int</span> a, <span class="keyword">int</span> b, ListNode list2)</span> </span>&#123;</span><br><span class="line">        ListNode a1=list1, b1=list1, tail2=list1;<span class="comment">// a-1, b+1, list2 tail</span></span><br><span class="line">        ListNode cur=list1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=b+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i-(a-<span class="number">1</span>)==<span class="number">0</span>) a1 = cur;</span><br><span class="line">            <span class="keyword">if</span>(i-(b+<span class="number">1</span>)==<span class="number">0</span>) b1 = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = list2;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>) cur = cur.next;</span><br><span class="line">        tail2 = cur;</span><br><span class="line">        a1.next = list2;</span><br><span class="line">        tail2.next = b1;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 个 deque</span></span><br><span class="line"><span class="comment">// [a,b,c] [d,e,f]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontMiddleBackQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Integer&gt; d1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Integer&gt; d2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontMiddleBackQueue</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushFront</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        d1.offerFirst(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        d2.offerLast(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!d1.isEmpty()) <span class="keyword">return</span> d1.pollFirst();</span><br><span class="line">        <span class="keyword">return</span> d2.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!d2.isEmpty()) <span class="keyword">return</span> d2.pollLast();</span><br><span class="line">        <span class="keyword">return</span> d1.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(d1.size()&gt;d2.size())</span><br><span class="line">            d2.offerFirst(d1.pollLast());</span><br><span class="line">        <span class="keyword">while</span>(d2.size()&gt;d1.size()+<span class="number">1</span>)</span><br><span class="line">            d1.offerLast(d2.pollFirst());</span><br><span class="line">        d1.offerLast(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(d1.size()&gt;d2.size()+<span class="number">1</span>)</span><br><span class="line">            d2.offerFirst(d1.pollLast());</span><br><span class="line">        <span class="keyword">while</span>(d2.size()&gt;d1.size())</span><br><span class="line">            d1.offerLast(d2.pollFirst());</span><br><span class="line">        <span class="keyword">return</span> d1.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumMountainRemovals</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE, n=nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] dp2 = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(dp1, <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(dp2, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;=nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">                dp1[i] = Math.max(dp1[i], dp1[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;=nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">                dp2[i] = Math.max(dp2[i], dp2[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i: dp1) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="comment">// for(int i: dp2) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            res = Math.max(res, dp1[i]+dp2[i]-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/&quot;&gt;最大重复子字符串&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/&quot;&gt;合并两个链表&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/&quot;&gt;设计前中后队列&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/minimum-number-of-removals-to-make-mountain-array/&quot;&gt;得到山形数组的最少删除次数&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三题半小时，第四题做了一小时，一开始没有思路。最后 23:59:47 做完，很极限了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/29/i3vGcAyVq4Ob8Co.png&quot; alt=&quot;image-20201129000232986&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-215</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-215.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-215.html</id>
    <published>2020-11-15T04:10:36.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/design-an-ordered-stream/">设计有序流</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/determine-if-two-strings-are-close/">确定两个字符串是否接近</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/minimum-operations-to-reduce-x-to-zero/">将 x 减到 0 的最小操作数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/maximize-grid-happiness/">最大化网格幸福感</a><strong>7</strong></li></ul><p><img src="https://i.loli.net/2020/11/15/QnlxpMiLIF315YJ.png" alt="image-20201115121121254"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedStream</span> </span>&#123;</span><br><span class="line">    String[] l;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> ptr = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderedStream</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        l = <span class="keyword">new</span> String[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.n = n+<span class="number">1</span>; <span class="comment">// ignore index 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id, String value)</span> </span>&#123;</span><br><span class="line">        l[id] = value;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(id!=ptr) <span class="keyword">return</span> res;</span><br><span class="line">        res.add(value);</span><br><span class="line">        <span class="keyword">int</span> i = id+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; l[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(l[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr = i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; param_1 = obj.insert(id,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">closeStrings</span><span class="params">(String w1, String w2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w1.length()!=w2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] m1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>], m2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: w1.toCharArray())</span><br><span class="line">            m1[c-<span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: w2.toCharArray())</span><br><span class="line">            m2[c-<span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">        List&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;(),  l2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m1[i]!=<span class="number">0</span>) l1.add(m1[i]);</span><br><span class="line">            <span class="keyword">if</span>(m2[i]!=<span class="number">0</span>) l2.add(m2[i]);</span><br><span class="line">            <span class="comment">// 你有的字符我也要有</span></span><br><span class="line">            <span class="keyword">if</span>(m1[i]==<span class="number">0</span> &amp;&amp; m2[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(m2[i]==<span class="number">0</span> &amp;&amp; m1[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(l1);</span></span><br><span class="line">        <span class="comment">// System.out.println(l2);</span></span><br><span class="line">        <span class="comment">// System.out.println(l1.size()+"|"+l2.size());</span></span><br><span class="line">        <span class="keyword">if</span>(l1.size()!=l2.size()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Collections.sort(l1);</span><br><span class="line">        Collections.sort(l2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l1.size(); i++)&#123;</span><br><span class="line">            <span class="comment">// Hence the comparison with == only works for numbers between -128 and 127.</span></span><br><span class="line">            <span class="comment">// System.out.println(l1.get(i)+"|"+l2.get(i) +"|"+ (l1.get(i)!=l2.get(i)));</span></span><br><span class="line">            <span class="keyword">if</span>((l1.get(i)-l2.get(i))!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>postsum -&gt; sufsum 更合适</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] presum = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>], postsum = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            presum[i] = presum[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">            postsum[i] = postsum[i-<span class="number">1</span>]+nums[n-i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i: presum) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="comment">// for(int i: postsum) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// 0|1|2|6|8|11|</span></span><br><span class="line">        <span class="comment">// 0|3|5|9|10|11|</span></span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=n;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;res &amp;&amp; i&lt;=n &amp;&amp; presum[i]&lt;=x)&#123;</span><br><span class="line">            <span class="keyword">while</span>(n-j&gt;i-<span class="number">1</span> &amp;&amp; postsum[j]+presum[i]&gt;x)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span>(n-j&gt;i-<span class="number">1</span> &amp;&amp; (postsum[j]+presum[i]-x==<span class="number">0</span>))</span><br><span class="line">                res = Math.min(res, i+j);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==Integer.MAX_VALUE?-<span class="number">1</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/design-an-ordered-stream/&quot;&gt;设计有序流&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/determine-if-two-strings-are-close/&quot;&gt;确定两个字符串是否接近&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/minimum-operations-to-reduce-x-to-zero/&quot;&gt;将 x 减到 0 的最小操作数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/maximize-grid-happiness/&quot;&gt;最大化网格幸福感&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/QnlxpMiLIF315YJ.png&quot; alt=&quot;image-20201115121121254&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-39</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-39.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-39.html</id>
    <published>2020-11-14T16:52:55.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/defuse-the-bomb/">拆炸弹</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-deletions-to-make-string-balanced/">使字符串平衡的最少删除次数</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-jumps-to-reach-home/">到家的最少跳跃次数</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/distribute-repeating-integers/">分配重复整数</a><strong>6</strong></li></ul><p><img src="https://i.loli.net/2020/11/15/7Aw4iYzBlrh1qaR.png" alt="image-20201115005339026"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] decrypt(<span class="keyword">int</span>[] code, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// 恶心</span></span><br><span class="line">        <span class="keyword">int</span> n = code.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> d = k&gt;<span class="number">0</span> ? <span class="number">1</span>: -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=Math.abs(k); j++)&#123;</span><br><span class="line">                res[i] += code[(i+j*d+n)%n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="comment">// aa 格式  aab 格式</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>], b = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        b[<span class="number">0</span>] = -<span class="number">1</span>; <span class="comment">// 起始不可能 aab 格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'a'</span>)&#123;</span><br><span class="line">                a[i] = a[i-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                a[i] = a[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 不可能 aab 格式</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'a'</span> &amp;&amp; b[i-<span class="number">1</span>]==-<span class="number">1</span>) b[i]=-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 以 a 结尾，a 肯定要删除</span></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">'a'</span>)&#123;</span><br><span class="line">                    b[i] = b[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 可以从 aa 或者 aab 转换过来</span></span><br><span class="line">                    b[i] = Math.min(a[i-<span class="number">1</span>], b[i-<span class="number">1</span>]==-<span class="number">1</span> ? n : b[i-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// aa 格式</span></span><br><span class="line">        <span class="keyword">if</span>(b[n]==-<span class="number">1</span>) <span class="keyword">return</span> a[n];</span><br><span class="line">        <span class="keyword">return</span> Math.min(a[n], b[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] q;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canDistribute</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] quantity)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        m = quantity.length;</span><br><span class="line">        <span class="comment">// reverse sort</span></span><br><span class="line">        Arrays.sort(quantity);</span><br><span class="line">        q = quantity;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=m-<span class="number">1</span>; i&lt;j; i++, j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> t = q[i];</span><br><span class="line">            q[i] = q[j];</span><br><span class="line">            q[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) </span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 暴力</span></span><br><span class="line">        <span class="keyword">return</span> dfs(map, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(HashMap&lt;Integer, Integer&gt; map, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = map.get(num);</span><br><span class="line">            <span class="keyword">if</span>(cnt&lt;q[i]) <span class="keyword">continue</span>;</span><br><span class="line">            map.put(num, cnt-q[i]);</span><br><span class="line">            <span class="keyword">if</span>(dfs(map, i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            map.put(num, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/defuse-the-bomb/&quot;&gt;拆炸弹&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-deletions-to-make-string-balanced/&quot;&gt;使字符串平衡的最少删除次数&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-jumps-to-reach-home/&quot;&gt;到家的最少跳跃次数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/distribute-repeating-integers/&quot;&gt;分配重复整数&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/7Aw4iYzBlrh1qaR.png&quot; alt=&quot;image-20201115005339026&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-11</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-11.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-11.html</id>
    <published>2020-11-04T06:16:58.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="243613cc3a0f3d0c98dc3baf3d7de67c3596c17c5d54267fd2d9fd12b4e00a6e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>面试复习</title>
    <link href="https://zronghui.github.io/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0.html"/>
    <id>https://zronghui.github.io/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0.html</id>
    <published>2020-11-02T09:07:56.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p>java/基础/Java-面试宝典笔记.md (包含单例模式)</p><p>/Users/zhangronghui/01Code/hexo/hexo-theme-icarus-removeif/source/_posts/Java基础-CSNotes.md</p><p>/Users/zhangronghui/01Code/hexo/hexo-theme-icarus-removeif/source/_posts/Java容器.md</p><p><a href="https://yfzjay.github.io/2020/03/21/HashMap.html">HashMap</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390612">Java基础知识面试题（2020最新版）_ThinkWon的博客-CSDN博客</a><br><a href="https://thinkwon.blog.csdn.net/article/details/104588551">Java集合容器面试题（2020最新版）_ThinkWon的博客-CSDN博客</a><br><a href="https://thinkwon.blog.csdn.net/article/details/104390689">Java异常面试题（2020最新版）_ThinkWon的博客-CSDN博客</a></p><h3 id="mysql-计算机网络-操作系统-redis-http"><a href="#mysql-计算机网络-操作系统-redis-http" class="headerlink" title="mysql 计算机网络 操作系统 redis http"></a>mysql 计算机网络 操作系统 redis http</h3><p><a href="https://www.zhihu.com/question/31346392">如何理解数据库事务中的一致性的概念？ - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/214295381">《我想进大厂》之mysql夺命连环13问 - 知乎</a></p><p>other/字节跳动面试准备.md</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">Skill-Tree/计算机网络.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md">Skill-Tree/操作系统.md at master · linw7/Skill-Tree</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104778621">MySQL 数据库面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://leetcode-cn.com/circle/discuss/UrcaDQ/">面试问题详解——网址访问过程详解 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/circle/discuss/zIxrWn/">面试问题整理——操作系统 - 力扣（LeetCode）</a></p><p><a href="https://zhuanlan.zhihu.com/p/263028782">《我想进大厂》之 Redis 夺命连环 11 问 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/260351128">《我想进大厂》之MQ夺命连环11问 - 知乎</a></p><p>Redis高频面试题 无答案</p><p><a href="https://leetcode-cn.com/circle/discuss/eX58OT/view/V5enA9/">【大厂面试系列】吊打面试官之Redis高频面试题（最新版） - 力扣（LeetCode）</a></p><h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><p>JVM-CSNotes.md</p><p><a href="https://zhuanlan.zhihu.com/p/268286740">《我想进大厂》之JVM夺命连环10问 - 知乎</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390752">Java 虚拟机 (JVM) 面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p>cap </p><p><a href="https://yfzjay.github.io/2020/06/17/%E6%98%93%E9%94%99%E7%82%B9%E8%AE%B0%E5%BD%95.html#htmlup">易错点记录</a></p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>Java并发-CSNotes.md</p><p>java/基础/Java-并发.md</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104863992">并发编程面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/267356985">面试官：说说CountDownLatch，CyclicBarrier，Semaphore的原理？ - 知乎</a></p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>java/spring.md</p><p><a href="https://zhuanlan.zhihu.com/p/266607403">《我想进大厂》之Dubbo普普通通9问 - 知乎</a></p><h3 id="LeetCode、牛客"><a href="#LeetCode、牛客" class="headerlink" title="LeetCode、牛客"></a>LeetCode、牛客</h3><p>sb 牛客输入输出模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="comment">#str = input()</span></span><br><span class="line"><span class="comment">#print(str)</span></span><br><span class="line">print(<span class="string">'Hello,World!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Scanner in = new Scanner(System.in);</span></span><br><span class="line">        <span class="comment">//int a = in.nextInt();</span></span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他面试题"><a href="#其他面试题" class="headerlink" title="其他面试题"></a>其他面试题</h3><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.md">Skill-Tree/海量数据处理.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E7%9C%9F%E9%A2%98%E6%91%98%E5%BD%95.md">Skill-Tree/真题摘录.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/Linux%E5%B7%A5%E5%85%B7.md">Skill-Tree/Linux工具.md at master · linw7/Skill-Tree</a></p><h3 id="想问的问题"><a href="#想问的问题" class="headerlink" title="想问的问题"></a>想问的问题</h3><h1 id="11-月-TODO"><a href="#11-月-TODO" class="headerlink" title="11 月 TODO"></a>11 月 TODO</h1><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/MYSQL45讲（全）</p><p>一天 5 节 当前看到 30 节 , 预计 13 号看完</p><p>有一节 间隙锁 没看懂， 还有 30 节 40节 也没看懂</p><p>预计 13 号 看完</p><p>MySQL 8 小时问题</p><p>索引 count(1) count(*) 锁 常用的配置项及其含义</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104778621">MySQL 数据库面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><h3 id="Redis-实现-锁等细节"><a href="#Redis-实现-锁等细节" class="headerlink" title="Redis 实现 锁等细节"></a>Redis 实现 锁等细节</h3><p>《Redis 实战》 1 天 1 章 今天看到第 4 章 预计到 16 号看完</p><p>《Redis 设计与实现》共 24 章 1 天 2 章 预计 22 号看完</p><p><a href="https://zhuanlan.zhihu.com/p/263028782">《我想进大厂》之 Redis 夺命连环 11 问 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/260351128">《我想进大厂》之MQ夺命连环11问 - 知乎</a></p><h3 id="socket-编程"><a href="#socket-编程" class="headerlink" title="socket 编程"></a>socket 编程</h3><p>搭建最简单的服务器</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>之前做的笔记</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104863992">并发编程面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/267356985">面试官：说说CountDownLatch，CyclicBarrier，Semaphore的原理？ - 知乎</a></p><p>看书？</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p><a href="https://zhuanlan.zhihu.com/p/268286740">《我想进大厂》之JVM夺命连环10问 - 知乎</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390752">Java 虚拟机 (JVM) 面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>/Volumes/My Passport/data/ut下载/02     后端/极客时间/jvm_action-master/115-RPC实战与核心原理（完结）</p><p>/Volumes/My Passport/data/ut下载/02     后端/极客时间/14 深入浅出 gRPC - 李林峰</p><h3 id="简历改进，丰满"><a href="#简历改进，丰满" class="headerlink" title="简历改进，丰满"></a>简历改进，丰满</h3><h3 id="投实习，继续面试"><a href="#投实习，继续面试" class="headerlink" title="投实习，继续面试"></a>投实习，继续面试</h3><h3 id="开题"><a href="#开题" class="headerlink" title="开题"></a>开题</h3><h3 id="IO-NIO"><a href="#IO-NIO" class="headerlink" title="IO NIO"></a>IO NIO</h3><h3 id="计算机网络-操作系统"><a href="#计算机网络-操作系统" class="headerlink" title="计算机网络 操作系统"></a>计算机网络 操作系统</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/网络是怎样连接的_户根勤.pdf</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">Skill-Tree/计算机网络.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md">Skill-Tree/操作系统.md at master · linw7/Skill-Tree</a></p><p><a href="https://leetcode-cn.com/circle/discuss/UrcaDQ/">面试问题详解——网址访问过程详解 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/circle/discuss/zIxrWn/">面试问题整理——操作系统 - 力扣（LeetCode）</a></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/挑战程序设计竞赛(第2版) 高清完整版.pdf</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h3 id="快速切换主题"><a href="#快速切换主题" class="headerlink" title="快速切换主题"></a>快速切换主题</h3><p>搜索引擎改进</p><p><a href="https://uglyduck.ca/quick-dirty-theme-switcher/">Quick &amp; Dirty Theme Switcher | Ugly Duck</a></p><p><a href="https://zhuanlan.zhihu.com/p/144169144">使用 Chii 调试移动端页面 - 知乎</a></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><a href="https://github.com/fuzhengwei/itstack-demo-design?utm_source=gold_browser_extension">fuzhengwei/itstack-demo-design《重学 Java 设计模式「22 个互联网真实案例实战」》</a></p><p>类的加载</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-212</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-212.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-212.html</id>
    <published>2020-10-25T10:39:45.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>![image-20201025184334845](/Users/zhangronghui/Library/Application Support/typora-user-images/image-20201025184334845.png)</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public char slowestKey(int[] l, String s) &#123;</span><br><span class="line">        int mi = <span class="number">0</span>, m=l[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i&lt;l.length; i++)&#123;</span><br><span class="line">            int duration = l[i]-l[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(duration&gt;m)&#123;</span><br><span class="line">                m = duration;</span><br><span class="line">                mi = i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(duration==m &amp;&amp; s.charAt(i)&gt;s.charAt(mi))&#123;</span><br><span class="line">                mi = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.charAt(mi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Boolean&gt; checkArithmeticSubarrays(int[] nums, int[] l, int[] r) &#123;</span><br><span class="line">        int n=nums.length, m=l.length;</span><br><span class="line">        List&lt;Boolean&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            res.add(check(nums, l[i], r[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean check(int[] nums, int l, int r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==l+<span class="number">1</span>) <span class="keyword">return</span> true;</span><br><span class="line">        int[] arr = new int[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=l; i&lt;=r; i++)&#123;</span><br><span class="line">            arr[i-l] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        int gap = arr[<span class="number">1</span>]-arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i&lt;r-l+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]-arr[i<span class="number">-1</span>]!=gap) <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>一开始自己瞎jb写，也能过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    boolean changed = true;</span><br><span class="line">    public int minimumEffortPath(int[][] heights) &#123;</span><br><span class="line">        int n=heights.length, m=heights[<span class="number">0</span>].length;</span><br><span class="line">        int[][] dp = new int[n][m];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(changed)&#123;</span><br><span class="line">            changed = false;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i<span class="number">-1</span>, j);</span><br><span class="line">                    update(heights, dp, n, m, i, j, i, j<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // right to left</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int j=m<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // down to up</span><br><span class="line">            <span class="keyword">for</span>(int j=m<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i+<span class="number">1</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void update(int[][] heights, int[][] dp, int n, int m, int i, int j, int ii, int jj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ii&gt;=<span class="number">0</span> &amp;&amp; ii&lt;n &amp;&amp; jj&gt;=<span class="number">0</span> &amp;&amp; jj&lt;m)&#123;</span><br><span class="line">            int t = Math.max(Math.abs(heights[i][j]-heights[ii][jj]), dp[ii][jj]);</span><br><span class="line">            <span class="keyword">if</span>(t&lt;dp[i][j])&#123;</span><br><span class="line">                changed = true;</span><br><span class="line">                dp[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/solution/zui-xiao-ti-li-xiao-hao-lu-jing-by-zerotrac2/">最小体力消耗路径 - 最小体力消耗路径 - 力扣（LeetCode）</a></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] p;</span><br><span class="line">    DSU(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            p[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">            p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = find(x), v=find(y);</span><br><span class="line">        <span class="keyword">if</span>(u!=v)</span><br><span class="line">            p[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(x)==find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    Edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dist)&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="keyword">int</span>[][] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=heights.length, m=heights[<span class="number">0</span>].length;</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur=i*m+j;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>) edges.add(<span class="keyword">new</span> Edge(cur, cur-<span class="number">1</span>, Math.abs(heights[i][j]-heights[i][j-<span class="number">1</span>])));</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>) edges.add(<span class="keyword">new</span> Edge(cur, cur-m, Math.abs(heights[i][j]-heights[i-<span class="number">1</span>][j])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(edges, (a,b) -&gt; a.dist-b.dist);</span><br><span class="line">        DSU dsu = <span class="keyword">new</span> DSU(n*m);</span><br><span class="line">        <span class="keyword">for</span>(Edge edge: edges)&#123;</span><br><span class="line">            dsu.union(edge.x, edge.y);</span><br><span class="line">            <span class="keyword">if</span>(dsu.isSame(<span class="number">0</span>, n*m-<span class="number">1</span>)) <span class="keyword">return</span> edge.dist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="keyword">int</span>[][] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>, r=<span class="number">999999</span>, mid, ans=<span class="number">0</span>;</span><br><span class="line">        n=heights.length;</span><br><span class="line">        m=heights[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n*m];</span><br><span class="line">            <span class="comment">// mid &gt;= ans</span></span><br><span class="line">            <span class="keyword">if</span>(check(heights, visited, mid, <span class="number">0</span>, <span class="number">0</span>, heights[<span class="number">0</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>[][] heights, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> dist, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;=n || j&gt;=m || visited[i*m+j] || Math.abs(pre-heights[i][j])&gt;dist) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==n-<span class="number">1</span> &amp;&amp; j==m-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        visited[i*m+j] = <span class="keyword">true</span>;</span><br><span class="line">        pre = heights[i][j];</span><br><span class="line">        <span class="keyword">return</span> check(heights, visited, dist, i-<span class="number">1</span>, j, pre)</span><br><span class="line">            || check(heights, visited, dist, i+<span class="number">1</span>, j, pre)</span><br><span class="line">            || check(heights, visited, dist, i, j-<span class="number">1</span>, pre)</span><br><span class="line">            || check(heights, visited, dist, i, j+<span class="number">1</span>, pre);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;![image-20201025184334845](/Users/zhangronghui/Library/Application Support/typora-user-images/image-20201025184334845.png)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>文件上传解决方案</title>
    <link href="https://zronghui.github.io/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>https://zronghui.github.io/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</id>
    <published>2020-10-24T09:23:20.000Z</published>
    <updated>2020-10-24T11:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传解决方案"><a href="#文件上传解决方案" class="headerlink" title="文件上传解决方案"></a>文件上传解决方案</h1><h3 id="文件上传下载的问题总览"><a href="#文件上传下载的问题总览" class="headerlink" title="文件上传下载的问题总览"></a>文件上传下载的问题总览</h3><p>创建项目时，项目基本信息 夹杂着任务书的上传</p><p>编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书</p><p>单独上传项目任务书</p><p>项目任务书下载</p><p>（文件可以是任务书或其他文件，这里都用任务书作说明）</p><h3 id="创建项目时，项目基本信息-夹杂着任务书的上传"><a href="#创建项目时，项目基本信息-夹杂着任务书的上传" class="headerlink" title="创建项目时，项目基本信息 夹杂着任务书的上传"></a>创建项目时，项目基本信息 夹杂着任务书的上传</h3><p>前端可以实现基本信息的 text 与任务书的 file 一起上传（一个简单的 demo：<a href="https://developer.aliyun.com/article/298018">模拟提交有文件上传的表单(通过http模拟上传文件)-阿里云开发者社区</a>）</p><p>点击选择任务书后，浏览器只是记录了文件存放的位置，可以暂时不发送请求到后端，等所有信息填写完毕后，点击确定，随着其他信息一起发送 post 请求到后端</p><h3 id="编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书"><a href="#编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书" class="headerlink" title="编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书"></a>编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书</h3><p>当对项目信息进行更新时，先从后端获取已有的项目信息（包括任务书的信息）</p><p>如果没有项目任务书，前端的 上传任务书 这部分和 创建项目时保持一致即可；</p><p>但是如果已经有了项目任务书，建议：</p><p>1.首先显示已有项目任务书的文件名，文件大小，上传时间</p><p>2.将网页上的 “上传任务书” 改为 “重新上传任务书”</p><h3 id="单独上传项目任务书"><a href="#单独上传项目任务书" class="headerlink" title="单独上传项目任务书"></a>单独上传项目任务书</h3><p>类似 <code>创建项目时，项目基本信息 夹杂着任务书的上传</code> </p><p>首先选择任务书，在点击上传按钮之后再向服务器发送请求</p><p>类似于 <a href="https://element.eleme.cn/#/zh-CN/component/upload#shou-dong-shang-chuan">组件 | Element</a> 中的 手动上传 部分</p><h3 id="项目任务书下载"><a href="#项目任务书下载" class="headerlink" title="项目任务书下载"></a>项目任务书下载</h3><p>前端项目首先会从后端获取第一页的项目及相关信息，后端可以在每一个项目的信息中写上任务书的信息，包括是否有任务书，以及任务书的下载链接（将文件上传到minio之后，会自动生成相应的下载链接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type&#x3D;&quot;text&quot;&gt;项目任务书下载&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><p>当点击下载的 button 时，前端根据 任务书的下载链接就能直接下载了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传解决方案&quot;&gt;&lt;a href=&quot;#文件上传解决方案&quot; class=&quot;headerlink&quot; title=&quot;文件上传解决方案&quot;&gt;&lt;/a&gt;文件上传解决方案&lt;/h1&gt;&lt;h3 id=&quot;文件上传下载的问题总览&quot;&gt;&lt;a href=&quot;#文件上传下载的问题总览&quot; class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode/分类/树的遍历</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html</id>
    <published>2020-10-23T11:14:14.000Z</published>
    <updated>2020-10-23T13:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p> 前序 后序 单层循环，只判断 stack 是否为空，且一开始将 root 放入 stack</p><p>中序 双层循环，外层判断 stack cur, 一开始 cur=root</p><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        TreeNode cur;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) stack.push(cur.right);</span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) stack.push(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="N叉树的前序遍历"><a href="#N叉树的前序遍历" class="headerlink" title="N叉树的前序遍历"></a>N叉树的前序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) stack.push(root);</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=cur.children.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                stack.push(cur.children.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = stack.pop();</span><br><span class="line">            res.add(<span class="number">0</span>, cur.val); <span class="comment">//头插法</span></span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) stack.push(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) stack.push(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="N-叉树后序遍历"><a href="#N-叉树后序遍历" class="headerlink" title="N 叉树后序遍历"></a>N 叉树后序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590. N叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            Node cur = stack.pop();</span><br><span class="line">            res.add(<span class="number">0</span>, cur.val);</span><br><span class="line">            <span class="keyword">for</span>(Node node: cur.children)&#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) deque.addLast(root);</span><br><span class="line">        TreeNode cur;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; t = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                cur = deque.pollFirst();</span><br><span class="line">                t.add(cur.val);</span><br><span class="line">                <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) deque.addLast(cur.left);</span><br><span class="line">                <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) deque.addLast(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="N叉树的层序遍历"><a href="#N叉树的层序遍历" class="headerlink" title="N叉树的层序遍历"></a>N叉树的层序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N叉树的层序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(Node root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;Node&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) deque.addLast(root);</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; t = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                cur = deque.pollFirst();</span><br><span class="line">                t.add(cur.val);</span><br><span class="line">                <span class="keyword">for</span>(Node node: cur.children)&#123;</span><br><span class="line">                    deque.addLast(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="垂续遍历"><a href="#垂续遍历" class="headerlink" title="垂续遍历"></a>垂续遍历</h4><p><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987. 二叉树的垂序遍历 - 力扣（LeetCode）</a></p><p>按照坐标排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Location&gt; locations;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(TreeNode root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        locations.add(<span class="keyword">new</span> Location(x, y, root.val));</span><br><span class="line">        help(root.left, x-<span class="number">1</span>, y+<span class="number">1</span>);</span><br><span class="line">        help(root.right, x+<span class="number">1</span>, y+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; verticalTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        locations = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        help(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Collections.sort(locations, (a, b)-&gt; <span class="number">100</span>*(a.x-b.x)+(a.y-b.y));</span><br><span class="line">        <span class="keyword">int</span> prex = locations.get(<span class="number">0</span>).x-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(Location loc: locations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(loc.x!=prex)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            res.get(res.size()-<span class="number">1</span>).add(loc.val);</span><br><span class="line">            prex = loc.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y; </span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Location(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)&#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">        val = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树的遍历&quot;&gt;&lt;a href=&quot;#树的遍历&quot; class=&quot;headerlink&quot; title=&quot;树的遍历&quot;&gt;&lt;/a&gt;树的遍历&lt;/h1&gt;&lt;p&gt; 前序 后序 单层循环，只判断 stack 是否为空，且一开始将 root 放入 stack&lt;/p&gt;
&lt;p&gt;中序 双层循环，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>地勘项目前期开发信息</title>
    <link href="https://zronghui.github.io/%E5%9C%B0%E5%8B%98%E9%A1%B9%E7%9B%AE%E5%89%8D%E6%9C%9F%E5%BC%80%E5%8F%91%E4%BF%A1%E6%81%AF.html"/>
    <id>https://zronghui.github.io/%E5%9C%B0%E5%8B%98%E9%A1%B9%E7%9B%AE%E5%89%8D%E6%9C%9F%E5%BC%80%E5%8F%91%E4%BF%A1%E6%81%AF.html</id>
    <published>2020-10-18T10:04:26.000Z</published>
    <updated>2020-10-18T11:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平台地址"><a href="#平台地址" class="headerlink" title="平台地址"></a>平台地址</h2><p>总部管理平台：10.103.240.153:9547</p><p>Admin: BUPT（大小写都可以）</p><p>Pwd: 123456</p><p>机构管理平台：10.103.240.153:9548</p><p>Admin: buptdeva</p><p>Pwd: 15300000001</p><p>Eureka:10.103.240.153:8000</p><h2 id="修改settings-xml（后端项目）"><a href="#修改settings-xml（后端项目）" class="headerlink" title="修改settings.xml（后端项目）"></a>修改settings.xml（后端项目）</h2><p>实验室项目会用到实验室仓库，需要修改maven配置文件，把下方代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>pcs-maven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>yang1290<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>pcs-maven-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>yang1290<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>填入setting.xml中，大约在130行的位置，视不同情况而定。</p><p><img src="https://i.loli.net/2020/10/18/KAbL1s6joVzuyMa.jpg" alt="img"> </p><p>可以使用自己下载的maven（建议使用，方便和其他仓库环境替换），也可以使用idea自带的maven，文件路径可以通过如下查看：</p><p><img src="https://i.loli.net/2020/10/18/wnativGOy8ULlXu.jpg" alt="img"> </p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h4 id="1-业务分析"><a href="#1-业务分析" class="headerlink" title="1.业务分析"></a>1.业务分析</h4><p>信息化管理平台主要的任务是负责管理一个项目从立项到执行最后到验收过程中所有的流程操作以及存储相应的文档资料，而且不同的角色在同一阶段也会执行不同的操作。因此开发设计应该按照项目的实际操作流程划分业务模块，并根据每个角色每个流程需要的完成功能模块设计。</p><h4 id="2-功能需求"><a href="#2-功能需求" class="headerlink" title="2.功能需求"></a>2.功能需求</h4><p>根据项目需求信息化管理平台将分为项目立项、项目执行、项目验收、项目台账四个主要模块，根据分工不同将设计四种不同的用户类型，分别为基金管理部门、勘察单位、监理单位和验收单位。不同用户在不同模块中执行不同的功能操作。一个完整的地质勘测项目的项目流程为项目立项阶段、项目预算阶段、项目执行阶段、项目验收阶段与项目收尾阶段，以项目流程阶段为基础介绍每个用户角色在各阶段可以执行的操作。</p><p>1) 项目立项</p><p><img src="https://i.loli.net/2020/10/18/GaPc6LnDVlo2ezK.jpg" alt="img"> </p><p>图1-1 项目立项用例图</p><p>项目立项阶段，基金管理部门在项目立项期新建项目，填写项目立项初始信息，提交初审，审批通过的项目就可以下达项目任务书。然后由勘察单位补充初审信息，提交项目立项资料，对基金管理部门下达的项目任务书进行确认，并提交项目设计报告供其审核。</p><p>基金管理部门审核项目设计报告通过后就可以委派监理单位。监理单位受到委派后制定监理计划，并提交供基金管理部门审核，同时可以查看项目设计资料，包括各项资料附件、任务书、合同等附件。基金管理部门审核监理计划，所有审核通过后基金管理部门将勘察合同和监理合同上传到系统中，一个基金项目就可以正式执行了。</p><p>2) 项目预算</p><p><img src="https://i.loli.net/2020/10/18/x1fBLWQOToD9zUr.jpg" alt="img"> </p><p>图1-2 项目预算用例图</p><p>项目预算阶段，由勘察单位制定项目预算，基金管理部门审核预算，并下达预算批复，再由勘察单位确认批复预算。</p><p>勘察单位在项目开展过程中可以根据预算和和工作开展情况提出预算拨付申请，并将拨付清单记录保存。基金管理部门按照预算和工作开展情况对勘查单位提出的预算拨付进行审核。同时对拨付清单与预算资料进行存储记录，以供查看。同时监理单位也可以在项目预算阶段中检查预算执行情况并汇报。</p><p>3) 项目执行</p><p><img src="https://i.loli.net/2020/10/18/cpUj1JGKTbLvDd2.jpg" alt="img"> </p><p>图1-3 项目执行用例图</p><p>项目执行阶段，由监理单位提供监理指标，并随时查看项目执行过程中的各种信息，并按照监管指标给出监理意见。</p><p>勘察单位对物探、化探、山地工程和钻探根据监管指标按照实施要求采集各项数据，每一段时间都采集一批数据，包括图片、影像和各种测量数据，将结果上传。</p><p>4) 项目验收</p><p><img src="https://i.loli.net/2020/10/18/SEB9H3z6yjiwvgM.jpg" alt="img"> </p><p>图1-4 项目验收用例图</p><p>项目验收阶段，先由基金管理单位委托验收单位。勘察单位提交项目验收申请。然后由监理单位审核验收申请，审批通过后交由验收单位验收。</p><p>验收单位下发验收意见。由勘察单位确认验收评审意见以及提交修改报告，最终将成果资料汇交。然后基金管理单位对验收成果资料汇交结果进行备案确认，至此，一个基金项目已经完成了。</p><p>5) 项目收尾</p><p><img src="https://i.loli.net/2020/10/18/XE69TzYbSgxJUIu.jpg" alt="img"> </p><p>图1-5 项目收尾用例图</p><p>在项目收尾阶段，基金管理部门将项目成果提交到上级图书馆汇交，将汇交凭证提交到系统中，最终还会根据成果执行储量评审、成果处置等功能。同时可以查看项目台账，项目台账中包含了一个项目在整个阶段的所有有关的文档、合同、勘察数据以及项目成果等资料信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;平台地址&quot;&gt;&lt;a href=&quot;#平台地址&quot; class=&quot;headerlink&quot; title=&quot;平台地址&quot;&gt;&lt;/a&gt;平台地址&lt;/h2&gt;&lt;p&gt;总部管理平台：10.103.240.153:9547&lt;/p&gt;
&lt;p&gt;Admin: BUPT（大小写都可以）&lt;/p&gt;
&lt;p&gt;P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html</id>
    <published>2020-10-11T09:02:50.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>p2 p3 讲的都很棒</p><p><a href="https://www.bilibili.com/video/av70148899?p=2">[Algorithm][011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili</a></p><h3 id="三种背包问题"><a href="#三种背包问题" class="headerlink" title="三种背包问题"></a>三种背包问题</h3><p>dp 问题的 3 要素</p><p><img src="https://i.loli.net/2020/10/11/y4vZ5P6uMmcqkiO.png" alt="504176@1602352071@2"></p><p>背包：背包空间是有限的，往里面放石头，每个石头有 体积 vi 和 价值 wi，求背包能放的最大的价值</p><p>或者要求把背包放满的最大价值</p><p>01背包：每个元素取 0 个或 1 个</p><p>完全背包：每个元素可以取无数个</p><p>多重背包：每个元素可以取有限个</p><p><img src="https://i.loli.net/2020/10/11/iNDByobUa6vCk5O.png" alt="331176@1602352657@2"></p><h3 id="01-背包问题"><a href="#01-背包问题" class="headerlink" title="01 背包问题"></a>01 背包问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示从 1~i 的元素中进行选择，体积为 j 时的 value</span><br><span class="line">dp[i][j] &#x3D; max(dp[i-1][j], dp[i-1][j-vi]+wi)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/11/O86kuQdyrpXSo7W.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP @18-14.40 1602404542726"></p><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>01 背包在将二维空间简化为一维时，为了避免修改上次的值，按照从后往前的遍历顺序</p><p>然而 01 背包想要避免的事情，正是完全背包想要的。完全背包从前往后遍历 1 遍就能利用当前元素取无数个的条件</p><p>详见↓代码</p><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p>up说了，LeetCode 上甚至没有这样的题。</p><p>不过感觉听完思路也不是太难</p><p>主要是用 二进制分解为 01背包 问题</p><p><img src="https://i.loli.net/2020/10/11/e5D9rGzpRMTg2Uh.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP @45-31.39 1602405979949"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="https://i.loli.net/2020/10/11/Ss2CFqnW6i5BrXO.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @11-32.92 1602406642659"></p><p><img src="https://i.loli.net/2020/10/11/Qj2sLdAOGPnlcYy.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @08-36.31 1602406470479"></p><p><img src="https://i.loli.net/2020/10/11/82vpBSm4yHt5eWo.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @05-43.06 1602406299806"></p><h2 id="LeetCode-实战"><a href="#LeetCode-实战" class="headerlink" title="LeetCode 实战"></a>LeetCode 实战</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/">希望用一种规律搞定背包问题 - 组合总和 Ⅳ - 力扣（LeetCode）</a><br><a href="https://hexuezhi.github.io/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/">01 背包问题 | 何小智の博客 | 时间是人类发展的空间。</a></p><blockquote><h3 id="一、背包问题分类"><a href="#一、背包问题分类" class="headerlink" title="一、背包问题分类"></a>一、背包问题分类</h3><h4 id="1-组合问题"><a href="#1-组合问题" class="headerlink" title="1 组合问题"></a>1 组合问题</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/description/">377. 组合总和 Ⅳ</a></p><p><a href="https://leetcode-cn.com/problems/target-sum/description/">494. 目标和</a></p><p><a href="https://leetcode-cn.com/problems/coin-change-2/description/">518. 零钱兑换 II</a></p><h4 id="2-True、False-问题。"><a href="#2-True、False-问题。" class="headerlink" title="2 True、False 问题。"></a>2 True、False 问题。</h4><p><a href="https://leetcode-cn.com/problems/word-break/">139. 单词拆分</a></p><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></p><h4 id="3-最大最小问题"><a href="#3-最大最小问题" class="headerlink" title="3 最大最小问题"></a>3 最大最小问题</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/description/">474. 一和零</a></p><p><a href="https://leetcode-cn.com/problems/coin-change/description/">322. 零钱兑换</a></p><h3 id="二、背包问题状态转移公式"><a href="#二、背包问题状态转移公式" class="headerlink" title="二、背包问题状态转移公式"></a>二、背包问题状态转移公式</h3><h4 id="1-组合问题公式"><a href="#1-组合问题公式" class="headerlink" title="1 组合问题公式"></a>1 组合问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] +&#x3D; dp\[i-num\]</span><br></pre></td></tr></table></figure><h4 id="2-True、False-问题公式"><a href="#2-True、False-问题公式" class="headerlink" title="2 True、False 问题公式"></a>2 True、False 问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] &#x3D; dp\[i\] or dp\[i-num\]</span><br></pre></td></tr></table></figure><h4 id="3-最大最小问题公式"><a href="#3-最大最小问题公式" class="headerlink" title="3 最大最小问题公式"></a>3 最大最小问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] &#x3D; min(dp\[i\], dp\[i-num\]+1)或者dp\[i\] &#x3D; max(dp\[i\], dp\[i-num\]+1)</span><br></pre></td></tr></table></figure><h3 id="三、解题步骤"><a href="#三、解题步骤" class="headerlink" title="三、解题步骤"></a>三、解题步骤</h3><ol><li>分析是否为背包问题。</li><li>是以上三种背包问题中的哪一种。</li><li>是 0-1 背包问题还是完全背包问题。也就是题目给的 nums 数组中的元素是否可以重复使用。</li><li>如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。</li></ol><h3 id="四、背包问题的判定"><a href="#四、背包问题的判定" class="headerlink" title="四、背包问题的判定"></a>四、背包问题的判定</h3><p><strong>背包问题具备的特征</strong>：</p><p>给定一个 target，target 可以是数字也可以是字符串，再给定一个数组 nums，nums 中装的可能是数字，也可能是字符串，问：能否使用 nums 中的元素做各种排列组合得到 target。</p><p><strong>背包问题技巧</strong>：</p><ol><li>如果是 0-1 背包，即数组中的元素不可重复使用，nums 放在外循环，target 在内循环，且内循环倒序；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for num in nums:</span><br><span class="line">    for i in range(target, nums-1, -1):</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是完全背包，即数组中的元素可重复使用，nums 放在外循环，target 在内循环。且内循环正序。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for num in nums:</span><br><span class="line">    for i in range(nums, target+1):</span><br></pre></td></tr></table></figure><ol start="3"><li>如果组合问题需考虑元素之间的顺序，需将 target 放在外循环，将 nums 放在内循环。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, target+1):</span><br><span class="line">    for num in nums:</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/26/4kESMmGZJO5PhiC.png" alt="image-20201026072211241" style="zoom: 33%;" /></blockquote><h3 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h3><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h4><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背包问题：1. 背包分类 2. 循环顺序 3. 状态转移</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0 1 背包 背包上限为 sum/2</span></span><br><span class="line">        <span class="comment">// dp[i][j] : 前 i 个数字选择若干个元素, 能否 使得背包和为 j </span></span><br><span class="line">        <span class="comment">// dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]]</span></span><br><span class="line">        <span class="comment">// return dp[-1][-1]</span></span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) target += num;</span><br><span class="line">        <span class="keyword">if</span>(target%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        target /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=target; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!dp[j] &amp;&amp; j-num&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[j] = dp[j-num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="474-一和零-力扣（LeetCode）"><a href="#474-一和零-力扣（LeetCode）" class="headerlink" title="474. 一和零 - 力扣（LeetCode）"></a>474. 一和零 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/">474. 一和零 - 力扣（LeetCode）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">背包大小有 2 个限制， 所以 dp[i][j][k] 有三层</span><br><span class="line">表示 前 i 个字符串 背包上限为 j 和 k 时，最大的 value（不撑破背包时 字符串的数量）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01背包问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(String s: strs)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] cnt = count(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i-cnt[<span class="number">0</span>]&gt;=<span class="number">0</span> &amp;&amp; j-cnt[<span class="number">1</span>]&gt;=<span class="number">0</span>)</span><br><span class="line">                        dp[i][j] = Math.max(dp[i][j], dp[i-cnt[<span class="number">0</span>]][j-cnt[<span class="number">1</span>]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] count(String s)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">            cnt[c-<span class="string">'0'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="494-目标和-力扣（LeetCode）"><a href="#494-目标和-力扣（LeetCode）" class="headerlink" title="494. 目标和 - 力扣（LeetCode）"></a>494. 目标和 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/target-sum">494. 目标和 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题转化：num 与 -num 选择哪一个结果相差 2*num</span></span><br><span class="line"><span class="comment">//    将 num -num 映射为 2*num  0</span></span><br><span class="line"><span class="comment">//    将 nums 中的每个 num 转换成 2*num，操作为取或不取</span></span><br><span class="line"><span class="comment">//    S 的范围是 -sum(nums) ~ sum(nums), 对 num 做映射之后，S 的范围也发生了变化: 0~2*sum(nums)</span></span><br><span class="line"><span class="comment">//    因此，S -&gt; S+sum(nums)，完成 S 的映射</span></span><br><span class="line"><span class="comment">// 现在是标准的 01 背包 问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            nums[i] += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S&gt;sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        S += sum;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[S+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=S; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-num&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i] = dp[i] + dp[i-num];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[S];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="879-盈利计划-力扣（LeetCode）不会"><a href="#879-盈利计划-力扣（LeetCode）不会" class="headerlink" title="879. 盈利计划 - 力扣（LeetCode）不会"></a>879. 盈利计划 - 力扣（LeetCode）不会</h4><p><a href="https://leetcode-cn.com/problems/profitable-schemes/">879. 盈利计划 - 力扣（LeetCode）</a></p><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><h4 id="322-零钱兑换-力扣（LeetCode）"><a href="#322-零钱兑换-力扣（LeetCode）" class="headerlink" title="322. 零钱兑换 - 力扣（LeetCode）"></a>322. 零钱兑换 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换 - 力扣（LeetCode）</a></p><p>换成指定金额的最少硬币数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coin&gt;=<span class="number">0</span> &amp;&amp; dp[i-coin]!=Integer.MAX_VALUE)</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i-coin]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]==Integer.MAX_VALUE? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="518-零钱兑换-II-力扣（LeetCode）"><a href="#518-零钱兑换-II-力扣（LeetCode）" class="headerlink" title="518. 零钱兑换 II - 力扣（LeetCode）"></a>518. 零钱兑换 II - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/coin-change-2/">518. 零钱兑换 II - 力扣（LeetCode）</a></p><p>换成指定金额的方法数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coin&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[i] = dp[i]+dp[i-coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1449-数位成本和为目标值的最大-力扣（LeetCode）"><a href="#1449-数位成本和为目标值的最大-力扣（LeetCode）" class="headerlink" title="1449. 数位成本和为目标值的最大 - 力扣（LeetCode）"></a>1449. 数位成本和为目标值的最大 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target">1449. 数位成本和为目标值的最大数字 - 力扣（LeetCode）</a></p><p>这里背包需要装满，初始化时只初始化 dp[0] = “”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] cost, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 所占空间：i(1-9) -&gt; cost[i-1] </span></span><br><span class="line">        <span class="comment">// value: 先放较大的数字</span></span><br><span class="line">        String[] dp = <span class="keyword">new</span> String[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">8</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=target; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-cost[i]&gt;=<span class="number">0</span> &amp;&amp; dp[j-cost[i]]!=<span class="keyword">null</span>)</span><br><span class="line">                    dp[j] = max(dp[j], dp[j-cost[i]]+String.valueOf(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target]==<span class="keyword">null</span>? <span class="string">"0"</span> : dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">max</span><span class="params">(String a, String b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(a.length()&gt;b.length() || (a.length()==b.length() &amp;&amp; a.compareTo(b)&gt;<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="377-组合总和-Ⅳ-力扣（LeetCode）"><a href="#377-组合总和-Ⅳ-力扣（LeetCode）" class="headerlink" title="377. 组合总和 Ⅳ - 力扣（LeetCode）"></a>377. 组合总和 Ⅳ - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/">377. 组合总和 Ⅳ - 力扣（LeetCode）</a></p><p>这里对元素的顺序不同算一种方案，因此，对 nums 的遍历在内层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=target; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-num&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[i] += dp[i-num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-10</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-10.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-10.html</id>
    <published>2020-10-01T05:49:22.000Z</published>
    <updated>2020-12-02T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="2577a88e0836e78219563bffc2d6cd1320c98f0638a72ef3893bfdeea41c86e5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 面试宝典笔记</title>
    <link href="https://zronghui.github.io/java/%E5%9F%BA%E7%A1%80/Java-%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/java/%E5%9F%BA%E7%A1%80/Java-%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-09-29T09:30:40.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="01-Java-面试宝典-v1-1-pdf-的批注摘要。"><a href="#01-Java-面试宝典-v1-1-pdf-的批注摘要。" class="headerlink" title="01.Java 面试宝典 - v1.1.pdf 的批注摘要。"></a>01.Java 面试宝典 - v1.1.pdf 的批注摘要。</h2><h3 id="6-什么是值传递和引用传递？"><a href="#6-什么是值传递和引用传递？" class="headerlink" title="6.什么是值传递和引用传递？"></a>6.什么是值传递和引用传递？</h3><p>什么是值传递和引用传递？ 什么是值传递和引用传递？ 对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。 对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映 到所有的对象上。</p><h3 id="11-是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"><a href="#11-是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？" class="headerlink" title="11.是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"></a>11.是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</h3><h3 id="12-如何实现对象克隆？"><a href="#12-如何实现对象克隆？" class="headerlink" title="12.如何实现对象克隆？"></a>12.如何实现对象克隆？</h3><p>如何实现对象克隆？ 如何实现对象克隆？</p><p>答：有两种方式： 1.实现 Cloneable 接口并重写 Object 类中的 clone() 方法； 2.实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</p><h3 id="13-一个“-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#13-一个“-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="13.一个“.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>13.一个“.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h3><h3 id="14-Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现-接口？"><a href="#14-Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现-接口？" class="headerlink" title="14.Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现 接口？"></a>14.Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现 接口？</h3><p>答：可以继承其他类或实现其他接口</p><h3 id="15-内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"><a href="#15-内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？" class="headerlink" title="15.内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"></a>15.内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</h3><p> 答：一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员</p><h3 id="2-Overload-和-Override-的区别？-Overloaded-的方法是否可以改变返回值的类型"><a href="#2-Overload-和-Override-的区别？-Overloaded-的方法是否可以改变返回值的类型" class="headerlink" title="2.Overload 和 Override 的区别？ Overloaded 的方法是否可以改变返回值的类型?"></a>2.Overload 和 Override 的区别？ Overloaded 的方法是否可以改变返回值的类型?</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>什么是复制构造函数？</p><h3 id="3-Java-中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"><a href="#3-Java-中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？" class="headerlink" title="3.Java 中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"></a>3.Java 中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</h3><p>Java 不支持像 C++ 中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创 建默认的复制构造函数。</p><h3 id="4-构造器-Constructor-是否可被-Override"><a href="#4-构造器-Constructor-是否可被-Override" class="headerlink" title="4.构造器 Constructor 是否可被 Override?"></a>4.构造器 Constructor 是否可被 Override?</h3><p>Override? Override?</p><p>Override? 构造器 Constructor 不能被继承，因此不能重写 Override，但可以被重载 Overload。</p><h3 id="6-接口和抽象类的区别是什么？"><a href="#6-接口和抽象类的区别是什么？" class="headerlink" title="6.接口和抽象类的区别是什么？"></a>6.接口和抽象类的区别是什么？</h3><p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</p><p>类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。</p><p>Java 接口中声明的变量默认都是 final 的。抽象类可以包含非 final 的变量。 Java 接口中的成员函数默认是 public 的。抽象类的成员函数可以是 private，protected 或者是 public 。</p><p>抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调 用的。</p><p>*<em>看起来，抽象类 就是普通的类里面加了没有实现的方法（抽象方法）。而接口限制较多，所有方法都是抽象的，变量是 final，成员函数全是 public *</em></p><h3 id="7-下列说法正确的有（）"><a href="#7-下列说法正确的有（）" class="headerlink" title="7.下列说法正确的有（）"></a>7.下列说法正确的有（）</h3><p>普通的类方法是可以和类名同名的，和构造方法唯一的区分就是，构造方法没有 返回值</p><h3 id="8-Java-接口的修饰符可以为"><a href="#8-Java-接口的修饰符可以为" class="headerlink" title="8.Java 接口的修饰符可以为?"></a>8.Java 接口的修饰符可以为?</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>C.final D.abstract</p><p>接口很重要，为了说明情况，这里稍微啰嗦点： （1）接口用于描述系统对外提供的所有服务,因此接口中的成员常量和方法都必须是公开(public)类型的,确保外部 使用者能访问它们；</p><p>（2）接口仅仅描述系统能做什么,但不指明如何去做,所以接口中的方法都是抽象(abstract)方法；</p><p>（3）接口不涉及和任何具体实例相关的细节,因此接口没有构造方法,不能被实例化,没有实例变量，只有静态（static）变量；</p><p>（4）接口的中的变量是所有实现类共有的，既然共有，肯定是不变的东西，因为变化的东西也不能够算共有。所 以变量是不可变(final)类型，也就是常量了。</p><h3 id="9-下面是-People-和-Child-类的定义和构造方法，每个构造方法都输出编号。在-执行-new-Child-“mike”-的时候都有哪些构造方法被顺序调用？请选择输出结果"><a href="#9-下面是-People-和-Child-类的定义和构造方法，每个构造方法都输出编号。在-执行-new-Child-“mike”-的时候都有哪些构造方法被顺序调用？请选择输出结果" class="headerlink" title="9.下面是 People 和 Child 类的定义和构造方法，每个构造方法都输出编号。在 执行 new Child(“mike”) 的时候都有哪些构造方法被顺序调用？请选择输出结果"></a>9.下面是 People 和 Child 类的定义和构造方法，每个构造方法都输出编号。在 执行 new Child(“mike”) 的时候都有哪些构造方法被顺序调用？请选择输出结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123; </span><br><span class="line">  String name; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.print(<span class="number">1</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="number">2</span>); </span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123; </span><br><span class="line">  People father; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">    System.out.print(<span class="number">3</span>); </span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    father = <span class="keyword">new</span> People(name + <span class="string">":F"</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.print(<span class="number">4</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>D.132 答案：D</p><p>：子类没有显示调用父类构造函数，不管子类构造函数是否带参数都默认调用父类无参的构造函 数，若父类没有则编译出错。</p><h3 id="11-两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对？"><a href="#11-两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对？" class="headerlink" title="11.两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？"></a>11.两个对象值相同(x.equals(y) == true)，但却可有不同的 hash code，这句话对不对？</h3><p>：(1)如果两个对象相同（equals 方法返回 true ），那么它们的 hashCode 值一定要相同；(2)如果两个对象的 hashCode 相同，它们并不一定相同。</p><p>如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在 Set 集合中，同时增加新元素 的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</p><h3 id="12-接口是否可继承（extends）接口-抽象类是否可实现（implements）接口-抽象类是否可继承具体类（concrete-class）"><a href="#12-接口是否可继承（extends）接口-抽象类是否可实现（implements）接口-抽象类是否可继承具体类（concrete-class）" class="headerlink" title="12.接口是否可继承（extends）接口? 抽象类是否可实现（implements）接口? 抽象类是否可继承具体类（concrete class）?"></a>12.接口是否可继承（extends）接口? 抽象类是否可实现（implements）接口? 抽象类是否可继承具体类（concrete class）?</h3><h3 id="13-子类父类方法执行顺序"><a href="#13-子类父类方法执行顺序" class="headerlink" title="13.子类父类方法执行顺序"></a>13.子类父类方法执行顺序</h3><p>指出下面程序的运行结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; </span><br><span class="line">  <span class="keyword">static</span>&#123; </span><br><span class="line">    System.out.print(<span class="string">"1"</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123; </span><br><span class="line">    System.out.print(<span class="string">"2"</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; </span><br><span class="line">  <span class="keyword">static</span>&#123; </span><br><span class="line">    System.out.print(<span class="string">"a"</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123; </span><br><span class="line">    System.out.print(<span class="string">"b"</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">    A ab = <span class="keyword">new</span> B(); </span><br><span class="line">    ab = <span class="keyword">new</span> B(); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象时构造器的调用顺序是：先初始化静态成员，然后调用父类构造器，再初始化 非静态成员，最后调用自身构造器。</p><p>1a2b2b</p><p><strong>总结：调用顺序按照以下规则排序</strong></p><ol><li>静态方法&gt;普通方法</li><li>父类方法&gt;子类方法</li></ol><h3 id="14-Class-forName（String-className）这个方法的作用"><a href="#14-Class-forName（String-className）这个方法的作用" class="headerlink" title="14.Class.forName（String className）这个方法的作用"></a>14.Class.forName（String className）这个方法的作用</h3><p>通过类的全名获得该类的类对象</p><h3 id="15-什么是-AOP-和-OOP，IOC-和-DI-有什么不同"><a href="#15-什么是-AOP-和-OOP，IOC-和-DI-有什么不同" class="headerlink" title="15.什么是 AOP 和 OOP，IOC 和 DI 有什么不同?"></a>15.什么是 AOP 和 OOP，IOC 和 DI 有什么不同?</h3><p>AO P</p><p>将通用需求功能从不相关类之中分离出来；同时，能够使得很多类共享一个行为，一旦行为发生变化，不必修改很多类，只要修改这 个行为就可以</p><p>控制反转和依 赖注入是同一个概念</p><h2 id="第-3-章-关键字"><a href="#第-3-章-关键字" class="headerlink" title="第 3 章 关键字"></a>第 3 章 关键字</h2><h3 id="1-”static”-关键字是什么意思？Java-中是否可以覆盖-override-一个-private-或者是-static-的方法？"><a href="#1-”static”-关键字是什么意思？Java-中是否可以覆盖-override-一个-private-或者是-static-的方法？" class="headerlink" title="1.”static” 关键字是什么意思？Java 中是否可以覆盖(override) 一个 private 或者是 static 的方法？"></a>1.”static” 关键字是什么意思？Java 中是否可以覆盖(override) 一个 private 或者是 static 的方法？</h3><p>Java 中 static 方法不能被覆盖，因为<strong>方法覆盖是基于运行时动态绑定</strong>的，而 static 方法是编译时静态绑定的。s tatic 方法跟类的任何实例都不相关，所以概念上不适用。</p><h3 id="3-访问修饰符-public-private-protected-以及不写（默认）时的区别？"><a href="#3-访问修饰符-public-private-protected-以及不写（默认）时的区别？" class="headerlink" title="3.访问修饰符 public, private, protected, 以及不写（默认）时的区别？"></a>3.访问修饰符 public, private, protected, 以及不写（默认）时的区别？</h3><h3 id="4-volatile关键字是否能保证线程安全？"><a href="#4-volatile关键字是否能保证线程安全？" class="headerlink" title="4.volatile关键字是否能保证线程安全？"></a>4.volatile关键字是否能保证线程安全？</h3><p>答案：不能 </p><p>解析：volatile 关键字用在多线程同步中，可<strong>保证读取的可见性</strong>，JVM只是保证从主内存加载到线程工作内存的 值是最新的读取值，而非 cache 中。但多个线程对 volatile 的写操作，无法保证线程安全。例如假如线程 1，线 程 2 在进行 read,load 操作中，发现主内存中 count 的值都是 5，那么都会加载这个最新的值，在线程 1 对 count 进行修改之后，会 write 到主内存中，主内存中的 count 变量就会变为 6；线程 2 由于已经进行 read,load 操 作，在进行运算之后，也会更新主内存 count 的变量值为 6；导致两个线程及时用 volatile 关键字修改之后，还 是会存在并发的情况。</p><h3 id="5-Java-有没有-goto"><a href="#5-Java-有没有-goto" class="headerlink" title="5.Java 有没有 goto?"></a>5.Java 有没有 goto?</h3><p>答：goto 是 Java 中的保留字，在目前版本的 Java 中没有使用。</p><h3 id="6-Java-中的-final关键字有哪些用法？"><a href="#6-Java-中的-final关键字有哪些用法？" class="headerlink" title="6.Java 中的 final关键字有哪些用法？"></a>6.Java 中的 final关键字有哪些用法？</h3><h3 id="7-什么时候用-assert？"><a href="#7-什么时候用-assert？" class="headerlink" title="7.什么时候用 assert？"></a>7.什么时候用 assert？</h3><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p>断言用于调试目的： assert(a &gt; 0); // throws an AssertionError if a &lt;= 0 断言可以有两种形式： assert Expression1; assert Expression1 : Expression2 ; Expression1 应该总是产生一个布尔值 Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息</p><h3 id="2-用最有效率的方法算出-2-乘以-8-等於几"><a href="#2-用最有效率的方法算出-2-乘以-8-等於几" class="headerlink" title="2.用最有效率的方法算出 2 乘以 8 等於几?"></a>2.用最有效率的方法算出 2 乘以 8 等於几?</h3><h3 id="3-存在使-i-1-lt-i的数吗"><a href="#3-存在使-i-1-lt-i的数吗" class="headerlink" title="3.存在使 i + 1 &lt; i的数吗?"></a>3.存在使 i + 1 &lt; i的数吗?</h3><p>答案：存在 解析：如果 i 为 int 型，那么当 i 为 int 能表示的最大整数时</p><p>i+1 就溢出变成负数了</p><p>扩展：存在使 i &gt; j || i &lt;= j 不成立的数吗? 答案：存在 解析：比如 Double.NaN 或 Float.NaN 。</p><h3 id="4-0-6332-的数据类型是（）"><a href="#4-0-6332-的数据类型是（）" class="headerlink" title="4.0.6332 的数据类型是（）"></a>4.0.6332 的数据类型是（）</h3><h3 id="5-System-out-println-“5”-2-的输出结果应该是（）。"><a href="#5-System-out-println-“5”-2-的输出结果应该是（）。" class="headerlink" title="5.System.out.println(“5” + 2);的输出结果应该是（）。"></a>5.System.out.println(“5” + 2);的输出结果应该是（）。</h3><p>A.52</p><p>Java 会自动将 2 转换为字符串。</p><h3 id="8-int-和-Integer-有什么区别"><a href="#8-int-和-Integer-有什么区别" class="headerlink" title="8.int 和 Integer 有什么区别?"></a>8.int 和 Integer 有什么区别?</h3><h3 id="9-char-型变量中能不能存贮一个中文汉字-为什么"><a href="#9-char-型变量中能不能存贮一个中文汉字-为什么" class="headerlink" title="9.char 型变量中能不能存贮一个中文汉字?为什么?"></a>9.char 型变量中能不能存贮一个中文汉字?为什么?</h3><p>char 类型可以存储一个中文汉字，因为 Java 中使用的编码是 Unicode（不选择任何特定的编码，直接使用 字符在字符集中的编号，这是统一的唯一方法），一个 char 类型占 2 个字节（16bit），所以放一个中文是没问 题的。</p><h3 id="10-Math-round-11-5-等于多少-Math-round-11-5-等于多少"><a href="#10-Math-round-11-5-等于多少-Math-round-11-5-等于多少" class="headerlink" title="10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?"></a>10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?</h3><p>参数加 1/ 2 后求其 floor</p><p>：Math.round(11.5)==12 Math.round(-11.5)==-11</p><h2 id="第-5-章-字符串与数组"><a href="#第-5-章-字符串与数组" class="headerlink" title="第 5 章 字符串与数组"></a>第 5 章 字符串与数组</h2><h3 id="1-下面程序的运行结果是（）"><a href="#1-下面程序的运行结果是（）" class="headerlink" title="1.下面程序的运行结果是（）"></a>1.下面程序的运行结果是（）</h3><p>下面程序的运行结果是（） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"hello"</span>; </span><br><span class="line">String str2 = <span class="string">"he"</span> + <span class="keyword">new</span> String(<span class="string">"llo"</span>); </span><br><span class="line">System.err.println(str1 == str2);</span><br></pre></td></tr></table></figure><p> 答案：false 解析：因为 str2 中的 llo 是新申请的内存块，而 == 判断的是对象的地址而非值，所以不一样。如果是 2 = str1 ，那么就是 true 了。</p><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><h3 id="2-下面代码的运行结果为"><a href="#2-下面代码的运行结果为" class="headerlink" title="2.下面代码的运行结果为?"></a>2.下面代码的运行结果为?</h3><p>String s; System.out.println(“s=” + s);</p><p>C.由于 String s 没有初始化，代码不能编译通过</p><h3 id="3-String-是最基本的数据类型吗"><a href="#3-String-是最基本的数据类型吗" class="headerlink" title="3.String 是最基本的数据类型吗?"></a>3.String 是最基本的数据类型吗?</h3><p>：不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除 了基本类型（primitive type）和枚举类型（enumeration type），剩下的都是引用类型（reference type）。</p><h3 id="4-数组有没有-length-方法-String-有没有-length-方法？"><a href="#4-数组有没有-length-方法-String-有没有-length-方法？" class="headerlink" title="4.数组有没有 length() 方法? String 有没有 length() 方法？"></a>4.数组有没有 length() 方法? String 有没有 length() 方法？</h3><p> 答：数组没有 length()方法，有 length 的属性。String 有 length()方法。</p><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><h3 id="5-是否可以继承-String-类"><a href="#5-是否可以继承-String-类" class="headerlink" title="5.是否可以继承 String 类?"></a>5.是否可以继承 String 类?</h3><p>答：String 类是 final 类，不可以被继承。</p><h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><h3 id="6-String-和StringBuilder、StringBuffer-的区别"><a href="#6-String-和StringBuilder、StringBuffer-的区别" class="headerlink" title="6.String 和StringBuilder、StringBuffer 的区别?"></a>6.String 和StringBuilder、StringBuffer 的区别?</h3><p>其中 String 是只读字符串，也就意味着 String 引用的字符串内容是不能被改变的。而 StringBuffer 和 Stri ngBuilder 类表示的字符串对象可以直接进行修改。</p><p>StringBuilder 是 JDK 1.5 中引入的，它和 StringBuffer 的 方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被 synchronized 修饰，因此它 的效率也比 StringBuffer 略高。</p><h3 id="7-String-s-new-String-“xyz”-创建了几个字符串对象？"><a href="#7-String-s-new-String-“xyz”-创建了几个字符串对象？" class="headerlink" title="7.String s=new String(“xyz”);创建了几个字符串对象？"></a>7.String s=new String(“xyz”);创建了几个字符串对象？</h3><p>答：两个对象，一个是静态存储区的”xyz”,一个是用new创建在堆上的对象。</p><h3 id="8-将字符-“12345”-转换成-long-型"><a href="#8-将字符-“12345”-转换成-long-型" class="headerlink" title="8.将字符 “12345” 转换成 long 型"></a>8.将字符 “12345” 转换成 long 型</h3><p>解答: String s=”12345″; long num=Long.valueOf(s).longValue();</p><h3 id="10-String-s-“Hello”-s-s-“-world-”-这两行代码执行后，原始的-String-对象中的内容到底变了没有？"><a href="#10-String-s-“Hello”-s-s-“-world-”-这两行代码执行后，原始的-String-对象中的内容到底变了没有？" class="headerlink" title="10.String s = “Hello”;s = s + “ world!”; 这两行代码执行后，原始的 String 对象中的内容到底变了没有？"></a>10.String s = “Hello”;s = s + “ world!”; 这两行代码执行后，原始的 String 对象中的内容到底变了没有？</h3><h3 id="11-如何把一段逗号分割的字符串转换成一个数组"><a href="#11-如何把一段逗号分割的字符串转换成一个数组" class="headerlink" title="11.如何把一段逗号分割的字符串转换成一个数组?"></a>11.如何把一段逗号分割的字符串转换成一个数组?</h3><p>用正则表达式，代码大概为： String [] result = orgStr.split(“,”);</p><h3 id="12-下面这条语句一共创建了多少个对象：-String-s-“a”-”b”-”c”-”d”"><a href="#12-下面这条语句一共创建了多少个对象：-String-s-“a”-”b”-”c”-”d”" class="headerlink" title="12.下面这条语句一共创建了多少个对象： String s=“a”+”b”+”c”+”d”;"></a>12.下面这条语句一共创建了多少个对象： String s=“a”+”b”+”c”+”d”;</h3><p>String s=“a”+”b”+”c”+”d”;</p><p><strong>代码被编译器在编译时优化</strong>后，相当于直接定义了一个”abcd”的字符串，所以，上面的代码应 该只创建了一个 String 对象。写如下两行代码， String s =”a” + “b” + “c” + “d”; System.out.println(s== “abcd”); 最终打印的结果应该为 true。</p><h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><h3 id="2-ArrayList-list-new-ArrayList-20-中的-list-扩充几次"><a href="#2-ArrayList-list-new-ArrayList-20-中的-list-扩充几次" class="headerlink" title="2.ArrayList list = new ArrayList(20);中的 list 扩充几次?"></a>2.ArrayList list = new ArrayList(20);中的 list 扩充几次?</h3><p>解析：这里有点迷惑人，大家都知道默认 ArrayList 的长度是 10 个，所以如果你要往 list 里添加 20 个元素肯定 要扩充一次（扩充为原来的 1.5 倍），但是这里显示指明了需要多少空间，所以就一次性为你分配这么多空 间，也就是不需要扩充了。</p><h3 id="5-什么是迭代器-Iterator-？"><a href="#5-什么是迭代器-Iterator-？" class="headerlink" title="5.什么是迭代器(Iterator)？"></a>5.什么是迭代器(Iterator)？</h3><h3 id="6-Iterator和ListIterator的区别是什么？"><a href="#6-Iterator和ListIterator的区别是什么？" class="headerlink" title="6.Iterator和ListIterator的区别是什么？"></a>6.Iterator和ListIterator的区别是什么？</h3><p>Iterator 可用来遍历 Set 和 List 集合，但是 ListIterator 只能用来遍历 List 。 Iterator 对集合只能是前向遍历，ListIterator 既可以前向也可以后向。 ListIterator 实现了 Iterator 接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的 索引，等等。</p><h3 id="7-快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#7-快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="7.快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"></a>7.快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</h3><p>java.util 包下面的所有的集合类都是快速失败的，而 java.util.concurrent 包下面的所有的类都是安全失败的</p><p>快速失败的迭代器会抛出 ConcurrentModificationException 异常，而安全失败的迭代器永远不会抛出这样的异常。</p><p>注：用 iterator.remove 应该不会引起异常</p><h3 id="9-hashCode-和-equals-方法的重要性体现在什么地方？"><a href="#9-hashCode-和-equals-方法的重要性体现在什么地方？" class="headerlink" title="9.hashCode() 和 equals() 方法的重要性体现在什么地方？"></a>9.hashCode() 和 equals() 方法的重要性体现在什么地方？</h3><h3 id="10-HashMap-和-Hashtable-有什么区别？"><a href="#10-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="10.HashMap 和 Hashtable 有什么区别？"></a>10.HashMap 和 Hashtable 有什么区别？</h3><p>HashMap 和 Hashtable 都实现了 Map 接口，因此很多特性非常相似。但是，他们有以下不同点： HashMap 允许键和值是 null，而 Hashtable 不允许键或者值是 null。 Hashtable 是同步的，而 HashMap 不是。因此， HashMap 更适合于单线程环境，而 Hashtable 适合于多线 程环境。 HashMap 提供了可供应用迭代的键的集合，因此，HashMap 是快速失败的。另一方面，Hashtable 提供了对 键的列举(Enumeration)。 一般认为 Hashtable 是一个遗留的类。</p><h3 id="11-数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用-Array-而不是-ArrayList？"><a href="#11-数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用-Array-而不是-ArrayList？" class="headerlink" title="11.数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用 Array 而不是 ArrayList？"></a>11.数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用 Array 而不是 ArrayList？</h3><p>Array 可以包含基本类型和对象类型，ArrayList 只能包含对象类型。</p><p>Array 大小是固定的，ArrayList 的大小是动态变化的。</p><p>ArrayList 提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</p><h3 id="12-ArrayList-和-LinkedList-有什么区别？"><a href="#12-ArrayList-和-LinkedList-有什么区别？" class="headerlink" title="12.ArrayList 和 LinkedList 有什么区别？"></a>12.ArrayList 和 LinkedList 有什么区别？</h3><h3 id="-8"><a href="#-8" class="headerlink" title=""></a></h3><p>ArrayList 是基于索引的数据接口，它的底层是数组</p><p>以O(1)时间复杂度对元素进行随机访问</p><p>，LinkedList 是以元素列表的形式存储它的数据</p><p>查找某个元素的时间复杂度是O(n)</p><p>LinkedList 比 ArrayList 更占内存，因为 LinkedList 为每一个节点存储了两个引用，一个指向前一个元素，一 个指向下一个元素。</p><h3 id="13-Comparable-和Comparator-接口是干什么的？列出它们的区别。"><a href="#13-Comparable-和Comparator-接口是干什么的？列出它们的区别。" class="headerlink" title="13.Comparable 和Comparator 接口是干什么的？列出它们的区别。"></a>13.Comparable 和Comparator 接口是干什么的？列出它们的区别。</h3><p>包含一个 compareTo(x) 方法的 Comparable 接口</p><p>包含 compare(a, b) 和 equals() 两个方法的 Comparator 接口</p><h3 id="15-Enumeration-接口和-Iterator-接口的区别有哪些？"><a href="#15-Enumeration-接口和-Iterator-接口的区别有哪些？" class="headerlink" title="15.Enumeration 接口和 Iterator 接口的区别有哪些？"></a>15.Enumeration 接口和 Iterator 接口的区别有哪些？</h3><h3 id="16-HashSet-和-TreeSet-有什么区别？"><a href="#16-HashSet-和-TreeSet-有什么区别？" class="headerlink" title="16.HashSet 和 TreeSet 有什么区别？"></a>16.HashSet 和 TreeSet 有什么区别？</h3><h3 id="-9"><a href="#-9" class="headerlink" title=""></a></h3><p>HashSet 是由一个 hash 表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复 杂度是 O(1)。 另一方面，TreeSet 是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains() 方法的时间复杂度是 O(logn)。</p><h3 id="17-List、Set、Map-是否继承自-Collection-接口？"><a href="#17-List、Set、Map-是否继承自-Collection-接口？" class="headerlink" title="17.List、Set、Map 是否继承自 Collection 接口？"></a>17.List、Set、Map 是否继承自 Collection 接口？</h3><p>答：List、Set 是，Map 不是</p><h2 id="第-8-章-Java-平台与内存管理"><a href="#第-8-章-Java-平台与内存管理" class="headerlink" title="第 8 章 Java 平台与内存管理"></a>第 8 章 Java 平台与内存管理</h2><h3 id="1-GC线程是否为守护线程？（）"><a href="#1-GC线程是否为守护线程？（）" class="headerlink" title="1.GC线程是否为守护线程？（）"></a>1.GC线程是否为守护线程？（）</h3><p>答案：是 解析：线程分为守护线程和非守护线程（即用户线程）。 只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结 束时，守护线程随着 JVM 一同结束工作。 守护线程最典型的应用就是 GC (垃圾回收器)</p><h3 id="2-解释内存中的栈（stack）、堆-heap-和静态存储区的用法。"><a href="#2-解释内存中的栈（stack）、堆-heap-和静态存储区的用法。" class="headerlink" title="2.解释内存中的栈（stack）、堆(heap)和静态存储区的用法。"></a>2.解释内存中的栈（stack）、堆(heap)和静态存储区的用法。</h3><h3 id="3-Java-中会存在内存泄漏吗"><a href="#3-Java-中会存在内存泄漏吗" class="headerlink" title="3.Java 中会存在内存泄漏吗"></a>3.Java 中会存在内存泄漏吗</h3><h3 id="-10"><a href="#-10" class="headerlink" title=""></a></h3><p>理论上 Java 因为有垃圾回收机制（GC）不会存在内存泄露问题</p><p>在实际开发中，可能会存在无用但可达的对象，这些对象不能被 GC 回收也会发生内存 泄露</p><h3 id="4-GC-是什么？为什么要有-GC？"><a href="#4-GC-是什么？为什么要有-GC？" class="headerlink" title="4.GC 是什么？为什么要有 GC？"></a>4.GC 是什么？为什么要有 GC？</h3><h3 id="5-第-3-行中生成的-object在第几行执行后成为-garbage-collection-的对象？"><a href="#5-第-3-行中生成的-object在第几行执行后成为-garbage-collection-的对象？" class="headerlink" title="5.第 3 行中生成的 object在第几行执行后成为 garbage collection 的对象？"></a>5.第 3 行中生成的 object在第几行执行后成为 garbage collection 的对象？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123; </span><br><span class="line">  <span class="number">2</span>.<span class="function"><span class="keyword">public</span> StringBuffer <span class="title">aMethod</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="number">3</span>.StringBuffer sf = <span class="keyword">new</span> StringBuffer(“Hello”); </span><br><span class="line">    <span class="number">4</span>.StringBuffer[] sf_arr = <span class="keyword">new</span> StringBuffer[<span class="number">1</span>]; </span><br><span class="line">    <span class="number">5</span>.sf_arr[<span class="number">0</span>] = sf; </span><br><span class="line">    <span class="number">6</span>.sf = <span class="keyword">null</span>; </span><br><span class="line">    <span class="number">7</span>.sf_arr[<span class="number">0</span>] = <span class="keyword">null</span>; </span><br><span class="line">    <span class="number">8</span>.<span class="keyword">return</span> sf; </span><br><span class="line">   <span class="number">9</span>.&#125; </span><br><span class="line"><span class="number">10</span>.&#125;</span><br></pre></td></tr></table></figure><p>答：第 7 行</p><p>sf 和 sf_arr[0] 都指向 那个对象，都不可达时才会被判定为垃圾</p><h3 id="2-下面程序的运行结果"><a href="#2-下面程序的运行结果" class="headerlink" title="2.下面程序的运行结果?"></a>2.下面程序的运行结果?</h3><p>Thread 类中 start() 和 run() 方法的区别了。start() 用来启动一个线程，当调用 start 方法 后，系统才会开启一个新的线程，进而调用 run() 方法来执行任务，而单独的调用run() 就跟调用普通方法是一样 的，已经失去线程的特性了。因此在启动一个线程的时候一定要使用 start() 而不是 run()。</p><h3 id="3-进程和线程的区别是什么？"><a href="#3-进程和线程的区别是什么？" class="headerlink" title="3.进程和线程的区别是什么？"></a>3.进程和线程的区别是什么？</h3><h3 id="4-创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#4-创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="4.创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a>4.创建线程有几种不同的方式？你喜欢哪一种？为什么？</h3><p>有三种方式可以用来创建线程：</p><p> • 继承 Thread 类 </p><p>• 实现 Runnable 接口 </p><p>• 应用程序可以使用 Executor 框架来创建线程池 </p><p>实现 Runnable 接口这种方式更受欢迎，因为这不需要继承 Thread 类。在应用设计中已经继承了别的对象的情 况下，这需要多继承（而 Java 不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和 使用。</p><h3 id="9-如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？"><a href="#9-如何确保-N-个线程可以访问-N-个资源同时又不导致死锁？" class="headerlink" title="9.如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？"></a>9.如何确保 N 个线程可以访问 N 个资源同时又不导致死锁？</h3><h3 id="10-sleep-和-wait-有什么区别"><a href="#10-sleep-和-wait-有什么区别" class="headerlink" title="10.sleep() 和 wait() 有什么区别?"></a>10.sleep() 和 wait() 有什么区别?</h3><h3 id="-11"><a href="#-11" class="headerlink" title=""></a></h3><p>调用 sleep 不会释放对象锁</p><p>wait()方法导致本线程放弃对象锁</p><p>只有针对此对象发出 notify 方法（或 notifyAll）后本线程才进入对象锁定池准备获得对象锁进 入就绪状态</p><h3 id="11-sleep-和-yield-有什么区别"><a href="#11-sleep-和-yield-有什么区别" class="headerlink" title="11.sleep() 和 yield() 有什么区别?"></a>11.sleep() 和 yield() 有什么区别?</h3><p>有什么区别? 有什么区别? 答： ① sleep() 方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield() 方 法只会给相同优先级或更高优先级的线程以运行的机会； ② 线程执行 sleep() 方法后转入阻塞（blocked）状态，而执行 yield() 方法后转入就绪（ready）状态； ③ sleep() 方法声明抛出InterruptedException，而 yield() 方法没有声明任何异常； ④ sleep() 方法比 yield() 方法（跟操作系统相关）具有更好的可移植性。</p><h3 id="16-启动一个线程是用-run-还是-start-方法"><a href="#16-启动一个线程是用-run-还是-start-方法" class="headerlink" title="16.启动一个线程是用 run() 还是 start() 方法?"></a>16.启动一个线程是用 run() 还是 start() 方法?</h3><h3 id="17-什么是线程池（thread-pool）？"><a href="#17-什么是线程池（thread-pool）？" class="headerlink" title="17.什么是线程池（thread pool）？"></a>17.什么是线程池（thread pool）？</h3><p>线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候 从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。</p><h3 id="1-下列属于关系型数据库的是（）"><a href="#1-下列属于关系型数据库的是（）" class="headerlink" title="1.下列属于关系型数据库的是（）"></a>1.下列属于关系型数据库的是（）</h3><h3 id="2-在进行数据库编程时，连接池有什么作用？"><a href="#2-在进行数据库编程时，连接池有什么作用？" class="headerlink" title="2.在进行数据库编程时，连接池有什么作用？"></a>2.在进行数据库编程时，连接池有什么作用？</h3><p>尤其是数据库服务器不在本地时，每次建立连接都需要进行 TCP 的三次握手，再加上网络延迟，造成的开销是不可忽视的</p><p>创建连接和释放连接都有很大的开销</p><p>为了提升系统访问数据库的性能，可以事先创建若 干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和 释放连接所造成的开销，这是典型的用空间换取时间的策略</p><p>基于 Java 的开源数 据库连接池主要有： C3P0、Proxool、DBCP、BoneCP、Druid等</p><p>池化技术在 Java 开发中是很常见的，在使用线程时创建线程池的道理与此相同</p><h3 id="3-什么是-DAO-模式？"><a href="#3-什么是-DAO-模式？" class="headerlink" title="3.什么是 DAO 模式？"></a>3.什么是 DAO 模式？</h3><h3 id="-12"><a href="#-12" class="headerlink" title=""></a></h3><p>DAO（DataAccess Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露数据库实现细节的前提下提供了各种数据操作</p><h3 id="4-什么是ORM？"><a href="#4-什么是ORM？" class="headerlink" title="4.什么是ORM？"></a>4.什么是ORM？</h3><p>对象关系映射（Object-Relational Mapping，简称 ORM）</p><p>ORM 是通过使用描述对象和数据库之间映射的元数据（可以用 X ML 或者是注解），将 Java 程序中的对象自动持久化到关系数据库中或者将关系数据库表中的行转换成 Java 对 象，其本质上就是将数据从一种形式转换到另外一种形式。</p><h3 id="5-JDBC-中如何进行事务处理？"><a href="#5-JDBC-中如何进行事务处理？" class="headerlink" title="5.JDBC 中如何进行事务处理？"></a>5.JDBC 中如何进行事务处理？</h3><h3 id="-13"><a href="#-13" class="headerlink" title=""></a></h3><p>通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成 后用 commit()显式提交事务；如果在事务处理过程中发生异常则通过 rollback() 进行事务回滚</p><h3 id="6-事务的-ACID-是指什么？"><a href="#6-事务的-ACID-是指什么？" class="headerlink" title="6.事务的 ACID 是指什么？"></a>6.事务的 ACID 是指什么？</h3><h3 id="7-使用-JDBC-操作数据库时，如何提升读取数据的性能？如何提升更新数据的-性能？"><a href="#7-使用-JDBC-操作数据库时，如何提升读取数据的性能？如何提升更新数据的-性能？" class="headerlink" title="7.使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的 性能？"></a>7.使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的 性能？</h3><p> 答：要提升读取数据的性能，可以指定通过结果集（ResultSet）对象指定每次抓取数据的大小（fetch size）；要提升更新数据的性能可以使用PreparedStatement语句构建批处理（batch）</p><h3 id="-14"><a href="#-14" class="headerlink" title=""></a></h3><h3 id="9-你认为在表上建立索引可以提高数据库系统的效率吗，为什么？"><a href="#9-你认为在表上建立索引可以提高数据库系统的效率吗，为什么？" class="headerlink" title="9.你认为在表上建立索引可以提高数据库系统的效率吗，为什么？"></a>9.你认为在表上建立索引可以提高数据库系统的效率吗，为什么？</h3><p> 答：不一定 建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入 的表格，就没有必要为一个很少使用的 where 子句单独建立索引了，对于比较小的表，排序的开销不会很大，也 没有必要建立另外的索引。</p><h2 id="Java-面试笔记-v1-pdf-的批注摘要。"><a href="#Java-面试笔记-v1-pdf-的批注摘要。" class="headerlink" title="Java 面试笔记 - v1.pdf 的批注摘要。"></a>Java 面试笔记 - v1.pdf 的批注摘要。</h2><h3 id="Path-与-Classpath"><a href="#Path-与-Classpath" class="headerlink" title="Path 与 Classpath?"></a>Path 与 Classpath?</h3><p>Path 和 Classpath 是操作系统的环境变量. </p><p>• Path 定义了系统可以在哪里找到可执行文件(.exe) </p><p>• classpath 定义了 .class 文件的位置.</p><h3 id="Ear-Jar-和-War-文件的区别"><a href="#Ear-Jar-和-War-文件的区别" class="headerlink" title="Ear, Jar 和 War 文件的区别?"></a>Ear, Jar 和 War 文件的区别?</h3><p>• Jar files are intended to hold generic libraries of Java classes, resources, etc. </p><p>• War files are intended to contain complete Web applications. </p><p>• Ear files are intended to contain complete enterprise applications.</p><h3 id="什么是-AOP"><a href="#什么是-AOP" class="headerlink" title="什么是 AOP"></a>什么是 AOP</h3><p>它可以运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术它可以运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术</p><h3 id="statement-和-prepared-statement"><a href="#statement-和-prepared-statement" class="headerlink" title="statement 和 prepared statement"></a>statement 和 prepared statement</h3><p>Statement每次执行sql语句,数据库都要执行sql语句的编译. 最好用于仅执行一次查询并返回结果的情形，效率高于PreparedStatement</p><p>Prepared statements offer better performance, as they are pre-compiled e SQL statements many timestimes.</p><p>Prepared statements are more secure because they use bind variables, which can prevent SQL injection attack.</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><a href="https://juejin.im/post/6844903858276139021">Java: 单例模式我只推荐两种</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(singleton)&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">          singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">SingletonContainer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonContainer.singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-15"><a href="#-15" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://zronghui.github.io/categories/java/"/>
    
      <category term="基础" scheme="https://zronghui.github.io/categories/java/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="https://zronghui.github.io/java/spring.html"/>
    <id>https://zronghui.github.io/java/spring.html</id>
    <published>2020-09-22T07:35:37.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Spring-面试题"><a href="#Spring-面试题" class="headerlink" title="Spring 面试题"></a>Spring 面试题</h2><p><a href="https://mp.weixin.qq.com/s/IdjCxumDleLqdU8MgQnrLQ">Spring 经典面试题汇总</a></p><h3 id="Spring-的-2-种-IOC-容器：BeanFactory-和-ApplicationContext-的区别"><a href="#Spring-的-2-种-IOC-容器：BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="Spring 的 2 种 IOC 容器：BeanFactory 和 ApplicationContext 的区别"></a>Spring 的 2 种 IOC 容器：BeanFactory 和 ApplicationContext 的区别</h3><p>ApplicationContext 继承自 BeanFactory, ApplicationContext 包含 BeanFactory 的所有特性，通常推荐使用前者。</p><p>只有对内存占用要求高的程序使用 BeanFactory，以利用其懒加载的特性</p><h3 id="Spring-常见的依赖注入方法及区别"><a href="#Spring-常见的依赖注入方法及区别" class="headerlink" title="Spring 常见的依赖注入方法及区别"></a>Spring 常见的依赖注入方法及区别</h3><p>spring 中，常使用构造函数和 setter 注入。其中 setter 方法注入因优雅被广泛使用</p><p>构造函数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.xh.dao.Person"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>setter 注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.xh.dao.Person"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pname"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>构造函数注入和setter注入的区别</strong><br>1.部分依赖：假设一个类中有3个属性，有3个arg构造函数和setter方法。在这种情况下，如果您只想传递一个属性的信息，则只能通过setter方法</p><p>2.覆盖：Setter注入会覆盖构造函数注入。如果我们同时使用构造函数和setter注入，IOC容器将使用setter注入。</p><p>3.变化：我们可以通过二次注射轻松更改值。它不会像构造函数一样创建新的bean实例。因此，setter注入比构造函数注入更灵活。</p><h3 id="IOC-的实现机制"><a href="#IOC-的实现机制" class="headerlink" title="IOC 的实现机制"></a>IOC 的实现机制</h3><p>工厂模式+反射机制</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Apple"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Orange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getInstance</span><span class="params">(String lassName)</span></span>&#123;</span><br><span class="line">    Fruit f = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      f = (Fruit)Class.forName(className).newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cliend</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">    Fruit f = Factory.getInstance(<span class="string">"io.github.zronghui.spring.Apple"</span>);</span><br><span class="line">    <span class="keyword">if</span>(f!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      f.eat();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-内部-bean"><a href="#Spring-内部-bean" class="headerlink" title="Spring 内部 bean"></a>Spring 内部 bean</h3><p>内部bean 作为外部 bean 的属性而存在</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"StudentBean"</span> <span class="attr">class</span>=<span class="string">"com.edureka.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--This is inner bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.edureka.Person"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Scott"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"Bangalore"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动装配的方式"><a href="#自动装配的方式" class="headerlink" title="自动装配的方式"></a>自动装配的方式</h3><p>no</p><p>byName</p><p>byType</p><p>构造函数</p><p>autodetect</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="Aspect-Advice-JoinPoint-PointCut-的含义"><a href="#Aspect-Advice-JoinPoint-PointCut-的含义" class="headerlink" title="Aspect Advice JoinPoint PointCut 的含义"></a>Aspect Advice JoinPoint PointCut 的含义</h3><p>Aspect：类，用@Aspect 注解将类声明为 Aspect</p><p>Advice: 针对 joinPoint 执行的操作，是类中的方法（可以将 Advice 视为 Spring 拦截器或过滤器）。可以用 @Before @After @Around 等注解标注 Advice 的类型</p><p>JoinPoint: 在 JoinPoints 上应用 Advice。一个 joinPoint 往往是一个方法</p><p>PointCut: JoinPoint中的正则表达式</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><a href="https://www.cnblogs.com/aland-1415/p/11991170.html">Spring通过注解@Autowired/@Resource获取bean实例时为什么可以直接获取接口而不是注入的类 - 覆手为云p - 博客园</a></p><p><a href="http://heeexy.com/2018/04/03/MyBatis-ClasspathMapperScanner/">使用MyBatis时为什么Dao层不需要@Repository - 街上的动物园</a></p><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h3><p>类似于用 XML 配置的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 Component、 Controller、 Service、 Repository 时，有 value 属性，可以指定 bean 的 id，如果不写 value，默认当前 bean 的 id 为当前类的类名，首字母小写</p><p>Bean 与这 4 个实现的功能一样，只不过 Bean 只能修饰方法(方法返回一个对象)</p><p>bean 中的 setter 方法可以添加 Required 注解</p><h3 id="2-注入数据"><a href="#2-注入数据" class="headerlink" title="2.注入数据"></a>2.注入数据</h3><p>给 1中创建的对象注入数据（设置属性）</p><p>类似于用 XML 配置的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">ref</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这些注解后，就不用再写这些变量的 set 方法了</p><p>相关注解有 Autowired、 Qualifier、 Resource、 Value</p><p>Autowired 与 Resource 、Inject 差不多，多用 Autowired</p><p>Autowired 不能指定 bean 的 id，若要指定，需用 Qualifier(value=”id”)</p><p>Resource(value=”id”) 有 value 属性，可以指定 bean 的 id</p><p><del>如果不指定 id 的话，id 为 要注入的对象变量名称，如果在 spring 容器中查找不到，就会报错</del></p><p>应该是寻找与 要注入的变量 同类型的 bean，如果找不到报错，找到多个也报错<a href="https://www.baeldung.com/spring-annotations-resource-inject-autowire">Wiring in Spring: @Autowired, @Resource and @Inject | Baeldung</a></p><p>Value 注入基本数据类型和 String 类型</p><p>@value几种数值填充方式</p><p><a href="https://www.cnblogs.com/binghe001/p/13216798.html">【Spring注解驱动开发】如何使用@Value注解为bean的属性赋值，我们一起吊打面试官！ - 冰河团队 - 博客园</a></p><img src="https://i.loli.net/2020/09/22/dyV8m6kAUcWuK1g.png" alt="image-20200922153845078" style="zoom:50%;" /><h2 id="spring-mvc"><a href="#spring-mvc" class="headerlink" title="spring mvc"></a>spring mvc</h2><h3 id="spring-mvc-第一天"><a href="#spring-mvc-第一天" class="headerlink" title="spring mvc 第一天"></a>spring mvc 第一天</h3><h4 id="函数的注解"><a href="#函数的注解" class="headerlink" title="函数的注解"></a>函数的注解</h4><p>@RequestMapping(path=”/hello”)</p><h4 id="加在方法参数上的注解"><a href="#加在方法参数上的注解" class="headerlink" title="加在方法参数上的注解"></a>加在方法参数上的注解</h4><p>不指定 RequestParam 的话，自动获取相同名字的参数，甚至是 Pojo 对象</p><p>@RequestParam(value=”username”, required=false) // /hello?username=zhsj</p><p>@RequestBody(value=”username”, required=false) // 获取请求体的内容</p><p>@PathVariable(value=”id”) //  @RequestMapping(path=”/hello/{id}”) -&gt; /hello/2</p><p>@CookieValue(value=”JSESSION”) // 获取指定 cookie 的值</p><p>@RequestHeader(value=”Accept”) // 获取 header 字段的值</p><p>@ModelAttribute 当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</p><p>修饰方法和参数时含义不同，这块没看懂</p><h4 id="类的注解"><a href="#类的注解" class="headerlink" title="类的注解"></a>类的注解</h4><p>@SessionAttributes(value={“username”, “password”, “age”}, types={String.class, Integer.class})</p><p>value: []String sessionMap 的 key</p><p>types: key 和 value 的类型</p><p>在类上加上 SessionArributes 注解后，方法可以向 session 中存入值，获取值，删除 session</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/save"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"向session域中保存数据"</span>);</span><br><span class="line">  model.addAttribute(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">  model.addAttribute(<span class="string">"password"</span>, <span class="string">"123"</span>);</span><br><span class="line">  model.addAttribute(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/find"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">  String username = (String) modelMap.get(<span class="string">"username"</span>);</span><br><span class="line">  String password = (String) modelMap.get(<span class="string">"password"</span>);</span><br><span class="line">  Integer age = (Integer) modelMap.get(<span class="string">"age"</span>);</span><br><span class="line">  System.out.println(username + <span class="string">" : "</span>+password +<span class="string">" : "</span>+age);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(SessionStatus status)</span> </span>&#123; </span><br><span class="line">  status.setComplete(); </span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="spring-mvc-第二天"><a href="#spring-mvc-第二天" class="headerlink" title="spring mvc 第二天"></a>spring mvc 第二天</h3><h4 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h4><p><strong>String:</strong> </p><p>被解析为相应的 jsp</p><p>或者 return “forward:url” 转发 或者 return “redirect:url” 重定向</p><p><strong>void:</strong> </p><p>方法内，用 request.getRequestDispatcher(“url”).forward(request, response) 转发</p><p>或者 response.sendRedirect(“newUrl”)</p><p><strong>ModelAndView</strong></p><p>优点：可以在 jsp 中访问变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testReturnModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">  mv.addObject(<span class="string">"username"</span>, <span class="string">"张三"</span>);</span><br><span class="line">  mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line">  <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应 json：</strong></p><p>public @ResponseBody Account xxx(..){</p><p>​    return account;</p><p>}</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端</p><p>控制器交由异常处理器进行异常处理</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>拦截器与过滤器的区别：</p><p>拦截器链</p><p>preHandle</p><p>postHandle</p><p>afterCompletion</p><h5 id="拦截器的执行顺序"><a href="#拦截器的执行顺序" class="headerlink" title="拦截器的执行顺序"></a>拦截器的执行顺序</h5><img src="https://i.loli.net/2020/09/23/3EJ2jTBFmtyUvWb.png" alt="图片来自 03.spring5mvc第二天【大纲笔记】第 20 页" style="zoom: 67%;" /><img src="https://i.loli.net/2020/09/23/mHoB87RzpDjM5i1.png" alt="image-20200923132717312" style="zoom:40%;" /><h3 id="java对象-POJO和JavaBean的区别"><a href="#java对象-POJO和JavaBean的区别" class="headerlink" title="java对象 POJO和JavaBean的区别"></a>java对象 POJO和JavaBean的区别</h3><p><a href="https://www.jianshu.com/p/224489dfdec8">java对象 POJO和JavaBean的区别 - 简书</a></p><p>总结：POJO  plain ordinary java object : private 的属性，有 setter and getter 没有其他方法</p><p>bean: private 的属性，用 setter and getter 和其他方法，必须实现 Serializable 接口</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p><a href="https://juejin.im/post/6844903991558537230">程序员你真的理解匿名内部类吗？</a></p><p>抽象类无法实例化</p><p>new f(); // invoke method</p><p>new c(){ @Override f(){} }; // 继承class: c, 重写方法 f ，并 new 一个对象</p><p>这就是匿名内部类做的事情</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://zronghui.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>projects</title>
    <link href="https://zronghui.github.io/projects.html"/>
    <id>https://zronghui.github.io/projects.html</id>
    <published>2020-09-13T12:09:17.000Z</published>
    <updated>2020-09-13T12:55:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="book-management-demo"><a href="#book-management-demo" class="headerlink" title="book management demo"></a>book management demo</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/zhangronghui/01Code/private/test/amis-admin-jssdk</span><br></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Volumes/Data/01 Code/java/private/ddxp/bookManagement</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;book-management-demo&quot;&gt;&lt;a href=&quot;#book-management-demo&quot; class=&quot;headerlink&quot; title=&quot;book management demo&quot;&gt;&lt;/a&gt;book management demo&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
