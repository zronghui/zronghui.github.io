<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-06-03T08:44:01.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tricks-2020-06</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-06.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-06.html</id>
    <published>2020-06-02T03:40:59.000Z</published>
    <updated>2020-06-03T08:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5c4c1aec26fe680cc1519ea1c2e8700d10370fcff4713a3c4080a7706065b6cb">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dd85bdd0ba216a9a3ddb0ba4af683a3234740fdce8265b492f7f7c66e06ca477ca5eefea6853f46f0c4c21eba11069307a68c85baf47613206b7b7fa8342ba3e63b45f5e3027eb5393ad2a79dc1f9c6d3338a513824885d7bebc234bc31ad8ad14d441cf09b4d13cdb86bee7a2ca4835273ddadeb22d8717f48d46eab635fc3a98e8cd6e6c7050184b3de31048bfad0b31a2eeaf658a30f37f94238f9f2675fcd5086dd29c97860e5be6a71235f894f82878841540ca48a58948f19def1f5b3199b063a5d9ac05b99eea544441896754759263b151467141a5a865ceaa8f6cf57b0dcb734534cec113f0d3fa7950be1c2cbdcc7f9047a032245a52425ac14954a6fc6c8b5cf2f14c5e76f9b28f863c27bdd90658e2229a2dfdf15b8a49160ec461083b0331e5dc3bc99f351ce2d5e32fe664691f0ff92a392ab2341667a81d2c71529ad9bbc772c198107f05b42dfd72231095e8f9fd2cef48185b31909ed55391c0547b3b970ddb2f568cd9f3523e99ff783d1eba06a4cbea4f20d1ac10329d16679cdedfc614cba80a18f584b33cd5216bb255f6c7e47e377f478b2af6077ccad13a88816039fc40091a0f036e7be0ea0f6a94ab989efb6502bb46730fc92c82e6301456d5cc0fec475fd2b4c09ffc337944e42b74e4a713fb72890bd82b613410d1ae60319a697872c0e47593ec5768ef3672a65600723a250b55abe6aff71fa27c1c92657cf9521741e6d31add532aa94a2bb1160f541731b4a75053cec715c97a9c20c8a6cd024b6b73c4b86917c3bec243ce674afb569abb4b7984ca4b5ea8edf47eac70854dbdb92e77ee11e06e59c3cf2609ec6931ad6de8c9176bf02b8940a78d57f3cf873ab0d7fab78fd6e832067df68012e72a129fed0a8cffb9e62f943a6c0e25dd86c4bf8bd06382250232162047dce34febf5b86a9ca364d813e028806e6eab0bee70404e13f4bf8a80b817a6789f93c1cdb81eff7eb997b59d11b0c839da33db0cda97384242c7e8b1aee72a54ad0bfe371ffef6f31f5442eea74e22accc7ea2fc9f02e22df0851162748f417599f05d3a35029811b5996d8ef1eb87ec923d11426c166bbb20b6ca948396839446dbffce2ca8fb99d0a734c32c6d399867eb4cf30611d9e3873e3341ce17aa58dbd4652fe4a6672a4a1809c112565bcf698372e9a04dd364614eaf7efe3916bf65d19314d9af39f4d7f0ecf966f77b4a12b18c0e64952fd92ab5f3f46acfd7329dca893511595e5a8e552da0d142474b014969e5aef3b52cdea41692b398a767cfb5333539e5b34f417edeaa4a1471cdfdf328e6b3b89debd1e196022214f00355693e7278a6ed519301f2dea43492aa761d2cbeda49185ced0de57fca22903738d79922b85ff52638e1f35276e10e68df1cf088edf9d11b0ce69bc9c12bfda26565738c91d57f84ecb4022a6d63a24f8900a43d41682fe2b33f2938e8530fe0c0a05cbfd17316c80770dd9e7156c7bfcc7bcbcd1e26a8501c0128182da5d2510989d7b23116faf869d73acb69c9541953ea52512627c63b30364743f94fbe41630233e0cdc576a2596272fd75d4bedb13e6fc1051e0e7f9708277872fbac75f71a126c459814987b215479f27b462f39c7ae75f361397cfd159b33570a7bd2a527b0ba39bdedab9ecaf15a582afbfed075984f48da64f105675cc5a9118bf5eef276bf1cc90850178912d71dacb8a24542ce86211234c37750ccfeb0f24ad2c3ee44371ad49524ca90a2c91f0be40549b166c6e1dfa3206ffa5f635eb4301716d24ada91c887b40b9cae72baef13b4841ffa30d17e93f4ab75956084116c0b5b516b6ccc907a106499a5d1607d2c39bca32b3c47760e8d82a6b989fc35c9600f709e96b70450a70f96e399c217d45e416a33003396c42b32bbd0fe7b3d42d978d9b77b9b68e5e4d9a1ff4177fc70d7a19cdc7861905ab19e76fa62d6b3f17a22ef9c8014c30580af443dc1a4382e23ea1acb36bc3a17bba8c4baa664881b253a200d9f8521e7db44f1b49cd5d0cceffed9ccbb0a976b091a5a00968ea9b89528cfcdc5bd025e1bd01d5e6c53248c57665c15eeaf8309c6ed92765e3a45cd60e5977283a352921661f826949eb4fb92aa52259ca802306b0f7a7b8cba9ed5503b09d58d8ed944445baac3d2b1cbd84b7b588b591658af8f059dc0536d047ed175bdbbea1d1d5a9db95629ca496c984fb17df9a07711aae6dfd8effeae74d7da676e3d93b4b439331bfbcb55b4520b8b317a4140afc993cee4e44cda4c1509f353c2598517f75b2f39f67cfd584a174a7a1730c0896e20a711aab5f845e5970a1e2dc193fc7ca1f5c39345a3fc7ff3cb951baa06df73a51286b342af69d582c56378706d0e32c0f0793f601b0788627da1a176d9b2eae9cb47fea868ddeb7d345f3315d0f79831c78525a4d9bf2a6029bef3b4cd1b6671706057527e54cc86e9ba3e421ec8f59cc5d73c93082c7736a71b57019be9441d2ffb9207c4903667c65f7f43712a4fe05d0016a716483d4fa921bcf2730a8acb63e2e139b5d97552bf3da331fc3bbcca34f75a4f5a6d6fadb3167b49747f056bee0b96cd0c270cc0ca6740779146ab5da590400646f1a87b42dac71127f00e7e2d86b1d6e32c109949458a51b0cf8e9287e0b1e37ca78c5e0246e197cbec292cd605cc10a36676354c4944cfe80c8a137392d0c41cd52732e722ed629423cfa09b09f841a349edc13af460775a0233f9edb55a1515d80f20abbc84e8cb640d9532de7fa3533633000ed776c4c55d5c271d8d1d71d2e376eada9dd218e3810cb4f1c281b75fc9aa4815da2669ec23e568d37545569e2151253a9c0e1882622237248048dc030e160d980d0db083badf045393ac0c4f91870af0b0e7a437c1e0fb5be847bbb5af46a800c3a2a8e9745d813603112b51dd7d941e3fe907eebcbecc1aa8cf0c805b782afa16caf64bb6045e32999de74036e4232275ce9e482eb4fa8424728ec5ed879f13e7f49e4b84c67ab8b5bf1ed936a00b06f34edd24a939e845d9156ad29ba408879ffe9f5bc2bee3c59c8e7c4aba67ffb2c22c356b97a6421f298f4298481ba57974353fedc1e32c75ed0c93a1d2de93fd38ea5edbae88f562ee4658f7298fe22791ab7db4dd758f9f6b4b6879a0513f59207c41be471df93ca0e75efe881daa82737bef3bc5117804e6d010958fa6f5b04bb072c242dd99f989a4f94aafb017191b4b29f1d38490a1efaadc5bf94df2bcbfe71ea8b4e94d5670deb946757f466b16abff598153c5d363e61844b8fe88903fafe6db4b7ba3a4ebcd5124adb411b7ba6a3f204c4916748a1308bf485db9b5514f51ff4f400daec225d56a1556b34f6b147955d6e9f1c582ad6ea96970620e9752950603f2d08e0a9604e433a64cc3379e9949b18fdbc475a7ce74329e41fd0b3c33883d244e278d8b4e43629e5311c97638358c0145df177b82c0ffdde7ee9149f4f36def0518ab6b0daa9ba31b36b7e7a3b0e0bd07e9f678003136a84a39c81615ea12af8cd54f52f46d21a0f0be6c9eb0615d21820e4bca2ee395ded943824c86c34a50ceb1a86779446eaca2e86b0d6c6201d1fd501126f0ea8b20eb7b56ae4c8b883bc40cc185ea6d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>tools to use</title>
    <link href="https://zronghui.github.io/todo/tools-to-use.html"/>
    <id>https://zronghui.github.io/todo/tools-to-use.html</id>
    <published>2020-06-01T12:37:37.000Z</published>
    <updated>2020-06-03T02:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3ba35cd22531e1c92ebe8406ca844dee534ee4c2e146a86455d7de86f51a3ec1">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d9a45bacecaba7ac1e6748ab25d1f452f1531a3bc167e66fb568f8d9235dc116534773262386048b2a23ee50e2da3ed6e03d520800b78ef1017a518af8217bc89f4a40dcd38dd0cc4c62ed84f392ad3f1f8e96c1b5cf24dd1e1a230d8c933f1ef44fa8408157ead32e582e20841e1a365b64aa6eca43b79603008192c6bdd9b66076e43a2b44e50036a6058d34b13c42e9c108e4523d01a739f31fc9f8f0c8466463ca13c1989a75c46843b4ff2394590d9d571968ff0a42958d2f3db33d544870c88aedae8d80052fdf901dea772526acdc64377f39e78da82b25df26bf00b1b849abe3e1786f5a0c12a01e0333a2e18d22d62bc7a88a2f03c698e9e748b8be60602f643ef47eb6e42c369b1ed1d1a32a1e0ff604696df65db3a3f6a3b38ab098c59e2aeb4703f957509d070b0cebb5034beb20daaaa7ce7248458d37c561e773b3e80d6ca981c267bf4d8567d3a3d7208ca33f6843e8a2aced36bff5178a6a8c0064b4cc1805ba83a0b433bafc072349c7cda55175c786e334f5901089560a57bc3642125b0e5b5d941021710ed6e9f2203bd20b096c6d568868e4ded15accf15c8ba17d80acb9a8527b4a3d951e0b4598e7012e250d38a0db6b729b446f1f67c7f07e396d65a379d56e040ad7e0752283b790566ee4891964c6d2f108e678defcb7a887407130d696121963fea1e89724594129ff022c53f8f754128dea52c64329db4fd94101b5d3be45e9be5dd7f4f22934010f4cc8307e452c9eab89320a7340858cae04a3a77fc38aa283c8cdbc7642a9d2ee3d00f2b969127a620d5b75c9a989676cc65a578a10c7b452a16783f7b5110b2ae48fba5eaac588f7fb503bf4a20f521e2d69f9572fb8fc07b05be7217c95e097edb41471e7235919e3c3cb0712ad1bfe6d7fc44464e948fcda9c59e36451a4fce3174774356c7da2316affa63b2f218de5e2bee5e5174abc6caee2e9c52f4d16c9cf46d430a44a773e77cc8f980fef7cdab7e4377ad1c810ba11cfd7887e4d476ccefb96afc4fbd4ba63cfe7eaa2b969efc73c4393ef5c42b9ac6c23a8c28d14505ac1ce3637052153ae91ea065a8db1b877c3f43588e2d42a9002dc86bba07fddbf0e5db840d6583a1a60eab31ac8b87b0105b850c19296f0f823413dec6c4823e1c6e8b33fc098db085facf628fb9489662d365c281b1e052955962082effa47d9d8f46aab4a1118bc8133061d75e022d48df36fd9871f9f899688d8d1f2540426cd5bd45283b0ea67814002f2864d7e3080084c0c66bc8ffd16a1cdb1dd7ceecea1748eb526832a39b40ab9168719231867d7bfc00625faa1c4937dc6e06639a73dfebdab1862f819c8ce48dc2fd1e3a2f782748a3993a237cc5d10f4860c06128796253c8815ffd54d662bac0a8d46b43df7e6e28831b9e4c9cf8ca1929d068da330f9da1eac55b8a0e60285d86b2dc8c4063fced33e09b6daabb78fb77f4079c3d6b69b809e14a091e937ca9f9b5d35264fafec72f418991f6e37ff88942a481c9f07beed67926b97926bd676f568985731e64527836c292f9393a8785077ac81b59f25143b9360225414f2dfb04c8c67e2dc5e319d3ba22a90eccbce04b493b297384ee598a844bb43d40e3d3fc484a6f0fde85e296396e842d80c4bd424630cc7000f6a523ebefcb52c9041622c609ff95a37040f2fa47513960d1ee5f85e0b07374847062799a920eff30eaf989cfea3131c6737fe65b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://zronghui.github.io/redis/redis.html"/>
    <id>https://zronghui.github.io/redis/redis.html</id>
    <published>2020-05-29T07:56:39.000Z</published>
    <updated>2020-05-29T14:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/laixintao/iredis">laixintao/iredis: Interactive Redis: A Terminal Client for Redis with AutoCompletion and Syntax Highlighting.</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install iredis</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mylxsw/redis-tui">mylxsw/redis-tui: A Redis Text-based UI client in CLI</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://zronghui.github.io/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>待总结</title>
    <link href="https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html"/>
    <id>https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html</id>
    <published>2020-05-25T12:26:42.000Z</published>
    <updated>2020-06-03T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://mp.weixin.qq.com/s/MA1CLXdknLvnPV_s3ZQUSg">通俗易懂 限流算法原理剖析</a></p><p>3 种限流算法</p><p><a href="https://www.cnblogs.com/keyyang/p/4128424.html">Thread.sleep(0)的意义&amp; 多线程详解 - 走过路过ボ不要错过 - 博客园</a></p><p>为了重新竞争 CPU ，防止系统假死</p><p><a href="https://www.tracholar.top/2018/07/19/how-to-simulate-the-environment-cron-executes-a-script-with/">如何模拟环境cron执行脚本？ | 智子</a></p><p>感觉就是把 env 保存下来，再删除当前 shell 的 env</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>books to read</title>
    <link href="https://zronghui.github.io/todo/books-to-read.html"/>
    <id>https://zronghui.github.io/todo/books-to-read.html</id>
    <published>2020-05-23T09:29:44.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>TXT、EPUB、UMD</p><h2 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h2><h2 id="放松"><a href="#放松" class="headerlink" title="放松"></a>放松</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> 放学后  东野圭吾</li><li><input disabled="" type="checkbox"> 恶意   东野圭吾</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>to read</title>
    <link href="https://zronghui.github.io/to-read.html"/>
    <id>https://zronghui.github.io/to-read.html</id>
    <published>2020-05-23T09:29:02.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>fabric</title>
    <link href="https://zronghui.github.io/blockchain/fabric.html"/>
    <id>https://zronghui.github.io/blockchain/fabric.html</id>
    <published>2020-05-21T07:28:00.000Z</published>
    <updated>2020-05-28T23:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>分类账 – 账本</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p><strong>channel</strong> : 定义 Fabric 网络功能, 比如块的制作方式和节点可以使用的 Fabric 版本 、 定义了哪些组织是联盟的成员。channel是特定网络成员之间的私有通信层。 只有被邀请到频道的组织才能使用频道，而网络中的其他成员是看不见的。每个channel都有一个独立的区块链分类账。 被邀请“加入”其同行的组织存储通道分类账并验证通道上的交易。</p><p><strong>ordering nodes</strong>: 允许 peers 专注于验证事务并将它们提交到分类账中, 从客户端接收经过认可的事务后，它们对事务的顺序达成共识，然后将它们添加到块中</p><p><strong>peers</strong>: 验证交易并将交易块添加到区块链分类账时，它们不会决定交易的顺序</p><p><strong>smart contract</strong>: 智能合约。包含管理区块链分类账上资产的业务逻辑。 由网络成员运行的应用程序可以调用智能合同在分类账上<strong>创建</strong>资产，以及<strong>更改和转移</strong>这些资产。 应用程序还可以<strong>查询</strong>智能合同来<strong>读取</strong>分类账上的数据。</p><p><strong>multiple signatures</strong>: 多重签名。为了确保交易有效，使用智能合同创建的交易通常需要由多个组织签署，以便提交给渠道分类账。</p><p><strong>chaincode</strong>: 在 fabric 中，是智能合约打的包。链码安装在一个组织的 peer 上，在将链码部署到通道之前，通道的成员需要就链码定义达成一致，以建立链码治理。 当所需的组织数量一致时，链码定义可以提交给通道，并且链码已经可以使用了。然后部署到一个通道，在那里它可以用来认可交易和与区块链分类账互动。 </p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p><a href="https://github.com/hyperledger/fabric-samples">hyperledger/fabric-samples</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh">https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh</a></p><p>此脚本实现以下功能：</p><p>克隆 hyperledger/fabric-samples 仓库<br>检出适当的版本标签<br>将指定版本的Hyperledger Fabric平台特定二进制文件和配置文件安装到fabric-samples下的/bin和/config目录中<br>下载指定版本的Hyperledger Fabric docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mcd fabric</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 bootstrap.sh 弄到这个目录里</span></span><br><span class="line">chmod u+x bootstrap.sh</span><br><span class="line">./bootstrap.sh</span><br><span class="line"></span><br><span class="line">export PATH=/root/fabric/fabric-samples/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="Bring-up-the-test-network"><a href="#Bring-up-the-test-network" class="headerlink" title="Bring up the test network"></a>Bring up the test network</h3><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/test_network.html">Using the Fabric test network — hyperledger-fabricdocs master 文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br><span class="line">./network.sh -h</span><br><span class="line">./network.sh down # 从以前的运行中删除任何容器或工件</span><br><span class="line">./network.sh up # 启动网络</span><br><span class="line">docker ps -a # 应该可以看到由 network.sh 脚本创建的三个节点</span><br><span class="line">./network.sh createChannel</span><br><span class="line"><span class="meta">#</span><span class="bash"> createChannel 主要的操作：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. Creating channel mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. Join Org1 peers to the channel...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. Join Org2 peers to the channel...</span></span><br><span class="line"></span><br><span class="line">export GOPROXY=https://goproxy.io</span><br><span class="line">export GO111MODULE=on</span><br><span class="line"></span><br><span class="line">./network.sh deployCC # 在通道上启动链码</span><br><span class="line"><span class="meta">#</span><span class="bash"> deployCC 主要的操作：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 安装 golang 的依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. Chaincode is packaged on peer0.org1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. Chaincode is installed on peer0.org1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. Chaincode is installed on peer0.org2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. Query installed successful on peer0.org1 on channel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. Chaincode definition approved on peer0.org1 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. Checking the commit readiness of the chaincode definition on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8. Checking the commit readiness of the chaincode definition on peer0.org2 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9. Chaincode definition approved on peer0.org2 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10. Chaincode definition committed on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 11. Querying chaincode definition on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 12. Querying chaincode definition on peer0.org2 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 13. Invoke transaction successful on peer0.org1 peer0.org2 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 14. Querying on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pQZr7wJ.png" alt="image-20200528105117015"></p><p><img src="https://i.imgur.com/Lse0e7F.png" alt="image-20200528183519799"></p><h4 id="查询、更改"><a href="#查询、更改" class="headerlink" title="查询、更改"></a>查询、更改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$&#123;PWD&#125;:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Environment variables <span class="keyword">for</span> Org1</span></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询</span></span><br><span class="line">peer chaincode query -C mychannel -n fabcar -c '&#123;"Args":["queryAllCars"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改</span></span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"changeCarOwner","Args":["CAR9","Dave"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询运行在 org 2对等节点上的链码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Environment variables <span class="keyword">for</span> Org2</span></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br><span class="line"></span><br><span class="line">peer chaincode query -C mychannel -n fabcar -c '&#123;"Args":["queryAllCars"]&#125;'</span><br><span class="line"></span><br><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/KWkBjMD.png" alt="image-20200528204924722"></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="Hyperledger-Composer-已经过时了"><a href="#Hyperledger-Composer-已经过时了" class="headerlink" title="Hyperledger Composer (已经过时了)"></a><strong>Hyperledger Composer (已经过时了)</strong></h3><p><a href="https://hyperledger.github.io/composer/latest/installing/installing-index"><strong>Installing</strong></a></p><p><a href="https://hyperledger.github.io/composer/latest/installing/installing-prereqs">Installing pre-requisites</a></p><p>Install nvm and switch node to 8</p><p>install docker、 vs code、Hyperledger Composer plugin for vscode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> new iterm2 tab</span></span><br><span class="line">nvm —-version</span><br><span class="line"></span><br><span class="line">nvm install v8</span><br><span class="line">nvm use 8</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>你了解你的女儿吗</title>
    <link href="https://zronghui.github.io/other/jiao-%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B.html"/>
    <id>https://zronghui.github.io/other/jiao-%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B.html</id>
    <published>2020-05-20T14:12:02.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d00e61f1ff08af8a18ca3363e59cc470b8b4665522bc280023b5df65570015c7"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>docker mindmap[图片版]</title>
    <link href="https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html"/>
    <id>https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html</id>
    <published>2020-05-17T10:21:52.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/17/r17xMI4pSjAGFb6.png" alt="Docker"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>如何编写最佳的Dockerfile</title>
    <link href="https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html"/>
    <id>https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html</id>
    <published>2020-05-17T07:09:57.000Z</published>
    <updated>2020-05-17T13:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://rock-it.pl/how-to-write-excellent-dockerfiles/">How to write excellent Dockerfiles</a><br><a href="https://blog.fundebug.com/2017/05/15/write-excellent-dockerfile/">如何编写最佳的Dockerfile</a></p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile | 菜鸟教程</a></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><ul><li>更快的构建速度</li><li>更小的 Docker 镜像大小</li><li>更少的 Docker 镜像层</li><li>充分利用镜像缓存</li><li>增加 Dockerfile 可读性</li><li>让 Docker 容器使用起来更简单</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>编写.dockerignore 文件</li><li>容器只运行单个应用</li><li>将多个 RUN 指令合并为一个</li><li>基础镜像的标签不要用 latest</li><li>每个 RUN 指令后删除多余文件</li><li>选择合适的基础镜像(alpine 版本最好)</li><li>设置 WORKDIR 和 CMD</li><li>使用 ENTRYPOINT (可选)</li><li>在 entrypoint 脚本中使用 exec</li><li>COPY 与 ADD 优先使用前者</li><li>合理调整 COPY 与 RUN 的顺序</li><li>设置默认的环境变量，映射端口和数据卷</li><li>使用 LABEL 设置镜像元数据</li><li>添加 HEALTHCHECK</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 Dockerfile 犯了几乎所有的错(当然我是故意的)。接下来，我会一步步优化它。假设我们需要使用 Docker 运行一个 Node.js 应用，下面就是它的 Dockerfile(CMD 指令太复杂了，所以我简化了，它是错误的，仅供参考)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line">RUN apt-get install -y nodejs ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line"># this should start three processes, mysql and ssh</span><br><span class="line"># in the background and node app in foreground</span><br><span class="line"># isn&#39;t it beautifully terrible? &lt;3</span><br><span class="line">CMD mysql &amp; sshd &amp; npm start</span><br></pre></td></tr></table></figure><p>构建镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wtf .</span><br></pre></td></tr></table></figure><h3 id="1-编写-dockerignore-文件"><a href="#1-编写-dockerignore-文件" class="headerlink" title="1. 编写.dockerignore 文件"></a>1. 编写.dockerignore 文件</h3><p>构建镜像时，Docker 需要先准备<code>context</code> ，将所有需要的文件收集到进程中。默认的<code>context</code>包含 Dockerfile 目录中的所有文件，但是实际上，<strong>我们并不需要.*git* 目录，node_modules 目录等内容</strong>。 <code>.dockerignore</code> 的作用和语法类似于 <code>.gitignore</code>，可以忽略一些不需要的文件，这样可以有效加快镜像构建时间，同时减少 Docker 镜像的大小。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.git&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br></pre></td></tr></table></figure><h3 id="2-容器只运行单个应用"><a href="#2-容器只运行单个应用" class="headerlink" title="2. 容器只运行单个应用"></a>2. 容器只运行单个应用</h3><p>从技术角度讲，你可以在 Docker 容器中运行多个进程。你可以将<em>数据库</em>，前端，后端，ssh，supervisor 都运行在同一个 Docker 容器中。但是，这会让你非常痛苦:</p><ul><li>非常长的构建时间(修改前端之后，整个后端也需要重新构建)</li><li>非常大的镜像大小</li><li>多个应用的日志难以处理(不能直接使用 stdout，否则多个应用的日志会混合到一起)</li><li>横向扩展时非常浪费资源(不同的应用需要运行的容器数并不相同)</li><li>僵尸进程问题 - 你需要选择合适的 init 进程</li></ul><p>因此，我建议大家为每个应用构建单独的 Docker 镜像，然后使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 运行多个 Docker 容器。</p><p>现在，我从 Dockerfile 中删除一些不需要的安装包，另外，SSH 可以用<a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a>替代。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line"></span><br><span class="line"># we should remove ssh and mysql, and use</span><br><span class="line"># separate container for database</span><br><span class="line">RUN apt-get install -y nodejs  # ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="3-将多个-RUN-指令合并为一个"><a href="#3-将多个-RUN-指令合并为一个" class="headerlink" title="3. 将多个 RUN 指令合并为一个"></a>3. 将多个 RUN 指令合并为一个</h3><p>Docker 镜像是分层的，下面这些知识点非常重要:</p><ul><li>Dockerfile 中的每个指令都会创建一个新的镜像层。</li><li>镜像层将被缓存和复用</li><li>当 Dockerfile 的指令修改了，复制的文件变化了，或者构建镜像时指定的变量不同了，对应的镜像层缓存就会失效</li><li>某一层的镜像缓存失效之后，它之后的镜像层缓存都会失效</li><li>镜像层是不可变的，如果我们再某一层中添加一个文件，然后在下一层中删除它，则镜像中依然会包含该文件(只是这个文件在 Docker 容器中不可见了)。</li></ul><p>Docker 镜像类似于洋葱。它们都有很多层。为了修改内层，则需要将外面的层都删掉。记住这一点的话，其他内容就很好理解了。</p><p>现在，我们<strong>将所有的<a href="https://docs.docker.com/engine/reference/builder/#run">RUN</a>指令合并为一个</strong>。同时把<code>apt-get upgrade</code>删除，因为它会使得镜像构建非常不确定(我们只需要依赖基础镜像的更新就好了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    &amp;&amp; cd &#x2F;app \</span><br><span class="line">    &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>记住一点，我们只能将变化频率一样的指令合并在一起。将 node.js 安装与 npm 模块安装放在一起的话，则每次修改源代码，都需要重新安装 node.js，这显然不合适。因此，正确的写法是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="4-基础镜像的标签不要用-latest"><a href="#4-基础镜像的标签不要用-latest" class="headerlink" title="4. 基础镜像的标签不要用 latest"></a>4. 基础镜像的标签不要用 latest</h3><p>当镜像没有指定标签时，将默认使用<code>latest</code> 标签。因此， <code>FROM ubuntu</code> 指令等同于<code>FROM ubuntu:latest</code>。当时，当镜像更新时，latest 标签会指向不同的镜像，这时构建镜像有可能失败。如果你的确需要使用最新版的基础镜像，可以使用 latest 标签，否则的话，最好指定确定的镜像标签。</p><p>示例 Dockerfile 应该使用<code>16.04</code>作为标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04  # it&#39;s that easy!</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="5-每个-RUN-指令后删除多余文件"><a href="#5-每个-RUN-指令后删除多余文件" class="headerlink" title="5. 每个 RUN 指令后删除多余文件"></a>5. 每个 RUN 指令后删除多余文件</h3><p>假设我们更新了 apt-get 源，下载，解压并安装了一些软件包，它们都保存在<code>/var/lib/apt/lists/</code>目录中。但是，运行应用时 Docker 镜像中并不需要这些文件。我们最好将它们删除，因为它会使 Docker 镜像变大。</p><p>示例 Dockerfile 中，我们可以删除<code>/var/lib/apt/lists/</code>目录中的文件(它们是由 apt-get update 生成的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    # added lines</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="6-选择合适的基础镜像-alpine-版本最好"><a href="#6-选择合适的基础镜像-alpine-版本最好" class="headerlink" title="6. 选择合适的基础镜像(alpine 版本最好)"></a>6. 选择合适的基础镜像(alpine 版本最好)</h3><p>在示例中，我们选择了<code>ubuntu</code>作为基础镜像。但是我们只需要运行 node 程序，有必要使用一个通用的基础镜像吗？<code>node</code>镜像应该是更好的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"># we don&#39;t need to install node</span><br><span class="line"># anymore and use apt-get</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>更好的选择是 alpine 版本的<code>node</code>镜像。alpine 是一个极小化的 Linux 发行版，只有 4MB，这让它非常适合作为基础镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management">apk</a>是 Alpine 的包管理工具。它与<code>apt-get</code>有些不同，但是非常容易上手。另外，它还有一些非常有用的特性，比如<code>no-cache</code>和 <code>--virtual</code>选项，它们都可以帮助我们减少镜像的大小。</p><h3 id="7-设置-WORKDIR-和-CMD"><a href="#7-设置-WORKDIR-和-CMD" class="headerlink" title="7. 设置 WORKDIR 和 CMD"></a>7. 设置 WORKDIR 和 CMD</h3><p><a href="https://docs.docker.com/engine/reference/builder/#workdir">WORKDIR</a>指令可以设置默认目录，也就是运行<code>RUN</code> / <code>CMD</code> / <code>ENTRYPOINT</code>指令的地方。</p><p><a href="https://docs.docker.com/engine/reference/builder/#cmd">CMD</a>指令可以设置容器创建是执行的默认命令。另外，你应该讲命令写在一个数组中，数组中每个元素为命令的每个单词(参考<a href="https://docs.docker.com/engine/reference/builder/#cmd">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="8-使用-ENTRYPOINT-可选"><a href="#8-使用-ENTRYPOINT-可选" class="headerlink" title="8. 使用 ENTRYPOINT (可选)"></a>8. 使用 ENTRYPOINT (可选)</h3><p><a href="https://docs.docker.com/engine/reference/builder/#entrypoint">ENTRYPOINT</a>指令并不是必须的，因为它会增加复杂度。<code>ENTRYPOINT</code>是一个脚本，它会默认执行，并且将指定的命令错误其参数。它通常用于构建可执行的 Docker 镜像。entrypoint.sh 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env sh</span><br><span class="line"># $0 is a script name,</span><br><span class="line"># $1, $2, $3 etc are passed arguments</span><br><span class="line"># $1 is our command</span><br><span class="line">CMD&#x3D;$1</span><br><span class="line"></span><br><span class="line">case &quot;$CMD&quot; in</span><br><span class="line">  &quot;dev&quot; )</span><br><span class="line">    npm install</span><br><span class="line">    export NODE_ENV&#x3D;development</span><br><span class="line">    exec npm run dev</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  &quot;start&quot; )</span><br><span class="line">    # we can modify files here, using ENV variables passed in</span><br><span class="line">    # &quot;docker create&quot; command. It can&#39;t be done during build process.</span><br><span class="line">    echo &quot;db: $DATABASE_ADDRESS&quot; &gt;&gt; &#x2F;app&#x2F;config.yml</span><br><span class="line">    export NODE_ENV&#x3D;production</span><br><span class="line">    exec npm start</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">   * )</span><br><span class="line">    # Run custom command. Thanks to this line we can still use</span><br><span class="line">    # &quot;docker run our_image &#x2F;bin&#x2F;bash&quot; and it will work</span><br><span class="line">    exec $CMD $&#123;@:2&#125;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例 Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>可以使用如下命令运行该镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 运行开发版本</span><br><span class="line">docker run our-app dev</span><br><span class="line"></span><br><span class="line"># 运行生产版本</span><br><span class="line">docker run our-app start</span><br><span class="line"></span><br><span class="line"># 运行bash</span><br><span class="line">docker run -it our-app &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h3 id="9-在-entrypoint-脚本中使用-exec"><a href="#9-在-entrypoint-脚本中使用-exec" class="headerlink" title="9. 在 entrypoint 脚本中使用 exec"></a>9. 在 entrypoint 脚本中使用 exec</h3><p>在前文的 entrypoint 脚本中，我使用了<code>exec</code>命令运行 node 应用。不使用<code>exec</code>的话，我们则不能顺利地关闭容器，因为 SIGTERM 信号会被 bash 脚本进程吞没。<code>exec</code>命令启动的进程可以取代脚本进程，因此所有的信号都会正常工作。</p><h3 id="10-COPY-与-ADD-优先使用前者"><a href="#10-COPY-与-ADD-优先使用前者" class="headerlink" title="10. COPY 与 ADD 优先使用前者"></a>10. COPY 与 ADD 优先使用前者</h3><p><a href="https://docs.docker.com/engine/reference/builder/#copy">COPY</a>指令非常简单，仅用于将文件拷贝到镜像中。<a href="https://docs.docker.com/engine/reference/builder/#add">ADD</a>相对来讲复杂一些，可以用于下载远程文件以及解压压缩包(参考<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="11-合理调整-COPY-与-RUN-的顺序"><a href="#11-合理调整-COPY-与-RUN-的顺序" class="headerlink" title="11. 合理调整 COPY 与 RUN 的顺序"></a>11. 合理调整 COPY 与 RUN 的顺序</h3><p>我们应该<strong>把变化最少的部分放在 Dockerfile 的前面</strong>，这样可以充分利用镜像缓存。</p><p>示例中，源代码会经常变化，则每次构建镜像时都需要重新安装 NPM 模块，这显然不是我们希望看到的。因此我们可以先拷贝<code>package.json</code>，然后安装 NPM 模块，最后才拷贝其余的源代码。这样的话，即使源代码变化，也不需要重新安装 NPM 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY package.json &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="12-设置默认的环境变量，映射端口和数据卷"><a href="#12-设置默认的环境变量，映射端口和数据卷" class="headerlink" title="12. 设置默认的环境变量，映射端口和数据卷"></a>12. 设置默认的环境变量，映射端口和数据卷</h3><p>运行 Docker 容器时很可能需要一些环境变量。在 Dockerfile 设置默认的环境变量是一种很好的方式。另外，我们应该在 Dockerfile 中设置映射端口和数据卷。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line"></span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/reference/builder/#env">ENV</a>指令指定的环境变量在容器中可以使用。如果你只是需要指定构建镜像时的变量，你可以使用<a href="https://docs.docker.com/engine/reference/builder/#arg">ARG</a>指令。</p><h3 id="13-使用-LABEL-设置镜像元数据"><a href="#13-使用-LABEL-设置镜像元数据" class="headerlink" title="13. 使用 LABEL 设置镜像元数据"></a>13. 使用 LABEL 设置镜像元数据</h3><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="14-添加-HEALTHCHECK"><a href="#14-添加-HEALTHCHECK" class="headerlink" title="14. 添加 HEALTHCHECK"></a>14. 添加 HEALTHCHECK</h3><p>运行容器时，可以指定<code>--restart always</code>选项。这样的话，容器崩溃时，Docker 守护进程(docker daemon)会重启容器。对于需要长时间运行的容器，这个选项非常有用。但是，如果容器的确在运行，但是不可(陷入死循环，配置错误)用怎么办？使用<a href="https://docs.docker.com/engine/reference/builder/#healthcheck">HEALTHCHECK</a>指令可以让 Docker 周期性的检查容器的健康状况。我们只需要指定一个命令，如果一切正常的话返回 0，否则返回 1。对 HEALTHCHECK 感兴趣的话，可以参考<a href="https://blog.newrelic.com/2016/08/24/docker-health-check-instruction/">这篇博客</a>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line">HEALTHCHECK CMD curl --fail http:&#x2F;&#x2F;localhost:$APP_PORT || exit 1</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>当请求失败时，<code>curl --*fail*</code> 命令返回非 0 状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://zronghui.github.io/docker%20k8s/k8s.html"/>
    <id>https://zronghui.github.io/docker%20k8s/k8s.html</id>
    <published>2020-05-16T06:59:37.000Z</published>
    <updated>2020-05-28T23:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="从零开始入门-K8s"><a href="#从零开始入门-K8s" class="headerlink" title="**从零开始入门 K8s"></a>**从零开始入门 K8s</h2><p><a href="https://kubernetes.io/zh/docs/tasks/#%e4%bd%bf%e7%94%a8-kubectl-%e5%91%bd%e4%bb%a4%e8%a1%8c">任务 - Kubernetes</a></p><p><a href="https://juejin.im/post/5ea7f9ef5188256d9c25988e">K8s 资源全汇总 | K8s 大咖带你 31 堂课从零入门 K8s - 掘金</a></p><h3 id="课时3-k8s-核心概念"><a href="#课时3-k8s-核心概念" class="headerlink" title="课时3. k8s 核心概念"></a>课时3. k8s 核心概念</h3><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p>调度、自动修复、水平伸缩</p><p>服务的发现与负载的均衡；<br><strong>容器的自动装箱–scheduling–调度</strong>，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接；<br><strong>自动化的容器的恢复</strong>。在一个集群中，经常会出现宿主机的问题或者说是 OS 的问题，导致容器本身的不可用，Kubernetes 会自动地对这些不可用的容器进行恢复；<br>Kubernetes 会帮助我们去做<strong>应用的自动发布与应用的回滚</strong>，以及与应用相关的配置密文的管理；<br>对于 job 类型任务，Kubernetes 可以去做批量的执行；<br>为了让这个集群、这个应用更富有弹性，Kubernetes 也<strong>支持水平的伸缩</strong>。</p><h4 id="Kubernetes-的架构"><a href="#Kubernetes-的架构" class="headerlink" title="Kubernetes 的架构"></a>Kubernetes 的架构</h4><img src="https://i.loli.net/2020/05/19/Mk3d2bi7JwPyHQx.png" alt="5728b58a8d2cf6c2be789bca5acbb77dde9c4d4c" style="zoom: 25%;" /><img src="https://i.loli.net/2020/05/19/Oi2e5o8jgNauMls.png" alt="b161e11eae280d950de7259873193f1a9359b97f" style="zoom: 25%;" /><img src="https://i.loli.net/2020/05/19/ORNK3QshCVWFMpB.png" alt="9dbdfbe3b7068f32d95b02dc2dd29302c82c9e3e" style="zoom: 25%;" /><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><img src="https://i.loli.net/2020/05/19/vRxHMos7wycODZu.png" alt="616cc75b2ce8d734d6389f521c16f4d1d6f56dff" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/paTk4l9nbVUgsqC.png" alt="5d7c4142358a29dee77740cb9ebe978b04aec2eb" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/VoYe3G6EOsq25WK.png" alt="70fdf18aac3c814fff9c0a6f2a83dd9eed29f387" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/o17wgJbYSUNBzd8.png" alt="ac386185dd887052ed3236a05c82cb9e565733fd" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/9KRm6YNWyl8sMDF.png" alt="8995bce3a619f4e182fd65410ddddf477cbf869a" style="zoom:25%;" /><p>一个比较有意思的 metadata 叫做“label”</p><p>这些 label 是可以被 selector，也就是选择器所查询的。这个能力实际上跟我们的 sql 类型的 select 语句是非常相似的</p><img src="https://i.loli.net/2020/05/19/P8ntC5p6ydsYxjR.png" alt="1_17" style="zoom:25%;" /><h3 id="课时4-Pod-与容器设计模式"><a href="#课时4-Pod-与容器设计模式" class="headerlink" title="课时4. Pod 与容器设计模式"></a>课时4. Pod 与容器设计模式</h3><p><a href="https://mp.weixin.qq.com/s/OW7zvGhPgGAnBuo4A_SXFw">从零入门 K8s| 人人都能看懂 Pod 与容器设计模式</a></p><h4 id="为什么需要-Pod"><a href="#为什么需要-Pod" class="headerlink" title="为什么需要 Pod"></a>为什么需要 Pod</h4><p><strong>容器的基本概念</strong></p><p>容器的本质实际上是一个进程，是一个视图被隔离，资源受限的进程。很多人都说 Kubernetes 是云时代的操作系统，这个非常有意思，因为如果以此类推，容器镜像就是这个操作系统的软件安装包。</p><p><strong>真实操作系统里的例子</strong></p><p>如果说 Kubernetes 就是操作系统的话，那么不妨看一下真实的操作系统的例子。</p><p>例子里面有一个程序叫做 Helloworld，这个 Helloworld 程序实际上是由一组进程组成的，需要注意一下，这里说的进程实际上等同于 Linux 中的线程。</p><p>因为 Linux 中的线程是轻量级进程，所以如果从 Linux 系统中去查看 Helloworld 中的 pstree，将会看到这个 Helloworld 实际上是由四个线程组成的，分别是 {api、main、log、compute}。也就是说，四个这样的线程共同协作，共享 Helloworld 程序的资源，组成了 Helloworld 程序的真实工作情况。</p><p>这是操作系统里面进程组或者线程组中一个非常真实的例子，以上就是进程组的一个概念。</p><p>在真实的操作系统里面，一个程序往往是根据进程组来进行管理的。Kubernetes 把它类比为一个操作系统，比如说 Linux。针对于容器我们前面提到可以类比为进程，就是前面的 Linux 线程。那么 Pod 又是什么呢？实际上 Pod 就是我们刚刚提到的进程组，也就是 Linux 里的线程组。</p><p><strong>进程组概念</strong></p><p>若为了管理很多个进程，直接把容器里 PID=1 的进程直接改成 systemd，那么会有一些问题：</p><p>首先，PID=1 进程是应用本身，如果现在把这个 PID=1 的进程给 kill 了，或者它自己运行过程中死掉了，那么剩下三个进程的资源就没有人回收了。</p><p>其次，不能知道应用是不是退出，fail， 异常</p><p><strong>Pod = “进程组”</strong></p><p>在 Kubernetes 里面，Pod 实际上正是 Kubernetes 项目为你抽象出来的一个可以类比为进程组的概念。</p><p>Pod 在 Kubernetes 里面只有一个逻辑单位，没有一个真实的东西对应说这个就是 Pod。</p><p>真正起来在物理上存在的东西，就是容器</p><p><strong>为什么 Pod 必须是原子调度单位？</strong></p><p>为了解决Task co-scheduling 问题，具体分析过程见原文</p><p><strong>再次理解 Pod</strong></p><p>Pod 里面的容器是“超亲密关系”</p><p>超亲密关系大概分为以下几类：</p><ul><li>比如说两个进程之间会发生<strong>文件交换</strong>，前面提到的例子就是这样，一个写日志，一个读日志；</li><li>两个进程之间需要通过 localhost 或者说是本地的 Socket 去进行<strong>通信</strong>，这种本地通信也是超亲密关系；</li><li>这两个容器或者是微服务之间，需要发生非常<strong>频繁的 RPC 调用</strong>，出于性能的考虑，也希望它们是超亲密关系；</li><li>两个容器或者是应用，它们需要<strong>共享某些 Linux Namespace</strong>。最简单常见的一个例子，就是我有一个容器需要加入另一个容器的 Network Namespace。这样我就能看到另一个容器的网络设备，和它的网络信息。</li></ul><p><strong>Pod 要解决的问题</strong></p><p>具体的解法分为两个部分：网络和存储</p><ul><li><p><strong>共享网络</strong></p></li><li><p>比如说现在有一个 Pod，其中包含了一个容器 A 和一个容器 B，它们两个就要共享 Network Namespace。在 Kubernetes 里的解法是这样的：在每个 Pod 里，额外起一个 Infra container 小容器来共享整个 Pod 的  Network Namespace。（Infra container 是一个非常小的镜像，大概 100~200KB 左右。所以说一个 Pod 里面的所有容器，它们看到的网络视图是完全一样的。即：它们看到的网络设备、IP地址、Mac地址等等，跟网络相关的信息，其实全是一份）</p></li><li><p>所以整个 Pod 里面，必然是 Infra container 第一个启动。并且整个 <strong>Pod 的生命周期是等同于 Infra container 的生命周期</strong>的，与容器 A 和 B 是无关的。这也是为什么在 Kubernetes 里面，<strong>它是允许去单独更新 Pod 里的某一个镜像</strong>的，即：做这个操作，整个 Pod 不会重建，也不会重启，这是非常重要的一个设计。</p></li><li><p><strong>共享存储</strong></p></li><li><p>比如说现在有两个容器，一个是 Nginx，另外一个是非常普通的容器，在 Nginx 里放一些文件，让我能通过 Nginx 访问到。所以它需要去 share 这个目录。我 share 文件或者是 share 目录在 Pod 里面是非常简单的，实际上就是把 volume 变成了 Pod level。然后所有容器，就是所有同属于一个 Pod 的容器，他们共享所有的 volume。</p></li></ul><h4 id="详解容器设计模式"><a href="#详解容器设计模式" class="headerlink" title="详解容器设计模式"></a>详解容器设计模式</h4><p><strong>举例</strong></p><p>有一个 WAR 包需要把它放到 Tomcat 的 web APP 目录下面，这样就可以把它启动起来了。可是像这样一个 WAR 包或 Tomcat 这样一个容器的话，怎么去做，怎么去发布</p><p>第一种方式：可以把 WAR 包和 Tomcat 打包放进一个镜像里面。但是这样带来一个问题，就是现在这个镜像实际上揉进了两个东西。那么接下来，无论是我要更新 WAR 包还是说我要更新 Tomcat，都要重新做一个新的镜像，这是比较麻烦的；</p><p>第二种方式：就是<strong>镜像里面只打包 Tomcat</strong>。它就是一个 Tomcat，但是需要使用数据卷的方式，比如说 hostPath，从宿主机上把 WAR 包挂载进我们 Tomcat 容器中，挂到我的 web APP 目录下面，这样把这个容器启用起来之后，里面就能用了。</p><p><strong>InitContainer</strong></p><p>在上图的 yaml 里，首先定义一个 Init Container，它只做一件事情，就是把 WAR 包从镜像里拷贝到一个 Volume 里面，它做完这个操作就退出了，所以 Init Container 会比用户容器先启动，并且严格按照定义顺序来依次执行</p><p><strong>容器设计模式：Sidecar</strong></p><p>在 Pod 里面，可以定义一些专门的容器，来执行主业务容器所需要的一些辅助工作，比如我们前面举的例子，其实就干了一个事儿，这个 Init Container，它就是一个 Sidecar，它只负责把镜像里的 WAR 包拷贝到共享目录里面，以便被 Tomcat 能够用起来。</p><ul><li>Sidecar：应用与日志收集</li><li>业务容器将日志写在一个 Volume 里面,Sidecar 容器一定可以通过共享该 Volume，直接把日志文件读出来，然后存到远程存储里面，或者转发到另外一个例子</li><li>Sidecar：代理容器</li><li>单独写一个小的 Proxy，用来处理对接外部的服务集群，它对外暴露出来只有一个 IP 地址就可以了。所以接下来，业务容器主要访问 Proxy，然后由 Proxy 去连接这些服务集群</li><li>Sidecar：适配器容器</li><li>有个例子：现在业务容器暴露出来的监控接口是 /metrics，访问这个容器的 metrics 的 URL 就可以拿到了。可是现在，这个监控系统升级了，它访问的 URL 是 /health，我只认得暴露出 health 健康检查的 URL，才能去做监控，metrics 不认识。那这个怎么办？那就需要改代码了，但可以不去改代码，额外写一个 Adapter，用来把所有对 health 的这个请求转发给 metrics 就可以了，所以这个 Adapter 对外暴露的是 health 这样一个监控的 URL，这就可以了，你的业务就又可以工作了。</li></ul><h3 id="课时5-应用编排与管理-一-：核心原理"><a href="#课时5-应用编排与管理-一-：核心原理" class="headerlink" title="课时5. 应用编排与管理(一)：核心原理"></a>课时5. 应用编排与管理(一)：核心原理</h3><h4 id="资源元信息"><a href="#资源元信息" class="headerlink" title="资源元信息"></a>资源元信息</h4><p>元数据 包括 labels annotations owereference, 常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有 pods</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl apply -f pod1.yaml</span><br><span class="line">kubectl apply -f pod2.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有 pods, 并且显示 labels</span></span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line">kubectl get pods nginx1 -o yaml | less</span><br><span class="line"><span class="meta">#</span><span class="bash"> 增 label</span></span><br><span class="line">kubectl label pods nginx1 env=test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改 label</span></span><br><span class="line">kubectl label pods nginx1 env=test —overwrite</span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删 label</span></span><br><span class="line">kubectl label pods nginx tie-</span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查 label</span></span><br><span class="line">kubectl get pods —show-labels -l env=test</span><br><span class="line">kubectl get pods —show-labels -l env=test,env=dev # , 与 的关系</span><br><span class="line">kubectl get pods —show-labels -l env=dev,tie=front</span><br><span class="line">kubectl get pods —show-labels -l ’env in (dev,test)’</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加 annotation</span></span><br><span class="line">kubectl annotate pods nginx1 my-annotate=‘my annotate,ok’</span><br><span class="line">kubectl get pods nging1 -o yaml | less</span><br><span class="line">kubectl apply -f rs.yaml</span><br><span class="line">kubectl get replicasets  nginx-replicasets -o yaml |less</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get pods nginx-replicasets-rhd68 -o yaml | less</span><br></pre></td></tr></table></figure><h4 id="控制器模式"><a href="#控制器模式" class="headerlink" title="控制器模式"></a>控制器模式</h4><ol><li>控制循环</li><li>Sensor</li><li>控制循环例子-扩容</li></ol><p>没看懂</p><p>总结：</p><ol><li><p>两种 API 设计方法</p><p><strong>Kubernetes 控制器模式依赖声明式的 API</strong>。另外一种常见的 API 类型是命令式 API。为什么 Kubernetes 采用声明式 API，而不是命令式 API 来设计整个控制器呢？</p></li></ol><p>   首先，比较两种 API 在交互行为上的差别。在生活中，常见的<strong>命令式</strong>的交互方式是家长和孩子交流方式，因为孩子欠缺目标意识，无法理解家长期望，家长往往通过<strong>一些命令</strong>，教孩子一些<strong>明确的动作</strong>，比如说：吃饭、睡觉类似的命令。我们在容器编排体系中，命令式 API 就是通过向系统发出明确的操作来执行的。</p><p>   而常见的<strong>声明式</strong>交互方式，就是老板对自己员工的交流方式。老板一般不会给自己的员工下很明确的决定，实际上可能老板对于要操作的事情本身，还不如员工清楚。因此，老板通过给员工<strong>设置可量化的业务目标</strong>的方式，来发挥员工自身的主观能动性。比如说，老板会要求某个产品的市场占有率达到 80%，而不会指出要达到这个市场占有率，要做的具体操作细节。</p><p>   类似的，在容器编排体系中，我们可以执行一个应用实例副本数保持在 3 个，而不用明确的去扩容 Pod 或是删除已有的 Pod，来保证副本数在三个。</p><ol start="2"><li><p>命令式 API 的问题</p><img src="https://i.loli.net/2020/05/24/c2WNj5UPGnXBVYk.jpg" alt="img" style="zoom:50%;" /></li><li><p>控制器模式总结</p><p>控制型模式中最核心的就是控制循环的概念；</p><p>两种 API 设计方法：声明式 API 和命令式 API ；Kubernetes 所采用的控制器模式，是由声明式 API 驱动的。</p></li></ol><h3 id="课时6-应用编排与管理-二-：Deployment"><a href="#课时6-应用编排与管理-二-：Deployment" class="headerlink" title="课时6. 应用编排与管理(二)：Deployment"></a>课时6. 应用编排与管理(二)：Deployment</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><p><strong>Deployment：管理部署发布的控制器</strong></p><p>Deployment 能帮我们做什么事情呢？</p><p>首先，<strong>Deployment 定义了一种 Pod 期望数量</strong>，比如说应用 A，我们期望 Pod 数量是四个，那么这样的话，controller 就会持续维持 Pod 数量为期望的数量。当我们与 Pod 出现了网络问题或者宿主机问题的话，controller 能帮我们恢复，也就是新扩出来对应的 Pod，来保证可用的 Pod 数量与期望数量一致；<br>配置 Pod 发布方式，也就是说 controller 会<strong>按照用户给定的策略来更新 Pod</strong>，而且更新过程中，也可以设定不可用 Pod 数量在多少范围内；<br>如果更新过程中发生问题的话，即所谓<strong>“一键”回滚</strong>，也就是说你通过一条命令或者一行修改能够将 Deployment 下面所有 Pod 更新为某一个旧版本 。</p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><p><strong>Deployment 语法</strong></p><p><img src="https://i.loli.net/2020/05/25/U86LwdBntlyrhsM.png" alt="c3"></p><p>“apiVersion：apps/v1”，也就是说 Deployment 当前所属的组是 apps，版本是 v1</p><p>Deployment.spec 中首先要有一个核心的字段，即 replicas，这里定义期望的 Pod 数量为三个；selector 其实是 Pod 选择器，那么所有扩容出来的 Pod，它的 Labels 必须匹配 selector 层上的 image.labels，也就是 app.nginx</p><ul><li>MinReadySeconds：Deployment 会根据 Pod ready 来看 Pod 是否可用，ready 的 Pod 不一定是 available 的，它一定要超过 MinReadySeconds 之后，才会判断为 available；</li><li>revisionHistoryLimit：保留历史 revision，即保留历史 ReplicaSet 的数量，默认值为 10 个。这里可以设置为一个或两个，如果回滚可能性比较大的话，可以设置数量超过 10；</li><li>paused：paused 是标识，Deployment 只做数量维持，不做新的发布，这里在 Debug 场景可能会用到；</li><li>progressDeadlineSeconds：前面提到当 Deployment 处于扩容或者发布状态时，它的 condition 会处于一个 processing 的状态，processing 可以设置一个超时时间。如果超过超时时间还处于 processing，那么 controller 将认为这个 Pod 会进入 <em>failed</em> 的状态。</li></ul><p><img src="https://i.loli.net/2020/05/25/P3HKm8ZdVowSxiq.png" alt="c29"></p><p><strong>升级策略字段解析</strong></p><p>Deployment 在 RollingUpdate 中主要提供了两个策略，一个是 MaxUnavailable，另一个是 MaxSurge。这两个字段解析的意思，可以看下图中详细的 comment，或者简单解释一下：</p><ul><li>MaxUnavailable：滚动过程中最多有多少个 Pod 不可用；</li><li>MaxSurge：滚动过程中最多存在多少个 Pod 超过预期 replicas 数量。</li></ul><p> MaxSurge 和 MaxUnavailable 不能同时为 0。</p><p><strong>查看 Deployment 状态</strong></p><p>kubectl get deployment</p><p><img src="https://i.loli.net/2020/05/25/SbPa2fpuKtLQRyo.png" alt="c4"></p><p><strong>查看 Pod</strong></p><p><img src="https://i.loli.net/2020/05/25/dJ6wFpXaNSfCuMV.png" alt="c5"></p><p>Pod 名字格式我们不难看到。</p><p>最前面一段：nginx-deployment，其实是 Pod 所属 Deployment.name；中间一段：template-hash，这里三个 Pod 是一样的，因为这三个 Pod 其实都是同一个 template 中创建出来的。最后一段，是一个 random 的字符串</p><p><strong>更新镜像</strong></p><p>kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1</p><p><img src="https://i.loli.net/2020/05/25/ZO9FANjJDqmHpxP.png" alt="c6"></p><p>首先 kubectl 后面有一个 set image 固定写法，这里指的是设定镜像；<br>其次是一个 deployment.v1.apps，这里也是一个固定写法，写的是我们要操作的资源类型，deployment 是资源名、v1 是资源版本、apps 是资源组，这里也可以简写为 deployment 或者 deployment.apps，比如说写为 deployment 的时候，默认将使用 apps 组 v1 版本。<br>第三部分是要更新的 deployment 的 name，也就是我们的 nginx-deployment；再往后的 nginx 其实指的是 template，也就是 Pod 中的 container.name；这里我们可以注意到：一个 Pod 中，其实可能存在多个 container，而我们指定想要更新的镜像的 container.name，就是 nginx。<br>最后，指定我们这个容器期望更新的镜像版本，这里指的是 nginx: 1.9.1。如下图所示：当执行完这条命令之后，可以看到 deployment 中的 template.spec 已经更新为 nginx: 1.9.1。</p><p><strong>快速回滚</strong></p><p><img src="https://i.loli.net/2020/05/25/CtnsmlSfHrdEqG8.png" alt="c7"></p><p><strong>DeploymentStatus</strong></p><p><img src="https://i.loli.net/2020/05/25/WB1saQiNyUSx3Gv.png" alt="c8"></p><p>Processing 指的是 Deployment 正在处于扩容和发布中。比如说 Processing 状态的 deployment，它所有的 replicas 及 Pod 副本全部达到最新版本，而且是 available，这样的话，就可以进入 complete 状态。而 complete 状态如果发生了一些扩缩容的话，也会进入 processing 这个处理工作状态。</p><p>如果在处理过程中遇到一些问题：比如说拉镜像失败了，或者说 readiness probe 检查失败了，就会进入 failed 状态；如果在运行过程中即 complete 状态，中间运行时发生了一些 pod readiness probe 检查失败，这个时候 deployment 也会进入 failed 状态。进入 failed 状态之后，除非所有点 replicas 均变成 available，而且是 updated 最新版本，deployment 才会重新进入 complete 状态。</p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><p>略</p><h4 id="四、架构设计"><a href="#四、架构设计" class="headerlink" title="四、架构设计"></a>四、架构设计</h4><p>管理模式</p><p><img src="https://i.loli.net/2020/05/25/Vt9fZGaIzbNkLeO.png" alt="c23"></p><h3 id="课时7-应用编排与管理-三-：Job-amp-DaemonSet"><a href="#课时7-应用编排与管理-三-：Job-amp-DaemonSet" class="headerlink" title="课时7. 应用编排与管理(三)：Job &amp; DaemonSet"></a>课时7. 应用编排与管理(三)：Job &amp; DaemonSet</h3><h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>Job 为我们<strong>提供的功能</strong></p><ul><li>它可以创建一个或多个 Pod 来指定 Pod 的数量，并可以监控它是否成功地运行或终止；</li><li>我们可以根据 Pod 的状态来给 Job 设置重置的方式及重试的次数；</li><li>我们还可以根据依赖关系，保证上一个任务运行完成之后再运行下一个任务；</li><li>同时还可以控制任务的并行度，根据并行度来确保 Pod 运行过程中的并行次数和总体完成大小。</li></ul><p><strong>Job 语法</strong></p><img src="https://i.loli.net/2020/05/25/C149GlHXgQrxFvj.png" alt="image-20200525164348534" style="zoom:33%;" /><p>上图是 Job 最简单的一个 yaml 格式，这里主要新引入了一个 kind 叫 Job，这个 Job 其实就是 job-controller 里面的一种类型。 然后 metadata 里面的 name 来指定这个 Job 的名称，下面 spec.template 里面其实就是 pod 的 spec。</p><p>所以在 Job 里面，我们主要重点关注的是 <strong>restartPolicy 重启策略</strong>和 <strong>backoffLimit 重试次数限制</strong>。</p><p>Never、OnFailure、Always</p><p><strong>Job 状态</strong></p><img src="https://i.loli.net/2020/05/25/eOglzMFTWyAZ1xq.png" alt="image-20200525164532590" style="zoom:33%;" /><p>Job 创建完成之后，我们就可以通过 kubectl get jobs 这个命令，来查看当前 job 的运行状态。得到的值里面，基本就有 Job 的名称、当前完成了多少个 Pod 以及运行了多长时间。</p><p><strong>查看 Pod</strong></p><p>kubectl get pods </p><p>kubectl get pods pi-4cids -o yaml</p><p>Pod 的名称会以“${job-name}-${random-suffix}”</p><p><strong>并行运行 Job</strong></p><p>主要看两个参数：一个是 completions，一个是 parallelism</p><p>分别含义为： Job 指定的可以运行的总次数 、 并行执行的个数</p><p>比如说 Job 一定要执行 8 次（completions），每次并行 2 个 Pod（parallelism），这样的话，一共会执行 4 个批次。</p><p><strong>查看并行 Job 运行</strong></p><h4 id="cronjob"><a href="#cronjob" class="headerlink" title="cronjob"></a>cronjob</h4><img src="https://i.loli.net/2020/05/25/qv7UAIsGMFxNYVj.png" alt="image-20200525164906142" style="zoom:50%;" /><p>startingDeadlineSeconds：如果等待时间超过startingDeadlineSeconds的话，CronJob 就会停止这个 Job；</p><p>concurrencyPolicy：就是说是否允许并行运行。所谓的并行运行就是，当第二个 Job 要到时间需要去运行的时候，上一个 Job 还没完成。如果这个 policy 设置为 <strong>true</strong> 的话，那么不管你前面的 Job 是否运行完成，每分钟都会去执行；如果是 false，它就会等上一个 Job 运行完成之后才会运行下一个；</p><p>JobsHistoryLimit：这个就是每一次 CronJob 运行完之后，它都会遗留上一个 Job 的运行历史、查看时间。当然这个额不能是无限的，所以需要设置一下历史存留数，一般可以设置默认 10 个或 100 个都可以</p><h4 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h4><p><strong>略</strong></p><p>Job 的编排文件<br>Job 的创建及运行验证<br>并行 Job 的编排文件<br>并行 Job 的创建及运行验证<br>Cronjob 的编排文件<br>Cronjob 的创建及运行验证</p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p><strong>略</strong></p><p>Job 管理模式<br>Job 控制器</p><h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><p>DaemonSet：守护进程控制器</p><img src="https://i.loli.net/2020/05/25/hylNU3JPtaWoDO1.png" alt="image-20200525165437046" style="zoom: 50%;" /><p><strong>查看 DaemonSet 状态</strong></p><p>kubectl get ds</p><img src="https://i.loli.net/2020/05/25/ArkPTVvJClXh79H.png" alt="image-20200525165535852" style="zoom:50%;" /><p>有几个参数，分别是：需要的 pod 个数、当前已经创建的 pod 个数、就绪的个数，以及所有可用的、通过健康检查的 pod；还有 <strong>NODE SELECTOR</strong>，因为 NODE SELECTOR 在 DaemonSet 里面非常有用。</p><p>有时候我们可能<strong>希望只有部分节点去运行这个 pod 而不是所有的节点</strong>，所以有些节点上被打了标的话，DaemonSet 就只运行在这些节点上。比如，我只希望 master 节点运行某些 pod，或者只希望 Worker 节点运行某些 pod，就可以使用这个 NODE SELECTOR。</p><p><strong>更新 DaemonSet</strong></p><img src="https://i.loli.net/2020/05/25/LN4gjsvqcA1Cbxn.jpg" alt="img" style="zoom:50%;" /><h4 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a>操作演示</h4><p><strong>略</strong></p><p>DaemonSet 的编排<br>DaemonSet 的创建与运行验证<br>DaemonSet 的更<br>DaemonSet 管理模式<br>DaemonSet 控制器</p><h3 id="课时8-应用配置管理：ConfigMap-Secret"><a href="#课时8-应用配置管理：ConfigMap-Secret" class="headerlink" title="课时8. 应用配置管理：ConfigMap Secret"></a>课时8. 应用配置管理：ConfigMap Secret</h3><p><a href="https://mp.weixin.qq.com/s/8r-_Ekje__GVHsKLfJ-66A">从零开始入门 K8s | 如何实现应用配置管理？</a></p><h4 id="ConfigMap-和-Secret"><a href="#ConfigMap-和-Secret" class="headerlink" title="ConfigMap 和 Secret"></a>ConfigMap 和 Secret</h4><p>首先介绍了 ConfigMap 和 Secret 的创建方法和使用场景，然后对 ConfigMap 和 Secret 的常见使用注意点进行了分类和整理。最后介绍了私有仓库镜像的使用和配置；</p><p><strong>使用场景</strong>：一些可变的配置。因为我们不可能把一些可变的配置写到镜像里面，当这个配置需要变化的时候，可能需要我们重新编译一次镜像，这个肯定是不能接受的，所以有了 <strong>ConfigMap</strong>; 一些敏感信息的存储和使用。比如说应用需要使用一些密码，或者用一些 token， 所以有了 Secret。</p><p><strong>创建方法</strong>：</p><p><img src="https://i.imgur.com/0LzM8Gh.jpg" alt="640"></p><p>主要用 –from-file 和 –from-literal 引入配置</p><p><img src="https://i.imgur.com/QEyF03B.jpg" alt="下载"></p><p>一二联合使用，首先引入配置为环境变量，再用 $x。三是挂载配置文件到容器内</p><p><img src="https://i.imgur.com/A8vWl2L.jpg" alt="下载"></p><p><strong>Pod 身份认证</strong>: 首先介绍了 ServiceAccount 和 Secret 的关联关系，然后从源码角度对 Pod 身份认证流程和实现细节进行剖析，同时引出了 Pod 的权限管理 (即 RBAC 的配置管理)；</p><p><img src="https://i.imgur.com/qBoFE5t.jpg" alt="下载"></p><p><img src="https://i.imgur.com/beMXTne.jpg" alt="下载"></p><p>容器资源和安全：首先介绍了容器常见资源类型 (CPU/Memory) 的配置，然后对 Pod 服务质量分类进行详细的介绍。同时对 SecurityContext 有效层级和权限配置项进行简要说明；<br>InitContainer: 首先介绍了 InitContainer 和普通 container 的区别以及 InitContainer 的用途。然后基于实际用例对InitContainer 的用途进行了说明。</p><p>略</p><h3 id="课时9-应用存储和持久化数据卷：核心知识"><a href="#课时9-应用存储和持久化数据卷：核心知识" class="headerlink" title="课时9. 应用存储和持久化数据卷：核心知识"></a>课时9. 应用存储和持久化数据卷：核心知识</h3><p>首先来看一下 Pod Volumes 的使用场景：</p><ul><li>场景一：如果 pod 中的某一个容器在运行时异常退出，被 kubelet 重新拉起之后，如何保证之前容器产生的重要数据没有丢失？</li><li>场景二：如果同一个 pod 中的多个容器想要共享数据，应该如何去做？</li></ul><p>以上两个场景，其实都可以借助 Volumes 来很好地解决，接下来首先看一下 Pod Volumes 的常见类型：</p><ol><li>本地存储，常用的有 emptydir/hostpath；</li><li>网络存储：网络存储当前的实现方式有两种，一种是 in-tree，它的实现代码是放在 K8s 代码仓库中的，随着 K8s 对存储类型支持的增多，这种方式会给 K8s 本身的维护和发展带来很大的负担；而第二种实现方式是 out-of-tree，它的实现其实是给 K8s 本身解耦的，通过抽象接口将不同存储的 driver 实现从 K8s 代码仓库中剥离，因此 <strong>out-of-tree 是后面社区主推的一种实现网络存储插件的方式</strong>；</li><li>Persistent Volumes：它其实是将一些配置信息，如 secret/configmap 用卷的形式挂载在容器中，让容器中的程序可以通过 POSIX 接口来访问配置数据；</li></ol><p>课时 9 后面的暂时就不看了</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="Kubectl-安装、启动"><a href="#Kubectl-安装、启动" class="headerlink" title="Kubectl 安装、启动"></a>Kubectl 安装、启动</h2><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><p>安装失败</p><p><a href="https://www.linuxtechi.com/install-kubernetes-k8s-minikube-centos-8/">How to Install Kubernetes(k8s) with Minikube on CentOS 8</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"</span><br><span class="line"></span><br><span class="line">curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/darwin/amd64/kubectl"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有代理的话，很慢，可以本地下载好，传到服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/darwin/amd64/kubectl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync -azvhP kubectl root@47.93.53.47:/root/k8s</span></span><br><span class="line"></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line">mv ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure><h4 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">chmod +x minikube</span><br><span class="line">mkdir -p /usr/local/bin/</span><br><span class="line">install minikube /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用无需虚拟机的方式启动</span></span><br><span class="line">minikube start --driver=none</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><a href="https://matthewpalmer.net/kubernetes-app-developer/articles/guide-install-kubernetes-mac.html">How to Install Kubernetes on Mac with Docker, Minikube, VirtualBox - Kubernetes Book</a></p><p>/usr/local/bin/kubectl is v1.15.5, which may be incompatible with Kubernetes v1.18.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br><span class="line">brew install kubectl</span><br><span class="line">brew cask install virtualbox</span><br><span class="line">brew install minikube</span><br><span class="line">brew install bash-completion</span><br><span class="line"></span><br><span class="line">minikube start --image-mirror-country cn \</span><br><span class="line">    --iso-url=https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/iso/minikube-v1.9.0.iso \</span><br><span class="line">    --registry-mirror=https://vbd8z16m.mirror.aliyuncs.com</span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 自动补全</span><br><span class="line"># 编辑 ~&#x2F;.zshrc 文件</span><br><span class="line">if [ $commands[kubectl] ]; then</span><br><span class="line">  source &lt;(kubectl completion zsh)</span><br><span class="line">fi</span><br><span class="line"># 2. 更新 plugins&#x3D; 行以包含 kubectl 插件</span><br><span class="line">plugins&#x3D;(kubectl)</span><br><span class="line"></span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">tail -n 5 ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> minikube 可选参数</span></span><br><span class="line">minikube start \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --vm-driver=&lt;driver_name&gt; \</span><br><span class="line">  --extra-config=kubelet.MaxPods=5</span><br></pre></td></tr></table></figure><p>minikube stop 命令可用于停止集群</p><p>minikube delete 命令可用于删除集群</p><p>此命令将关闭并删除 Minikube 虚拟机，不保留任何数据或状态</p><p>minikube status 查看集群是否正常</p><h3 id="停止k8s"><a href="#停止k8s" class="headerlink" title="停止k8s"></a>停止k8s</h3><img src="https://i.loli.net/2020/05/19/sMSRDOwT654lK1j.png" alt="image-20200519222349284" style="zoom:33%;" /><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.提交一个 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class="line"></span><br><span class="line">2.升级 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml</span><br><span class="line"></span><br><span class="line">3.扩容 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment-scale.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe deployment nginx-deployment</span><br><span class="line">kubectl get --watch deployments</span><br><span class="line"></span><br><span class="line">kubectl delete deployment nginx-deployment</span><br><span class="line">kubectl delete deployments --all</span><br><span class="line">kubectl delete pods --all</span><br></pre></td></tr></table></figure><p><a href="http://docs.kubernetes.org.cn/618.html">Kubernetes kubectl delete 命令详解 _ Kubernetes(K8S)中文文档_Kubernetes中文社区</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="配置高效的-Kubernetes-命令行终端"><a href="#配置高效的-Kubernetes-命令行终端" class="headerlink" title="*配置高效的 Kubernetes 命令行终端"></a>*配置高效的 Kubernetes 命令行终端</h2><p><a href="https://www.chenshaowen.com/blog/how-to-configure-efficient-k8s-terminal.html">如何配置高效的 Kubernetes 命令行终端 - 陈少文的博客</a></p><p><a href="https://ywnz.com/linuxml/3094.html">交互式Kubernetes客户端，搭建高效Kubernetes命令行终端_Linux命令_云网牛站</a></p><h3 id="1-自动补全"><a href="#1-自动补全" class="headerlink" title="1. *自动补全"></a>1. *自动补全</h3><p><strong>kube-shell</strong> 好用点，支持模糊搜索</p><p><a href="https://github.com/cloudnativelabs/kube-shell">cloudnativelabs/kube-shell: Kubernetes shell: An integrated shell for working with the Kubernetes</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kube-shell</span><br></pre></td></tr></table></figure><p><a href="https://github.com/c-bata/kube-prompt">c-bata/kube-prompt: An interactive kubernetes client featuring auto-complete.</a></p><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-complete@2</span><br></pre></td></tr></table></figure><p>不仅仅是 kubectl ，也给其他命令行提供自动补全的命令提示。</p><p>在 .zshrc 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl complete</span><br><span class="line">source &lt;(kubectl completion zsh)</span><br></pre></td></tr></table></figure><p>在输入 <code>kubectl get pod</code> 命令时，键入 <code>Tab</code> 会自动列举当前类型下的资源，如果没有任何资源，则列举目录文件。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/completion-demo.gif"><img src="https://i.loli.net/2020/05/16/c7G2k8mFKrzHPpq.gif" alt="Demo"></a></p><h3 id="2-环境切换和管理-kubectx"><a href="#2-环境切换和管理-kubectx" class="headerlink" title="2. 环境切换和管理 - kubectx"></a>2. 环境切换和管理 - kubectx</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectx</span><br></pre></td></tr></table></figure><p>提供两个命令行工具：</p><ul><li>kubectx ，切换不同集群</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubectx-demo.gif"><img src="https://i.loli.net/2020/05/16/H8k5BhUpcZnFRiW.gif" alt="官方 Demo"></a></p><ul><li>kubens ，切换不同 Namespaces</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubens-demo.gif"><img src="https://i.loli.net/2020/05/16/CmHiRVcdIZK3Agp.gif" alt="官方 Demo"></a></p><h3 id="3-将当前环境显示在命令中-kube-ps1"><a href="#3-将当前环境显示在命令中-kube-ps1" class="headerlink" title="3. 将当前环境显示在命令中 - kube-ps1"></a>3. 将当前环境显示在命令中 - kube-ps1</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kube-ps1</span><br></pre></td></tr></table></figure><p>在 .profile 中添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kube-ps1</span><br><span class="line">source &quot;&#x2F;usr&#x2F;local&#x2F;opt&#x2F;kube-ps1&#x2F;share&#x2F;kube-ps1.sh&quot;</span><br><span class="line">PS1&#x3D;&#39;$(kube_ps1)&#39;$PS1</span><br></pre></td></tr></table></figure><p>但是由于通常 config 中配置的 context 名比较长，同时不易区分，需要修改下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i&#39;.s&#39; -E &#39;s&#x2F;kubernetes-admin@cluster.local&#39;&#x2F;dev&#x2F; ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>将 <a href="mailto:kubernetes-admin@cluster.local"><em>kubernetes</em>-admin@cluster.local</a> 替换为 dev ，可以配合 <a href="https://www.chenshaowen.com/blog/developing-tips-19.html#1-本地快速切换不同-Kubernetes-环境">本地快速切换不同 <em>Kubernetes</em> 环境</a> 使用。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-ps1-demo.gif"><img src="https://i.loli.net/2020/05/16/9ePf2ADi5lRNdvM.gif" alt="官方 Demo"></a></p><h3 id="4-交互式命令-kube-prompt"><a href="#4-交互式命令-kube-prompt" class="headerlink" title="4. 交互式命令 - kube-prompt"></a>4. 交互式命令 - kube-prompt</h3><p>kube-prompt 可以让用户省略每次都需要输入的 <code>kubectl</code> ，同时给出一些交互式的自动补全。kube-shell 也提供交互式的自动补全，但是很长时间没有更新了，使用 <code>pip install kube-shell</code> 进行安装，在服务器上可能用得上。</p><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install c-bata&#x2F;kube-prompt&#x2F;kube-prompt</span><br></pre></td></tr></table></figure><p>开始使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube-prompt</span><br></pre></td></tr></table></figure><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif"><img src="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif" alt="官方 Demo"></a></p><h3 id="5-Kubectl-Aliases"><a href="#5-Kubectl-Aliases" class="headerlink" title="5.Kubectl Aliases"></a>5.Kubectl Aliases</h3><p><a href="https://github.com/ahmetb/kubectl-aliases">https://github.com/ahmetb/kubectl-aliases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载 https://raw.githubusercontent.com/ahmetb/kubectl-alias/master/.kubectl_aliases</span><br><span class="line">[ -f ~/dotfiles/kubectl_aliases.sh ] &amp;&amp; source ~/dotfiles/kubectl_aliases.sh</span><br></pre></td></tr></table></figure><p>别名规则</p><p><img src="https://i.loli.net/2020/05/19/9YxDIobfXj2RUWP.jpg" alt="交互式Kubernetes客户端，搭建高效Kubernetes命令行终端"></p><h3 id="Kubeval、Kubens"><a href="#Kubeval、Kubens" class="headerlink" title="Kubeval、Kubens"></a>Kubeval、Kubens</h3><p>Kubeval 是一个用于校验 Kubernetes YAML 或 JSON 配置文件的工具，支持多个 Kubernetes 版本，可以帮助我们解决不少的麻烦。</p><p>项目地址：<a href="https://github.com/garethr/kubeval">https://github.com/garethr/kubeval</a></p><p>Kubens</p><p>该工具可以帮助您快速的在 <em>Kubernetes</em> 的多个命名空间之间切换。</p><p>项目地址：<a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></p><p>Kubens 使用效果图：</p><p><img src="https://i.loli.net/2020/05/19/JIYwCd5VmisrMUf.jpg" alt="交互式Kubernetes客户端，搭建高效Kubernetes命令行终端"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></li><li><a href="https://github.com/jonmosco/kube-ps1">https://github.com/jonmosco/kube-ps1</a></li><li><a href="https://github.com/c-bata/kube-prompt">https://github.com/c-bata/kube-prompt</a></li><li><a href="https://github.com/cloudnativelabs/kube-shell">https://github.com/cloudnativelabs/kube-shell</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://www.chenshaowen.com/blog/how-to-set-proxy-for-kubernetes.html">给 Kubernetes 配置 Proxy - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/kubernetes-cheat-sheet.html">Kubernetes Cheat Sheet - 陈少文的博客</a></p><h2 id="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"><a href="#Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？" class="headerlink" title="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"></a>Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？</h2><p>简单来说就是几个工具的使用场景不一样，Minikube 通过虚拟机方式快速安装单节点 Kubernetes 集群，可用于个人电脑快速体验Kubernetes；Kubeadm 是官方推荐的Kubernetes 分发工具，该工具有助于在现有基础架构上引导最佳 Kubernetes 集群实践，优点是能够在任何地方发布最小的可行 Kubernetes 集群；但 Kubeadm 不提供基础架构配置（例如：网络、负载均衡、存储等都需要额外配置）；Kops适合于在阿里云、AWS、GCE、Azure、OpenStack等云平台上部署Kubernetes群集，目前不支持裸机部署。Kubespray是产线部署常用工具，依赖Ansible，支持AWS，GCE，Azure，OpenStack等云平台，以及物理服务器的IaaS平台。</p><p><a href="https://liqiang.io/post/9f5d6241">Kubernetes 部署 Dashboard</a><br><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">网页界面 (Dashboard) - Kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>万一有 iPhone/iPad 了呢</title>
    <link href="https://zronghui.github.io/%E4%B8%87%E4%B8%80%E6%9C%89-iPhone-iPad-%E4%BA%86%E5%91%A2.html"/>
    <id>https://zronghui.github.io/%E4%B8%87%E4%B8%80%E6%9C%89-iPhone-iPad-%E4%BA%86%E5%91%A2.html</id>
    <published>2020-05-10T13:54:27.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.waerfa.com/simple-timers">Simple Timers 可同时运行多个计时的 app – Mac玩儿法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>app to install</title>
    <link href="https://zronghui.github.io/todo/app-to-install.html"/>
    <id>https://zronghui.github.io/todo/app-to-install.html</id>
    <published>2020-05-10T01:02:22.000Z</published>
    <updated>2020-05-10T09:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="Volume-Styles：个性化你的音量调节面板"><a href="#Volume-Styles：个性化你的音量调节面板" class="headerlink" title="Volume Styles：个性化你的音量调节面板"></a>Volume Styles：个性化你的音量调节面板</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://zronghui.github.io/docker%20k8s/docker.html"/>
    <id>https://zronghui.github.io/docker%20k8s/docker.html</id>
    <published>2020-05-08T09:30:20.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="docker-服务-端口对应"><a href="#docker-服务-端口对应" class="headerlink" title="docker 服务 端口对应"></a>docker 服务 端口对应</h2><p>gitlab 8001</p><p>yunmusic 8002</p><p>portainer 9000</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://study.163.com/course/courseLearn.htm?courseId=1002892012#/learn/video?lessonId=1003323253&courseId=1002892012">动手玩Docker - 网易云课堂</a></p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程</a></p><h2 id="1-docker-安装"><a href="#1-docker-安装" class="headerlink" title="1.docker 安装"></a>1.docker 安装</h2><p><a href="https://docs.docker.com/engine/install/centos/#install-docker-engine">Install Docker Engine on CentOS | Docker Documentation</a></p><p><a href="https://www.runoob.com/docker/macos-docker-install.html">MacOS Docker 安装 | 菜鸟教程</a></p><p><a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">Docker 镜像加速 | 菜鸟教程</a></p><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 用存储库进行安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 yum-utils 包(它提供 yum-config-manager 实用工具)并设置稳定存储库</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 DOCKER 引擎</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证指纹是否与060A 61c51b558a7f 742B 77AA C52F EB6B 621E 9F35匹配，如果是，接受它</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>镜像加速</p><p>配置文件: /etc/docker/daemon.json</p><p>阿里云 ID 见：<a href="https://cr.console.aliyun.com/undefined/instances/mirrors">https://cr.console.aliyun.com/undefined/instances/mirrors</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://my-id.mirror.aliyuncs.com"</span>, <span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>docker info 查看是否生效</p><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>Linux 需要安装 docker-compose ；Mac win 自带</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="meta">#</span><span class="bash">sudo pip install docker-compose <span class="comment"># 此时 alias 失效</span></span></span><br><span class="line">pip3 install docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><a href="https://www.runoob.com/docker/macos-docker-install.html">MacOS Docker 安装 | 菜鸟教程</a></p><p>从手动下载安装开始看</p><p><del>特慢的 brew</del></p><p><img src="https://i.loli.net/2020/05/09/FL5WbDVsj2myoTq.png" alt="FL5WbDVsj2myoTq"></p><h2 id="2-docker-操作"><a href="#2-docker-操作" class="headerlink" title="2.docker 操作"></a>2.docker 操作</h2><p><a href="https://snowdreams1006.tech/devops/docker-ops.html">docker 操作 · 雪之梦技术驿站</a></p><p><a href="https://www.cnblogs.com/sparkdev/p/7821376.html">查看 docker 容器使用的资源 - sparkdev - 博客园</a></p><ul><li>帮助命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>运行容器</li></ul><blockquote><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>退出容器</li></ul><blockquote><p><code>exit</code></p></blockquote><ul><li>查看容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>启动容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start b750bbbcfd88</span><br></pre></td></tr></table></figure><h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器-container"></a>容器-container</h3><ul><li>后台运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>停止容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;容器 ID&gt;</span><br><span class="line">docker <span class="built_in">kill</span> &lt;容器 ID&gt; <span class="comment"># 强制停止</span></span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><ul><li>进入容器</li></ul><blockquote><p><code>docker attach</code> 和 <code>docker exec</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 1e560fca3906</span><br></pre></td></tr></table></figure><blockquote><p>注意: 如果从这个容器退出,会导致容器的停止.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 243c32535da7 /bin/bash</span><br></pre></td></tr></table></figure><ul><li>导出容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><ul><li>导入容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import - <span class="built_in">test</span>/ubuntu:v1</span><br></pre></td></tr></table></figure><ul><li>删除容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f 1e560fca3906</span><br></pre></td></tr></table></figure><ul><li>清理掉所有处于终止状态的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><ul><li>端口映射 ？</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port bf08b7f2cd89</span><br></pre></td></tr></table></figure><ul><li>查看容器日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f bf08b7f2cd89</span><br></pre></td></tr></table></figure><ul><li>查看容器进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ul><li>列出镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>下载镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure><ul><li>查找镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search httpd</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><ul><li>创建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">"updated"</span> -a=<span class="string">"snowdreams1006"</span> eb3c83541f05 snowdreams1006/ubuntu</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher &quot;fisher@sudops.com&quot;</span><br><span class="line"></span><br><span class="line">RUN     &#x2F;bin&#x2F;echo &#39;root:123456&#39; |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     &#x2F;bin&#x2F;echo &#39;runoob:123456&#39; |chpasswd</span><br><span class="line">RUN     &#x2F;bin&#x2F;echo -e &quot;LANG&#x3D;\&quot;en_US.UTF-8\&quot;&quot; &gt;&#x2F;etc&#x2F;default&#x2F;local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br></pre></td></tr></table></figure><blockquote><p>Dockerfile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure><ul><li>设置镜像标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 860c279d2fec runoob/centos:dev</span><br></pre></td></tr></table></figure><h3 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h3><ul><li>随机映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>指定端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>指定地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><ul><li>命名容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name runoob training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>新建网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge <span class="built_in">test</span>-net</span><br></pre></td></tr></table></figure><ul><li>连接容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 --network <span class="built_in">test</span>-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>sudo docker logs -f -t –tail 10 s12</p><h3 id="常用操作-我用过的操作-："><a href="#常用操作-我用过的操作-：" class="headerlink" title="常用操作(我用过的操作)："></a>常用操作(我用过的操作)：</h3><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>docker ps -a</td><td>查看所有容器</td></tr><tr><td>docker stop xxx</td><td>停止容器</td></tr><tr><td>docker restart xxx</td><td>重启容器</td></tr><tr><td>docker container prune</td><td>清除所有停止的容器</td></tr><tr><td>-p outDocker:inDocker</td><td>端口映射</td></tr><tr><td>docker stats</td><td>类似top, 查看各个容器的 CPU mem 占用情况（为什么不是 states）</td></tr><tr><td>docker stats –no-stream</td><td>查看一次</td></tr><tr><td>docker images</td><td>查看所有 image</td></tr><tr><td>docker log -f xxxxx</td><td>查看容器日志</td></tr><tr><td>docker rmi xx</td><td>删除 image</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="容器资源限制：内存、CPU、带宽"><a href="#容器资源限制：内存、CPU、带宽" class="headerlink" title="容器资源限制：内存、CPU、带宽"></a>容器资源限制：内存、CPU、带宽</h3><p><a href="https://www.hangge.com/blog/cache/detail_2413.html">Docker - 常用命令汇总2（容器资源限制：内存、CPU、带宽）</a></p><p>一、内存限额<br>1，参数说明<br>2，使用样例<br>二、CPU 限额<br>1，参数说明<br>2，使用样例<br>三、Block IO 宽带限额<br>1，block io 权重<br>2，限制 bps 和 iops </p><h3 id="Dockerize"><a href="#Dockerize" class="headerlink" title="Dockerize"></a>Dockerize</h3><p><a href="https://rock-it.pl/better-docker-containers-with-dockerize-wrapper/">Better Docker experience with Dockerize</a></p><p>假设有docker-compose.yml内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.example.com/our-application</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br></pre></td></tr></table></figure><p>文件没问题，但是逻辑有问题，node 应用依赖于 database，有一定几率 node 启动失败</p><p>解决办法，使用 dockerize</p><p>在 dockerfile 里添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV DOCKERIZE_VERSION v0.4.0</span><br><span class="line">RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \</span><br><span class="line">    &amp;&amp; tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \</span><br><span class="line">    &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz</span><br></pre></td></tr></table></figure><p>修改 docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.example.com/our-application</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">dockerize</span> <span class="string">-wait</span> <span class="string">tcp://database:5432</span> <span class="string">node</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>更多用法、参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redirect files to stdout and stderr</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-stdout</span> <span class="string">info.log</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-stdout</span> <span class="string">perf.log</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait for 2 services with 10s timeout</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-wait</span> <span class="string">tcp://db:5432</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-wait</span> <span class="string">http://web:80</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-timeout</span> <span class="string">10s</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># template option</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-template</span> <span class="string">nginx.tmpl:nginx.conf</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="docker-django-es"><a href="#docker-django-es" class="headerlink" title="docker django es"></a>docker django es</h3><p><a href="https://hub.docker.com/_/elasticsearch?tab=description">elasticsearch - Docker Hub</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">Install Elasticsearch with Docker | Elasticsearch Reference [7.5] | Elastic</a></p><h2 id="3-docker-gitlab-8001"><a href="#3-docker-gitlab-8001" class="headerlink" title="3.docker gitlab :8001"></a>3.docker gitlab :8001</h2><p>主要看 gitlab 官方文档</p><p><a href="https://docs.gitlab.com/omnibus/docker/">GitLab Docker images | GitLab</a></p><p><a href="https://snowdreams1006.tech/devops/docker-gitlab.html">docker + gitlab · 雪之梦技术驿站</a><br><a href="https://www.jianshu.com/p/080a962c35b6">docker下gitlab安装配置使用(完整版) - 简书</a></p><p><a href="https://juejin.im/post/5a4c9ff36fb9a04507700fcc#heading-9">通过 docker 搭建自用的 gitlab 服务 - 掘金</a><br><a href="https://michael728.github.io/2019/06/15/docker-compose-install-gitlab-runner/">使用 Dockcer-Compose 安装 Gitlab 服务 | Michael翔</a><br><a href="https://github.com/sameersbn/docker-gitlab">sameersbn/docker-gitlab: Dockerized GitLab</a></p><p>For Linux users set the path to /srv</p><p>export GITLAB_HOME=/srv</p><p>For Mac OS users, use the user’s $HOME folder.</p><p>export GITLAB_HOME=$HOME</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export GITLAB_HOME=/srv</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span></span></span><br><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.zronghui.com \</span><br><span class="line">  --publish 443:443 --publish 8001:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  -m 500M \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p><strong>由于某些疏忽，Mac 和服务器的 gitlab home都为空</strong></p><p>所以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.zronghui.com \</span><br><span class="line">  --publish 443:443 --publish 8001:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h3 id="mem-占用过高问题解决："><a href="#mem-占用过高问题解决：" class="headerlink" title="mem 占用过高问题解决："></a>mem 占用过高问题解决：</h3><p>然而并没有解决，启动不了，而且 mem 占用仍然很高，差点的服务器跑不起来</p><p><a href="https://stackoverflow.com/questions/36122421/high-memory-usage-for-gitlab-ce">git - High memory usage for Gitlab CE - Stack Overflow</a><br><a href="https://edspencer.me.uk/posts/2017-07-30-reducing-the-amount-of-memory-used-by-gitlab/">Reducing the amount of memory used by gitlab - Ed Spencer - Performance obsessive web developer</a><br><a href="https://blog.csdn.net/qq446282412/article/details/84066417">【Git学习】解决GitLab内存消耗大的问题_运维_欧阳鹏-CSDN博客</a></p><p>vim /gitlab/config/gitlab.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除注释</span></span><br><span class="line">unicorn[<span class="string">'worker_processes'</span>] = <span class="number">2</span> <span class="comment"># 最低为 2</span></span><br><span class="line">postgresql[<span class="string">'shared_buffers'</span>] = <span class="string">"256MB"</span></span><br><span class="line">postgresql[<span class="string">'max_worker_processes'</span>] = <span class="number">1</span> <span class="comment"># 默认为 8</span></span><br><span class="line">sidekiq[<span class="string">'concurrency'</span>] = <span class="number">1</span> <span class="comment"># 默认为 25</span></span><br><span class="line">prometheus_monitoring[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab gitlab-ctl reconfigure</span><br><span class="line">docker exec -it gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/05/10/7ilcTwUIMGAkYj6.jpg" alt="7ilcTwUIMGAkYj6" style="zoom:50%;" /><p>等待3分钟，访问 127.0.0.1:8001 ,设置 root 密码</p><p>添加 group，添加用户，将用户添加到 group 里，创建 group 的项目</p><p>我感觉可以直接创建 root 的项目，反正是自己一个人使用</p><p>语言设置：</p><p><img src="https://i.loli.net/2020/05/10/zfFZkTYc4HjMhKW.png" alt="zfFZkTYc4HjMhKW"></p><h3 id="添加本地已有仓库"><a href="#添加本地已有仓库" class="headerlink" title="添加本地已有仓库"></a>添加本地已有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitlab http://47.93.53.47:8001/group1/zronghui_xxxt</span><br><span class="line">git push -u gitlab master</span><br><span class="line"></span><br><span class="line">cot .git/config</span><br><span class="line"></span><br><span class="line">[remote "origin"] 下面添加 gitlab 的 URL:</span><br><span class="line">url = http://47.93.53.47:8001/group1/zronghui_xxxt</span><br></pre></td></tr></table></figure><h2 id="4-解锁网易云灰色歌曲-8002"><a href="#4-解锁网易云灰色歌曲-8002" class="headerlink" title="4. 解锁网易云灰色歌曲 :8002"></a>4. 解锁网易云灰色歌曲 :8002</h2><p><a href="https://github.com/nondanee/UnblockNeteaseMusic">nondanee/UnblockNeteaseMusic: Revive unavailable songs for Netease Cloud Music</a></p><p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/48">进阶配置 · Issue #48 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22">食用指南 · Issue #22 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/527">全端通用方案搭建教程 · Issue #527 · nondanee/UnblockNeteaseMusic</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name yunmusic -p 8002:8080 nondanee/unblockneteasemusic</span><br></pre></td></tr></table></figure><h2 id="5-rsshub-1200"><a href="#5-rsshub-1200" class="headerlink" title="5. rsshub :1200"></a>5. rsshub :1200</h2><p><a href="https://github.com/DIYgod/RSSHub">DIYgod/RSSHub: 🍰 Everything is RSSible</a><br><a href="https://docs.rsshub.app/">介绍 | RSSHub</a></p><p><a href="https://docs.rsshub.app/install/#docker-compose-bu-shu">部署 | RSSHub</a></p><p>部分RSS需要单独配置后方可生成，如 pixiv、disqus、twitter、youtube、telegram、github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mcd rsshub</span><br><span class="line">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功，但是外网无法访问</span></span><br><span class="line">git clone https://github.com/DIYgod/RSSHub.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者只下载项目下的 lib/middleware/header.js</span></span><br><span class="line">vim lib/middleware/header.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 allow-origin 改为 0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'0.0.0.0'</span>,</span></span><br><span class="line">docker cp lib/middleware/header.js 8c144637ddef:/app/lib/middleware/</span><br><span class="line">docker restart 8c144637ddef</span><br></pre></td></tr></table></figure><h2 id="9-Django-工具"><a href="#9-Django-工具" class="headerlink" title="9.Django 工具"></a>9.Django 工具</h2><h3 id="kitematic-–-Mac管理-docker"><a href="#kitematic-–-Mac管理-docker" class="headerlink" title="kitematic – Mac管理 docker"></a>kitematic – Mac管理 docker</h3><h3 id="portainer-–-在网页端远程管理-docker"><a href="#portainer-–-在网页端远程管理-docker" class="headerlink" title="portainer – 在网页端远程管理 docker"></a>portainer – 在网页端远程管理 docker</h3><p><a href="https://github.com/portainer/portainer">portainer/portainer: Making Docker management easy.</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><p>启动起来后，开启 9000 端口，然后在本地：</p><p>访问 <a href="http://47.93.53.47:9000/">http://47.93.53.47:9000/</a></p><p>设置密码，选择 Local–Manage the local Docker environment</p><p><a href="https://www.infoq.cn/article/687ItzzHZ2P3pN5PMVSb">推荐5款好用的开源Docker工具 - InfoQ</a></p><p>watchtower ：自动更新 Docker 容器<br>docker-gc ：容器和镜像的垃圾回收<br>docker-slim ：面向容器的神奇减肥药<br>rocker ：突破 Dockerfile 的限制<br>ctop：容器的类顶层接口</p><h2 id="常用的Docker"><a href="#常用的Docker" class="headerlink" title="**常用的Docker"></a>**常用的Docker</h2><p><a href="http://bbs.nas66.com/thread-8409-1-1.html">汇总一下我常用的Docker镜像以及说明 - 矿渣社区 - 其他系统 - 软件专区</a></p><p>google 更多</p><ol><li>CentOS6</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">镜像：treasureboat/ssh</span><br><span class="line">用户名：root</span><br><span class="line">密码：<span class="number">123456</span></span><br><span class="line">建站的，配合这个脚本超好用：</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:<span class="comment">//download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span></span><br><span class="line">#</span><br><span class="line">#该镜像安装aria的步骤为：</span><br><span class="line">wget http:<span class="comment">//ftp.tu-chemnitz.de/pub/linux/dag/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm </span></span><br><span class="line">rpm -ivh rpmforge-<span class="built_in">release</span><span class="number">-0.5</span><span class="number">.3</span><span class="number">-1.</span>el6.rf.x86_64.rpm </span><br><span class="line">yum -y install aria2</span><br></pre></td></tr></table></figure><ol start="2"><li>Ubuntu18</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：rastasheep/ubuntu-sshd</span><br><span class="line">用户名：root</span><br><span class="line">密码：root</span><br></pre></td></tr></table></figure><ol start="3"><li>宝塔面板</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：tangniyuqi/baota</span><br><span class="line">用户名：admin</span><br><span class="line">密码：admin123</span><br></pre></td></tr></table></figure><ol start="4"><li>Debian</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：hklcf/debian-ssh-docker</span><br><span class="line">用户名: root</span><br><span class="line">密码：password</span><br></pre></td></tr></table></figure><ol start="5"><li>Centos</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tutum/centos:latest .</span><br><span class="line">tutum/centos:centos5 centos5</span><br><span class="line">tutum/centos:centos6 centos6</span><br><span class="line">tutum/centos:centos7 centos7</span><br><span class="line">用户名：root</span><br><span class="line">密码随机，在docker日志中查看密码</span><br></pre></td></tr></table></figure><ol start="6"><li>OwnCloud</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：imdjh/owncloud-with-ocdownloader</span><br><span class="line">端口：<span class="number">80</span></span><br><span class="line">就是owncloud</span><br></pre></td></tr></table></figure><ol start="7"><li>peerflix-server（磁力下载工具）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像：fish/peerflix-server</span><br><span class="line">端口：<span class="number">9000</span></span><br></pre></td></tr></table></figure><ol start="8"><li>Owncloud（可以启用外部存储并具有下载功能）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像：limaofeng/owncloud-with-ocdownloader</span><br><span class="line">端口：<span class="number">80</span></span><br></pre></td></tr></table></figure><ol start="9"><li>chrome浏览器</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像：</span><br><span class="line">consol/centos-xfce-vnc #（支持中文）</span><br><span class="line">consol/ubuntu-xfce-vnc #（不支持中文）</span><br><span class="line">密码：vncpassword</span><br><span class="line">端口：<span class="number">5901</span></span><br></pre></td></tr></table></figure><ol start="10"><li>xware-kodexplorer</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：mrlyc/xware-kodexplorer</span><br><span class="line">端口：<span class="number">80</span></span><br><span class="line">初始账号密码：admin</span><br></pre></td></tr></table></figure><p>宝塔面板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：tangniyuqi/baota</span><br><span class="line">用户名：admin</span><br><span class="line">密码：admin123</span><br></pre></td></tr></table></figure><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>网址：<a href="https://hub.docker.com/_/tomcat/">https://hub.docker.com/_/tomcat/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull tomcat</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name tomcat -p 8081:8080 tomcat</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>网址：<a href="https://hub.docker.com/_/nginx/">https://hub.docker.com/_/nginx/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull nginx</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name nginx -p 80:80 nginx</span><br><span class="line"># 静态资源放入 nginx 中 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 目录下</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><em>MySQL</em></h3><p>网址：<a href="https://hub.docker.com/_/mysql/">https://hub.docker.com/<em>/</em>mysql_/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#拉取</span><br><span class="line">docker pull mysql</span><br><span class="line"># 运行</span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;ROOT_Password -d mysql</span><br></pre></td></tr></table></figure><h4 id="MySQL-连接问题"><a href="#MySQL-连接问题" class="headerlink" title="MySQL 连接问题"></a><em>MySQL</em> 连接问题</h4><p><img src="https://i.loli.net/2020/05/18/lzPnNQmOyBsW5kr.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问题：Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line"></span><br><span class="line">解决方案：进入容器内，登录容器内的MySQL，在SQL中执行以下命令即可：</span><br><span class="line">alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;19491001&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>网址：<a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/">https://hub.docker.com/r/wnameless/oracle-xe-11g/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull wnameless&#x2F;oracle-xe-11g</span><br><span class="line"># 运行，默认账号 system，默认密码 oracle，-e 允许远程连接</span><br><span class="line">docker run -d --name oracle -p 49161:1521 -e ORACLE_ALLOW_REMOTE&#x3D;true wnameless&#x2F;oracle-xe-11g</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><em>Redis</em></h3><p>网址：<a href="https://hub.docker.com/_/redis/">https://hub.docker.com/<em>/</em>redis_/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull redis</span><br><span class="line"># 运行</span><br><span class="line">## 无密码运行</span><br><span class="line">docker run -d --name redis -p 6379:6379  redis</span><br><span class="line">## 有密码运行</span><br><span class="line">docker run -d --name redis10 -p 6379:6379 redis --requirepass 19491001</span><br></pre></td></tr></table></figure><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>网址：<a href="https://hub.docker.com/_/mongo/">https://hub.docker.com/_/mongo/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull mongo</span><br><span class="line"># 运行</span><br><span class="line">## 无账号密码运行</span><br><span class="line">docker run -d --name mongo -p 27017:27017 mongo</span><br><span class="line">## 账号密码运行</span><br><span class="line">docker run -d --name mongo  -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME&#x3D;mongo -e MONGO_INITDB_ROOT_PASSWORD&#x3D;19491001 mongo</span><br></pre></td></tr></table></figure><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><p>网址：<a href="https://hub.docker.com/r/gitlab/gitlab-ce/">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用 docker 拉取 gitlab 镜像</span><br><span class="line">docker pull gitlab&#x2F;gitlab-ce</span><br><span class="line"># 运行 giltab 镜像</span><br><span class="line">docker run -di --name&#x3D;gitlab-ce -p 7000:80 gitlab&#x2F;gitlab-ce</span><br><span class="line"># 进入 gitlab 容器中</span><br><span class="line">docker exec -it gitlab-ce &#x2F;bin&#x2F;bash</span><br><span class="line"># 执行 giltab 配置,访问 http:&#x2F;&#x2F;IP:7000 即可，首次访问需要配置 root 密码</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>DockerHub 官网：<a href="https://hub.docker.com/_/jenkins/">https://hub.docker.com/_/jenkins/</a></p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull jenkins</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name simbajenkins -p 7000:8080 -p 50000:50000 jenkins</span><br></pre></td></tr></table></figure><h3 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h3><p>DockerHub 官网：<a href="https://hub.docker.com/r/rancher/server/">https://hub.docker.com/r/rancher/server/</a></p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull rancher&#x2F;server</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name simbarancher -p 7001:8080 rancher&#x2F;server</span><br></pre></td></tr></table></figure><h2 id="参考、学习资料"><a href="#参考、学习资料" class="headerlink" title="参考、学习资料"></a>参考、学习资料</h2><p><a href="https://github.com/wsargent/docker-cheat-sheet">wsargent/docker-cheat-sheet: Docker Cheat Sheet</a><br><a href="https://github.com/veggiemonk/awesome-docker">veggiemonk/awesome-docker: A curated list of Docker resources and projects</a><br><a href="https://github.com/yeasy/docker_practice">yeasy/docker_practice: Learn and understand Docker technologies, with real DevOps practice!</a></p><p><a href="https://www.infoq.cn/article/tp28JvvgkZ-UPDY4THk5">谁在运行我的Kubernetes Pod？容器运行时的过去、现在和未来 - InfoQ</a></p><p><a href="https://snowdreams1006.tech/devops/docker-ops.html">docker 操作 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/devops/docker-compose.html">docker compose · 雪之梦技术驿站</a></p><p><a href="https://www.runoob.com/docker/docker-compose.html">Docker Compose | 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>追剧</title>
    <link href="https://zronghui.github.io/todo/%E8%BF%BD%E5%89%A7.html"/>
    <id>https://zronghui.github.io/todo/%E8%BF%BD%E5%89%A7.html</id>
    <published>2020-05-08T06:16:49.000Z</published>
    <updated>2020-05-30T13:51:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h2><ul><li><input disabled="" type="checkbox"> 百妖谱</li></ul><h2 id="美剧"><a href="#美剧" class="headerlink" title="美剧"></a>美剧</h2><ul><li><input disabled="" type="checkbox"> 雪国列车</li></ul><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><h3 id="悬疑电影"><a href="#悬疑电影" class="headerlink" title="悬疑电影"></a>悬疑电影</h3><ul><li><input disabled="" type="checkbox"> 9.钟表馆事件</li><li><input disabled="" type="checkbox"> 8.恶意</li><li><input disabled="" type="checkbox"> 7.奇想，天动</li><li><input checked="" disabled="" type="checkbox"> 6.看不见的客人</li><li><input disabled="" type="checkbox"> 5.控方证人</li><li><input disabled="" type="checkbox"> 4.X的悲剧</li><li><input disabled="" type="checkbox"> 3.罗杰疑案</li><li><input disabled="" type="checkbox"> 2.耳语之人</li><li><input disabled="" type="checkbox"> 1.高尔夫球场的疑云</li></ul><h2 id="韩剧"><a href="#韩剧" class="headerlink" title="韩剧"></a>韩剧</h2><p><a href="https://www.douban.com/doulist/2942804/">豆瓣评分8.0以上的韩剧（评价人数≥1000）</a></p><img src="https://i.loli.net/2020/05/08/y9BZ6dtkEX3KezY.png" alt="y9BZ6dtkEX3KezY" style="zoom: 33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-05</title>
    <link href="https://zronghui.github.io/blockchain/blockchain-05.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain-05.html</id>
    <published>2020-05-07T08:34:38.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="P9-09-BTC-比特币脚本"><a href="#P9-09-BTC-比特币脚本" class="headerlink" title="P9. 09-BTC-比特币脚本"></a>P9. 09-BTC-比特币脚本</h2><p>比特币使用的脚本与原理</p><p>如图(第15秒)是比特币的一个交易实例。该交易有一个输入两个输出。左上角写着output，其实是这个交易的输入。右边两个输出，上面unspent即没有花出，下面spent表示已花出。该交易已经收到了23个确认，所以回滚的可能性很小了。</p><p>下面是这个交易的输入输出脚本，输入脚本包含两个操作，分别把两个很长的数压入栈里。比特币使用的脚本语言是非常简单的，唯一能访问的内存空间就是一个堆栈。不像通用的编程语言，像C语言C++那样有全局变量、局部变量、动态分配的内存空间，它这里就是一个栈，所以叫做基于栈的语言。这里输出脚本有两行，分别对应上面的两个输出。每个输出有自己单独的一段脚本。</p><p>如图(第1分第40秒)是交易的具体内容。首先看交易的一些宏观信息。第一行:transaction ID，第二行hash，该交易的哈希值。第三行:使用的比特币协议的版本。第四行:该交易的大小。第五行:用来设定交易的生效时间。此处的0表示立即生效。绝大多数情况下，locktime都是0。如果是非零值，那么该交易要过一段时间才能生效。比如要等10个区块以后才能被写入区块链里。第六行第七行的vin、vout是输入输出部分，后面会详细讲解。第八行是这个交易所在区块的哈希值。第九行:该交易已经有多少个确认信息。第十行是交易产生的时间，第十一行是这个区块产生的时间。(time 和block time都是指很早的一个时间到现在过了多少秒)</p><p>如图(第3分第32秒)是交易的输入结构。一个交易可以有多个输入，在这个例子中只有一个输入。每个输入都要说明该输入花的币是来自之前哪个交易的输出，所以前两行给出输出币的来源。第一行:之前交易的哈希值。vout表示这个交易里的第几个输出。所以这里表示花的币来自于哈希值为c0cb…c57b的交易中第0个输出。接下来是输入脚本，输入脚本最简单的形式就是给出signification就行了，证明你有权利花这个钱。(后面的PPT中scriptsig就写成input script输入脚本)。如果一个交易有多个输入，每个输入都要说明币的来源，并且要给出签名，也就是说比特币中的一个交易可能需要多个签名。</p><p>如图(第5分)是交易的输出，也是一个数组结构。该例子中有两个输出，value是输出的金额，就是给对方转多少钱，单位是比特币，即0.22684个比特币。还有的单位是satoshi(一聪)，是比特币中最小的单位。1比特币=10的8次方聪。n是序号，表示这是这个交易里的第几个输出。</p><p>scriptpubkey是输出脚本，后面都写成output script。输出脚本最简单的形式就是给出一个pubkey。下面asm是输出脚本的内容，里面包含一系列的操作，在后面会详细解释。require sigs表示这个输出需要多少个签名才能兑现，这两个例子中都是只需要一个签名。type是输出的类型，这两个例子类型都是pubkeyhash，是公钥的哈希。addresses是输出的地址。</p><p>如图(第6分 第36秒)是展示输入和输出脚本是怎样执行的。在区块链第二个区块里有A→B的转账交易，B收到转来的钱后，又隔了两个区块，把币又转给了C。所以B→C交易的txid、vout是指向A→B交易的输出。而要验证交易的合法性，是要把B→C的输入脚本，跟A→B交易的输出脚本拼接在一起执行。</p><p>如图(第7分 第40秒)这里有个交叉，前面交易的输出脚本放在后面，后面交易的输入脚本放在前面。在早期的比特币实践中，这两个脚本是拼接在一起，从头到尾执行一遍。后来出于安全因素的考虑，这两个脚本改为分别执行。首先执行输入脚本，如果没有出错就再执行输出脚本。如果能顺利执行，最后栈顶的结果为非零值，也就是true，那么验证通过，这个交易就是合法的。如果执行过程中出现任何错误，这个交易就是非法的。如果一个交易有多个输入的话，那么每个输入脚本都要和所对应的交易的输出脚本匹配之后来进行验证。全都验证通过了，这个交易才是合法的。</p><p>如图(第8分第45秒)是输入、输出脚本的几种形式。一种最简单的形式就是P2PK(pay to public key)。输出脚本里直接给出收款人的公钥，下面一行checksig，是检查签名的操作。在输入脚本里，直接给出签名就行了。这个签名是用私钥对输入脚本所在的整个交易的签名。这种形式是最简单的，因为公钥是直接在输出脚本里给出的。</p><p>如图(第9分第18秒)是脚本的实际执行情况。这三行是把输入脚本和输出脚本拼接起来之后的结果。第一行来自输入脚本，后两行来自输出脚本。注意，实际代码中出于安全考虑，这两个脚本实际上是分别执行的。第一行:把输入脚本提供的签名压入栈，第二条把输出里提供的公钥压入栈，第三条checksig是把栈顶的这两个元素弹出来。用公钥检查一下这个签名是否正确。如果正确，返回true，说明验证通过。否则，执行出错，这个交易就是非法的。</p><p>如图(第10分第24秒)是P2PK的一个实例。上面交易的输入脚本就是把签名压入栈，下面交易是上面交易输入的币的来源。它的输出有两行，第一行是把公钥压入栈，第二行就是checksig。这是第一种形式。</p><p>如图(第10分第52秒)是第二种形式P2PKH(pay to public key hash)，跟第一种区别是输出脚本里没有直接给出收款人的公钥，给出的是公钥的哈希。公钥是在输入脚本里给出的。输入脚本既要给出签名，也要给出公钥。输出脚本里还有一些其他操作，DUP、HASH160等等，这些操作都是为了验证签名的正确性。P2PKH是最常用的形式。</p><p>如图(第11分第37秒)是脚本的执行结果，这个是把上一页的输入脚本和输出脚本拼接之后得到的，前两条语句来自输入脚本，后面的语句来自输出脚本，还是从上往下执行。第一条语句先把签名压入栈，第二条语句把公钥压入栈。第三条语句是把栈顶的元素复制一遍，所以栈顶又多了一个公钥。HASH160是把栈顶元素弹出来，取哈希，然后把得到的哈希值再压入栈。所以栈顶变成了公钥的哈希值。</p><p>第五行是把输出脚本里提供的公钥的哈希值压入栈。这个时候栈顶有两个哈希值，上面的哈希值是输出脚本里面提供的，收款人公钥的哈希，即我发布交易时，转账的钱是转给谁的，在输出脚本里提供一个收款人的公钥的哈希。下面的哈希是指你要花这个钱时在输入脚本里给出的公钥，然后前面的操作HASH160是取哈希后得到的。倒数第二行操作的作用是弹出栈顶的两个元素，比较是否相等，即比较其哈希值是否相等。这样做的目的是防止有人莫名顶替，用自己的公钥冒充收款人的公钥。假设两个哈希是相等的，那么就从栈顶消失了。最后一条作用是用公钥检查弹出栈顶的元素是否正确。假设签名是正确的，整个脚本就顺利运行结束，栈顶留下的是true。如果执行过程任何一个环节发生错误，比如输入里给出的公钥跟输出里给出的哈希值对不上，或者是输入里给出的签名跟给出的公钥对不上，那么这个交易就是非法的。</p><p>P2PKH是最常用的脚本信息，该实例(第14分第20秒)用的就是这种脚本。输入脚本就是把签名压入栈，把公钥压入栈。下面的输出脚本复制栈顶元素，然后取哈希值，hash160。然后把公钥的哈希压入栈，最后比较栈顶的两个哈希值，检查签名。</p><p>最后一种如图(第15分第25秒)，也是最复杂的一种脚本形式，是Pay to Script Hash。这种形式的输出脚本给出的不是收款人的公钥的哈希，而是收款人提供的一个脚本的哈希，这个脚本叫redeemscript，赎回脚本。将来花这个钱时输入脚本里要给出redeemscript(这个赎回脚本的具体内容)，同时还要给出让赎回脚本能够正确运行所需要的签名。</p><p>验证时分为两部(如图第15分第40秒)，第一步验证输入脚本里给出的赎回脚本是不是跟输出脚本里给出的哈希值匹配，如果不匹配说明给出的赎回脚本是不对的，就类似于刚才讲的pay to public key hash里面给出的公钥不对一样。匹配不上说明给出的赎回脚本是不对的，那么验证就失败了。如果输入里给出的赎回脚本是正确的，那么第二步还要把赎回脚本的内容当做操作指令来执行一遍，看看最后能不能顺利执行。如果两步验证都通过了，那么这个交易才是合法的。听上去有点抽象，那么下面看一个具体的例子。</p><p>(如图第16分第47秒)用pay to script hash实现pay to public key 的功能。这里的输入脚本就是给出签名，再给出序列化的赎回脚本，赎回脚本的内容就是给出公钥，然后用checksig检查签名。下面这个输出脚本是用来验证输入脚本里给出的赎回脚本是否正确。</p><p>如图(第17分第13秒)看一下pay to script hash的执行过程。开始也是把输入脚本和输出脚本拼接在一起，前两行来自输入脚本，后面三行来自输出脚本。首先把输入脚本的签名压入栈，然后把赎回脚本压入栈，然后是取哈希的操作，得到赎回脚本的哈希。这里RSH是指redeem script hash，赎回脚本的哈希值。接下来还要把输出脚本里给出的哈希值压入栈，这时栈里就有两个哈希值了。最后用equal比较这两个哈希值是否相等，如果不等就失败了。假设相等，那这两个哈希值就从栈顶消失了，到这里第一阶段的验证就算结束了，接下来还要进行第二个阶段的验证。</p><p>如图(第18分第28秒)第二个阶段首先要把输入脚本提供的序列化的赎回脚本进行反序列化，这个反序列化的操作在PPT上并没有展现出来，这是每个节点自己要完成的。然后执行赎回脚本，首先把public key压入栈，然后用checksig验证输入脚本里给出的签名的正确性。验证痛过之后，整个pay to script hash才算执行完成。</p><p>有人可能会问:干脆用pay to public key就行了，搞这么复杂干嘛?为什么非要把这些功能嵌入到赎回脚本里面?对于这个简单的例子来说确实是复杂了，但pay to script hash它的常见的应用场景是对多重签名的支持。</p><p>比特币系统中一个输出可能要求多个签名才能把钱取出来，比如某个公司的账户，可能要求五个合伙人中任意三个人签名才能把公司账户上的钱取走，这样为私钥的泄露提供了一些安全的保护。</p><p>比如说有某个合伙人私钥泄露出去了，那么问题也不大，因为还需要两个人的签名才能把钱取走。这同时也为私钥的丢失提供了一些冗余，即使有两个人把私钥忘掉了，省下的三个人依然可以把钱取出来，然后转到某一个安全的账户。</p><p>以上的功能是通过check multisig来实现的。<br>如图(第21分)，输出脚本里给出N个公钥，同时指定一个预值M。输入脚本只要提供接N个公钥对应的签名中任意M个合法的签名就能通过验证。</p><p>比如刚才举的例子中，N=5，M=3，五个合伙人中任意三个的签名都可以，输入脚本的第一行有一个红色的“✘”，这是什么意思呢?</p><p>比特币中check multisig的实现，有一个bug，执行的时候会从堆栈上多弹出一个元素，这个就是它的代码实现的一个bug。这个bug现在已经没有办法改了，因为这是个去中心化的系统，要想通过软件升级的方法去修复这个bug代价是很大的，要改的话需要硬分叉。所以实际采用的解决方案，是在输入脚本里，往栈上多压进去一个没用的元素，第一行的“✘”就是没用的多余的元素。另外需要注意给出的M个签名的相对顺序，要跟它们在N个公钥中的相对顺序是一致的才行。</p><p>如图(第22分第48秒)是check multisig的执行过程。这个例子假设三个签名中给出两个就行。图中可以看到这两个签名给出的相对顺序也是跟它们在公钥中的顺序是一样的。在公钥当中，第一个公钥排在第二个公钥前面。那么给出这两个签名的时候也是第一个签名排在第二个的前面。</p><p>第一行的false就是前面说的多余的元素。首先把多余的元素压入栈里，然后把两个签名依次压入栈，这个时候输入脚本就执行完了。接下来的输出脚本里把M的值，即预值M压入栈。然后把三个公钥压入栈，接着把N的值压入栈，最后执行check multisig，看看堆栈里是不是包含了这三个签名中的两个，如果是那么验证通过。</p><p>注意:这个过程中并没有用到pay to script hash。就是用比特币脚本中原生的check multisig来实现的。这么实现有什么问题吗？<br>早期的多重签名就是这样实现的，在实际的应用当中，有一些不是很方便的地方。</p><p>比如:网上购物。某个电商用multi签名，要求有五个合伙人中任意三个人的签名才能把钱取出来，要求网上购物的用户在支付的时候生成的转账交易里给出这五个合伙人的公钥，同时要给出N和M值。在这个例子中，N=5，M=3，这些都是用户在网上购物的时候生成转账交易时输出脚本里要给出的信息，给出这五个公钥，给出N和M值。</p><p>那么用户怎么知道这些信息呢?需要购物网站在网上公布出来，比如网上可以公布我们用了多重签名，我们用的五个签名中要给出三个，这是五个公钥，然后用户生成这个转账交易的时候，就把这些信息填进去。那么不同的电商采用的多重签名的规则是不一样的。有的电商可能是五个签名中要任意三个，有的可能要四个。这就给用户生成转账交易带来了一些不方便的地方，因为这些复杂性都暴露给用户了。</p><p>那么该如何解决?这里就要用到pay to script hash。<br>如图(第26分第39秒)是用pay to script hash实现的多重签名，它的本质是把复杂度从输出脚本转移到了输入脚本。现在这个输出脚本变得非常简单，只有这三行。原来的复杂度被转移到redeemscript赎回脚本里。输出脚本只要给出这个赎回脚本的哈希值就可以了。赎回脚本里要给出这N个公钥，还有N和M的值，这个赎回脚本是在输入脚本里提供的，也就是说是由收款人提供的。</p><p>像前面网上购物的例子，收款人是电商，他只要在网站上公布赎回脚本的哈希值，然后用户生成转账交易的时候把这个哈希值包含在输出脚本里就行了。至于这个电商用什么样的多重签名规则，对用户来说是不可见的，用户没必要知道。从用户的角度来看采用这种支付方式跟采用pay to public key hash没有多大区别，只不过把公钥的哈希值换成了赎回脚本的哈希值。当然，输出脚本的写法上也有一些区别，但不是本质性的。这个输入脚本是电商在花掉这笔输出的时候提供的，其中包含赎回脚本的序列化版本，同时还包含让这个赎回脚本验证通过所需的M个签名。将来如果这个电商改变了所采用的多重签名规则，比如由五个里选三个变成三个里选两个，那么只要改变输入脚本和赎回脚本的内容，然后把新的哈希值公布出去就行了。对用户来说，只不过是付款的时候，要包含的哈希值发生了变化，其他的变化没有必要知道。</p><p>如图(第29分第14秒)是具体的执行过程。这是把输入脚本和输出脚本拼接在一起后的情况，第一行的FALSE就是为了应付check multisig的bug而准备的一个没用的元素，执行的时候先把它压入栈，然后依次把两个签名压入栈，接下来是序列化的赎回脚本，目前只是把它作为数据压入栈，到这里输入脚本就执行完了。下面是输出脚本，取哈希，然后把输出脚本里提供的哈希值压入栈顶。最后判断两个哈希值是否相等，到这里第一阶段的验证就完成了。</p><p>如图(第30分第18秒)开始第二阶段的验证，把赎回脚本展开后执行。先把M压入栈，然后把三个公钥压入栈，把N压入栈，最后检查多重签名的正确性，三个里面有两个是正确的。第二阶段的验证过程跟前面直接使用check multisig的情况是类似的。</p><p>如图(第30分第52秒)是网上使用pay to script hash来做多重签名的一个实例。上面输入脚本的最后一个就是序列化的赎回脚本，反序列化之后得到的就是三个里面取两个的多重签名脚本。下面这个输出脚本的内容，跟前面讲的是一样的。现在的多重签名，一般都是采用这种pay to script hash的形式。</p><p>如图(第31分第25秒)这种脚本格式是比较特殊的，这种格式的输出脚本开头是return的操作，后面可以跟任意的内容。return操作的作用，是无条件的返回错误，所以包含这个操作的脚本永远不可能通过验证，执行到return语句，就会出错，然后执行就终止了，后面跟的内容根本没有机会执行。</p><p>为什么要设计这样的输出脚本呢？这样的输出岂不是永远花不出去吗？无论输入脚本写的是什么内容，执行到输出的return语句，它就会报错，那么这里的钱永远都花不出去。确实如此，这个脚本是销毁比特币的一种方法。</p><p>为什么要销毁比特币呢？这个一般有两种应用场景:<br>①有些小的币种要求销毁一定数量的比特币才能够得到这个币种，有时候把这种小币种称为AltCoin(Alternative coin)。除了比特币之外的其他小的加密货币都可以认为是Alternative Coin。比如有的小币种要求销毁一个比特币可以得到1000个小币，也就是说要用上述的方法证明已经付出了一定的代价才能够得到这个小币种。</p><p>②往区块链里写入一些内容。区块链是个不可篡改的账本，有人就利用这个特性往里面添加一些需要永久保存的内容，比如第一节课讲的digital commitment。要证明在某个时间，知道某些事情。比如涉及知识产权保护的，把某项知识产权的内容取哈希之后，把哈希值放到return语句的后面，其后面的内容反正是永远不会执行的，往里面写什么都没关系。而且放在这里的是一个哈希值，不会占太大的地方，而且也没有泄露出来你知识产权的具体内容。将来如果出现了纠纷，像知识产权的一些专利诉讼，再把具体的哈希值的输入内容公布出去，证明你在某个时间点已经知道某个知识了。</p><p>这个应用场景和coinbase域相似。coinbase transaction里面有个coinbase域，在这个域里写什么内容同样是没人管的，那这里为什么不用coinbase的方法呢？coinbase还不用销毁比特币，就可以直接往里写。</p><p>coinbase的方法只有获得记账权的那个节点才能用。如果是一个全节点，挖矿挖到了，然后发布一个区块，可以往coinbase transaction 里的coinbase域写入一些内容，这是可以的。</p><p>而我们说的上述方法，是所有节点都可以用的，甚至不一定是个节点，可能就是一个普通的比特币上的一个用户，任何人都可以用这种方法去写入一些内容。发布交易不需要有记账权，发布区块才需要有记账权。任何用户都可以用这种方法销毁很少的比特币，比如0.0000001个比特币，换取往区块链里面写入一些内容的机会。其实有些交易根本没有销毁比特币，只不过支付了交易费。</p><p>下面看两个实例<br>如图(第37分第44秒)是一个coinbase transaction。这个交易有两个输出，第一个输出的脚本是正常的pay to public key hash，输出的金额就是得到的block reward加上transaction fee。第二个输出的金额是0，输出脚本就是刚才提到的格式:开头是return，后面跟了一些乱七八糟的内容，第二个输出的目的就是为了往区块链里写一些东西。</p><p>这种形式的脚本的一个好处是:矿工看到这种脚本的时候知道它里面的输出永远不可能兑现，所以就没必要把它保存在UTXO里面，这样对全节点是比较友好的。还有一点要说明:这个PPT当中涉及到比特币脚本的操作为了简单起见都没有加上OP前缀。比如CHECKSIG，实际上应该写成OP_CHECKSIG，CHECKMULTISIG、DUP也是如此。</p><p>比特币系统中用到的这种脚本语言是非常简单的，甚至连专门的名字都没有，它就叫比特币脚本语言(bitcoin scripting language)。后面可以看到，以太坊当中用的智能合约的语言比这个要复杂的多。比如说比特币的脚本语言不支持循环，所以有很多功能这个语言是实现不了的，这样的设计是有其用意的，不支持循环就不会有死循环，就不用担心停机问题。以太坊当中智能合约的语言表达能力很强，所以就要靠汽油费的机制来防止程序陷入死循环。</p><p>另外一方面，这个语言虽然在某些方面功能是很有限的，但是在另外一些方面它的功能却很强大，比如跟密码学相关的功能。如checkmultisig，检查多重签名用一条语句就能够完成，这个比很多通用的编程语言要方便的多。所以比特币的脚本语言虽然看上去很简单，但其实针对比特币的应用场景做了很好的优化。</p><h2 id="P10-10-BTC-分叉"><a href="#P10-10-BTC-分叉" class="headerlink" title="P10. 10-BTC-分叉"></a>P10. 10-BTC-分叉</h2><p>比特币分叉</p><p>区块链由一条链变为两条链就叫分叉。分叉可能是多种原因造成的，比如挖矿的时候，两个节点差不多同一个时候挖到了矿，就会出现一个临时性的分叉，我们把这个分叉叫作state fork，是由于对比特币区块链当前的状态有意见分歧而导致的分叉。</p><p>前面还讲过分叉攻击(forking attack)，它也属于state fork，也是属于对比特币这个区块链当前的状态产生的意见分歧，只不过这个意见分歧是故意造成的，人为造成的，所以我们又叫它deliberate fork。</p><p>除了这种state fork 之外，还有一种产生分叉的情况是，比特币的协议发生了改变，要修改比特币系统需要软件升级。在一个去中心化的系统里，升级软件的时候没有办法保证所有的节点同时都升级软件。</p><p>假设大部分节点升级了软件，少数节点因为种种原因可能没有升级，有可能是还没来得及升级，也可能是不同意对这个协议的修改。即假如你想把协议改成某个样子社区中可能是有人不支持的，这个时候也会出现分叉，这种分叉叫protocol fork(协议分叉)。因为对比特币协议产生了分歧，用不同版本的协议造成的分叉，我们称作protocol fork。</p><p>根据对协议修改的内容的不同，我们又可以进一步分成硬分叉和软分叉。出现硬分叉的情况:如果对比特币协议增加一些新的特性，扩展一些新的功能，这些时候那些没有升级软件的这些旧的节点，它是不认可这些新特性的，认为这些特性是非法的，这就属于对比特币协议内容产生了意见分歧，所以会导致分叉。</p><p>硬分叉的一个例子就是比特币中的区块大小限制(block size limit)。比特币系统规定每个区块最多是1M字节，有些人认为1M的限制太小了，也增加了交易的延迟。可以计算一下:1M=1百万  一个交易大概认为是250个字节 1百万/250=4000  一个区块大概是4000个交易  平均10分钟出现一个区块 4000/(60×10)=7  大概每秒钟产生7笔交易即7tx/sec 这个传输速度是非常低的。</p><p>有人发布一个软件更新，把block size limit从1M增加到4M。假设大多数节点更新这个软件，把block size limit更新到4M，少数节点没有更新。这里的大多数节点和少数节点不是按照账户数目来算的，而是按照算力，即系统中拥有大多数哈希算力的节点都更新了软件。新节点认为区块大小限制是4M，旧节点认为是1M。</p><p>如图(第11分第40秒)这时运行系统，会有什么结果?假如一个新节点挖出一个区块，这个区块比较大，但旧节点不认可，它忽略大区块的存在会继续沿着它的前一个小区块接着挖。而旧节点如果挖出了区块新节点是认可的，因为4M的限制指不能超过4M，比4M小是可以的。</p><p>那为什么会产生分岔呢?大区块挖出之后，因为大多数区块是更新了的，是认可新的大区块的，所以会沿着它继续挖。只有少数旧节点会接着下面链往下挖，这时新节点认为上下两条链都是合法的，但上面那条是最长合法链，所以会沿着上面一条挖。而且算力足够大会使上面那条链越来越长。而旧节点认为上面的链无论多长都是非法的，它们只会沿着下面的链挖。当然上面的链也可能出现小区块，因为新节点也可能挖出大小不到1M的区块，虽然这种是新旧节点都认可的，但这是没有用的，因为这条链上它们认为有非法的区块。所以这种分叉是永久性的，只要旧节点不更新软件，分叉就不会消失，所以才叫它硬结点。</p><p>比特币社区当中有些人是比较保守的，提高block size limit有些人就是不同意。而且区块的大小也不是越大越好，比特币底层系统是个P2P overlay network，它的传播主要采用flooding的方式，所以对带宽的消耗是很大的，带宽是瓶颈。</p><p>那么旧节点挖出的小的区块还有没有出块奖励呢？出现hard fork后出现了两条平行运行的链，平行运行链彼此之间有各自的加密货币。下面链的出块奖励在下面链里是认的。而分叉之前的币按道理应该是上下两条链都认可，所以会拆成两部分。</p><p>曾经出现过这样的问题:分叉前有A→B的交易，分叉后在上面链出现了B→C，下面链也出现了B→C，因为账户，私钥都是一样的。既然如此，就会有人利用这个特性，想收到上下两条链的转账。但如果没有人转账给他怎么办？</p><p>可以这样做:比如说B去购物，花一笔钱，给了C。后来B要退货，要取消这笔交易，C又把钱交给B。然后B又在下面一条链进行回放，就赚了一笔钱。那么在开始B转给C的交易在下面链会不会回放呢？所以这样做也是有风险的。为了解决这个问题，就让这两条链各带一个chain ID，所以现在以太坊的分叉已经没有问题了，就是两条独立运行的链了。</p><p>soft fork:<br>软分叉出现的情况是什么?如果对比特币协议加一些限制，加入限制之后原来合法的交易或区块在新的协议当中有可能变的不是合法了，这就引起软分叉。</p><p>假设有人发布一个软件更新，把这个区块大小变小了。调整区块大小不止是改变一个参数那么简单。一个去中心化的系统，改变一个参数，就可能导致分叉，而且取决于这个参数是怎么改的。有可能是硬分叉，有可能是软分叉。这里把区块大小变小只是为了解释软分叉这个概念，实际中是不会这么做的。</p><p>假设新节点把区块大小改为0.5M，旧节点依然以1M为准，这时候会出现什么情况？假如一个区块链开始分叉，新节点挖出小区块，这种区块旧节点也是认的。而旧节点挖出的大区块新节点是不认的。这样下去，旧节点看到上面链更长，而且是合法的之后，就会转去挖上面链。</p><p>所以为什么称这种分叉是软分叉?因为这种分叉是临时性的。所以旧节点如果不更新软件，它们挖的区块可能就白挖了。旧节点转向上面链挖的话，问题可能又会出现:它们可能又挖出了大区块。而新节点不认这个，新节点会继续沿着大区块前面一个小区块挖，如图(第29分第25秒)所示。</p><p>实际中可能出现软分叉的情况:给某些目前协议中没有规定的域增加一些新的含义，赋予它们一些新的规则，典型的例子就是coinbase域。前面讲过每一个发布的区块里可以有一个铸币交易(coinbase transaction)，coinbase transaction里有一个域叫coinbase域，这个域用来干什么是没人规定也没人检查的。</p><p>前面讲过coinbase域的一个用途:可以把它作为extra nonce。挖矿的时候要不断调整block header里的nonce，但block header里的nonce只有四个字节，最多只有2的32次方个可能性，所以实际中可以把coinbase前八个字节用来做extra nonce。两个合在一起就成了2的96次方，对于目前的挖矿难度，这个域已经是足够了。但coinbase域不止是八个字节，后面还有很多，剩下的字节有人就提议做UTXO集合的根哈希值。</p><p>目前这个集合只是每个全节点自己在内存中维护的，主要是为了快速查找、判断该交易是不是属于double spending，但这个集合的内容并没有写到区块链里，这跟前面讲到的merkle proof是不太一样的。</p><p>merkle proof能证明什么？证明某个交易是不是在给定的区块里。比如一个轻节点，没有维护整个区块的内容，只知道block header。轻节点问一个全节点:该交易是不是在这个区块里?全节点返回一个merkle proof作为证明，轻节点就可以验证是否属实。但如果是另外一种情况，想要证明某个账户上有多少钱，这个目前在比特币系统中是证不出来的。如果是全节点还可以算一下，方法如下:想要知道A账户有多少钱，就看一下A在UTXO里对应的输出总共收到多少个币，就是该账户上有多少钱。</p><p>对于全节点是可以算出来的，但如果是区块链钱包、有的手机上的APP，它不可能在手机上维护一个完整的区块链，它实际上是个轻节点，它想要知道账户的余额需要询问全节点。全节点返回一个结果，怎么知道这个结果是否属实呢？现在是证不出来的。如果你自己不维护一个UTXO集合，就没法用merkle proof 证出来。</p><p>有人提议把UTXO集合当中的内容也组织成一颗merkle tree，这个merkle tree有一个根哈希值，根哈希值写在coinbase域里面。因为block header没法再改了，改block header动静就太大了，coinbase域正好是没人用的，所以就写入UTXO的根哈希值。coinbase域当中的内容最终往上传递的时候会传递到block header里的根哈希值里。所以改coinbase域的内容，根哈希值会跟着改。</p><p>因此这个提案就是说把UTXO集合的内容组织成merkle tree，算出一个根哈希值来，写入coinbase域里某个位置。coinbase域的内容本身也会算哈希，算到block header里的根哈希值，这样就可以用merkle proof证出来了。</p><p>假设有人发布一个软件更新，规定coinbase域要按照这个要求来填写，大多数节点都升级了软件，少数节点没有更新，这属于软分叉，因为新节点发布的区块旧节点认为是合法的，因为旧节点不管新节点写什么内容。但旧节点发布的区块新节点可能是不认的，因为如果coinbase域不按要求写它是不认的，所以属于软分叉。</p><p>比特币历史上比较著名的软分叉的例子是pay to script hash。P2SH这个功能在最初的比特币版本里是没有的，它是后来通过软分叉的功能给加进去的。这是什么意思呢?你支付的时候不是付给一个public key的哈希，而是付给一个赎回脚本的哈希。花钱的时候要把这个交易的输入脚本跟前面币的来源的交易的输出脚本拼接在一起执行。执行的时候验证分为两步，第一步是要验证输入脚本中给出的redeem script跟前面那个输出脚本给出的script的哈希值是对的上的，证明输入脚本里提供的script是正确的。第二步再执行redeem script，来验证输入脚本里给出的签名是合法的。</p><p>对于旧节点来说，它不知道P2SH的特性，只会做第一阶段的验证，即验证redeem script是否正确。新节点才会做第二阶段的验证，所以旧节点认为合法的交易新节点可能认为是非法的(如果第二阶段的验证通不过的话)。而新节点认为合法的交易旧节点肯定认为是合法的，因为旧节点只验证第一阶段。</p><p>总结:soft fork是什么?只要系统中拥有半数以上算力的节点更新了软件，那么系统就不会出现永久性的分叉，只可能有一些临时性的分叉。hard fork特点是什么？必须是所有的节点都要更新软件，系统才不会出现永久性的分叉，如果有小部分节点不愿意更新，那么系统就会分成两条链。</p><h2 id="P11-11-BTC-问答"><a href="#P11-11-BTC-问答" class="headerlink" title="P11. 11-BTC-问答"></a>P11. 11-BTC-问答</h2><h2 id="P12-12-BTC-匿名性"><a href="#P12-12-BTC-匿名性" class="headerlink" title="P12. 12-BTC-匿名性"></a>P12. 12-BTC-匿名性</h2><h2 id="P13-13-BTC-思考"><a href="#P13-13-BTC-思考" class="headerlink" title="P13. 13-BTC-思考"></a>P13. 13-BTC-思考</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-05-07</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05-07.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05-07.html</id>
    <published>2020-05-06T14:57:32.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="85433c65d058693c07a266763b837029ebc40040de64da03baeb918fc557dfa3">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a8521792c77f9e5daf58bf40859309482a95c772f70caf3a4d7098f22e8c4189ee4f861e2d2c5078cd4e37b9f8590da2fc0c3839315554091cdffeec1fa19d9869bbc950d3eb086250d304d7d4ef19f936012571b7ee42591d36d3a2b4046afef8c62ecae332afcc678602fdfa12447ce4115a5d33fb3e710b3d474271fedf70dba810734bbf76e2bbf8550ad5c91d6a33b353ccf9e3b456bee8e18073d2326c374b584f5b56a6a6cf4beda43511154846e8a280e559f58a4aa4cc83ac8205e87479061356733a6a571ac242738b96866d17263247252db87f83e4a76fc2ae66497fa73790965e193476d80a729b4c90aeefc6c50cfa631304eced4f5c3f76bb514c847aa3d780855dd75bd175662bb49f75bb270a6a833564820f32f40f5456962313cefd74d8ac667412eea97803723141fb59bab61c23ee0d08a1926ed18d0134bd466cbfb76944a1dfdec3959bd09866927a328d985827420b5e6e553275bce73f4d3e53ba5e5972c28e967b3d51c56e381bdfc710dca4465f6b8ad4230392714b726a2f7bc3b94e277e47ee8d107cad26e64d3c829ab382bcd7a518fc8019545384275fc6c174c45968de21eae0e42bf0e48b625ee6d456ce8560e634b5ab1987260f8bcc28ccbeb6f0d7c895e828f9eb4ea7463f3441cdb45f30c16edeb65cfae7d695b90b56e9bf4bedda0b3cb7ee2716fc65d3d2f88bf59f37c48d9e716788f5beab098a7c4f359f6663f041f45827c72789de987e1eea168d70847df3f483bb4e4cfeeb36a4119dc0452b4094ac28c5d21c2b5c2b7cc4acd7b448774132c3170e7835f51b123e40052090423ddd22a5aaf60828db0fe2d421b4ee524cdcd47a565910dc96d8642a80f95d657973aa65f05b89f8937d0fd44e02b9efabee4cd836099b9ed88a3bcd45fa4a2bc0658b2fe43bf973ef26c8ac617617473d6236ef09f9b9650f3838cd99cf24488340bdb0e807d9054ed669047bd9600609c63ffc5744fdacb05749344e6ae6dc00685fe4cf39e32966779440a3dbdeb95fae2a1108586fdcdc1e329e8f021e738149ee9eab76a8c68c0c54b6d4ef36340aba6462fe81c70f3838e7a9cad5a52b664941846b1cd0cf7dfbb0a395213facac1eee8a22530587f56299167041a22f88b6baf123c528bd9f09593c5717fcc806ea40a72cd1a3e8501fe6a51f1abe03666fff1d2fd895f7d4857642ac6da54f2f547d83dcea294af26722342d6514aade8fc3585f659be2f2c5ffff1c0323c323e9a9647f73cf50e41ece78c854e820ce5c576b5c34ca178d08b46b73fdcaff473ca515684864b9d3f6c3a052424512068a9c355d641781a667e98cf67bbdede45e8ce20251c3f4ccad5b00d1d943a4b85a7f1c69ae3eca43e022a7fe3b41ed5fff1b8da37488c3b86e8aa63326a03fc392fc57f8dfe6a8ae9e502aa3cd61bb7568eb026740e6ed54509c069db8bc65a4edafd</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-05-06</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05-06.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05-06.html</id>
    <published>2020-05-05T13:45:10.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c3229e77de706670f365777714b4f357d61ff5aaccb1e3e8e19a9265bc0f34cf">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a8521792c77f9e5daf58bf40859309482a95c772f70caf3a4d7098f22e8c4189ee4f861e2d2c5078cd4e37b9f8590da2fc0c3839315554091cdffeec1fa19d9869bbc950d3eb086250d304d7d4ef19f936012571b7ee42591d36d3a2b4046afef8c62ecae332afcc678602fdfa12447ce4115a5d33fb3e710b3d474271fedf70dba810734bbf76e2bbf8550ad5c91d6a33b353ccf9e3b456bee8e18073d2326c374b584f5b56a6a6cf4beda43511154846e8a28949cced5fed64e28cd2f28d1e88fd65068c91af957a2b6c3ae735740ab5286332b2e882bcf5130a4af525fe019ba0760067ff59f773d603c0e258a74a33591f0c8920165bad0cb1e12bad3fcefaa138e4285590933dcf6e0b8d97de8f0b9e37ed165bb074fa77fccf9a51135b383a1e066a0fc45999134fecd158614d3256dac155db92686a73981a7bfa45494643702cf1af27dc44a856342fb8e492ba3ce9a99b5b3e2062e02ac0b4bf28df91b9e5f4e812e43d7d590e352377f49215ba7aee626be7c9d8dd7e3ffd92549a26319cca0c09378fc74ab5003b7e5225a392ddfc3541a02b5d5e59801f133ec3c68db2378356a6f16a043d84367f959c9a696ac39b0aedb75e0977155a7fde38c3954b2565e983b01494e204230aec3096209ce72d2f59ef26f3d24bfccb59d67502de3f60116f56d0cbec1ac92455dd535cfd64e3d16851f8aadd7b5b0f903a70082a5ca9bb7f5210becbf0a961281106e7dcf6f03d93188ca693e68c6830c452f0ea76244844a37e686feb999ac25d795b0d2af9daa1806916bd2b902e15bb31265a566dfa12a95a6c2333a05525ebe6e633ed16f8e0e704df0d3d45c6d79ab4c34a74c5e2c141a650c7703fc1924f7dbf13dec738fc0b8928f5a6e409c0997627b196d9f56943dd9e915d46223f11424326b6e726a8b16a77a396b2b9adf706f22fbad2dbe648031e0eefa113d277395b6a60cddbc91e3521dbb36397e793ff824038dbbf7dad662c460d439bfcad8b2b01466d28c3bff78023e919854be875f65644524985a8b5c61facb605c30b8e22784b0ae5c83299b655f854cd08d7b6f1f6e2be151bbd9d4428164fdd6c282aebb1d78ce6e9a8576d3ec431bfacd2bbab273a29fde3519f29d95dcb51e7b1ec21ef0bffcd1b15ce4ec168c86984c94f1a87b809c1d832203c6326966de8721b8627d7e19fa54efcdd7adab71d0fbf6b69c3e3e2b7dcce0745b7161b234b627a00100e711fcc8de11555712ff5965f428c3d1e0b3ce8c88e9e6bb67394d082488547fd85915e038fd2007908691c70fead72505364923e6c8099ee542f16a01b9cf51418a724c2ffd3da4ff888f47526f0258faea354accdfd7b0d7d17f236025405bfcd689190df6fc563b1968e6c0261da5ada0ba19f810dfbf4910346f8dfde99d229792d60cbe25b80a38e78fc332f59f9796bd71ee97c7dcc6e1f8959b774f72ff0a600a7b41a26ff2b11d1aabf288896b1ee7cfd820fa20bec3a39af654b34aea89e2071a65c72ad6382220f0adb72c6763e0e82b5f30ff1e5ec8ee4f53a892cbcca460cf816419276364028fd3f94f329020c6019e258db68c17babc678777076ace08662080025a24b48d4939409b81ac293847f8f16968031d34bd75083d647ce5381e8313f2ea474d5d84a1ccee9bc8a64abd0148966fc25233322f9149</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>articles-to-read</title>
    <link href="https://zronghui.github.io/todo/articles-to-read.html"/>
    <id>https://zronghui.github.io/todo/articles-to-read.html</id>
    <published>2020-05-05T13:41:11.000Z</published>
    <updated>2020-05-30T13:51:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="05-04"><a href="#05-04" class="headerlink" title="05-04"></a>05-04</h2><p><a href="https://mp.weixin.qq.com/s/Cimeyo4cVQsF-MfHBsNgGg?1=a">https://mp.weixin.qq.com/s/Cimeyo4cVQsF-MfHBsNgGg?1=a</a><br><a href="https://mp.weixin.qq.com/s/nFXtvH-i6SwSbyWttDaAeg">读懂MySQL Explain结果，上亿数据的查询耗时从几分钟降到63毫秒</a><br><a href="https://juejin.im/post/5e5622dae51d4526f55f04e6">记一次 SQL 优化过程，从 7.2s 到 10ms - 掘金</a><br><a href="https://juejin.im/post/5e4f7ccdf265da574a1ead44">考前复习必备MySQL数据库（关系型数据库管理系统） - 掘金</a><br><a href="https://mp.weixin.qq.com/s/CTDEFxTKdk0qxK9VNSEIqw">数据库密码配置项都不加密？心也太大了！</a><br><a href="https://linux.cn/article-12053-1.html?utm_source=rss&utm_medium=rss">技术|必知必会的 Vim 编辑器基础命令</a><br><a href="https://linux.cn/article-12064-1.html?utm_source=rss&utm_medium=rss">技术|使用 Python 在 GitHub 上运行你的博客</a><br><a href="https://linux.cn/article-12011-1.html?utm_source=rss&utm_medium=rss">技术|10 篇对初学者和专家都有用的 Linux 命令教程</a><br><a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html">我的外包经验：印度、中国和菲律宾（译文） - 阮一峰的网络日志</a><br><a href="https://linux.cn/article-12007-1.html?utm_source=rss&utm_medium=rss">容器与云|适用于初学者的基本 kubectl 和 Helm 命令</a><br><a href="https://juejin.im/post/5eaa61735188256d976df55d">又一款Docker/K8s管理平台的瑞士军刀 - 掘金</a><br><a href="https://linux.cn/article-12048-1.html?utm_source=rss&utm_medium=rss">分享|4 个 Linux 命令行下的 Markdown 工具</a><br><a href="https://juejin.im/post/5e58905f6fb9a07caa270bb0">写给大忙人看的操作系统 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/xYeF8bE9JE6IbL7HoDyURg">从后端开发转职前端开发，我学到了什么？</a><br><a href="https://mp.weixin.qq.com/s/qTWVAUlm7NGe2UhPUg-S2g">一日一学–如何对数值型特征进行分桶</a><br><a href="https://mr-houzi.com/2019/03/18/use-phone-capture-package/">https://mr-houzi.com/2019/03/18/use-phone-capture-package/</a><br><a href="https://mp.weixin.qq.com/s/lvbZamr4_t2GKDiuEWi_IQ">redis 分布式锁的 5个坑，真是又大又深</a><br><a href="https://juejin.im/post/5eabffc7f265da7bed6b235c">[译]编写更快、更好的JavaScript的13个技巧 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/WEizNquzbZC8_yBWBHYL-A">Redis基础知识总结（面试必备）</a><br><a href="https://mp.weixin.qq.com/s/VAIVp2LrxPNil77-YUvjcg">MySQL 数据库的提速器-写缓存（Change Buffer）</a><br><del><a href="https://juejin.im/post/5ea7f9ef5188256d9c25988e">K8s 资源全汇总 | K8s 大咖带你 31 堂课从零入门 K8s - 掘金</a></del><br><a href="https://juejin.im/post/5e555bf56fb9a07ce01a2941">K8S ? K3S ! - 掘金</a><br><a href="https://mp.weixin.qq.com/s/v2uZnkWhGKXvTJu87iUWLg">Java8的Stream流真香，没体验过的永远不知道</a><br><a href="https://mp.weixin.qq.com/s/mlWuigUL2dQYwIHisec_7w">Git 分支设计规范</a><br><a href="https://github.com/Germey?tab=stars">Germey (崔庆才丨静觅) / Starred</a><br><a href="https://cloud.tencent.com/developer/article/1529651">Elasticsearch数据迁移与集群容灾 - 云+社区 - 腾讯云</a><br><a href="https://yq.aliyun.com/articles/599185">Elasticsearch 跨集群同步-云栖社区-阿里云</a><br><a href="https://segmentfault.com/a/1190000020395065">(16) ElasticSearch分页与深度分页问题解决 - 大数据学习笔记 - SegmentFault 思否</a><br><a href="https://mp.weixin.qq.com/s/ASjH1JmybIVXEAKfM4ie2A">Docker搭建与配置检查</a><br><a href="https://juejin.im/post/5eac74456fb9a0437e0e898a">Docker实战之Gitlab搭建 - 掘金</a><br><a href="https://juejin.im/post/5ea25cc66fb9a03c9037aad7">Docker 还需要学习吗？ - 掘金</a><br><a href="https://www.startutorial.com/articles/view/debug-mysql-slow-query">Debug MySQL slow query</a><br><a href="https://mp.weixin.qq.com/s/f9N13fnyTtnu2D5sKZiu9w">3w字深度好文|Redis面试全攻略，读完这个就可以和面试官大战几个回合了</a><br><a href="https://juejin.im/post/5e529dd9f265da570b3f2a35">7个有用的JavaScript技巧 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/rDypsB9yAua9uX2aC9_y1A">2020 年为什么要选择 Go 并放弃 Python</a><br><a href="https://juejin.im/post/5e57d0dfe51d4526ce6147f2">10分钟教你手写8个常用的自定义hooks - 掘金</a><br><a href="https://github.com/0voice/from_coder_to_expert">0voice/from_coder_to_expert: 2019年最新总结，从程序员到CTO，从专业走向卓越，分享大牛企业内部pdf与PPT</a></p><h2 id="05-05"><a href="#05-05" class="headerlink" title="05-05"></a>05-05</h2><p><a href="https://www.youtube.com/watch?v=Sg5VTTBIhqo">30 Days of Python - Day 13 - Using a REST API Service - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=5rWGWetiBHo">30 Days of Python - Day 14 - Web App with Flask, FastAPI, ngrok, and Invictify - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=m6chqKlhpPo">30 Days of Python - Day 15 - Automated Video Processing with Moviepy - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=7S73WERRqO4">Docker Tutorial and Introduction. Simple and Easy. - YouTube</a><br><a href="https://www.youtube.com/watch?v=1pZbuvbvYY8">Django on Docker Tutorial - Deploy Django on Heroku with OpenCV - YouTube</a></p><p><a href="https://juejin.im/post/5d9c7b285188253f5447bcfa">Django-Docker容器化部署：Django-Docker本地部署 - 掘金</a><br><a href="http://www.dockone.io/article/3656">使用 Docker 容器化 Django Web 应用 - DockOne.io</a><br><a href="https://github.com/erroneousboat/docker-django">erroneousboat/docker-django: A project to get you started with Docker and Django.</a><br><a href="https://github.com/testdrivenio/django-on-docker">testdrivenio/django-on-docker</a><br><a href="https://breakwire.me/deploy-django-with-docker.html">使用 Docker 部署 Python/Django 项目 (单机/swarm集群)</a></p><p><a href="https://wiki.jikexueyuan.com/project/docker-technology-and-combat/django.html">实战 Django - Docker —— 从入门到实践 - 极客学院Wiki</a><br><a href="https://github.com/twtrubiks/docker-tutorial">twtrubiks/docker-tutorial: Docker 基本教學 - 從無到有 Docker-Beginners-Guide 教你用 Docker 建立 Django + PostgreSQL 📝</a><br><a href="https://github.com/twtrubiks/docker-django-nginx-uwsgi-postgres-tutorial">twtrubiks/docker-django-nginx-uwsgi-postgres-tutorial: Docker + Django + Nginx + uWSGI + Postgres 基本教學 - 從無到有 ( Docker + Django + Nginx + uWSGI + Postgres Tutorial )</a><br><a href="https://linux.cn/article-10006-1.html">容器与云|如何 Docker 化 Python Django 应用程序</a><br><a href="https://zhuanlan.zhihu.com/p/44423066">如何 Docker 化 Python Django 应用程序 - 知乎</a><br><a href="https://larrylu.blog/step-by-step-dockerize-your-app-ecd8940696f4">Docker 實戰系列（一）：一步一步帶你 dockerize 你的應用 - Larry・Blog</a><br><a href="https://medium.com/@s.lyapustin/django-polls-app-with-elasticsearch-ffc02b9e79d9">Django, Docker and Elasticsearch - Sergey Lyapustin - Medium</a><br><a href="https://kknews.cc/code/ox4l5n6.html">使用Docker和Elasticsearch搭建全文本搜索引擎应用(上) - 每日头条</a><br><a href="https://www.itread01.com/content/1545386616.html">Django的haystack對接elasticsearch伺服器完成全文檢索詳解 - IT閱讀</a><br><a href="https://www.kutu66.com/GitHub/article_127110">es-django-example,使用Elasticsearch的示例 Django 项目,下载es-django-example的源码_GitHub_酷徒</a></p><h2 id="05-09"><a href="#05-09" class="headerlink" title="05-09"></a>05-09</h2><p><a href="https://www.cnblogs.com/QuestionsZhang/p/11606815.html">Mac息屏后如何保持网络连接，方便远程访问 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/11708897.html">Mac下使用Charles抓包https接口 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/11110537.html">MacOs上的Intellij idea高频快捷键总结（2018.1版本） - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/10693838.html">彻底解决MacOS上应用程序快捷键冲突的问题，自定义快捷键设置 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/10596146.html">ZOC7在Mac下发送命令到多个窗口设置 - Questions张 - 博客园</a></p><p><a href="https://snowdreams1006.tech/other/reminder.html">倒计时提醒 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.github.io/learn-java/">java8新特性 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/zero2devops/webhook.html">webhook · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/zero2devops/">从零开始搭建服务器 · 雪之梦技术驿站</a></p><p><a href="https://github.com/docker/kitematic">docker/kitematic: Visual Docker Container Management on Mac &amp; Windows</a><br><a href="https://github.com/moby/moby">moby/moby: Moby Project - a collaborative project for the container ecosystem to assemble container-based systems</a><br><a href="https://github.com/netdata/netdata">netdata/netdata: Real-time performance monitoring, done right! https://www.netdata.cloud</a><br><a href="https://github.com/containous/traefik">containous/traefik: The Cloud Native Edge Router</a><br><a href="https://github.com/Kong/kong">Kong/kong: 🦍 The Cloud-Native API Gateway</a><br><a href="https://github.com/drone/drone">drone/drone: Drone is a Container-Native, Continuous Delivery Platform</a><br><a href="https://github.com/tootsuite/mastodon">tootsuite/mastodon: Your self-hosted, globally interconnected microblogging community</a><br><a href="https://github.com/wagoodman/dive">wagoodman/dive: A tool for exploring each layer in a docker image</a><br><a href="https://github.com/docker/compose">docker/compose: Define and run multi-container applications with Docker</a><br><a href="https://github.com/wsargent/docker-cheat-sheet">wsargent/docker-cheat-sheet: Docker Cheat Sheet</a><br><a href="https://github.com/veggiemonk/awesome-docker">veggiemonk/awesome-docker: A curated list of Docker resources and projects</a><br><a href="https://github.com/yeasy/docker_practice">yeasy/docker_practice: Learn and understand Docker technologies, with real DevOps practice!</a></p><p><a href="https://blog.cugxuan.cn/2019/12/03/Software/use-charles-to-sniffer-packet/">如何使用 Charles 抓包 | Xuan’s blog</a><br><a href="https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/">使用 webhook 自动更新博客 | Xuan’s blog</a></p><h2 id="05-10"><a href="#05-10" class="headerlink" title="05-10"></a>05-10</h2><p><a href="https://www.52fzg.com/pcrj/7354.html">pandownload还能用的旧版本 百度网盘资源不限速下载神器 - 无二辅助网</a><br><a href="https://fulibus.net/tianxiabachang.html">《鬼吹灯》作者天下霸唱为你讲述盗墓故事-福利吧</a><br><a href="https://nav.hzwdd.cn/?hao.su">西瓜导航-收藏你喜欢的网站！</a></p><p><a href="https://www.bilibili.com/video/av882799501">pandownload不能用了？Docker容器推荐第一期:Linux版本百度云_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br><a href="https://www.bilibili.com/video/av285538978">搭建内网DNS解析过滤广告。Docker容器推荐第四期:ADGUARDHOME_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.daniao.org/4962.html">宝塔面板Docker安装UnblockNeteaseMusic – 解锁网易云音乐变灰歌曲 - 大鸟博客</a><br><a href="https://www.daniao.org/btpanel/">宝塔linux面板使用教程，以及一些宝塔技术分享！</a><br><a href="https://www.macxin.com/archives/16150.html">Android手机/Docker使用UnblockNeteaseMusic播放网易云音乐客户端无版权歌曲 Mac/Win/Linux/iOS/Android | MAC萌新网</a></p><p><a href="https://www.hangge.com/blog/cache/category_81_1.html">航歌-Docker / K8s-第1页</a><br><a href="https://www.hangge.com/blog/cache/detail_2414.html">K8s - Kubernetes集群的安装部署教程（CentOS系统）</a></p><p><a href="https://www.hangge.com/blog/cache/category_80_1.html">航歌-SpringBoot / Cloud-第1页</a></p><h2 id="05-11"><a href="#05-11" class="headerlink" title="05-11"></a>05-11</h2><p><a href="https://p3terx.com/archives/docker-watchtower.html">Watchtower - 自动更新 Docker 镜像与容器 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/ssh-to-the-github-actions-virtual-server-environment.html">SSH 连接到 GitHub Actions 虚拟服务器环境 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-actions-email-notification-of-successful-workflow-running.html">GitHub Actions 开启工作流程运行成功邮件通知 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-actions-started-tutorial.html">GitHub Actions 入门教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/termux-tutorial-2.html">Termux 使用教程 #2 - 打造手机上的最强终端 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/termux-tutorial-1.html">Termux 使用教程 #1 - Android 手机安装 Linux - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/ssh-key-installer.html">SSH 密钥一键配置脚本 使用教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/git-multi-remote-repository-management.html">Git 多远程仓库管理：GitHub 与 Gitee 双向同步 - P3TERX ZONE</a></p><p><a href="https://p3terx.com/archives/the-strongest-terminal-solution-under-windows-10.html">打造 Windows 10 下最强终端方案：WSL + Terminus + Oh My Zsh + The Fuck - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/cheap-and-costeffective-vps-recommended.html">便宜高性价比 VPS 推荐 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/boot-and-hide-the-cmd-window-program-to-run-in-the-background-winsw-tutorial.html">开机启动并隐藏 cmd 窗口程序在后台运行 - winsw 使用教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/baidunetdisk-transfer-to-onedrive-and-google-drive.html">不限速！百度网盘转存到 OneDrive 、Google Drive 等其他网盘 - P3TERX ZONE</a></p><p><a href="https://p3terx.com/archives/update-the-project-on-fork-on-github.html">更新 GitHub 上 fork 的项目 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-warehouse-cleaning-delete-all-commit-records.html">删除 GitHub 所有 Commit 记录 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/undo-operation-in-git.html">Git 中的撤销操作 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/git-common-command-quick-lookup-table.html">Git 常用命令速查表 - P3TERX ZONE</a></p><p><a href="https://github.com/tuteng/Best-websites-a-programmer-should-visit-zh#blogs-of-developers">tuteng/Best-websites-a-programmer-should-visit-zh: 程序员应该访问的最佳网站中文版</a></p><p><a href="https://hufangyun.com/2017/short-url/?hao.su">短网址(short URL)系统的原理及其实现</a><br><a href="https://hufangyun.com/2018/ui-design-get/?hao.su">小猿大圣的设计资源收藏夹</a></p><p><a href="https://testdriven.io/blog/">Web Development Tutorials | TestDriven.io</a></p><p><a href="https://redislabs.com/resources/how-to-redis-enterprise/#using-redis-with-python">How To: Redis Enterprise Products and Code Samples | Redis Labs</a></p><p><a href="https://rss.pipedream.com/">RSS for Hackers</a><br><a href="https://pipedream.com/@zronghui/copy-of-generate-an-rss-feed-from-http-post-requests-retrieve-via-get-request-p_QPCeD2/edit">Copy of Generate an RSS feed from HTTP POST requests, retrieve via GET request | Edit - Pipedream</a><br><a href="https://docs.pipedream.com/workflows/steps/triggers/#app-based-triggers">Triggers | Docs</a></p><p><a href="https://blog.quickbird.uk/domesticating-kubernetes-d49c178ebc41">Domesticating Kubernetes | Practical kubernetes as a home server | Quickbird</a><br><a href="https://hampton.pw/posts/shrinking-this-sites-docker-image/">Shrinking this sites docker image</a><br><a href="https://24ways.org/2018/fast-autocomplete-search-for-your-website/">Fast Autocomplete Search for Your Website ◆ 24 ways</a><br><a href="https://insomnia.rest/">Insomnia | API Design Platform and REST Client</a></p><p><a href="https://github.com/leeoniya/uPlot">leeoniya/uPlot: 📈 A small, fast chart for time series, lines, areas, ohlc &amp; bars</a></p><p><a href="https://tara.ai/">Tara</a></p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/84141/1588895319908-26b6100c-df5e-45c1-88b9-3304dee42ce8.jpeg" alt="img" style="zoom: 50%;" /><p>项目管理软件 Jira 的一个免费仿制品。</p><p>2、<a href="https://insomnia.rest/">Insomnia</a></p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/84141/1588895319893-edd924c5-a734-4f4f-9c65-0a8abbd08468.jpeg" alt="img" style="zoom:50%;" /><p>一个开源的桌面软件，用于简化 API 的设计和开发。</p><p><a href="https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/">Help the World by Healing Your NGINX Configuration - NGINX</a><br><a href="https://blog.acrossapp.com/how-a-2-person-startup-already-uses-28-other-tools/">How a 2 person startup already uses 28 other tools</a></p><p><a href="https://rednafi.github.io/digressions/python/2020/04/21/python-concurrent-futures.html">Effortless Concurrency with Python’s concurrent.futures | Red’s Digressions</a></p><p><a href="https://realpython.com/courses/python-mock-object-library/">Improve Your Tests With the Python Mock Object Library – Real Python</a></p><p><a href="https://pbpython.com/notebook-alternative.html">Exploring an Alternative to Jupyter Notebooks for Python Development - Practical Business Python</a><br><a href="https://pbpython.com/interactive-dashboards.html">Creating Interactive Dashboards from Jupyter Notebooks - Practical Business Python</a><br><a href="https://pbpython.com/wsl-python.html">Using WSL to Build a Python Development Environment on Windows - Practical Business Python</a></p><p><a href="https://www.youtube.com/channel/UCGFnqWaBEHVzPD40PuH7vbg/videos">GoDjango - YouTube</a></p><h2 id="05-16"><a href="#05-16" class="headerlink" title="05-16"></a>05-16</h2><p><a href="https://www.chenshaowen.com/blog/tag/Kubernetes/">Kubernetes - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/the-use-of-homebrew.html">Homebrew 使用 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/tag/%E5%B7%A5%E5%85%B7/page/3/">工具 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html">PPT制作攻略之呈现篇课程笔记 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html">Python 下各种环境隔离工具简介 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/vim-necessary-plugin.html">Vim 必备插件 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/elk-log-search-practice.html">ELK 日志搜索实践 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/toolbox.html">我的工具箱 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html">交互式笔记本-Jupyter - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/common-git-commands.html">常用 Git 命令 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html">Vagrant 搭建 Django 开发环境 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/django-debug-toolbar.html">Django 调试工具 django-debug-toolbar - 陈少文的博客</a></p><p><a href="https://www.chenshaowen.com/blog/tag/%E5%B0%8F%E6%8A%80%E5%B7%A7/">小技巧 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-1.html">开发 Tips（1） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-2.html">开发 Tips（2） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-3.html">开发 Tips（3） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-4.html">开发 Tips（4） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-5.html">开发 Tips（5） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-6.html">开发 Tips（6） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-7.html">开发 Tips（7） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-8.html">开发 Tips（8） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-9.html">开发 Tips（9） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-10.html">开发 Tips（10） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-11.html">开发 Tips（11） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-12.html">开发 Tips（12） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-13.html">开发 Tips（13） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-14.html">开发 Tips（14） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-15.html">开发 Tips（15） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-16.html">开发 Tips（16） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-17.html">开发 Tips（17） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-18.html">开发 Tips（18） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-19.html">开发 Tips（19） - 陈少文的博客</a></p><p><a href="https://sourabhbajaj.com/mac-setup/iTerm/fzf.html">fzf · macOS Setup Guide</a></p><p><a href="https://www.youtube.com/watch?v=tG6O8YF91HE&list=PLEsfXFp6DpzSUvTvnKaN8xmu4bRZIaawC&index=11">YouTube</a><br><a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzTHpw-kUzOd9WWY0zVdzl6q">Docker Tutorials - YouTube</a><br><a href="https://www.youtube.com/watch?v=3cRT1RmCyKg">(1) Dockerize your Django App for Production (nginx + gunicorn) - Part 1 - YouTube</a><br><a href="https://nextfe.com/">New Frontend</a><br><a href="https://nextfe.com/command-line-tools-3/">优秀的命令行工具（三）</a><br><a href="https://nextfe.com/command-line-tools-1/">优秀的命令行工具（一）</a><br><a href="https://darrenburns.net/">A Blog by Darren Burns</a><br><a href="https://nextfe.com/command-line-tools-2/">优秀的命令行工具（二）</a></p><h2 id="05-17"><a href="#05-17" class="headerlink" title="05-17"></a>05-17</h2><p>通知滤盒</p><p><a href="https://sspai.com/post/59502">App+1 | 解决 Android 通知管理难题，用正则表达式过滤无关推送：通知滤盒 - 少数派</a><br><a href="https://sspai.com/post/60536">微信群聊不是法外之地：用通知滤盒降低敏感词「炸群」风险 - 少数派</a></p><p><a href="https://www.abcxlab.com/topic/it/202004060147144915.html">2020年程序猿必读10本好书推荐 - ABC实验室</a><br><a href="https://juejin.im/post/5ebe6cf0f265da7bac22587d#heading-0">刚才面试官问我你会Mysql吗，我一聊一个多小时！ - 掘金</a><br><a href="https://juejin.im/post/5ebe9bcee51d454d945368b2#heading-1">[译]让Web应用更安全的13个小技巧 - 掘金</a></p><p><a href="https://testdriven.io/blog/django-caching/?utm_campaign=Django%2BNewsletter&utm_medium=web&utm_source=Django_Newsletter_22">Caching in Django | TestDriven.io</a></p><p><a href="https://benzblog.site/2020-04-25-docker_basic_skills/">Docker 基本使用技巧 | 奔哲明的博客</a><br><a href="http://bbs.nas66.com/thread-8409-1-1.html">汇总一下我常用的Docker镜像以及说明 - 矿渣社区 - 其他系统 - 软件专区</a><br><a href="https://vpsman.net/page/554/">VPS菜鸟园</a><br><a href="https://www.ioiox.com/archives/94.html">本站提供免费 RSS 和 RSSHub 服务 - 思有云 - IOIOX</a><br><a href="https://www.ioiox.com/">思有云 - IOIOX - 个人博客 生活记录 原创文章 技术分享 资源分享 群晖技巧 群晖教程 免费FRP 免费内网穿透</a><br><a href="https://diygod.me/">Hi, DIYgod</a><br><a href="https://rss.ioiox.com/">Tiny Tiny RSS : Login</a></p><p><a href="https://g.ioiox.com/">GitHub 文件加速</a><br><a href="https://www.ioiox.com/archives/102.html">分享优质工具 - gh-proxy 代理下载或 git clone Github 仓库 - 思有云 - IOIOX</a><br><a href="https://www.ioiox.com/archives/95.html">iptables 常用命令,选项,参数及实例整理收集 - 思有云 - IOIOX</a></p><p><a href="https://idig8.com/category/docker/shizhanpiancongdockerzouxiangk8sjinjie/">「实战篇」从docker走向k8s进阶 – IT人故事会</a></p><p><a href="https://ywnz.com/linuxml/3094.html">交互式Kubernetes客户端，搭建高效Kubernetes命令行终端_Linux命令_云网牛站</a></p><p><a href="https://www.linuxtechi.com/">LinuxTechi: Linux How-Tos, commands and Tutorials</a></p><p><a href="https://meta.appinn.net/t/topic/16381">应用控制(手机远程控制手机) - 发现频道 - 小众软件官方论坛</a><br><a href="https://www.52pojie.cn/thread-1181937-1-1.html">最牛X的时间管理软件【KINGTIME】免费版！！！ - 『精品软件区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a><br><a href="https://meta.appinn.net/t/app/16385">【自荐】点书-记录美好生活：一款自动记录人生的app - 发现频道 - 小众软件官方论坛</a><br><a href="https://tgtw.cc/?hao.su">Telegram 公众索引系统</a><br><a href="https://zhimap.com/?hao.su">ZhiMap - 在线思维导图、电脑与手机微信里都能作图</a></p><p><a href="https://github.com/inancgumus/learngo">inancgumus/learngo: 1000+ Hand-Crafted Go Examples, Exercises, and Quizzes</a></p><p><a href="https://juejin.im/post/5ea8f1c95188256d8f691ee9">IDEA 中 30 秒生成 Spring Cloud Alibaba 工程 - 掘金</a><br><a href="https://juejin.im/post/5ebc97ee5188256d95626895">Kubernetes笔记（三）：Gitlab+Jenkins Pipeline+Docker+k8s+Helm自动化部署实践（干货分享！） - 掘金</a></p><h2 id="05-22"><a href="#05-22" class="headerlink" title="05-22"></a>05-22</h2><p><a href="https://droidyue.com/blog/2020/05/19/cool-git-skills/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">十个超级实用的git命令 - 技术小黑屋</a></p><p><a href="https://creatorsdaily.com/0f2660bc-3379-40a8-a1a8-035dbd870653">交互式学习编程网站 - 创造者日报</a><br><a href="https://creatorsdaily.com/8c8b8f72-d2d6-41f9-aaa2-22ee9878dbfb">Markdown Image - 创造者日报</a><br><a href="https://creatorsdaily.com/d1461be8-ea64-46df-9efd-600c67926a7a?hao.su">看批 - 创造者日报</a></p><p><a href="https://sspai.com/post/59906">从开题报告到毕业论文，这 16 个工具帮你顺利毕业 - 少数派</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNjAxODg4MQ==&mid=2247485279&idx=1&sn=49ce5a8c586979388a1828686a6cbd21&chksm=fafdedf1cd8a64e7d95b948cd60135db1618e71c3307d405e9b3c27c5fddedeaf1b1b5f00c4b&token=310697819&lang=zh_CN#rd">MySQL常见6个考题在实际工作中的运用</a></p><p><a href="https://mp.weixin.qq.com/s/aWQDlujb-j1ufdraA-bC6g">10个 解放双手的 IDEA 插件，少些冤枉代码</a></p><p><a href="https://github.com/xingag/app_spider/blob/master/%E6%8A%A2%E7%BA%A2%E5%8C%85/Red_Wars.py">app_spider/Red_Wars.py at master · xingag/app_spider</a></p><p><a href="https://juejin.im/post/5ec72a11f265da770b40bf54">Python-Functools 11个函数讲解 - 掘金</a></p><p><a href="https://yq.aliyun.com/articles/458739?spm=a2c4e.11155435.0.0.5c801a27fq7Dbw">Centos 搭建 Java Web 开发环境-云栖社区-阿里云</a></p><p><a href="https://aws.amazon.com/cn/">AWS 云服务-专业的大数据和云计算服务以及云解决方案提供商</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247491245&idx=1&sn=9dec846db0bf0cfce50bbbd6f06a4acf&chksm=e92923a2de5eaab4fdf96fe095f020a39ab3e370af76a5196aa39eff8e944c0387fce0e478c9&scene=21#wechat_redirect">这一团糟的代码，真的是我写的？！</a></p><p><a href="https://mp.weixin.qq.com/s/BOIqnOdPrsFacQX7GeG3-g">SQL 进阶技巧（上）</a></p><p><a href="https://www.oyohyee.com/post/note_archlinux_multi_java_version">使用 archlinux-java 实现多 Java 版本共存|OhYee博客</a></p><h2 id="05-26"><a href="#05-26" class="headerlink" title="05-26"></a>05-26</h2><p><a href="https://mp.weixin.qq.com/s/HxQz7SphVvm4GM4ADXSdNw">Base64编码详解</a><br><a href="https://mp.weixin.qq.com/s/QcUoArAHIF8SeOkTzmtPHA">别再暴力匹配字符串了，高效的KMP才是真的香！</a><br><a href="https://mp.weixin.qq.com/s/L7EQzthCoWuJw8TzY-KAMw">干货 | 数万实例数百TB数据量，携程Redis治理演进之路</a><br><a href="https://mp.weixin.qq.com/s/KEAZ0w11pxKoGKP468X_HQ">探寻繁杂定时任务的解决方案：分布式任务调度系统</a><br><a href="https://mp.weixin.qq.com/s/vtiI7q6k50cy7LuZEo7Pqw">重磅 | eBay提出强大的轻量级推荐算法——洛伦兹因子分解机</a><br><a href="https://mp.weixin.qq.com/s/1e-ceBDrNinttYt6HmeMXw">云原生时代消息中间件的演进路线</a><br><a href="https://mp.weixin.qq.com/s/B5FDIwbaJ7_vQJEcxOR1eQ">思考结构，决定一个人能看多远</a><br><a href="https://mp.weixin.qq.com/s/d9J-_aF9K8QTUtemol-EfQ">2020前端性能优化清单（一）</a><br><a href="https://mp.weixin.qq.com/s/7NJv21Dz7eGFFt-c3qitWw">2020前端性能优化清单（二）</a><br><a href="https://mp.weixin.qq.com/s/J1hMFK9LfzvTNvEtyOwE-Q">2020前端性能优化清单（三）</a><br><a href="https://mp.weixin.qq.com/s/MJNaI6HmClodAsGgI26EMA">2020前端性能优化清单（四）</a><br><a href="https://mp.weixin.qq.com/s/jcDuMrj8lKugAvSlKqERfQ">2020前端性能优化清单（五）</a></p><p><a href="https://mp.weixin.qq.com/s/9FA4ohishDdV3qN6a5iUAA">Elasticsearch能检索出来，但不能正确高亮怎么办？</a><br><a href="https://juejin.im/post/5e8b094a6fb9a03c300f8b25">微前端在企业级应用中的实践(上) - 掘金</a><br><a href="https://juejin.im/post/5cad6f1ef265da039f0ef5df">关于零拷贝的一点认识 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/3aVa9zfzZEfWooZCct7zBw">看了《余欢水》，我学到了一个PPT技巧！</a><br><a href="https://mp.weixin.qq.com/s/ycuHpgF5lViEn6JSGCflnw">第02期：MySQL 数据类型的艺术 - 大对象字段</a><br><a href="https://mp.weixin.qq.com/s/n4vf9NSMZo1ac0WRqkypfQ">数据库连接配置策略和实践</a><br><a href="https://mp.weixin.qq.com/s/l282fxLcw3mY0lPRiQJ_iA">阿里终于重罚蒋凡，这对我们又有什么警示？</a><br><a href="https://mp.weixin.qq.com/s/Klm1TnqhgyJ07u6dycQ5XA">PPT文字看不清？只会放大字号你就out了！</a><br><a href="https://mp.weixin.qq.com/s/hdZygFjYI49eTMLj_js7uQ">看了2000页PPT案例，总结大神常用的5个技巧~</a><br><a href="https://mp.weixin.qq.com/s/UjYOCIoXTTbYAiV0V7mm0g">定时和延时问题在业务场景中的常见处理</a><br><a href="https://mp.weixin.qq.com/s/SmIXNfmkAS_S9B80q8i0tg">提问清单 | 1招快速提高大脑思考能力</a><br><a href="https://mp.weixin.qq.com/s/CrmpDVdzCXzhKispv54bzg">纯干货 | 一篇讲透如何理解数据库并发控制</a></p><p><a href="https://www.cnblogs.com/gered/p/9561710.html">倒排索引/全文搜索基本原理 - 郭大侠1 - 博客园</a><br><a href="https://zhuanlan.zhihu.com/p/40273861">如何监控网页崩溃？ - 知乎</a><br><a href="https://mp.weixin.qq.com/s/4DRWRPaOizGEClmAIwgB2Q">终端下的常用操作</a><br><a href="https://mp.weixin.qq.com/s/4exhftt-9Xqb8EZIujJaLA">干货 | Elasticsearch开发人员最佳实战指南</a><br><a href="https://juejin.im/post/5d0b3f8c6fb9a07ec07fc5d0">Git commit message 规范 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/VmM_U4RefRBHwIw8NegC8Q">编写可靠 bash 脚本的一些技巧</a></p><p><a href="https://sspai.com/post/60675">担心歌单变灰？试试这个拥有 10 万曲库的免费音乐云盘：YouTube Music - 少数派</a></p><p><a href="https://mp.weixin.qq.com/s/g7wvEIBa0mK3XbJZ_4ZvRA">https://mp.weixin.qq.com/s/g7wvEIBa0mK3XbJZ_4ZvRA</a><br><a href="https://mp.weixin.qq.com/s/z-U2tt7E90EvkQMrkvL-BA">业务异常只能看着数据库崩溃？看看应急处理利器——自动SQL限流</a><br><a href="https://mp.weixin.qq.com/s/Bas9G-7jowNSB3jHGn_EMQ">一天有24个小时？别开玩笑了！</a><br><a href="https://mp.weixin.qq.com/s/rZs-oWBGGYtNKLMpI0-tXw">如何快速定位 Redis 热 key?</a><br><a href="https://mp.weixin.qq.com/s/30rAXEhO4hUXFs97DAZHHA">人生苦短，何苦2B ！</a><br><a href="https://onclick360.com/docker-remove-image-by-tag/">隐私设置错误</a><br><a href="https://mp.weixin.qq.com/s/mHCHrcCGPt2y9mifYTJKhw">天天强调做PPT要会对齐，问题是到底该怎么对齐？</a><br><a href="https://mp.weixin.qq.com/s/8tBBg55Exd8NICciEdVkcw">越简单重复的事情越要自动化做</a><br><a href="https://github.com/c-rainstorm/blog/blob/master/java/cache/jsr107.zh.md">blog/jsr107.zh.md at master · c-rainstorm/blog</a></p><p><a href="https://tool.lu/article/1VL/detail">KMP算法教程 - 在线工具</a></p><h2 id="05-28"><a href="#05-28" class="headerlink" title="05-28"></a>05-28</h2><p><a href="https://shockerli.net/post/1000-line-mysql-note/">一千行 MySQL 学习笔记 - 格物</a></p><h3 id="redis-nginx-学习笔记"><a href="#redis-nginx-学习笔记" class="headerlink" title="redis nginx 学习笔记"></a>redis nginx 学习笔记</h3><p><a href="https://shui4444.github.io/archives/page/3/#board">归档 - Shui’s Blog</a><br><a href="https://shui4444.github.io/archives/#board">归档 - Shui’s Blog</a></p><p><a href="https://github.com/iswbm/GolangCodingTime">iswbm/GolangCodingTime: Go编程时光，一个零基础入门 Golang 的教程</a></p><p><a href="https://mp.weixin.qq.com/s/aWQDlujb-j1ufdraA-bC6g">10个 解放双手的 IDEA 插件，少些冤枉代码</a><br><a href="https://www.tuicool.com/articles/aU7bMzn">值得收藏！介绍15个Linux下 CPU 监控工具 - 推酷</a><br><a href="https://segmentfault.com/a/1190000022770031?utm_source=tuicool&utm_medium=referral">(17) 值得收藏！介绍15个Linux下 CPU 监控工具 - 民工哥技术之路 - SegmentFault 思否</a><br><a href="https://www.tuicool.com/articles/nEVZje3">Docker知识点的系统化梳理 - 推酷</a><br><a href="https://mp.weixin.qq.com/s/Jw1Bp6zdIO7aGbMdTNgZyw">https://mp.weixin.qq.com/s/Jw1Bp6zdIO7aGbMdTNgZyw</a><br><a href="https://mp.weixin.qq.com/s/bDg3Y1hBnK0ac9_uquu9Yw">不懂Redis Cluster原理，我被同事diss了！</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjA2MjE5Ng==&mid=2247483694&idx=1&sn=3031d591f834c33f1a27a580821f07ad&chksm=e9034735de74ce23fbd6861a12bd4b472b25ef98221e3c7772db7ab7921ca120b0da488a6a5a&token=1910516074&lang=zh_CN#rd">(2)你真的会用Chrome devtool吗?</a><br><a href="https://mp.weixin.qq.com/s/dTG2UzPyI9SNoE-cKMo1xA">有了这款低代码开发工具，Java 开发者可以告别 996 啦！</a><br><a href="https://mp.weixin.qq.com/s/AaCbTVRk0OZ00nQgJ8wqRQ">面试官：不会看 Explain执行计划，简历敢写 SQL 优化？</a><br><a href="https://learnku.com/articles/45050">MySQL 数据库生成 10000 条测试数据 | Laravel China 社区</a><br><a href="https://learnku.com/articles/44477">进程间的五种通信方式介绍-详解 | Laravel China 社区</a><br><a href="http://www.cocoachina.com/articles/898471?filter=rec">如何让自己看起来不像编程菜鸟？别犯这9个编程错误 - CocoaChina_一站式开发者成长社区</a><br><a href="http://www.cocoachina.com/articles/898462?filter=rec">10款主流的软件测试工具，你用过吗 - CocoaChina_一站式开发者成长社区</a></p><p><a href="https://mp.weixin.qq.com/s/toPt7ebEmM8wMa0UZqeUsg">https://mp.weixin.qq.com/s/toPt7ebEmM8wMa0UZqeUsg</a><br><a href="https://mp.weixin.qq.com/s/sBHnKqtwen6B0PlUgvMeSA">你以为只要努力就够了吗？2020 最新技术趋势你知道吗？ | VIP 上新</a><br><a href="https://juejin.im/post/5ecbe68f51882542ef4f7fa7">K8S 生态周报| Helm v3.2.1 发布 - 掘金</a><br><a href="https://juejin.im/post/5ec7859ae51d45788f0d6cd1">我在工作中是这样使用Git - 掘金</a><br><a href="https://juejin.im/post/5ec9224f518825432b5dcf11">从原理上理解MySQL的优化建议 - 掘金</a><br><a href="https://juejin.im/post/5ecb3dd2e51d4578a12e23ba">Mac 前端开发环境从零配置 - 掘金</a><br><a href="https://learnku.com/articles/44438">为什么要使用 Redis？ | Laravel China 社区</a></p><p><a href="https://juejin.im/post/5ec793346fb9a0480659d6ef">[译] 看我如何把网站性能提升 422% - 掘金</a><br><a href="https://juejin.im/post/5ec0d6b4f265da7b950569a9">震惊！生产力提效 300% 的秘诀全公开 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/VcM15QPdV-Ow4D4vWrQSuA">API 越来越多，没个接口管理工具哪行？试试这款吧！</a><br><a href="https://draveness.me/whys-the-design-ipv6-replacing-ipv4/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">为什么 IPv6 难以取代 IPv4 - 面向信仰编程</a><br><a href="https://mp.weixin.qq.com/s/Yr4A95poVjlFsQ-Q0dF7hA">架构设计 | 分布式系统调度，Zookeeper集群化管理</a><br><a href="https://juejin.im/post/5ec3fbb4518825433b13215c">找不到页面 - 掘金</a><br><a href="https://juejin.im/post/5ec3d3c56fb9a047ff1a99bc">给我一分钟，让你彻底明白MySQL聚簇索引和非聚簇索引 - 掘金</a><br><a href="https://juejin.im/post/5ec17556e51d4525602d47bf">同样都是开发，为什么你不如别人？ - 掘金</a><br><a href="https://www.zhihu.com/question/26934313">有哪些算法惊艳到了你？ - 知乎</a><br><a href="https://juejin.im/post/5ec338436fb9a0432d76e0c4">Chrome DevTools中的这些骚操作，你都知道吗？ - 掘金</a></p><p><a href="https://toutiao.io/">开发者头条 - 程序员分享平台 | 程序员必装的App | 技术极客的头条新闻</a><br><a href="https://cdk8s.io/">cdk8s</a><br><a href="https://juejin.im/post/5ec1dd5f5188256d77633faf">人人都能看懂的 6 种限流实现方案！(纯干货) - 掘金</a></p><p><a href="https://www.zhihu.com/question/28485416">(7 封私信 / 1 条消息) 程序员有哪些平时自己开发的小工具来简便工作？ - 知乎</a><br><a href="https://www.zhihu.com/question/22867411">作为程序员的你，常用的工具软件有哪些？ - 知乎</a><br><a href="https://www.zhihu.com/question/61005512">(7 封私信 / 1 条消息) 程序员如何一个人干几个人的活？ - 知乎</a></p><h2 id="05-30"><a href="#05-30" class="headerlink" title="05-30"></a>05-30</h2><p><a href="http://lanbing510.info/2017/12/14/Wechat-RSS-Huginn.html">高效工作—优雅的阅读微信公众号 | 冰蓝记录思考的地方</a><br><a href="http://lanbing510.info/2016/08/18/Keyboard-Shortcut.html">高效工作—快捷键整理 | 冰蓝记录思考的地方</a><br><a href="http://lanbing510.info/2015/11/28/Ubuntu-Softwares.html">Ubuntu下常用软件的安装使用及常见问题汇总 | 冰蓝记录思考的地方</a><br><a href="http://lanbing510.info/2015/04/01/Windows-Tips.html">Windows系统下的一些经验技巧 | 冰蓝记录思考的地方</a><br><a href="http://lanbing510.info/2014/11/05/Git-Commands.html">Git常用命令总结 | 冰蓝记录思考的地方</a></p><p><a href="https://jecyu.github.io/Notebook/bookmark/#%E6%9E%B6%E6%9E%84">前端 | Jecyu’s Notebook</a><br><a href="https://jecyu.github.io/Notebook/devops/docker.html#%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">docker | Jecyu’s Notebook</a><br><a href="https://jecyu.github.io/Notebook/dailyRecord/">2020 | Jecyu’s Notebook</a></p><p>读书笔记系列</p><p><a href="http://lanbing510.info/2020/05/14/Outlers.html">异类-读书简记 | 冰蓝记录思考的地方</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>docker-todo</title>
    <link href="https://zronghui.github.io/todo/docker-todo.html"/>
    <id>https://zronghui.github.io/todo/docker-todo.html</id>
    <published>2020-05-05T13:27:03.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="√-解锁网易云灰色歌曲"><a href="#√-解锁网易云灰色歌曲" class="headerlink" title="√ 解锁网易云灰色歌曲"></a>√ 解锁网易云灰色歌曲</h2><p><a href="https://github.com/nondanee/UnblockNeteaseMusic">nondanee/UnblockNeteaseMusic: Revive unavailable songs for Netease Cloud Music</a></p><p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/48">进阶配置 · Issue #48 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22">食用指南 · Issue #22 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/527">全端通用方案搭建教程 · Issue #527 · nondanee/UnblockNeteaseMusic</a></p><h2 id="√-gitlab"><a href="#√-gitlab" class="headerlink" title="√ gitlab"></a>√ gitlab</h2><p><a href="https://snowdreams1006.tech/devops/docker-gitlab.html">docker + gitlab · 雪之梦技术驿站</a><br><a href="https://www.jianshu.com/p/080a962c35b6">docker下gitlab安装配置使用(完整版) - 简书</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
</feed>
