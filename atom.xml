<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-03-04T08:24:24.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cli</title>
    <link href="https://zronghui.github.io/Mac/cli.html"/>
    <id>https://zronghui.github.io/Mac/cli.html</id>
    <published>2020-03-04T03:28:19.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">echo '&#123;"e":1,"m":"今天已经填报了","d":&#123;&#125;&#125;' | jq -r .e</span><br><span class="line"></span><br><span class="line">jq [options] filter [files]</span><br><span class="line">**options：**</span><br><span class="line">--version：输出jq的版本信息并退出</span><br><span class="line">--slurp/-s：读入整个输入流到一个数组。</span><br><span class="line">--raw-input/-R：不作为JSON解析，将每一行的文本作为字符串输出到屏幕。</span><br><span class="line">--null-input/ -n：不读取任何输入，过滤器运行使用null作为输入。一般用作从头构建JSON数据。</span><br><span class="line">--compact-output /-c：使输出紧凑，而不是把每一个JSON对象输出在一行。</span><br><span class="line">--colour-output / -C：打开颜色显示</span><br><span class="line">--monochrome-output / -M：关闭颜色显示</span><br><span class="line">--ascii-output /-a：指定输出格式为ASCII</span><br><span class="line">-raw-output /-r ：如果过滤的结果是一个字符串，那么直接写到标准输出（去掉字符串的引号）</span><br><span class="line"></span><br><span class="line">**filter：**</span><br><span class="line">.   : 默认输出</span><br><span class="line">.foo: 输出指定属性，foo代表属性。</span><br><span class="line">.[foo] ：输出指定数组元素。foo代表数组下标。</span><br><span class="line">.[]：输出指定数组中全部元素</span><br><span class="line">， ：指定多个属性作为过滤条件时，用逗号分隔</span><br><span class="line">| ： 将指定的数组元素中的某个属性作为过滤条件</span><br><span class="line"></span><br><span class="line">**files：**</span><br><span class="line">    JOSN格式文件。</span><br></pre></td></tr></table></figure><p>-r ：如果过滤的结果是一个字符串，那么直接写到标准输出（去掉字符串的引号）</p><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-o 指定下载文件名</span><br><span class="line">-O 默认下载文件名</span><br><span class="line">-s 不输出没用的统计信息</span><br><span class="line">-x 192.168.100.198:8888 代理</span><br><span class="line">-A/--user-agent &lt;string&gt;</span><br><span class="line">-e/--referer    来源网址</span><br><span class="line"><span class="comment"># 循环下载</span></span><br><span class="line">curl -O http://www.51cto.com/justin[1-5].png</span><br><span class="line"><span class="comment"># 分块下载  -r 0-100</span></span><br><span class="line">-r/--range &lt;range&gt;</span><br><span class="line"><span class="comment"># 下载进度条  -s 不会显示下载进度信息</span></span><br><span class="line">-<span class="comment">#/--progress-bar</span></span><br><span class="line"><span class="comment"># 断点续传</span></span><br><span class="line">-C/--<span class="built_in">continue</span>-at &lt;offset&gt;</span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">-T/--upload-file &lt;file&gt;    上传文件</span><br><span class="line"><span class="comment"># 如 curl -T justin.png -u justin:peng ftp://www.baidu.com/img/</span></span><br><span class="line">-F 表单提交</span><br><span class="line"><span class="comment"># 如 curl -F prefile=@portrait.jpg https://example.com/upload.cgi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 设置</title>
    <link href="https://zronghui.github.io/Mac/mac-%E8%AE%BE%E7%BD%AE.html"/>
    <id>https://zronghui.github.io/Mac/mac-%E8%AE%BE%E7%BD%AE.html</id>
    <published>2020-03-04T00:58:42.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="让按键反应更快"><a href="#让按键反应更快" class="headerlink" title="让按键反应更快"></a>让按键反应更快</h2><p>设置之后你会发现移动光标时，反应速度大幅提升。<br>“系统偏好设置 –&gt; 键盘”，将“按键重复”和“重复前延迟”都拖到最右。</p><img src="https://i.loli.net/2020/03/04/oVzfNh8sryEeYdx.png" alt="oVzfNh8sryEeYdx" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>iterm</title>
    <link href="https://zronghui.github.io/Mac/05-iterm.html"/>
    <id>https://zronghui.github.io/Mac/05-iterm.html</id>
    <published>2020-03-03T08:25:46.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><img src="https://i.loli.net/2020/03/04/9ckelYunJqL6m35.png" alt="9ckelYunJqL6m35" style="zoom:33%;" /><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载<strong>iTerm</strong>色彩方案<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a>并解压</p><p>进入<strong>Preference &gt; Profiles</strong></p><ul><li>设置<strong>Terminal &gt; Report Terminal Type</strong>，选择<code>xterm-256color</code></li><li>设置<strong>Colors &gt; Color Presets &gt; Import</strong>，导入<code>iTerm2-Color-Schemes</code>的<code>schemes文件夹</code>，选择自己喜欢的颜色方案(选的是<code>dracula</code>)</li><li>设置<strong>Window &gt; Transparency</strong>，调整窗口透明度</li><li>设置<strong>Session &gt; Status bar enabled &gt; Configure Status Bar</strong>，拖拽需要显示的状态</li></ul><h2 id="图标字体安装"><a href="#图标字体安装" class="headerlink" title="图标字体安装"></a>图标字体安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;</span><br><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br><span class="line">brew install ruby</span><br><span class="line">gem install colorls</span><br></pre></td></tr></table></figure><img src="/Users/zhangronghui/Library/Application Support/typora-user-images/image-20200303184052699.png" alt="image-20200303184052699" style="zoom:33%;" /><h2 id="colorls-安装"><a href="#colorls-安装" class="headerlink" title="colorls 安装"></a>colorls 安装</h2><p><a href="https://github.com/athityakumar/colorls">athityakumar/colorls: A Ruby gem that beautifies the terminal’s ls command, with color and font-awesome icons.</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换你的Ruby版本</span></span><br><span class="line">brew link --overwrite ruby</span><br><span class="line"><span class="meta">#</span><span class="bash"> 你还可以使用rbenv在计算机上安装和运行不同版本的Ruby brew install rbenv</span></span><br><span class="line"></span><br><span class="line">gem install colorls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题，gem/ruby 安装的 colorls 命令找不到</span></span><br><span class="line">colorls</span><br><span class="line"><span class="meta">#</span><span class="bash"> zsh: <span class="built_in">command</span> not found: colorls</span></span><br><span class="line">gem which colorls</span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/<span class="built_in">local</span>/lib/ruby/gems/2.6.0/gems/colorls-1.3.3/lib/colorls.rb</span></span><br><span class="line">/usr/local/lib/ruby/gems/2.6.0/bin/colorls</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export PATH="/usr/local/lib/ruby/gems/2.6.0/bin:$PATH"</span><br><span class="line">vim ~/.alias</span><br></pre></td></tr></table></figure><h2 id="powerlevel9k-–zsh-主题安装"><a href="#powerlevel9k-–zsh-主题安装" class="headerlink" title="powerlevel9k –zsh 主题安装"></a>powerlevel9k –zsh 主题安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/themes/powerlevel9k</span><br><span class="line"><span class="meta">#</span><span class="bash"> You <span class="keyword">then</span> need to select this theme <span class="keyword">in</span> your ~/.zshrc:</span></span><br><span class="line">ZSH_THEME="powerlevel9k/powerlevel9k"</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Show-Off-Your-Config">Show Off Your Config · Powerlevel9k/powerlevel9k Wiki</a></p><p>用户分享的主题配置</p><p>以下选择第一个配置</p><p><a href="https://github.com/daniruiz/dotfiles">daniruiz/dotfiles: ~/.dotfiles</a></p><p>选取其 powerlevel9k 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----- promt -----</span></span><br><span class="line">PS1=<span class="string">"%F&#123;cyan&#125; %~ &gt;%F&#123;blue&#125;&gt; %F&#123;reset&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------- POWERLEVEL ---------------------------------</span></span><br><span class="line">POWERLEVEL9K_MODE=nerdfont-complete</span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line">POWERLEVEL9K_RPROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=2</span><br><span class="line">POWERLEVEL9K=truncate_beginning</span><br><span class="line">POWERLEVEL9K_TIME_BACKGROUND=black</span><br><span class="line">POWERLEVEL9K_TIME_FOREGROUND=white</span><br><span class="line">POWERLEVEL9K_TIME_FORMAT=%D&#123;%I:%M&#125;</span><br><span class="line">POWERLEVEL9K_STATUS_VERBOSE=<span class="literal">false</span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_FOREGROUND=black</span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_BACKGROUND=green</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=black</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=yellow</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=white</span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=black</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=black</span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=blue</span><br><span class="line">POWERLEVEL9K_FOLDER_ICON=</span><br><span class="line">POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE=<span class="literal">true</span></span><br><span class="line">POWERLEVEL9K_STATUS_VERBOSE=<span class="literal">false</span></span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0</span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_ICON=●</span><br><span class="line">POWERLEVEL9K_VCS_UNSTAGED_ICON=±</span><br><span class="line">POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON=↓</span><br><span class="line">POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON=↑</span><br><span class="line">POWERLEVEL9K_VCS_COMMIT_ICON=<span class="string">' '</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=<span class="string">'%F&#123;blue&#125;╭─'</span></span><br><span class="line"><span class="comment"># POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX='%F&#123;blue&#125;╭─%F&#123;red&#125;'</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=<span class="string">'%F&#123;blue&#125;╰%f '</span></span><br><span class="line"><span class="comment">#POWERLEVEL9K_CUSTOM_OS_ICON='echo   $(whoami) '</span></span><br><span class="line">POWERLEVEL9K_CUSTOM_OS_ICON_BACKGROUND=red</span><br><span class="line">POWERLEVEL9K_CUSTOM_OS_ICON_FOREGROUND=white</span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(custom_os_icon ssh root_indicator dir dir_writable vcs)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(command_execution_time status background_jobs time ram)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ $(tty) == /dev/pts/* ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="vim-简单配置"><a href="#vim-简单配置" class="headerlink" title="vim 简单配置"></a>vim 简单配置</h2><p>.vimrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line">set number</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line">&quot; 高亮当前行</span><br><span class="line">set cursorcolumn</span><br><span class="line">set cursorline</span><br><span class="line">highlight CursorLine   cterm&#x3D;NONE ctermbg&#x3D;black ctermfg&#x3D;green guibg&#x3D;NONE guifg&#x3D;NONE</span><br><span class="line">highlight CursorColumn cterm&#x3D;NONE ctermbg&#x3D;black ctermfg&#x3D;green guibg&#x3D;NONE guifg&#x3D;NONE</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">打造 Mac 下高颜值好用的终端环境 | 编程和酒</a></p><p><a href="https://github.com/Powerlevel9k/powerlevel9k/wiki/Show-Off-Your-Config">Show Off Your Config · Powerlevel9k/powerlevel9k Wiki</a></p><p><a href="https://github.com/daniruiz/dotfiles">daniruiz/dotfiles: ~/.dotfiles</a></p><h2 id="系统默认终端美化"><a href="#系统默认终端美化" class="headerlink" title="系统默认终端美化"></a>系统默认终端美化</h2><p><a href="https://sspai.com/post/53008">10 个 Terminal 主题，让你的 macOS 终端更好看 - 少数派</a></p><h1 id="iTerm2使用技巧"><a href="#iTerm2使用技巧" class="headerlink" title="iTerm2使用技巧"></a>iTerm2使用技巧</h1><h2 id="启动一个连接到远程server的终端"><a href="#启动一个连接到远程server的终端" class="headerlink" title="启动一个连接到远程server的终端"></a>启动一个连接到远程server的终端</h2><p>选择“Preferences-&gt;Profiles”，新增一个profile，并设置启动的快捷键和command命令</p><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><p>使用快捷键“cmd+d”实现左右分屏，快捷键“^+cmd+d”实现上下分屏, 效果如图：</p><img src="https://i.loli.net/2020/03/03/NH94jOBeYg8GZmk.jpg" alt="NH94jOBeYg8GZmk" style="zoom:33%;" /><h3 id="搜索及文本复制"><a href="#搜索及文本复制" class="headerlink" title="搜索及文本复制"></a>搜索及文本复制</h3><p>使用“cmd+f”可以调出搜索框进行文本搜索，然后有个很奇妙的快捷键“<strong>tab</strong>”键，使用它后会自动高亮当前文本后面的内容。最后按enter键将高亮文本复制到剪切板上。这几个按键连用代替了使用鼠标复制文本内容！</p><img src="https://i.loli.net/2020/03/03/gSTdjsQw7r1UPnv.jpg" alt="gSTdjsQw7r1UPnv" style="zoom:50%;" /><h2 id="没啥用的-显示当前行、右侧显示时间线、自动命令补全"><a href="#没啥用的-显示当前行、右侧显示时间线、自动命令补全" class="headerlink" title="没啥用的-显示当前行、右侧显示时间线、自动命令补全"></a>没啥用的-显示当前行、右侧显示时间线、自动命令补全</h2><img src="https://i.loli.net/2020/03/03/M8uQ3JlOIdczbSe.png" alt="M8uQ3JlOIdczbSe" style="zoom:33%;" /><h2 id="调出复制过的文本历史"><a href="#调出复制过的文本历史" class="headerlink" title="调出复制过的文本历史"></a>调出复制过的文本历史</h2><p>快捷键：“^+cmd+h”。</p><h2 id="按键回放"><a href="#按键回放" class="headerlink" title="按键回放"></a>按键回放</h2><p>这个简直功能太强大了！它能回放一段时间内的你敲过的所有字符。<br>快捷键：“cmd+alt+b”，如图会弹出一个进度条，按左右键就可以实现按键回放了。</p><h2 id="mac-iterm2-以单词为单位移动的快捷键设置"><a href="#mac-iterm2-以单词为单位移动的快捷键设置" class="headerlink" title="mac iterm2 以单词为单位移动的快捷键设置"></a>mac iterm2 以单词为单位移动的快捷键设置</h2><p><a href="https://blog.csdn.net/skyyws/article/details/78480132?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task">Mac下iTerm2光标按照单词快速移动设置_运维_skyyws的博客-CSDN博客</a></p><img src="https://i.loli.net/2020/02/26/1aVChvexXkQbPI8.png" alt="1aVChvexXkQbPI8" style="zoom: 33%;" /><img src="https://i.loli.net/2020/02/26/Y5PywSNJf1bHWrQ.png" alt="Y5PywSNJf1bHWrQ" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>软件测试实训</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%AE%AD.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%AE%AD.html</id>
    <published>2020-03-03T08:24:29.000Z</published>
    <updated>2020-03-03T09:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><img src="https://i.loli.net/2020/03/03/7KJowvXPlOn4hfu.png" alt="7KJowvXPlOn4hfu" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>cocktail</title>
    <link href="https://zronghui.github.io/Mac/04-cocktail.html"/>
    <id>https://zronghui.github.io/Mac/04-cocktail.html</id>
    <published>2020-03-03T00:32:38.000Z</published>
    <updated>2020-03-03T04:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.macwk.com/soft/cocktail">Cocktail 13.1 破解版 for Mac 清理维护优化工具</a></p><h2 id="延长硬盘睡眠时间"><a href="#延长硬盘睡眠时间" class="headerlink" title="延长硬盘睡眠时间"></a>延长硬盘睡眠时间</h2><img src="https://i.loli.net/2020/03/03/uPJLGcfvpSFrXWl.png" alt="uPJLGcfvpSFrXWl" style="zoom:33%;" /><h2 id="关闭开机声音"><a href="#关闭开机声音" class="headerlink" title="关闭开机声音"></a>关闭开机声音</h2><img src="https://i.loli.net/2020/03/03/W72CdgU5LwBEjGy.png" alt="W72CdgU5LwBEjGy" style="zoom:33%;" /><h2 id="禁用mac拼写自动更正"><a href="#禁用mac拼写自动更正" class="headerlink" title="禁用mac拼写自动更正"></a>禁用mac拼写自动更正</h2><img src="https://i.loli.net/2020/03/03/Z5Kxf71cqYRDiNn.png" alt="Z5Kxf71cqYRDiNn" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>power manager</title>
    <link href="https://zronghui.github.io/Mac/power-manager.html"/>
    <id>https://zronghui.github.io/Mac/power-manager.html</id>
    <published>2020-03-02T23:37:05.000Z</published>
    <updated>2020-03-03T04:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>信息和网络安全</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html</id>
    <published>2020-03-02T14:46:07.000Z</published>
    <updated>2020-03-03T04:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>信息系统实训</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD.html</id>
    <published>2020-03-02T14:31:51.000Z</published>
    <updated>2020-03-03T04:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="课程任务"><a href="#课程任务" class="headerlink" title="课程任务"></a>课程任务</h2><p>面向图书信息搜索引擎<br>面向曲目信息搜索引擎</p><h2 id="第一次课实训任务"><a href="#第一次课实训任务" class="headerlink" title="第一次课实训任务"></a>第一次课实训任务</h2><p>只用一种正则表达式把以下日期提取出来<br>•”xxx出生于1995年6月1日” • ”xxx出生于1995/6/1” • ”xxx出生于1995-6-1” • ”xxx出生于1995-06-01” • ”xxx出生于1995-06”<br>代码提交：<a href="http://www.eec-cn.com（u+平台）注册，做好组队，建立好成员组。">www.eec-cn.com（u+平台）注册，做好组队，建立好成员组。</a></p><h4 id="regex-资源"><a href="#regex-资源" class="headerlink" title="regex 资源"></a>regex 资源</h4><p>练习题<a href="https://blog.csdn.net/qian_youyou/article/details/79121916">https://blog.csdn.net/qian_youyou/article/details/79121916</a><br>菜鸟教程<br>正则表达式 教程<a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a><br>在线工具<a href="http://tools.jb51.net/regex/javascript">http://tools.jb51.net/regex/javascript</a><br>Python常用正则函数<a href="https://www.runoob.com/python3/python3-reg-expressions.html">https://www.runoob.com/python3/python3-reg-expressions.html</a></p><img src="https://i.loli.net/2020/03/03/Dj6V4viRfdrLmkM.png" alt="Dj6V4viRfdrLmkM" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-03</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-03.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-03.html</id>
    <published>2020-03-02T11:59:51.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h3 id="Autojump-插件"><a href="#Autojump-插件" class="headerlink" title="Autojump 插件"></a><strong>Autojump 插件</strong></h3><p><code>j</code>快速切换，用<code>jo</code>快递在finder里打开文件夹</p><h3 id="qq-录屏-截图-文字识别"><a href="#qq-录屏-截图-文字识别" class="headerlink" title="qq 录屏 截图 文字识别"></a>qq 录屏 截图 文字识别</h3><p>快捷键“^+cmd+o”。 </p><p>竟然打开了 QQ 的录屏 截图 文字识别功能，挺好用</p><h3 id="硬盘检测"><a href="#硬盘检测" class="headerlink" title="硬盘检测"></a>硬盘检测</h3><p><img src="https://i.loli.net/2020/03/03/jQmLHGicBKyDThk.png" alt="jQmLHGicBKyDThk"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>mac tricks</title>
    <link href="https://zronghui.github.io/Mac/mac-tricks.html"/>
    <id>https://zronghui.github.io/Mac/mac-tricks.html</id>
    <published>2020-03-02T08:11:45.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="指定软件打开多个文件"><a href="#指定软件打开多个文件" class="headerlink" title="指定软件打开多个文件"></a>指定软件打开多个文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -a 指定软件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .dotfiles/.* 匹配隐藏文件</span></span><br><span class="line">open -a 'CotEditor' .dotfiles/.*</span><br><span class="line">alias cotEdit="open -a 'CotEditor'"</span><br></pre></td></tr></table></figure><h2 id="微调声音"><a href="#微调声音" class="headerlink" title="微调声音"></a>微调声音</h2><p>shift cmd + 音量键</p><h2 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h2><p><strong>腾讯的柠檬清理</strong></p><img src="https://i.loli.net/2020/03/02/4Wzgi5Nl8TRZHby.png" alt="4Wzgi5Nl8TRZHby" style="zoom:33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>有意思的Mac软件</title>
    <link href="https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html</id>
    <published>2020-03-02T03:28:36.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.macwk.com/soft/cisdem-appcrypt">Cisdem AppCrypt 4.6.0 破解版 for Mac 应用软件加密及网站黑名单</a></p><p><a href="https://www.macwk.com/soft/24-hour-wallpaper">24 Hour Wallpaper 3.1 破解版 for Mac 精美的5K动态桌面壁纸</a></p><p><a href="https://www.macwk.com/soft/buttercup">Buttercup 1.19.0 for Mac 可跨平台同步的密码管理器</a></p><p><a href="https://www.macwk.com/soft/aerial">Aerial 1.8.1 for Mac Apple TV 全套屏幕保护移植</a><br><a href="https://www.macwk.com/soft/loopback">Loopback 2.1.3 破解版 for Mac 非常强大的音频传递工具</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh config editor</title>
    <link href="https://zronghui.github.io/Mac/03-ssh-config-editor.html"/>
    <id>https://zronghui.github.io/Mac/03-ssh-config-editor.html</id>
    <published>2020-03-02T03:07:19.000Z</published>
    <updated>2020-03-04T08:24:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.macwk.com/soft/ssh-config-editor">SSH Config Editor Pro 1.11.5 破解版 for Mac 管理您的SSH配置文件</a></p><img src="https://i.loli.net/2020/03/02/iaAwzsQY4SJkZ2e.png" alt="iaAwzsQY4SJkZ2e" style="zoom: 33%;" /><img src="https://i.loli.net/2020/03/02/z4VTgQKGlSZ6M8e.png" alt="z4VTgQKGlSZ6M8e" style="zoom:33%;" /><h2 id="不借助软件的配置"><a href="#不借助软件的配置" class="headerlink" title="不借助软件的配置"></a>不借助软件的配置</h2><p>打开~/.ssh/config文件，添加以下内容：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host server-<span class="keyword">alias</span>           <span class="comment"># server-alias为SSH链接的服务器别名</span></span><br><span class="line">  HostName server-ip  <span class="comment"># 服务器地址</span></span><br><span class="line">  Port <span class="number">22</span></span><br><span class="line">  User username           <span class="comment"># 服务器端用户名</span></span><br><span class="line">  PreferredAuthentications publickey </span><br><span class="line">  IdentityFile ~<span class="regexp">/.ssh/id</span>_rsa   <span class="comment"># 私钥地址，默认为 ~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure><p>验证<br> 以后即可通过以下命令登录远程服务器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh server-<span class="keyword">alias</span></span><br></pre></td></tr></table></figure><h2 id="解决mac下ssh自动中断"><a href="#解决mac下ssh自动中断" class="headerlink" title="解决mac下ssh自动中断"></a>解决mac下ssh自动中断</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "ServerAliveInterval 30" &gt;&gt;  ~/.ssh/config</span><br></pre></td></tr></table></figure><p>每隔30秒，mac客户端会主动向服务器发出一次请求。<br>这样就使得服务器端认为客户端是一直在线状态，也就不会主动断开连接了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云</title>
    <link href="https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html"/>
    <id>https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html</id>
    <published>2020-03-02T00:11:19.000Z</published>
    <updated>2020-03-04T08:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="【阿里云】高校学生“在家实践”计划"><a href="#【阿里云】高校学生“在家实践”计划" class="headerlink" title="【阿里云】高校学生“在家实践”计划"></a>【阿里云】高校学生“在家实践”计划</h2><p><a href="https://developer.aliyun.com/adc/student/?spm=a2c6h.13788096.J_7970846300.1.75da7638uOFYrv&accounttraceid=45ab3d56815a4be6ab3feac336a73784hxcl#ecscolleges-collocation-stu">【阿里云】高校学生“在家实践”计划</a></p><img src="https://i.loli.net/2020/03/02/WxfQkdBtVR56gYa.png" alt="WxfQkdBtVR56gYa" style="zoom:50%;" /><h2 id="登录问题"><a href="#登录问题" class="headerlink" title="登录问题"></a>登录问题</h2><img src="https://i.loli.net/2020/03/02/uEcSq12LNJgMTDk.png" alt="uEcSq12LNJgMTDk" style="zoom: 33%;" /><img src="https://i.loli.net/2020/03/02/ZhKupy5dwkm6Qci.png" alt="ZhKupy5dwkm6Qci" style="zoom: 50%;" /><img src="https://i.loli.net/2020/03/02/OzEniY3MoPCAWbx.png" alt="OzEniY3MoPCAWbx" style="zoom:50%;" /><h2 id="Ssh-登录"><a href="#Ssh-登录" class="headerlink" title="Ssh 登录"></a>Ssh 登录</h2><p>利用 ssh config editor</p><h2 id="从零配置服务器"><a href="#从零配置服务器" class="headerlink" title="从零配置服务器"></a>从零配置服务器</h2><h3 id="oh-my-zsh-安装"><a href="#oh-my-zsh-安装" class="headerlink" title="oh my zsh 安装"></a>oh my zsh 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line">yum -y install zsh # yum -y reinstall zsh # 覆盖安装</span><br><span class="line">cat /etc/shells</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"><span class="meta">#</span><span class="bash"> git wget curl 任选其一，wget 没有成功过</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span></span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 个插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> autojump、zsh-autosuggestion 以及 zsh-syntax-highlighting</span></span><br><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line">git clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git clone git://github.com/wting/autojump.git</span><br><span class="line">cd autojump/</span><br><span class="line">python ./install.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> Please manually add the following line(s) to ~/.zshrc:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">[[ -s /root/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; <span class="built_in">source</span> /root/.autojump/etc/profile.d/autojump.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">autoload</span> -U compinit &amp;&amp; compinit -u</span></span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  autojump</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync 免密传输</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  本机：</span></span><br><span class="line">/usr/local/bin/rsync -azvhP ~/.ssh/id_rsa.pub root@47.93.53.47:/root/.ssh</span><br><span class="line"><span class="meta">#</span><span class="bash">  远程：</span></span><br><span class="line">cd .ssh;cat id_rsa.pub &gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置vim可配色</span></span><br><span class="line">vim .vimrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 贴入以下代码段！</span></span><br><span class="line">syntax on</span><br><span class="line">set number</span><br><span class="line">set ruler</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nerd-fonts 下载</span></span><br><span class="line">mkdir -p ~/.local/share/fonts</span><br><span class="line">cd ~/.local/share/fonts &amp;&amp; curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> powerlevel9k 主题下载</span></span><br><span class="line">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/themes/powerlevel9k</span><br><span class="line"><span class="meta">#</span><span class="bash"> You <span class="keyword">then</span> need to select this theme <span class="keyword">in</span> your ~/.zshrc:</span></span><br><span class="line">ZSH_THEME="powerlevel9k/powerlevel9k"</span><br><span class="line"></span><br><span class="line">sudo yum install ruby</span><br><span class="line">gem install colorls</span><br></pre></td></tr></table></figure><p>Rsync 报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rsync: on remote machine: -vlogDtpXre.iLsfxC: unknown option</span><br><span class="line">rsync error: syntax or usage error (code 1) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-52.200.1/rsync/main.c(1337) [server=2.6.9]</span><br><span class="line">rsync: connection unexpectedly closed (0 bytes received so far) [sender]</span><br><span class="line">rsync error: error in rsync protocol data stream (code 12) at io.c(226) [sender=3.1.3]</span><br></pre></td></tr></table></figure><p>是版本不一致导致的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install rsync</span><br><span class="line">where rsync</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改~/.<span class="built_in">alias</span></span></span><br><span class="line">alias rsync=/usr/local/bin/rsync</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="阿里云" scheme="https://zronghui.github.io/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
  </entry>
  
  <entry>
    <title>aria2</title>
    <link href="https://zronghui.github.io/Mac/02-aria2.html"/>
    <id>https://zronghui.github.io/Mac/02-aria2.html</id>
    <published>2020-03-01T15:37:02.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要用 aria2 gui</p><p>dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/</p><p><a href="https://medium.com/@Justin___Smith/aria2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B-mac%E5%92%8Cwindows-b31d0f64bd4e">Aria2配置教程（Mac和Windows） - Justin Smith - Medium</a></p><h3 id="Aria2-配置"><a href="#Aria2-配置" class="headerlink" title="Aria2 配置"></a>Aria2 配置</h3><p><a href="http://aria2c.com/usage.html">Aria2 &amp; YAAW 使用说明</a><br><a href="https://aria2.github.io/manual/en/html/aria2c.html">aria2c(1) — aria2 1.35.0 documentation</a></p><h3 id="win-mac-aria2下载"><a href="#win-mac-aria2下载" class="headerlink" title="win mac aria2下载"></a>win mac aria2下载</h3><p><a href="https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&parentPath=%2Fsharelink2668081893-566048232074527">https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&amp;parentPath=%2Fsharelink2668081893-566048232074527</a></p><h2 id="网页端管理软件"><a href="#网页端管理软件" class="headerlink" title="网页端管理软件"></a>网页端管理软件</h2><p><a href="https://ziahamza.github.io/webui-aria2/">active: 7 - waiting: 0 - stopped: 0 — Aria2 WebUI</a><br><a href="http://binux.github.io/yaaw/demo/">↓214 KB - Yet Another Aria2 Web Frontend</a></p><p>查看 aria2 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep aria2c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/Applications/Aria2GUI.app/Contents/Resources/aria2c --dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/ --conf-path=/Applications/Aria2GUI.app/Contents/Resources/aria2.conf --input-file=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --save-session=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --max-concurrent-downloads=10 --max-connection-per-server=16 --min-split-size=1024K --split=16 --max-overall-download-limit=0K --max-overall-upload-limit=0K --max-download-limit=0K --max-upload-limit=0K --continue=true --auto-file-renaming=true --allow-overwrite=true --disk-cache=0M --max-tries=0 --retry-wait=5 -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取 SP 图片</title>
    <link href="https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html"/>
    <id>https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html</id>
    <published>2020-03-01T06:09:16.000Z</published>
    <updated>2020-03-01T07:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>爬取网站下的所有卡片</p><p><a href="https://southparkphonedestroyer.fandom.com/wiki/Characters">https://southparkphonedestroyer.fandom.com/wiki/Characters</a></p><h2 id="用-siteSucker-爬取网页内容"><a href="#用-siteSucker-爬取网页内容" class="headerlink" title="用 siteSucker 爬取网页内容"></a>用 siteSucker 爬取网页内容</h2><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -o --nocolor --nofilename --nonumbers "https://vignette.wikia.nocookie.net/southparkphonedestroyer/images.*png" | sort | uniq | grep -v '"' | grep -v ' ' | pbcopy</span><br><span class="line">cd 图片保存目录</span><br><span class="line">pbpaste | xargs wget</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>Grep 是 ag 的alias</p><p>wget 是 axel 的 alias</p><p>ag 默认支持正则，注意需要用引号包裹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-o --only-matching      Prints only the matching part of the lines</span><br><span class="line">--[no]numbers</span><br></pre></td></tr></table></figure><p>grep -v 反选</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>命令行还挺好用的，熟悉的话比 Python 脚本高效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>烦人的网页编码问题</title>
    <link href="https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html"/>
    <id>https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html</id>
    <published>2020-03-01T02:31:44.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>请求网址乱码：</p><p>一开始以为是压缩问题：</p><h2 id="content-encoding-和-accept-encoding"><a href="#content-encoding-和-accept-encoding" class="headerlink" title="content-encoding 和 accept-encoding"></a>content-encoding 和 accept-encoding</h2><ul><li>response headers中的content-encoding</li><li>request headers 中的accept-encoding</li></ul><p>content-encoding是指网页使用了哪种压缩方式传输数据给你，accept-encoding表示你发送请求时告诉服务器，我可以解压这些格式的数据。</p><p>二者的关系是，对方网页会根据你发送的accept-encoding来决定用什么格式(content-encoding)传给你。</p><p>Python 中，若不添加 accept-encoding, requests 默认添加 r.request.headers[‘Accept-Encoding’] 为 ‘gzip, deflate’</p><p>若 ‘Accept-Encoding’: ‘’，则 response 应该没有压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://zhuanlan.zhihu.com/python-programming'</span>, headers = headers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers[<span class="string">'Content-Encoding'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Program Files\Anaconda3\lib\site-packages\requests\structures.py"</span>, line <span class="number">54</span>, <span class="keyword">in</span> __getitem__</span><br><span class="line">    <span class="keyword">return</span> self._store[key.lower()][<span class="number">1</span>]</span><br><span class="line">KeyError: <span class="string">'content-encoding'</span></span><br></pre></td></tr></table></figure><h2 id="获取网页正确编码"><a href="#获取网页正确编码" class="headerlink" title="获取网页正确编码"></a>获取网页正确编码</h2><p>requests会从服务器返回的响应头的 Content-Type 去获取字符集编码，如果content-type有charset字段那么requests才能正确识别编码，否则就使用默认的 ISO-8859-1</p><p>所以 requests 的 response.text 有可能是乱码的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ic(doc.headers, chardet.detect(doc.content), doc.apparent_encoding, doc.encoding)</span><br><span class="line"><span class="comment"># ic| doc.headers: &#123;'Content-Type': 'text/html', 'Last-Modified': 'Sun, 01 Mar 2020 00:49:50 GMT', 'Vary': 'Accept-Encoding', 'ETag': 'W/"5e5b06ae-1da6a"', 'Expires': 'Sun, 01 Mar 2020 02:44:33 GMT', 'Cache-Control': 'max-age=300', 'P3P': 'CP=CAO PSA OUR', 'Content-Encoding': 'gzip', 'Content-Length': '25940', 'Accept-Ranges': 'bytes', 'Date': 'Sun, 01 Mar 2020 02:44:01 GMT', 'Age': '267', 'Connection': 'keep-alive', 'X-Hits': '4'&#125;</span></span><br><span class="line"><span class="comment">#     chardet.detect(doc.content): &#123;'confidence': 0.99, 'encoding': 'GB2312', 'language': 'Chinese'&#125;</span></span><br><span class="line"><span class="comment">#     doc.apparent_encoding: 'GB2312'</span></span><br><span class="line"><span class="comment">#     doc.encoding: 'ISO-8859-1'</span></span><br></pre></td></tr></table></figure><h2 id="查看网页正确编码的方法"><a href="#查看网页正确编码的方法" class="headerlink" title="查看网页正确编码的方法"></a>查看网页正确编码的方法</h2><p>response.apparent_encoding 或者 chardet.detect(response.content)</p><p>requests的返回结果对象里有个apparent_encoding函数, apparent_encoding通过调用chardet.detect()来识别文本编码. 但是需要注意的是，这有些消耗计算资源.</p><p>正确的编码还可能存在于 meta 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gbk"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>python requests的utils.py里已经有个完善的从html中获取meta charset的函数. 说白了还是一对的正则表达式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: requests.utils.get_encodings_from_content(r.content)</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="string">'gbk'</span>]</span><br></pre></td></tr></table></figure><p>总之，网页乱码的情况下，可以用 response.apparent_encoding 获取正确编码xx，再用 response.encoding = ‘xx’ , 然后就能调用 response.text</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/35643926">Headers设置之Accept-Encoding - 知乎</a><br><a href="http://xiaorui.cc/archives/2786">代码分析Python requests库中文编码问题 – 峰云就她了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 屏保</title>
    <link href="https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html"/>
    <id>https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html</id>
    <published>2020-02-29T04:45:00.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>好多屏保不支持 10.14+</p><h2 id="Fractal-Clock-Screen-Saver"><a href="#Fractal-Clock-Screen-Saver" class="headerlink" title="*Fractal Clock Screen Saver"></a>*Fractal Clock Screen Saver</h2><p><img src="http://www.dqd.com/~mayoff/programs/FractalClock/shot-1.png" alt="这些年我在 Mac 上用过的 39 款精品屏保程序插图(27)"></p><p><a href="http://www.dqd.com/~mayoff/programs/FractalClock/">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;好多屏保不支持 10.14+&lt;/p&gt;
&lt;h2 id=&quot;Fractal-Clock-Screen-Saver&quot;&gt;&lt;a href=&quot;#Fractal-Clock-Screen-Saver&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>chrome 插件</title>
    <link href="https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html</id>
    <published>2020-02-28T11:50:49.000Z</published>
    <updated>2020-02-28T16:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BlockTube-Chrome-网上应用店"><a href="#BlockTube-Chrome-网上应用店" class="headerlink" title="BlockTube - Chrome 网上应用店"></a><a href="https://chrome.google.com/webstore/detail/blocktube/bbeaicapbccfllodepmimpkgecanonai">BlockTube - Chrome 网上应用店</a></h2><p>用很多规则屏蔽某些视频</p><h2 id="recent-history"><a href="#recent-history" class="headerlink" title="recent history"></a>recent history</h2><img src="https://i.loli.net/2020/02/28/MHvKZ7JEBD8xsNR.png" alt="MHvKZ7JEBD8xsNR" style="zoom:33%;" /><h2 id="JSON-Viewer-Awesome-Chrome-网上应用店"><a href="#JSON-Viewer-Awesome-Chrome-网上应用店" class="headerlink" title="JSON Viewer Awesome - Chrome 网上应用店"></a>JSON Viewer Awesome - Chrome 网上应用店</h2><h2 id="Linkclump-鼠标多选打开、复制标签页"><a href="#Linkclump-鼠标多选打开、复制标签页" class="headerlink" title="Linkclump-鼠标多选打开、复制标签页"></a>Linkclump-鼠标多选打开、复制标签页</h2><p>设置按住 z, 同时拖拽鼠标新标签页打开</p><p>c, 复制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BlockTube-Chrome-网上应用店&quot;&gt;&lt;a href=&quot;#BlockTube-Chrome-网上应用店&quot; class=&quot;headerlink&quot; title=&quot;BlockTube - Chrome 网上应用店&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://c
      
    
    </summary>
    
    
      <category term="Chrome" scheme="https://zronghui.github.io/categories/Chrome/"/>
    
    
  </entry>
  
  <entry>
    <title>第3讲：Kubernetes 核心概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:25.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】"><a href="#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】" class="headerlink" title="初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】"></a>初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre">木环</a> 2019-11-07 876浏览量</p><p><strong>简介：</strong> 本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。这个案例要在 Kubernetes 集群上部署一个名叫 guestbook 的 CURD 应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><h2 id="课后实践：Kubernetes-核心概念"><a href="#课后实践：Kubernetes-核心概念" class="headerlink" title="课后实践：Kubernetes 核心概念"></a>课后实践：Kubernetes 核心概念</h2><h3 id="1-目标概述"><a href="#1-目标概述" class="headerlink" title="1. 目标概述"></a>1. 目标概述</h3><p>本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。</p><ol><li>巩固 Kubernetes 的基本概念</li><li>学会使用 Kubernetes 部署一个标准的“多层（multi-tier）”应用</li><li>了解 Kubernetes 里如何通过 Pod，Deployment，Service 等 API 原语描述“应用”</li></ol><h3 id="2-实验概览"><a href="#2-实验概览" class="headerlink" title="2. 实验概览"></a>2. 实验概览</h3><p>完成此实验后，可以掌握的能力有：</p><p>本实验主要在 Kubernetes 集群上部署一个名叫 guestbook 留言簿的 CURD (增查改删)应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><p>实验分以下几个步骤：</p><ol><li>创建 Redis 主节点</li><li>创建 Redis 从节点集群</li><li>创建 guestbook 应用</li><li>将 guestbook 应用通过 Service 暴露出来并进行访问</li><li>水平扩展 guestbook 应用</li></ol><h3 id="3-所需资源："><a href="#3-所需资源：" class="headerlink" title="3. 所需资源："></a>3. 所需资源：</h3><p>一个完备的 Kubernetes 集群。您可以选择<a href="https://www.aliyun.com/product/kubernetes">阿里云容器服务Kubernetes（ACK）</a>进行上手操作。</p><p>可以用 Minikube 快速启动一个单节点集群（国内建议使用<a href="https://github.com/AliyunContainerService/minikube">Minikube 中国版</a>），也可以用云上的 Kubernetes 集群。本次实验演示将使用阿里云容器服务提供的 Kubernetes 集群，版本为 1.12。</p><p>你可以使用使用 <code>kubectl version</code> 查看你的集群版本同实验版本一致。</p><h3 id="4-实验详情"><a href="#4-实验详情" class="headerlink" title="4. 实验详情"></a>4. 实验详情</h3><h3 id="4-1-创建-Redis-主节点"><a href="#4-1-创建-Redis-主节点" class="headerlink" title="4.1 创建 Redis 主节点"></a>4.1 创建 Redis 主节点</h3><p>在这里，我们使用一个叫做 Deployment 的 API 对象，来描述单实例的Redis 主节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: master</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: master</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: master</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;redis</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>我们需要把这个上述内容保存为本地 YAML文件，名叫：<code>redis-master-deployment.yaml</code>。这个文件主要定义了两个东西：第一，Pod 里的容器的镜像是 <code>redis</code>；第二，这个 Deployment 的实例数（replicas）是 1，即指启动一个 Pod。</p><p>然后，我们使用 Kubernetes 的客户端，执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f  redis-master-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>这一步完成后，Kubernetes 就会按照这个 YAML 文件里的描述为你创建对应的 Pod。这种使用方式就是声明式 API 的典型特征。</p><p>接下来，我们可以查看到这个 Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running   0          49s</span><br></pre></td></tr></table></figure><p>可以看到，Pod 已经进入了 Running 状态，表示一切正常。这时，我们就可以查看这个 Pod 里的 Redis 的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f redis-master-68979f4ddd-pg9cv</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Redis version&#x3D;5.0.4, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server &#x2F;path&#x2F;to&#x2F;redis.conf</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Running mode&#x3D;standalone, port&#x3D;6379.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # Server initialized</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Ready to accept connections</span><br></pre></td></tr></table></figure><h4 id="4-2-为-Redis-主节点创建-Service"><a href="#4-2-为-Redis-主节点创建-Service" class="headerlink" title="4.2 为 Redis 主节点创建 Service"></a>4.2 为 Redis 主节点创建 Service</h4><p>Kubernetes 里要访问 Pod 最好通过 Service 的方式，这样客户端就不需要记录 Pod 的 IP 地址了。我们的 guestbook 网站需要访问 Redis 主节点的 Pod，所以也要通过 Service 来做。这个 Service API 对象的定义如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>这个 Service 名叫 <code>redis-master</code>，它声明用自己的 6379 端口代理 Pod 的 6379端口。</p><p>我们还是把上述内容保存成文件然后让 Kubernetes 为我们创建它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f redis-master-service.yaml</span><br><span class="line">service&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>然后我们可以查看一下这个 Service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   9s</span><br></pre></td></tr></table></figure><p>这时候，你就可以通过 <code>10.107.220.208:6379</code> 访问到这个 Redis 主节点。</p><h4 id="4-3-创建-Redis-从节点集群"><a href="#4-3-创建-Redis-从节点集群" class="headerlink" title="4.3 创建 Redis 从节点集群"></a>4.3 创建 Redis 从节点集群</h4><p>我们这个示例中，有多个 Redis 从节点来共同响应读请求。同样的，我们还是通过 Deployment 来描述”一个服务由多个相同的 Pod 实例副本组成”这种语义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: slave</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: slave</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: slave</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-redisslave:v1</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>在这个 Deployment 中，我们指定了 <code>replicas: 2</code>，即这个 Deployment 会启动两个相同 Pod（Redis 从节点）。</p><p>此外，<code>gb-redisslave:v1</code> 这个镜像，会自动读取 <code>REDIS_MASTER_SERVICE_HOST</code> 这个环境变量的值，也就是 Redis 主节点的 Service 地址，然后用它来组建集群。这个环境变量是Kubernetes 自动根据 redis-master 这个 Service 名字，自动注入到集群的每一个 Pod 当中的。</p><p>然后，我们创建 Redis 从节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-slave created</span><br></pre></td></tr></table></figure><p>这时候，我们就可以查看这些从节点的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS              RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running             0          17m</span><br><span class="line">redis-slave-78b464f5cd-2kn7w    0&#x2F;1     ContainerCreating   0          37s</span><br><span class="line">redis-slave-78b464f5cd-582bk    0&#x2F;1     ContainerCreating   0          37s</span><br></pre></td></tr></table></figure><h4 id="4-4-为-Redis-从节点创建-Service"><a href="#4-4-为-Redis-从节点创建-Service" class="headerlink" title="4.4 为 Redis 从节点创建 Service"></a>4.4 为 Redis 从节点创建 Service</h4><p>类似的，为了让 guestbook 应用访问上述 Redis 从节点，我们还需要为它们创建一个 Service。在Kubernetes 里，Service 可以通过 selector 选择代理多个 Pod，并且负责负载均衡。这个Service 内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>创建和查看 Service（ 注意：这里 6379 端口使用了简化写法，就不需要写明 targetPort了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-svc.yaml</span><br><span class="line">service&#x2F;redis-slave created</span><br><span class="line"></span><br><span class="line">$ kubectl get services</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   16m</span><br><span class="line">redis-slave    ClusterIP   10.101.244.239   &lt;none&gt;        6379&#x2F;TCP   57s</span><br></pre></td></tr></table></figure><p>这样，你就可以通过 <code>10.10.101.244:6379</code> 访问到任何一个 Redis 从节点了。</p><h4 id="4-5-创建-guestbook-应用"><a href="#4-5-创建-guestbook-应用" class="headerlink" title="4.5 创建 guestbook 应用"></a>4.5 创建 guestbook 应用</h4><p>guestbook 应用本身，依然通过一个 Deployment 来描述，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: guestbook</span><br><span class="line">      tier: frontend</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: guestbook</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: php-redis</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-frontend:v4</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>这个 YAML 定义了一个 3 副本的 Deployment，即 guestbook 应用会启动 3 个 Pod。</p><p>我们还是通过同样的步骤创建这个 Deployment：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend.yaml</span><br><span class="line">deployment.apps&#x2F;frontend created</span><br></pre></td></tr></table></figure><p>查看 Pod 的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          3m4s</span><br></pre></td></tr></table></figure><h4 id="4-6-为-guestbook-应用创建-Service"><a href="#4-6-为-guestbook-应用创建-Service" class="headerlink" title="4.6 为 guestbook 应用创建 Service"></a>4.6 为 guestbook 应用创建 Service</h4><p>为了能够让用户访问到 guestbook，我们也需要为 guestbook 来创建一个 Service，从而把这个应用以服务的形式暴露出来给用户使用。</p><p>而为了能够让 Kubernetes 集群以外的用户，这个 Service 就必须是一个外部可访问的 Service。这个在 Kubernetes 里有几种做法。在云上最常见的，是 LoadBalancer 模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  # 自建集群只能使用 NodePort 模式</span><br><span class="line">  # type: NodePort </span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br></pre></td></tr></table></figure><p>由于我的集群由阿里云容器服务提供，所以像上面这样直接用 LoadBalancer 模式即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend-service.yaml</span><br><span class="line">$ kubectl get service frontend</span><br><span class="line">NAME       TYPE        CLUSTER-IP      EXTERNAL-IP        PORT(S)        AGE</span><br><span class="line">frontend   ClusterIP   172.19.10.209   101.37.192.20     80:32372&#x2F;TCP   1m</span><br></pre></td></tr></table></figure><p>现在，你只要用浏览器打开 <code>EXTERNAL-IP</code> 对应的地址： <a href="http://101.37.192.20:31323/">http://101.37.192.20:31323</a> ，就可以访问到这个部署好的 guestbook 应用了。</p><p>而如果你是自建集群，那就只能用 NodePort 模式来实验（上面 YAML 的注释已经给出了使用方法）。需要注意的是 NodePort 由于安全性问题，不建议在生产环境中使用。</p><h4 id="4-7-水平扩展-guestbook-应用"><a href="#4-7-水平扩展-guestbook-应用" class="headerlink" title="4.7 水平扩展 guestbook 应用"></a>4.7 水平扩展 guestbook 应用</h4><p>要通过 Kubernetes 来水平扩展你的应用以响应更多的请求非常简单，只需要如下一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale deployment frontend --replicas&#x3D;5</span><br><span class="line">deployment.extensions&#x2F;frontend scaled</span><br></pre></td></tr></table></figure><p>你就会立刻看到你的 guestbook 应用的实例从 3 个变成了 5 个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-chxwd   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-jrvfx   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          14m</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot;&gt;&lt;a href=&quot;#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>第2讲：容器基本概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:12.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero"><a href="#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero" class="headerlink" title="你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]"></a>你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre?spm=a2c6h.12873639.0.0.16051fcfeERjS6">木环</a> 2019-11-07 106浏览量</p><p><strong>简介：</strong> 再也不要当容器小白了！Build ship and run！</p><h3 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h3><p>因为虚拟机（vm）存在一定不足，容器技术的诞生后才如此受欢迎。以传统的Java应用架构而言，将一个应用程序生成一个war包，放到一个tomcat容器当中并在一台虚拟机（VM）中启动运行，然后配置nginx的负载均衡策略，将来自用户的请求转发到某个tomcat应用上，这种基于主机或虚拟机部署的应用会存在以下问题：可移植性差、可维护性差、可扩展性差、无法资源隔离。扩展阅读</p><p>而容器是什么呢？它就是一个视图隔离、资源可限制、独立文件系统的进程集合。所谓“视图隔离”就是能够看到部分进程以及具有独立的主机名等；控制资源使用率则是可以对于内存大小以及 CPU 使用个数等进行限制。容器就是一个进程集合，它将系统的其他资源隔离开来，具有自己独立的资源视图。</p><p>容器具有一个独立的文件系统，因为使用的是系统的资源，所以在独立的文件系统内不需要具备内核相关的代码或者工具，我们只需要提供容器所需的二进制文件、配置文件以及依赖即可。只要容器运行时所需的文件集合都能够具备，那么这个容器就能够运行起来。<a href="https://developer.aliyun.com/article/718433">扩展阅读《详解 K8s 容器基本概念》</a></p><h3 id="什么是容器镜像？"><a href="#什么是容器镜像？" class="headerlink" title="什么是容器镜像？"></a>什么是容器镜像？</h3><p>从一个比较具体的角度去看，镜像就是一个多层存储的文件，相较于普通的ISO系统镜像来说，分层存储会带来两个优点：</p><ul><li>一个是<strong>分层存储的镜像比较容易扩展</strong>，比如我们可以基于一个Ubuntu镜像去构建我们的Nginx镜像，这样我们只需要在Ubuntu镜像的基础上面做一些Nginx的安装配置工作。一个Nginx镜像工作就算制作完成了，我们不需要从头开始去制作各种镜像。</li><li>另一点是可以<strong>优化镜像存储空间</strong>，假如我们有两个镜像，Tag1.0镜像和 Tag2.0镜像，我们如果以传统方式去传这两个镜像，每个镜像大概130多兆，但如果我们以分层的方式去存储两个镜像，我们通过下面两个紫色的才能共享，可以节约大量的空间，两个镜像加起来只需要140多兆的空间就可以存下来。这样一是节省了存储空间，二是可以减少网络上的开销，比如我们已经把下面镜像下载了，我们要去下载上面镜像的时候，我们只需要去下10M的部分。</li></ul><p>如果从抽象的角度去看，<strong>Docker镜像其实是Docker提供的一种标准化的交付手段</strong>，<strong>传统应用在交付的时候其实是交付一个可执行文j件</strong>。问题在于传统方式的这个可执行文件不包括它的运行环境，我们可能会因为32位系统或64位系统，或者开发测试使用1.0软件，结果交付时候发现用户的环境是2.0等各种各样的问题，导致我们要去花时间去排查；但是，如果我们以Docker镜像的标准化形式去交付，我们就会避免掉这些问题。</p><p>扩展阅读《<a href="https://yq.aliyun.com/articles/219139">Docker 镜像优化与最佳实践</a>》</p><p>*<em>好了，闲话少叙。下面开始实验时间。<br>*</em></p><h3 id="1-实验概述"><a href="#1-实验概述" class="headerlink" title="1. 实验概述"></a>1. 实验概述</h3><p>本实验会使用 Dockerfile 将下面 golang 代码构建成镜像，并通过阿里云镜像服务将镜像分发到阿里云虚拟机，运行该镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实验目标"><a href="#2-实验目标" class="headerlink" title="2. 实验目标"></a>2. 实验目标</h3><p>完成此实验后，可以掌握的能力有：</p><ol><li>Dockerfile 编写和使用</li><li>使用阿里云镜像服务来分发镜像。</li></ol><blockquote><p>NOTE: 学前建议: 了解 docker 的基本操作命令 以及 如何使用 ECS 实例。</p></blockquote><h3 id="3-实验详情"><a href="#3-实验详情" class="headerlink" title="3. 实验详情"></a>3. 实验详情</h3><h4 id="3-1-准备应用代码和-Dockerfile"><a href="#3-1-准备应用代码和-Dockerfile" class="headerlink" title="3.1 准备应用代码和 Dockerfile"></a>3.1 准备应用代码和 Dockerfile</h4><p>首先在本地生成一个文件夹 <code>demo</code>，并将 golang 代码拷贝到 <code>demo</code> 文件夹下的 <code>main.go</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">main.go</span><br><span class="line"></span><br><span class="line">$ cat main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前 <code>demo</code> 目录下编写 Dockerfile ，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM golang:1.12-alpine</span><br><span class="line"></span><br><span class="line"># change current working dir</span><br><span class="line">WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line"></span><br><span class="line"># copy main.go into &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># go build and install the app</span><br><span class="line">RUN go install -v .&#x2F;...</span><br><span class="line"></span><br><span class="line"># run the app by default</span><br><span class="line">CMD [&quot;app&quot;]</span><br></pre></td></tr></table></figure><h4 id="3-2-构建镜像"><a href="#3-2-构建镜像" class="headerlink" title="3.2 构建镜像"></a>3.2 构建镜像</h4><p>通常情况下，使用以下命令即可构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line"># demo:v1 表示镜像名字demo和标签v1</span><br><span class="line">$ docker build . -t demo:v1</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1&#x2F;5 : FROM golang:1.12-alpine</span><br><span class="line"> ---&gt; 8ff3fd35cf82</span><br><span class="line">Step 2&#x2F;5 : WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">Removing intermediate container ffd88a948413</span><br><span class="line"> ---&gt; 1056ea513b89</span><br><span class="line">Step 3&#x2F;5 : COPY . .</span><br><span class="line"> ---&gt; 9fc4655c973a</span><br><span class="line">Step 4&#x2F;5 : RUN go install -v .&#x2F;...</span><br><span class="line"> ---&gt; Running in 928fc776a6e1</span><br><span class="line">app</span><br><span class="line">Removing intermediate container 928fc776a6e1</span><br><span class="line"> ---&gt; a93f17a3a726</span><br><span class="line">Step 5&#x2F;5 : CMD [&quot;app&quot;]</span><br><span class="line"> ---&gt; Running in 9e3463aa81f6</span><br><span class="line">Removing intermediate container 9e3463aa81f6</span><br><span class="line"> ---&gt; 8697c7279c74</span><br><span class="line">Successfully built 8697c7279c74</span><br><span class="line">Successfully tagged demo:v1</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:</p><p>在国内访问 Docker Hub 速度比较慢，可以在Docker引擎中设置镜像加速器加速对Docker Hub的访问。</p><p>更新 <code>/etc/docker/daemon.json</code>，添加如下参数，并重启Docker引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建完毕之后，可以在本地运行验证下是否符合预期</span><br></pre></td></tr></table></figure><h1 id="映射容器内-80-端到宿主机上的-8000-端口"><a href="#映射容器内-80-端到宿主机上的-8000-端口" class="headerlink" title="映射容器内 80 端到宿主机上的 8000 端口"></a>映射容器内 80 端到宿主机上的 8000 端口</h1><p>$ docker run -d -p 8000:80 demo:v1</p><h1 id="curl-一下查看结果"><a href="#curl-一下查看结果" class="headerlink" title="curl 一下查看结果"></a>curl 一下查看结果</h1><p>$ curl localhost:8000<br>Hello! World</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">如果看到 &#96;Hello! World&#96; 字样，我们就可以进入下一个环节了。</span><br><span class="line"></span><br><span class="line">#### 3.3 推送镜像至阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">在推送之前，需要注册阿里云账号和开通阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">&gt; 阿里云注册链接： [注册阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;register&#x2F;register.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云登录链接： [登录阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;login&#x2F;login.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云容器镜像服务页面： [访问阿里云容器镜像服务](https:&#x2F;&#x2F;cr.console.aliyun.com) </span><br><span class="line">&gt; </span><br><span class="line">&gt; 容器镜像服务（Container Registry）提供安全的应用镜像托管能力，精确的镜像安全扫描功能，稳定的国内外镜像构建服务，便捷的镜像授权功能，方便用户进行镜像全生命周期管理。</span><br><span class="line"></span><br><span class="line">当我们拥有阿里云容器镜像服务账号之后呢，可以使用 docker 客户端来登陆服务。</span><br></pre></td></tr></table></figure><p>$ docker login -username=**** registry.cn-hangzhou.aliyuncs.com<br>Password:<br>Login Succeeded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在推送到镜像之前，需要将本地镜像修改为对应的镜像仓库地址：</span><br></pre></td></tr></table></figure><h1 id="mydemo-可以替换成自己的命名空间"><a href="#mydemo-可以替换成自己的命名空间" class="headerlink" title="mydemo 可以替换成自己的命名空间"></a>mydemo 可以替换成自己的命名空间</h1><p>$ docker tag demo:v1 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><p>$ docker push registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.4 登陆阿里云 ECS 机器来下载 demo:v1 镜像</span><br><span class="line"></span><br><span class="line">登陆 ECS 实例，通过 docker pull 来下载镜像</span><br></pre></td></tr></table></figure><h1 id="mydemo-请替换成-3-3-步骤中指定的命令空间"><a href="#mydemo-请替换成-3-3-步骤中指定的命令空间" class="headerlink" title="mydemo 请替换成 3.3 步骤中指定的命令空间"></a>mydemo 请替换成 3.3 步骤中指定的命令空间</h1><p>$ docker pull registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载完毕之后，我们就可以直接运行该镜像</span><br></pre></td></tr></table></figure><p>$ docker run -d -p 8000:80 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">并查看 ECS 机器的 &#96;8000&#96; 端口</span><br></pre></td></tr></table></figure><p>$ curl localhost:8000</p><p>另外，可以移步 <a href="https://edu.aliyun.com/lab/courses/a5519593714148358845ab3ce19ef996/detail">《课后实践：应用容器构建与部署》</a><br>直接在阿里云大学沙箱实验环境中尝试哦！！</p><p><strong>本文由阿里云容器云平台团队撰写，如有问题或希望转载还请与我们沟通，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot;&gt;&lt;a href=&quot;#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot; class=&quot;headerlink&quot; title=&quot;你的第一个容器镜像，构建
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
</feed>
