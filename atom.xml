<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-07-20T16:25:25.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 498. Diagonal Traverse</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-4**/leetcode-498-Diagonal-Traverse.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-4**/leetcode-498-Diagonal-Traverse.html</id>
    <published>2020-07-20T15:12:44.000Z</published>
    <updated>2020-07-20T16:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/diagonal-traverse/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/diagonal-traverse/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a matrix of M x N elements (M rows, N columns), return all elements of<br>the matrix in diagonal order as shown in the below image.</p><p><strong>Example:</strong></p><pre><code>Input:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]Output:  [1,2,4,7,5,3,6,8,9]Explanation:![](https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png)</code></pre><p><strong>Note:</strong></p><p>The total number of elements of the given matrix will not exceed 10,000.</p><p><strong>Tags:</strong> </p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/diagonal-traverse/">498. 对角线遍历 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/diagonal-traverse/solution/dui-xiang-xian-heng-lie-zuo-biao-zhi-he-xiang-deng/">对象线横列坐标之和相等 - 对角线遍历 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDiagonalOrder</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix: <span class="keyword">return</span> []</span><br><span class="line">        n, m = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>: <span class="keyword">return</span> matrix[<span class="number">0</span>]</span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                d[i+j].append(matrix[i][j])</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m+n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i&amp;<span class="number">1</span>: res.extend(d[i])</span><br><span class="line">            <span class="keyword">else</span>: res.extend(d[i][::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/diagonal-traverse/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/diagonal-traverse/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a matrix of M x N elements (M rows, N columns), return all elements of&lt;br&gt;the matrix in diagonal order as shown in the below image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]

Explanation:
![](https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The total number of elements of the given matrix will not exceed 10,000.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-4**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-4/"/>
    
    
  </entry>
  
  <entry>
    <title>随机</title>
    <link href="https://zronghui.github.io/%E9%9A%8F%E6%9C%BA.html"/>
    <id>https://zronghui.github.io/%E9%9A%8F%E6%9C%BA.html</id>
    <published>2020-07-20T08:06:04.000Z</published>
    <updated>2020-07-20T16:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="710-黑名单中的随机数-力扣（LeetCode）"><a href="#710-黑名单中的随机数-力扣（LeetCode）" class="headerlink" title="710. 黑名单中的随机数 - 力扣（LeetCode）"></a>710. 黑名单中的随机数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-with-blacklist/">710. 黑名单中的随机数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, N: int, blacklist: List[int])</span>:</span></span><br><span class="line">         self.n = N-len(blacklist)</span><br><span class="line">         a = (i <span class="keyword">for</span> i <span class="keyword">in</span> blacklist <span class="keyword">if</span> i&lt;self.n)</span><br><span class="line">         b = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n, N) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> blacklist)</span><br><span class="line">         self.m = dict(zip(a, b))</span><br><span class="line">        <span class="comment">#  print(self.m)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 核心思想，将 0~self.n-1 中在 blacklist 的元素映射到 self.n~N-1 不在 blacklist 的元素</span></span><br><span class="line">        r = random.randint(<span class="number">0</span>, self.n<span class="number">-1</span>) <span class="comment"># [0, self.n-1]</span></span><br><span class="line">        <span class="keyword">return</span> r <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> self.m <span class="keyword">else</span> self.m[r]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(N, blacklist)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick()</span></span><br></pre></td></tr></table></figure><h3 id="398-随机数索引-力扣（LeetCode）"><a href="#398-随机数索引-力扣（LeetCode）" class="headerlink" title="398. 随机数索引 - 力扣（LeetCode）"></a>398. 随机数索引 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-index/">398. 随机数索引 - 力扣（LeetCode）</a></p><p>搞笑解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        self.d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            self.d[num].append(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.d[target])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(nums)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick(target)</span></span><br></pre></td></tr></table></figure><h4 id="考点：蓄水池抽样"><a href="#考点：蓄水池抽样" class="headerlink" title="考点：蓄水池抽样"></a>考点：蓄水池抽样</h4><p>不知道共几个数，比如共 12345 5 个数字，逐个遍历：</p><p>遍历到 1 1/1 的概率取 1</p><p>遍历到 2 1/2 的概率取 2 (1/2 的概率不取)</p><p>遍历到 3 1/3 的概率取 3</p><p>遍历到 4 1/4 的概率取 4</p><p>遍历到 5 1/5 的概率取 5</p><p>返回最后取的数</p><p>证明：取每个数的概率都一致</p><p>对 5 而言，就是 1/5 概率</p><p>对 4 而言，遍历到 4 随机取到 4 概率 1/4 ，但是遍历到 5 时, 没有随机到 5 的概率 4/5</p><p>5：1/5 == 4: 1/4 * 4/5 == 3: 1/3 *3/4 * 4/5</p><p>（1）计数器count记录target值个数</p><p>（2）以1/count的概率抽样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, target: int)</span> -&gt; int:</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span> <span class="comment"># res 一定存在</span></span><br><span class="line">        <span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(self.nums):</span><br><span class="line">            <span class="keyword">if</span> i==target:</span><br><span class="line">                t = random.randint(<span class="number">0</span>, cnt)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t==<span class="number">0</span>: res = index</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="528-按权重随机选择-力扣（LeetCode）"><a href="#528-按权重随机选择-力扣（LeetCode）" class="headerlink" title="528. 按权重随机选择 - 力扣（LeetCode）"></a>528. 按权重随机选择 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-with-weight/submissions/">528. 按权重随机选择 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, w: List[int])</span>:</span></span><br><span class="line">        n = len(w)</span><br><span class="line">        self.presum = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(w): </span><br><span class="line">            self.presum[i+<span class="number">1</span>] = self.presum[i]+v</span><br><span class="line">        print(self.presum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickIndex</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        r = random.randint(<span class="number">1</span>, self.presum[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> bisect.bisect_left(self.presum, r)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(w)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pickIndex()</span></span><br></pre></td></tr></table></figure><h3 id="478-在圆内随机生成点-力扣（LeetCode）"><a href="#478-在圆内随机生成点-力扣（LeetCode）" class="headerlink" title="478. 在圆内随机生成点 - 力扣（LeetCode）"></a>478. 在圆内随机生成点 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/generate-random-point-in-a-circle/submissions/">478. 在圆内随机生成点 - 力扣（LeetCode）</a></p><p>注意 离圆心距离的随机 ，math.sqrt(random.random())</p><p><a href="https://leetcode-cn.com/problems/generate-random-point-in-a-circle/solution/zai-yuan-nei-sui-ji-sheng-cheng-dian-by-leetcode/">在圆内随机生成点 - 在圆内随机生成点 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        <span class="comment"># 离圆心距离随机</span></span><br><span class="line">        r = math.sqrt(random.random())*self.r</span><br><span class="line">        <span class="comment"># 角度随机</span></span><br><span class="line">        angel = random.random()*math.pi*<span class="number">2</span></span><br><span class="line">        x, y = r*math.cos(angel), r*math.sin(angel)</span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><p>或者围绕圆心的正方形内随机取，不再圆内则继续取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line">        self.r2 = self.r*self.r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        x = y = self.r</span><br><span class="line">        <span class="keyword">while</span> x*x+y*y&gt;self.r2:</span><br><span class="line">            x = -self.r+<span class="number">2</span>*self.r*random.random() <span class="comment"># [-self.r, self.r] 内随机</span></span><br><span class="line">            y = -self.r+<span class="number">2</span>*self.r*random.random()</span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><p>random.uniform(a, b) 是 float 的随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line">        self.r2 = self.r*self.r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        x = y = self.r</span><br><span class="line">        <span class="keyword">while</span> x*x+y*y&gt;self.r2:</span><br><span class="line">            x, y = random.uniform(-self.r, self.r), random.uniform(-self.r, self.r)</span><br><span class="line">            <span class="comment"># x = -self.r+2*self.r*random.random() # [-self.r, self.r] 内随机</span></span><br><span class="line">            <span class="comment"># y = -self.r+2*self.r*random.random()</span></span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><h3 id="497-非重叠矩形中的随机点-力扣（LeetCode）"><a href="#497-非重叠矩形中的随机点-力扣（LeetCode）" class="headerlink" title="497. 非重叠矩形中的随机点 - 力扣（LeetCode）"></a>497. 非重叠矩形中的随机点 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles/">497. 非重叠矩形中的随机点 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles/solution/pythonshi-xian-by-lyncien-2/">Python实现 - 非重叠矩形中的随机点 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rects: List[List[int]])</span>:</span></span><br><span class="line">        n = len(rects)</span><br><span class="line">        self.rects = rects</span><br><span class="line">        self.presum = [<span class="number">0</span>]*n <span class="comment"># weight pre sum</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(rects):</span><br><span class="line">            s += (v[<span class="number">2</span>]-v[<span class="number">0</span>]+<span class="number">1</span>)*(v[<span class="number">3</span>]-v[<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            self.presum[i] = s</span><br><span class="line">        print(self.presum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span> -&gt; List[int]:</span></span><br><span class="line">        r = bisect.bisect_left(self.presum, randint(<span class="number">1</span>, self.presum[<span class="number">-1</span>]))</span><br><span class="line">        rect = self.rects[r]</span><br><span class="line">        <span class="keyword">return</span> [randint(rect[<span class="number">0</span>], rect[<span class="number">2</span>]), randint(rect[<span class="number">1</span>], rect[<span class="number">3</span>])]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 312. Burst Balloons</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-3**/leetcode-312-Burst-Balloons.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-3**/leetcode-312-Burst-Balloons.html</id>
    <published>2020-07-19T13:13:39.000Z</published>
    <updated>2020-07-20T16:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/burst-balloons/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/burst-balloons/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a<br>number on it represented by array <code>nums</code>. You are asked to burst all the<br>balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] *nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After<br>the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p><p>Find the maximum coins you can collect by bursting the balloons wisely.</p><p><strong>Note:</strong></p><ul><li>You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.</li><li>0 ≤ <code>n</code> ≤ 500, 0 ≤ <code>nums[i]</code> ≤ 100</li></ul><p><strong>Example:</strong></p><pre><code>Input: [3,1,5,8]Output: 167 Explanation:nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167</code></pre><p><strong>Tags:</strong> Divide and Conquer, Dynamic Programming</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p>参考： <a href="https://leetcode-cn.com/problems/burst-balloons/solution/dong-tai-gui-hua-tao-lu-jie-jue-chuo-qi-qiu-wen-ti/">动态规划套路解决戳气球问题 - 戳气球 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">maxCoins</span><span class="params">(self, nums: List[<span class="keyword">int</span>])</span> -&gt; <span class="keyword">int</span>:</span></span><br><span class="line"><span class="function">        nums </span>= [<span class="number">1</span>, *nums, <span class="number">1</span>]</span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [[<span class="number">0</span>]*<span class="function">n <span class="keyword">for</span> _ in <span class="title">range</span><span class="params">(n)</span>]</span></span><br><span class="line"><span class="function">        <span class="keyword">for</span> i in <span class="title">reversed</span><span class="params">(range(n<span class="number">-1</span>)</span>):</span></span><br><span class="line"><span class="function">            <span class="keyword">for</span> j in <span class="title">range</span><span class="params">(i+<span class="number">1</span>, n)</span>:</span></span><br><span class="line"><span class="function">                <span class="keyword">for</span> k in <span class="title">range</span><span class="params">(i+<span class="number">1</span>, j)</span>:</span></span><br><span class="line"><span class="function">                    dp[i][j] </span>= max(dp[i][j], dp[i][k]+dp[k][j]+nums[i]*nums[j]*nums[k])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/burst-balloons/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; balloons, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;. Each balloon is painted with a&lt;br&gt;number on it represented by array &lt;code&gt;nums&lt;/code&gt;. You are asked to burst all the&lt;br&gt;balloons. If the you burst balloon &lt;code&gt;i&lt;/code&gt; you will get &lt;code&gt;nums[left] * nums[i] *
nums[right]&lt;/code&gt; coins. Here &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; are adjacent indices of &lt;code&gt;i&lt;/code&gt;. After&lt;br&gt;the burst, the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; then becomes adjacent.&lt;/p&gt;
&lt;p&gt;Find the maximum coins you can collect by bursting the balloons wisely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may imagine &lt;code&gt;nums[-1] = nums[n] = 1&lt;/code&gt;. They are not real therefore you can not burst them.&lt;/li&gt;
&lt;li&gt;0 ≤ &lt;code&gt;n&lt;/code&gt; ≤ 500, 0 ≤ &lt;code&gt;nums[i]&lt;/code&gt; ≤ 100&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,1,5,8]
Output: 167 
Explanation:nums = [3,1,5,8] --&amp;gt; [3,5,8] --&amp;gt;   [3,8]   --&amp;gt;  [8]  --&amp;gt; []
             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Divide and Conquer, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-3**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-3/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Divide and Conquer" scheme="https://zronghui.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-198</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-198.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-198.html</id>
    <published>2020-07-19T08:54:00.000Z</published>
    <updated>2020-07-19T14:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-198/problems/water-bottles/">换酒问题</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-198/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/">子树中标签相同的节点数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-198/problems/maximum-number-of-non-overlapping-substrings/">最多的不重叠子字符串</a><strong>6</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-198/problems/find-a-value-of-a-mysterious-function-closest-to-target/">找到最接近目标值的函数值</a></li></ul><p><img src="https://i.loli.net/2020/07/19/a5g9BFr7NnPzyqZ.png" alt="image-20200719165557696"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWaterBottles</span><span class="params">(self, n: int, x: int)</span> -&gt; int:</span></span><br><span class="line">        kong = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">0</span> <span class="keyword">or</span> kong&gt;=x:</span><br><span class="line">            res += n</span><br><span class="line">            kong += n</span><br><span class="line">            n = kong//x</span><br><span class="line">            kong -= n*x</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>写的有点复杂，构造图 -&gt; 构造树 -&gt; 从叶子节点向 root 更新字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubTrees</span><span class="params">(self, n: int, edges: List[List[int]], labels: str)</span> -&gt; List[int]:</span></span><br><span class="line">        res = [<span class="number">1</span>]*n</span><br><span class="line">        <span class="comment"># 构造图</span></span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> edges:</span><br><span class="line">            d[a].append(b)</span><br><span class="line">            d[b].append(a)</span><br><span class="line">        <span class="comment"># 从0入手，构造树</span></span><br><span class="line">        tree = [[<span class="number">0</span>]] <span class="comment"># tree 是层次遍历结果</span></span><br><span class="line">        s = set()</span><br><span class="line">        s.add(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># print(d)</span></span><br><span class="line">        <span class="keyword">while</span> len(s)!=n:</span><br><span class="line">            t = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tree[<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> reversed(d[i]):</span><br><span class="line">                    <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                        t.append(j)</span><br><span class="line">                        s.add(j)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        d[i].remove(j)</span><br><span class="line">            tree.append(t)</span><br><span class="line">        <span class="comment"># 构造一个 i-&gt;&#123;'x': cnt, &#125;</span></span><br><span class="line">        m = &#123;i:&#123;&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(n)&#125;        </span><br><span class="line">        <span class="comment"># print(d, tree, s)</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(l, m)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l:</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">            cur = m[l.pop()]</span><br><span class="line">            <span class="keyword">while</span> l:</span><br><span class="line">                nxt = m[l.pop()]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> nxt:</span><br><span class="line">                    <span class="keyword">if</span> i <span class="keyword">in</span> cur:</span><br><span class="line">                        cur[i] += nxt[i]</span><br><span class="line">                    <span class="keyword">else</span>: cur[i] = nxt[i]</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 先处理根节点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tree.pop():</span><br><span class="line">            m[i] = &#123;labels[i]:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">while</span> tree:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tree.pop():</span><br><span class="line">                m[i] = update(d[i], m)</span><br><span class="line">                m[i][labels[i]] = m[i].get(labels[i], <span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">                res[i] = m[i][labels[i]]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>根据别人的代码优化：</p><p><a href="https://leetcode-cn.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/solution/bfsyan-du-you-xian-bian-li-liang-chong-qu-zhong-fa/">DFS深度优先遍历-两种去重方式（Python） - 子树中标签相同的节点数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict, Counter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubTrees</span><span class="params">(self, n: int, edges: List[List[int]], labels: str)</span> -&gt; List[int]:</span></span><br><span class="line">        m = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> edges:</span><br><span class="line">            m[a].append(b)</span><br><span class="line">            m[b].append(a)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs1</span><span class="params">(cur)</span>:</span></span><br><span class="line">            data = Counter(&#123;labels[cur]: <span class="number">1</span>&#125;)</span><br><span class="line">            vised[cur] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> m[cur]:</span><br><span class="line">                <span class="keyword">if</span> vised[i]: <span class="keyword">continue</span></span><br><span class="line">                data += dfs1(i)</span><br><span class="line">            res[cur] = data[labels[cur]]</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs2</span><span class="params">(cur, pre)</span>:</span></span><br><span class="line">            data = Counter(&#123;labels[cur]: <span class="number">1</span>&#125;)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> m[cur]:</span><br><span class="line">                <span class="keyword">if</span> i==pre: <span class="keyword">continue</span></span><br><span class="line">                data += dfs2(i, cur)</span><br><span class="line">            res[cur] = data[labels[cur]]</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">        res = [<span class="number">1</span>]*n</span><br><span class="line">        <span class="comment"># 1. 用 visited 数组记录</span></span><br><span class="line">        <span class="comment"># vised = [False]*n</span></span><br><span class="line">        <span class="comment"># dfs1(0)</span></span><br><span class="line">        <span class="comment"># 记录父节点(pre)</span></span><br><span class="line">        dfs2(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>参考：<a href="https://es2q.com/blog/2020/07/19/leetcode-weekly-198/">力扣周赛 198 - python 解答 | 我的博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestToTarget</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># &amp; 的性质: 数越 &amp; 越小；0 与所有数 &amp; 都是 0; x&amp;x=x</span></span><br><span class="line">        <span class="comment"># 利用 x&amp;x=x 去除相邻的相同数字</span></span><br><span class="line">        arr = [arr[<span class="number">0</span>], *(v <span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(arr[<span class="number">1</span>:]) <span class="keyword">if</span> v!=arr[i<span class="number">-1</span>])]</span><br><span class="line">        res = sys.maxsize</span><br><span class="line">        n = len(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            cur = arr[i]</span><br><span class="line">            res = min(res, abs(cur-target)) <span class="comment"># l==r 的情况</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">                cur &amp;= arr[j]</span><br><span class="line">                res = min(res, abs(cur-target))</span><br><span class="line">                <span class="keyword">if</span> res==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> cur==<span class="number">0</span> <span class="keyword">or</span> cur&lt;target: <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 1. 0 与所有数 &amp; 都是 0</span></span><br><span class="line">                <span class="comment"># 2. 数越 &amp; 越小-&gt; 若已经小于 target，再往后只能更小于 target, abs(x-target) 也更大</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-198/problems/water-bottles/&quot;&gt;换酒问题&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-198/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/&quot;&gt;子树中标签相同的节点数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-198/problems/maximum-number-of-non-overlapping-substrings/&quot;&gt;最多的不重叠子字符串&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-198/problems/find-a-value-of-a-mysterious-function-closest-to-target/&quot;&gt;找到最接近目标值的函数值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/19/a5g9BFr7NnPzyqZ.png&quot; alt=&quot;image-20200719165557696&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://zronghui.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html"/>
    <id>https://zronghui.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html</id>
    <published>2020-07-17T13:20:44.000Z</published>
    <updated>2020-07-20T16:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://leetcode-cn.com/tag/binary-search/">二分查找 - 力扣（LeetCode）</a></p><a id="more"></a><p>其实只要<strong>注意边界问题，不陷入死循环</strong>，基本就能解题，根本不用看超长的题解，还有什么超长的打油诗</p><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><h3 id="面试题-10-05-稀疏数组搜索-力扣（LeetCode）"><a href="#面试题-10-05-稀疏数组搜索-力扣（LeetCode）" class="headerlink" title="面试题 10.05. 稀疏数组搜索 - 力扣（LeetCode）"></a>面试题 10.05. 稀疏数组搜索 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/sparse-array-search-lcci/submissions/">面试题 10.05. 稀疏数组搜索 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findString</span><span class="params">(self, words: List[str], s: str)</span> -&gt; int:</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(words)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> words[mid]==<span class="string">''</span> <span class="keyword">and</span> mid&lt;r:</span><br><span class="line">                mid += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> words[mid]==<span class="string">''</span>: r = (l+r)//<span class="number">2</span><span class="number">-1</span> <span class="comment"># [mid'~r] 都是 ''</span></span><br><span class="line">            <span class="keyword">elif</span> words[mid]&gt;s: r = (l+r)//<span class="number">2</span><span class="number">-1</span> <span class="comment"># [mid'~mid-1] 都是 ''</span></span><br><span class="line">            <span class="keyword">elif</span> words[mid]&lt;s: l = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="374-猜数字大小-力扣（LeetCode）"><a href="#374-猜数字大小-力扣（LeetCode）" class="headerlink" title="374. 猜数字大小 - 力扣（LeetCode）"></a>374. 猜数字大小 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">374. 猜数字大小 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The guess API is already defined for you.</span></span><br><span class="line"><span class="comment"># @param num, your guess</span></span><br><span class="line"><span class="comment"># @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class="line"><span class="comment"># def guess(num: int) -&gt; int:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guessNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        l, r = <span class="number">0</span>, n</span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> guess(mid)==<span class="number">0</span>: <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> guess(mid)==<span class="number">1</span>: l = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: r = mid<span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="367-有效的完全平方数-力扣（LeetCode）"><a href="#367-有效的完全平方数-力扣（LeetCode）" class="headerlink" title="367. 有效的完全平方数 - 力扣（LeetCode）"></a>367. 有效的完全平方数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/valid-perfect-square/">367. 有效的完全平方数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span><span class="params">(self, num: int)</span> -&gt; bool:</span></span><br><span class="line">        l, r = <span class="number">1</span>, num//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r)//<span class="number">2</span></span><br><span class="line">            multiply = mid*mid</span><br><span class="line">            <span class="keyword">if</span> multiply==num: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> multiply&gt;num: r = mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> <span class="keyword">if</span> num!=<span class="number">1</span> <span class="keyword">else</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="852-山脉数组的峰顶索引-力扣（LeetCode）"><a href="#852-山脉数组的峰顶索引-力扣（LeetCode）" class="headerlink" title="852. 山脉数组的峰顶索引 - 力扣（LeetCode）"></a>852. 山脉数组的峰顶索引 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">852. 山脉数组的峰顶索引 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peakIndexInMountainArray</span><span class="params">(self, a: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 找出第一个比右边相邻数大的位置</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(a)<span class="number">-1</span></span><br><span class="line">        <span class="comment"># 0 1 2 3 4 5 4 3 2 1 0</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a[mid]&lt;a[mid+<span class="number">1</span>]: l = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: r = mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><h3 id="1237-找出给定方程的正整数解-力扣（LeetCode）"><a href="#1237-找出给定方程的正整数解-力扣（LeetCode）" class="headerlink" title="1237. 找出给定方程的正整数解 - 力扣（LeetCode）"></a>1237. 找出给定方程的正整数解 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-positive-integer-solution-for-a-given-equation/">1237. 找出给定方程的正整数解 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">   This is the custom function interface.</span></span><br><span class="line"><span class="string">   You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="string">   class CustomFunction:</span></span><br><span class="line"><span class="string">       # Returns f(x, y) for any given positive integers x and y.</span></span><br><span class="line"><span class="string">       # Note that f(x, y) is increasing with respect to both x and y.</span></span><br><span class="line"><span class="string">       # i.e. f(x, y) &lt; f(x + 1, y), f(x, y) &lt; f(x, y + 1)</span></span><br><span class="line"><span class="string">       def f(self, x, y):</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSolution</span><span class="params">(self, customfunction: <span class="string">'CustomFunction'</span>, z: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 相当于在一个 sorted matrix 里寻找 target 的位置</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">            l, r = <span class="number">1</span>, <span class="number">1000</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">                mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">                fres = customfunction.f(i, mid)</span><br><span class="line">                <span class="keyword">if</span> fres==z:</span><br><span class="line">                    res.append([i, mid])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> fres&gt;z: r = mid<span class="number">-1</span></span><br><span class="line">                <span class="keyword">else</span>: l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="1351-统计有序矩阵中的负数-力扣（LeetCode）"><a href="#1351-统计有序矩阵中的负数-力扣（LeetCode）" class="headerlink" title="1351. 统计有序矩阵中的负数 - 力扣（LeetCode）"></a>1351. 统计有序矩阵中的负数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix/submissions/">1351. 统计有序矩阵中的负数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNegatives</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># [[4,3,2,-1],</span></span><br><span class="line">        <span class="comment">#  [3,2,1,-1],</span></span><br><span class="line">        <span class="comment">#  [1,1,-1,-2],</span></span><br><span class="line">        <span class="comment">#  [-1,-1,-2,-3]]</span></span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        l = <span class="number">0</span> <span class="comment"># l 从下到上递增, 故保存</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(n)):</span><br><span class="line">            r = m<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">                <span class="keyword">if</span> grid[i][l]&lt;<span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">                mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid[i][mid]&gt;=<span class="number">0</span>: l = mid+<span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> grid[i][mid]&lt;<span class="number">0</span>: r = mid</span><br><span class="line">                <span class="keyword">else</span>: r -= <span class="number">1</span></span><br><span class="line">            res += m-l</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="744-寻找比目标字母大的最小字母-力扣（LeetCode）"><a href="#744-寻找比目标字母大的最小字母-力扣（LeetCode）" class="headerlink" title="744. 寻找比目标字母大的最小字母 - 力扣（LeetCode）"></a>744. 寻找比目标字母大的最小字母 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target/submissions/">744. 寻找比目标字母大的最小字母 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreatestLetter</span><span class="params">(self, letters: List[str], target: str)</span> -&gt; str:</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(letters)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">if</span> letters[l]&gt;target: <span class="keyword">return</span> letters[l]</span><br><span class="line">            mid = (l+r)&gt;&gt;<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> letters[mid]&gt;target: r = mid</span><br><span class="line">            <span class="keyword">elif</span> letters[mid]&lt;=target: l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="1337-方阵中战斗力最弱的-K-行-力扣（LeetCode）"><a href="#1337-方阵中战斗力最弱的-K-行-力扣（LeetCode）" class="headerlink" title="1337. 方阵中战斗力最弱的 K 行 - 力扣（LeetCode）"></a>1337. 方阵中战斗力最弱的 K 行 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/submissions/">1337. 方阵中战斗力最弱的 K 行 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kWeakestRows</span><span class="params">(self, mat: List[List[int]], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        h = [] <span class="comment"># 存放 (战斗力, i)</span></span><br><span class="line">        n, m = len(mat), len(mat[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            l, r = <span class="number">0</span>, m<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                mid = (l+r)//<span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> r==<span class="number">-1</span> <span class="keyword">or</span> mat[i][r]==<span class="number">1</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>: r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> mat[i][mid]==<span class="number">0</span>: r=mid<span class="number">-1</span></span><br><span class="line">                <span class="keyword">elif</span> mat[i][mid]==<span class="number">1</span>: l=mid</span><br><span class="line">            h.append((r, i))</span><br><span class="line">        <span class="keyword">return</span> [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> heapq.nsmallest(k, h, key=operator.itemgetter(<span class="number">0</span>, <span class="number">1</span>))]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kWeakestRows</span><span class="params">(self, mat: List[List[int]], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># functools.cpm_to_key</span></span><br><span class="line">        <span class="comment"># heapq.nsmallest(n, h, key=..)</span></span><br><span class="line">        h = [] <span class="comment"># 存放 (战斗力, i)</span></span><br><span class="line">        n, m = len(mat), len(mat[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            l, r = <span class="number">0</span>, m<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                mid = (l+r)//<span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> r==<span class="number">-1</span> <span class="keyword">or</span> mat[i][r]==<span class="number">1</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>: r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> mat[i][mid]==<span class="number">0</span>: r=mid<span class="number">-1</span></span><br><span class="line">                <span class="keyword">elif</span> mat[i][mid]==<span class="number">1</span>: l=mid</span><br><span class="line">            <span class="comment"># heapq.heappush(h, (r, i))</span></span><br><span class="line">            h.append((r, i))</span><br><span class="line">        <span class="comment"># print(h)</span></span><br><span class="line">        <span class="comment"># def mykey(a, b):</span></span><br><span class="line">        <span class="comment">#     if a[0]!=b[0]: return a[0]-b[0]</span></span><br><span class="line">        <span class="comment">#     return a[1]-b[1]</span></span><br><span class="line">        <span class="comment"># return [i[1] for i in heapq.nsmallest(k, h, key=functools.cmp_to_key(mykey))]</span></span><br><span class="line">        <span class="keyword">return</span> [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> heapq.nsmallest(k, h, key=operator.itemgetter(<span class="number">0</span>, <span class="number">1</span>))]</span><br></pre></td></tr></table></figure><h3 id="704-二分查找-力扣（LeetCode）"><a href="#704-二分查找-力扣（LeetCode）" class="headerlink" title="704. 二分查找 - 力扣（LeetCode）"></a>704. 二分查找 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/binary-search/submissions/">704. 二分查找 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = (l+r)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid]==target: <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&gt;target: r = mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid]&lt;target: l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="441-排列硬币-力扣（LeetCode）"><a href="#441-排列硬币-力扣（LeetCode）" class="headerlink" title="441. 排列硬币 - 力扣（LeetCode）"></a>441. 排列硬币 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/arranging-coins/submissions/">441. 排列硬币 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrangeCoins</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 1~n = (n+1)*n/2</span></span><br><span class="line">        l, r = <span class="number">0</span>, n</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">satisfy</span><span class="params">(n, k)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> n&gt;=(k+<span class="number">1</span>)*k/<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            mid = l+(r-l)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> satisfy(n, r): <span class="keyword">return</span> r</span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> satisfy(n, mid): l = mid</span><br><span class="line">            <span class="keyword">else</span>: r = mid<span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="475-供暖器-力扣（LeetCode）"><a href="#475-供暖器-力扣（LeetCode）" class="headerlink" title="475. 供暖器 - 力扣（LeetCode）"></a>475. 供暖器 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/heaters/">475. 供暖器 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRadius</span><span class="params">(self, houses: List[int], heaters: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 核心问题，找到 house 一前一后的供暖，去较小，整体取最大</span></span><br><span class="line">        houses.sort()</span><br><span class="line">        heaters.sort()</span><br><span class="line">        heaters = [-sys.maxsize, *heaters, sys.maxsize]</span><br><span class="line">        res, i = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> house <span class="keyword">in</span> houses:</span><br><span class="line">            <span class="comment"># while heaters[i]&lt;house: i += 1</span></span><br><span class="line">            i = bisect.bisect(heaters, house)</span><br><span class="line">            res = max(res, min(abs(heaters[i]-house), abs(heaters[i<span class="number">-1</span>]-house)))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>代码参考评论区：</p><p>思路一：排序（简单称为双指针吧）</p><p>思路二：二分法</p><p>两种思路都差不多，实现方法不一样，代码很容易理解。</p><p>## 代码:</p><p>思路一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRadius</span><span class="params">(self, houses: List[int], heaters: List[int])</span> -&gt; int:</span></span><br><span class="line">        houses.sort()</span><br><span class="line">        heaters.sort()</span><br><span class="line">        heaters = [float(<span class="string">"-inf"</span>)] + heaters + [float(<span class="string">"inf"</span>)]</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> house <span class="keyword">in</span> houses:</span><br><span class="line">            <span class="keyword">while</span> i &lt; len(heaters) - <span class="number">1</span> <span class="keyword">and</span> house &gt; heaters[i]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            res = max(res, min(heaters[i] - house, house - heaters[i - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>思路二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRadius</span><span class="params">(self, houses: List[int], heaters: List[int])</span> -&gt; int:</span></span><br><span class="line">        heaters.sort()</span><br><span class="line">        heaters = [float(<span class="string">"-inf"</span>)] + heaters + [float(<span class="string">"inf"</span>)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> house <span class="keyword">in</span> houses:</span><br><span class="line">            loc = bisect.bisect_left(heaters, house)</span><br><span class="line">            res = max(res, min(house - heaters[loc - <span class="number">1</span>], heaters[loc] - house))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="392-判断子序列-力扣（LeetCode）"><a href="#392-判断子序列-力扣（LeetCode）" class="headerlink" title="392. 判断子序列 - 力扣（LeetCode）"></a>392. 判断子序列 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/is-subsequence/">392. 判断子序列 - 力扣（LeetCode）</a></p><p>思路：如果s是t的子序列，也就是说 s 中的所有字符都会按照顺序出现在 t 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(s)==<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)):</span><br><span class="line">            <span class="keyword">if</span> t[i]==s[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">if</span> len(s)==<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> self.isSubsequence(s[<span class="number">1</span>:], t[i+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>评论区 更多骚操作：</p><p>思路一：库函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span> </span><br><span class="line">        loc = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> s:</span><br><span class="line">            loc = t.find(a, loc + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> loc == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>思路二：生成迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        t = iter(t)</span><br><span class="line">        <span class="keyword">return</span> all(c <span class="keyword">in</span> t <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure><p>思路三：双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s) <span class="keyword">and</span> j &lt; len(t):</span><br><span class="line">            <span class="keyword">if</span> s[i] == t[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i == len(s)</span><br></pre></td></tr></table></figure><p>思路四：二分法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span>  </span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">        <span class="keyword">import</span> bisect</span><br><span class="line">        lookup = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(t):</span><br><span class="line">            lookup[val].append(idx)</span><br><span class="line">        <span class="comment"># print(lookup)</span></span><br><span class="line">        loc = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> s:</span><br><span class="line">            j = bisect.bisect_left(lookup[a], loc + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> j &gt;= len(lookup[a]): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            loc = lookup[a][j]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p><a href="https://leetcode-cn.com/problems/is-subsequence/solution/javati-jie-he-hou-xu-tiao-zhan-by-lil-q/">java题解和后续挑战 - 判断子序列 - 力扣（LeetCode）</a></p><p>抄作业，附上后续挑战 Python 版本</p><p>感觉如果真的一个 t 查询亿个 s ，得把 DP 构造放到 init 函数里， 然后 self.dp = dp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubsequence</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        t = <span class="string">' '</span>+t</span><br><span class="line">        alpha = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">        <span class="comment"># 构造辅助数组</span></span><br><span class="line">        dp = [[<span class="number">-1</span>]*len(t) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">26</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(t)):</span><br><span class="line">            c = alpha.find(t[i])</span><br><span class="line">            j = i<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> dp[c][j]==<span class="number">-1</span>:</span><br><span class="line">                dp[c][j] = i</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            i = dp[alpha.find(c)][i]</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">-1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h2><h3 id="1201-丑数-III-力扣（LeetCode）"><a href="#1201-丑数-III-力扣（LeetCode）" class="headerlink" title="1201. 丑数 III - 力扣（LeetCode）"></a>1201. 丑数 III - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/ugly-number-iii/submissions/">1201. 丑数 III - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/ugly-number-iii/solution/er-fen-fa-si-lu-pou-xi-by-alfeim/">二分法思路剖析 - 丑数 III - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n: int, a: int, b: int, c: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mcm</span><span class="params">(a,b)</span>:</span></span><br><span class="line">            <span class="comment"># 求最小公倍数：两数乘积除以最大公约数</span></span><br><span class="line">            tmp = a*b</span><br><span class="line">            <span class="keyword">while</span> b:</span><br><span class="line">                <span class="comment"># a b b a b</span></span><br><span class="line">                a, b = b, a%b</span><br><span class="line">            <span class="keyword">return</span> tmp//a</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_mid</span><span class="params">(n, a, b, c, low, high)</span>:</span></span><br><span class="line">            a_b = mcm(a,b)</span><br><span class="line">            a_c = mcm(a,c)</span><br><span class="line">            b_c = mcm(b,c)</span><br><span class="line">            a_b_c = mcm(a_b, c)</span><br><span class="line">            <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">                mid = (low+high) &gt;&gt; <span class="number">1</span></span><br><span class="line">                <span class="comment"># 独立的丑数个数为 根据集合的交集</span></span><br><span class="line">                <span class="comment"># 当前数分别除以a、b、c的和</span></span><br><span class="line">                <span class="comment"># 减去当前数除以a、b、c两两间最小公倍数的和</span></span><br><span class="line">                <span class="comment"># 再加上当前数除以 a、b、c三者的最小公倍数</span></span><br><span class="line">                n_count = mid//a +mid//b + mid//c - mid//a_b - mid//b_c - mid//a_c + mid//a_b_c</span><br><span class="line">                print(mid, n_count)</span><br><span class="line">                <span class="keyword">if</span> n_count == n: <span class="keyword">return</span> mid</span><br><span class="line">                <span class="keyword">if</span> n_count &lt; n: low = mid+<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> n_count &gt; n: high = mid<span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        low = min(a,b,c)</span><br><span class="line">        high = low * n</span><br><span class="line">        res = get_mid(n, a, b, c, low, high)</span><br><span class="line">        print(low, high, res)</span><br><span class="line">        res -= min(res%a, res%b, res%c)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/binary-search/&quot;&gt;二分查找 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-194</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-194.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-194.html</id>
    <published>2020-07-16T04:33:41.000Z</published>
    <updated>2020-07-19T14:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/xor-operation-in-an-array/">数组异或操作</a><strong>3</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/making-file-names-unique/">保证文件名唯一</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/avoid-flood-in-the-city/">避免洪水泛滥</a><strong>6</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/">找到最小生成树里的关键边和伪关键边</a></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xorOperation</span><span class="params">(self, n: int, start: int)</span> -&gt; int:</span></span><br><span class="line">        l = [start+i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, b: a^b ,l)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>题解里的代码，很厉害</p><p>d {name: nextIndex, }</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFolderNames</span><span class="params">(self, names: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        d, ans = &#123;&#125;, []</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">            s = name</span><br><span class="line">            <span class="keyword">while</span> s <span class="keyword">in</span> d:</span><br><span class="line">                s = <span class="string">f'<span class="subst">&#123;name&#125;</span>(<span class="subst">&#123;d[name]&#125;</span>)'</span></span><br><span class="line">                d[name] += <span class="number">1</span></span><br><span class="line">            d[s] = <span class="number">1</span></span><br><span class="line">            ans.append(s)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/xor-operation-in-an-array/&quot;&gt;数组异或操作&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/making-file-names-unique/&quot;&gt;保证文件名唯一&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/avoid-flood-in-the-city/&quot;&gt;避免洪水泛滥&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/&quot;&gt;找到最小生成树里的关键边和伪关键边&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-28</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-28.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-28.html</id>
    <published>2020-07-16T02:19:15.000Z</published>
    <updated>2020-07-19T14:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/final-prices-with-a-special-discount-in-a-shop/">商品折扣后的最终价格</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/subrectangle-queries/">子矩形查询</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/">找两个和为目标值且不重叠的子数组</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/allocate-mailboxes/">安排邮筒</a> 7</li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalPrices</span><span class="params">(self, prices: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(prices)</span><br><span class="line">        res = [i <span class="keyword">for</span> i <span class="keyword">in</span> prices]</span><br><span class="line">        queue = [] <span class="comment"># [(i, prices[i]),,,]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">while</span> queue <span class="keyword">and</span> prices[i]&lt;=queue[<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                j, price = queue.pop()</span><br><span class="line">                res[j] = price-prices[i]</span><br><span class="line">            queue.append([i, prices[i]])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubrectangleQueries</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rectangle: List[List[int]])</span>:</span></span><br><span class="line">        self.rec = rectangle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateSubrectangle</span><span class="params">(self, row1: int, col1: int, row2: int, col2: int, newValue: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(row1, row2+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(col1, col2+<span class="number">1</span>):</span><br><span class="line">                self.rec[i][j] = newValue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getValue</span><span class="params">(self, i: int, j: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.rec[i][j]</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>滑动窗口，超时（dp 题解看不懂）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSumOfLengths</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        _sum, l, r = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        ls = []</span><br><span class="line">        <span class="keyword">while</span> r&lt;len(arr):</span><br><span class="line">            _sum += arr[r]</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> _sum&lt;target: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">while</span> _sum&gt;target:</span><br><span class="line">                _sum -= arr[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> _sum==target: ls.append([l, r<span class="number">-1</span>, r-l])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(ls)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">cross</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> l1[<span class="number">0</span>]&lt;l2[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">return</span> l2[<span class="number">0</span>]&lt;=l1[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> l1[<span class="number">0</span>]&lt;=l2[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        res = sys.maxsize</span><br><span class="line">        ls.sort(key=<span class="keyword">lambda</span> i: i[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ls)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">2</span>*ls[i][<span class="number">2</span>]&gt;res: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(ls)):</span><br><span class="line">                <span class="comment"># 有重叠的情况：ls[i]=[1, 3] ls[j]=[2, 4]</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cross(ls[i], ls[j]):</span><br><span class="line">                    res = min(res, ls[j][<span class="number">1</span>]-ls[j][<span class="number">0</span>]+ls[i][<span class="number">1</span>]-ls[i][<span class="number">0</span>]+<span class="number">2</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res!=sys.maxsize <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/final-prices-with-a-special-discount-in-a-shop/&quot;&gt;商品折扣后的最终价格&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/subrectangle-queries/&quot;&gt;子矩形查询&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/&quot;&gt;找两个和为目标值且不重叠的子数组&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/allocate-mailboxes/&quot;&gt;安排邮筒&lt;/a&gt; 7&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>flutter</title>
    <link href="https://zronghui.github.io/flutter.html"/>
    <id>https://zronghui.github.io/flutter.html</id>
    <published>2020-07-15T08:11:32.000Z</published>
    <updated>2020-07-19T14:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://flutterchina.club/setup-macos/#%E4%B8%8B%E4%B8%80%E6%AD%A5">入门: 在macOS上搭建Flutter开发环境 - Flutter中文网</a></p><p>vscode -&gt; flutter 插件</p><p>Android studio</p><p>flutter 下载后，解压，移动到 application 中，修改环境变量:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> flutter</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 中国代理</span></span><br><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line">export PATH=/Applications/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>用 finder 找到，/Applications/flutter/packages/flutter_tools/gradle/flutter.gradle</p><p>替换为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一处</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        // google()</span><br><span class="line">        // jcenter()</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">     repositories &#123;</span><br><span class="line">         maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">         maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">         maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment"># 第二处</span></span><br><span class="line">// private static final String MAVEN_REPO      = <span class="string">"https://storage.googleapis.com/download.flutter.io"</span>;</span><br><span class="line">    private static final String MAVEN_REPO      = <span class="string">"https://storage.flutter-io.cn/download.flutter.io"</span>;</span><br></pre></td></tr></table></figure><p>为了能用 USB 调试米 6，vscode ，shift cmd p, flutter emulator , new（不是真的创建，因为太耗费存储、内存了）</p><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><p>vscode ，shift cmd p, flutter new project</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="有用的链接"><a href="#有用的链接" class="headerlink" title="有用的链接"></a>有用的链接</h2><p><a href="https://here4you.tistory.com/category/Tutorial/Flutter%20with%20App?page=6">‘Tutorial/Flutter with App’ 카테고리의 글 목록 (6 Page)</a><br><a href="https://pub.dev/packages?q=time">Search results for time.</a><br><a href="https://pub.dev/packages/time#-readme-tab-">time | Dart Package</a><br><a href="https://pub.dev/flutter/favorites">Page 1 | Flutter Favorite packages</a><br><a href="https://pub.dev/packages/json_serializable">json_serializable | Dart Package</a><br><a href="https://github.com/alibaba/flutter-go/blob/master/lib/widgets/components/Pick/DayPicker/demo.dart">flutter-go/demo.dart at master · alibaba/flutter-go</a><br><a href="https://github.com/alibaba/flutter-go">alibaba/flutter-go: flutter 开发者帮助 APP，包含 flutter 常用 140+ 组件的demo 演示与中文文档</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><a href="https://stackoverflow.com/questions/59515755/flutter-permissions-handler-not-working-properly">Flutter Permissions Handler Not Working Properly - Stack Overflow</a></p><p>在 android/app/src/main/AndroidManifest.xml 中声明需要的权限</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 120. Triangle</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-120-Triangle.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-120-Triangle.html</id>
    <published>2020-07-14T00:04:19.000Z</published>
    <updated>2020-07-20T16:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/triangle/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/triangle/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a triangle, find the minimum path sum from top to bottom. Each step you<br>may move to adjacent numbers on the row below.</p><p>For example, given the following triangle</p><pre><code>[     [ **2** ],    [ **3** ,4],   [6, **5** ,7],  [4, **1** ,8,3]]</code></pre><p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong><br>+ <strong>1</strong> = 11).</p><p><strong>Note:</strong></p><p>Bonus point if you are able to do this using only <em>O</em> ( <em>n</em> ) extra space,<br>where <em>n</em> is the total number of rows in the triangle.</p><p><strong>Tags:</strong> Array, Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/triangle/solution/zi-di-xiang-shang-dong-tai-gui-hua-lei-si-yu-cong-/">自底向上动态规划，类似于从起点到目的地之间的最短路径 - 三角形最小路径和 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(triangle)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(triangle)<span class="number">-1</span>)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(triangle[i])):</span><br><span class="line">                triangle[i][j] += min(triangle[i+<span class="number">1</span>][j:j+<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/triangle/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/triangle/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a triangle, find the minimum path sum from top to bottom. Each step you&lt;br&gt;may move to adjacent numbers on the row below.&lt;/p&gt;
&lt;p&gt;For example, given the following triangle&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
     [ **2** ],
    [ **3** ,4],
   [6, **5** ,7],
  [4, **1** ,8,3]
]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The minimum path sum from top to bottom is &lt;code&gt;11&lt;/code&gt; (i.e., &lt;strong&gt;2&lt;/strong&gt; + &lt;strong&gt;3&lt;/strong&gt; + &lt;strong&gt;5&lt;/strong&gt;&lt;br&gt;+ &lt;strong&gt;1&lt;/strong&gt; = 11).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bonus point if you are able to do this using only &lt;em&gt;O&lt;/em&gt; ( &lt;em&gt;n&lt;/em&gt; ) extra space,&lt;br&gt;where &lt;em&gt;n&lt;/em&gt; is the total number of rows in the triangle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 1041. Robot Bounded In Circle</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1041-Robot-Bounded-In-Circle.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1041-Robot-Bounded-In-Circle.html</id>
    <published>2020-07-13T23:34:57.000Z</published>
    <updated>2020-07-14T03:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/robot-bounded-in-circle/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/robot-bounded-in-circle/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>On an infinite plane, a robot initially stands at <code>(0, 0)</code> and faces north.<br>The robot can receive one of three instructions:</p><ul><li><code>&quot;G&quot;</code>: go straight 1 unit;</li><li><code>&quot;L&quot;</code>: turn 90 degrees to the left;</li><li><code>&quot;R&quot;</code>: turn 90 degress to the right.</li></ul><p>The robot performs the <code>instructions</code> given in order, and repeats them<br>forever.</p><p>Return <code>true</code> if and only if there exists a circle in the plane such that the<br>robot never leaves the circle.</p><p><strong>Example 1:</strong><br>            Input: “GGLLGG”    Output: true    Explanation:    The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).    When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.    </p><p><strong>Example 2:</strong><br>            Input: “GG”    Output: false    Explanation:    The robot moves north indefinitely.    </p><p><strong>Example 3:</strong><br>            Input: “GL”    Output: true    Explanation:    The robot moves from (0, 0) -&gt; (0, 1) -&gt; (-1, 1) -&gt; (-1, 0) -&gt; (0, 0) -&gt; …    </p><p><strong>Note:</strong></p><ol><li><code>1 &lt;= instructions.length &lt;= 100</code></li><li><code>instructions[i]</code> is in <code>{&#39;G&#39;, &#39;L&#39;, &#39;R&#39;}</code></li></ol><p><strong>Tags:</strong> Math</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p>只要走完一轮后，方向改变，即不是直走的话，最后无论再走多少轮总有一轮会走回终点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isRobotBounded</span><span class="params">(self, instructions: str)</span> -&gt; bool:</span></span><br><span class="line">        x = y = <span class="number">0</span></span><br><span class="line">        directions = [</span><br><span class="line">            (<span class="number">0</span>, <span class="number">1</span>), <span class="comment"># 上北</span></span><br><span class="line">            (<span class="number">1</span>, <span class="number">0</span>), <span class="comment"># 右东</span></span><br><span class="line">            (<span class="number">0</span>, <span class="number">-1</span>), <span class="comment"># 下南</span></span><br><span class="line">            (<span class="number">-1</span>, <span class="number">0</span>), <span class="comment"># 左西</span></span><br><span class="line">        ]</span><br><span class="line">        di = <span class="number">0</span> <span class="comment"># 开始朝北，若 R，+1 %4</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> instructions:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'R'</span>: di = (di+<span class="number">1</span>)%<span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'L'</span>: di = (di<span class="number">-1</span>)%<span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'G'</span>: </span><br><span class="line">                x += directions[di][<span class="number">0</span>]</span><br><span class="line">                y += directions[di][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> x==y==<span class="number">0</span> <span class="keyword">or</span> di!=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/robot-bounded-in-circle/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/robot-bounded-in-circle/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;On an infinite plane, a robot initially stands at &lt;code&gt;(0, 0)&lt;/code&gt; and faces north.&lt;br&gt;The robot can receive one of three instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;G&amp;quot;&lt;/code&gt;: go straight 1 unit;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;L&amp;quot;&lt;/code&gt;: turn 90 degrees to the left;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;R&amp;quot;&lt;/code&gt;: turn 90 degress to the right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The robot performs the &lt;code&gt;instructions&lt;/code&gt; given in order, and repeats them&lt;br&gt;forever.&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if and only if there exists a circle in the plane such that the&lt;br&gt;robot never leaves the circle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;            Input: “GGLLGG”    Output: true    Explanation:    The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).    When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;            Input: “GG”    Output: false    Explanation:    The robot moves north indefinitely.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;            Input: “GL”    Output: true    Explanation:    The robot moves from (0, 0) -&amp;gt; (0, 1) -&amp;gt; (-1, 1) -&amp;gt; (-1, 0) -&amp;gt; (0, 0) -&amp;gt; …    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= instructions.length &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instructions[i]&lt;/code&gt; is in &lt;code&gt;{&amp;#39;G&amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;R&amp;#39;}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Math&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 264. Ugly Number II</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-264-Ugly-Number-II.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-264-Ugly-Number-II.html</id>
    <published>2020-07-13T14:30:50.000Z</published>
    <updated>2020-07-13T14:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/ugly-number-ii/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/ugly-number-ii/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Write a program to find the <code>n</code>-th ugly number.</p><p>Ugly numbers are <strong>positive numbers</strong> whose prime factors only include <code>2, 3,5</code>.</p><p><strong>Example:</strong></p><pre><code>Input: n = 10Output: 12Explanation:1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.</code></pre><p><strong>Note:</strong>  </p><ol><li><code>1</code> is typically treated as an ugly number.</li><li><code>n</code> <strong>does not exceed 1690</strong>.</li></ol><p><strong>Tags:</strong> Math, Dynamic Programming, Heap</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/ugly-number-ii/solution/chou-shu-ii-by-leetcode/">丑数 II - 丑数 II - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/chou-shu-lcof/solution/mian-shi-ti-49-chou-shu-dong-tai-gui-hua-qing-xi-t/">面试题49. 丑数（动态规划，清晰图解） - 丑数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ugly</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.nums = [<span class="number">1</span>]</span><br><span class="line">        a = b = c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1690</span>):</span><br><span class="line">            n2, n3, n5 = self.nums[a]*<span class="number">2</span>, self.nums[b]*<span class="number">3</span>, self.nums[c]*<span class="number">5</span></span><br><span class="line">            m = min(n2, n3, n5)</span><br><span class="line">            self.nums.append(m)</span><br><span class="line">            <span class="keyword">if</span> m==n2: a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> m==n3: b += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> m==n5: c += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    u = Ugly()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.u.nums[n<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number-ii/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/ugly-number-ii/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Write a program to find the &lt;code&gt;n&lt;/code&gt;-th ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are &lt;strong&gt;positive numbers&lt;/strong&gt; whose prime factors only include &lt;code&gt;2, 3,
5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: n = 10
Output: 12
Explanation:1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; is typically treated as an ugly number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; &lt;strong&gt;does not exceed 1690&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Math, Dynamic Programming, Heap&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
      <category term="Heap" scheme="https://zronghui.github.io/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 263. Ugly Number</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-263-Ugly-Number.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-263-Ugly-Number.html</id>
    <published>2020-07-13T13:45:45.000Z</published>
    <updated>2020-07-13T14:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/ugly-number/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/ugly-number/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Write a program to check whether a given number is an ugly number.</p><p>Ugly numbers are <strong>positive numbers</strong> whose prime factors only include <code>2, 3,5</code>.</p><p><strong>Example 1:</strong></p><pre><code>Input: 6Output: trueExplanation: 6 = 2 × 3</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 8Output: trueExplanation: 8 = 2 × 2 × 2</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: 14Output: false Explanation:14 is not ugly since it includes another prime factor 7.</code></pre><p><strong>Note:</strong></p><ol><li><code>1</code> is typically treated as an ugly number.</li><li>Input is within the 32-bit signed integer range: [−231,  231 − 1].</li></ol><p><strong>Tags:</strong> Math</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUgly</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> n%<span class="number">5</span>: n = n//<span class="number">5</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> n%<span class="number">3</span>: n = n//<span class="number">3</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> n%<span class="number">2</span>: n = n//<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/ugly-number/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Write a program to check whether a given number is an ugly number.&lt;/p&gt;
&lt;p&gt;Ugly numbers are &lt;strong&gt;positive numbers&lt;/strong&gt; whose prime factors only include &lt;code&gt;2, 3,
5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 6
Output: true
Explanation: 6 = 2 × 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 8
Output: true
Explanation: 8 = 2 × 2 × 2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 14
Output: false 
Explanation:14 is not ugly since it includes another prime factor 7.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; is typically treated as an ugly number.&lt;/li&gt;
&lt;li&gt;Input is within the 32-bit signed integer range: [−231,  231 − 1].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Math&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode模板</title>
    <link href="https://zronghui.github.io/leetcode/leetcode%E6%A8%A1%E6%9D%BF.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode%E6%A8%A1%E6%9D%BF.html</id>
    <published>2020-07-13T01:33:11.000Z</published>
    <updated>2020-07-13T14:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>helper 函数</p><p>l&lt;=r  l=mid+1 r=mid-1 </p><p>根据求左边界还是右边界，l r 的更新不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># return bisect.bisect(nums, target)-bisect.bisect(nums, target-1)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(n)</span>:</span></span><br><span class="line">            l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">                mid = (l+r)//<span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid]&lt;=n: l = mid+<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: r = mid<span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(target)-helper(target<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-197</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-197.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-197.html</id>
    <published>2020-07-12T05:53:52.000Z</published>
    <updated>2020-07-12T16:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/number-of-good-pairs/">好数对的数目</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/number-of-substrings-with-only-1s/">仅含 1 的子串数</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/path-with-maximum-probability/">概率最大的路径</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/best-position-for-a-service-centre/">服务中心的最佳位置</a><strong>7</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIdenticalPairs</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> nums[i]==nums[j]:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSub</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 0 1 1 0 1 1 1</span></span><br><span class="line">        <span class="comment"># 0 1 2 0 1 2 3 dp: 以当前位置结尾的 1 的长度</span></span><br><span class="line">        <span class="comment"># 1+2+1+2+3</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i<span class="number">-1</span>]==<span class="string">'1'</span>:</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> sum(dp[<span class="number">1</span>:])%(<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p><a href="https://leetcode-cn.com/problems/path-with-maximum-probability/solution/bfsbian-li-qiu-jie-by-jie-dong/">bfs遍历求解 - 概率最大的路径 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProbability</span><span class="params">(self, n: int, e: List[List[int]], succProb: List[float], start: int, end: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># 1. defaultdict 构造 graph</span></span><br><span class="line">        graph = collections.defaultdict(dict)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">            p1, p2 = e[i]</span><br><span class="line">            graph[p1][p2] = succProb[i]</span><br><span class="line">            graph[p2][p1] = succProb[i]</span><br><span class="line">        stack = collections.deque()</span><br><span class="line">        stack.append([start, <span class="number">1</span>, <span class="number">1</span>&lt;&lt;start]) <span class="comment"># start 到 当前点 的 概率 ，遍历过哪些点</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            cur, prob, passed = stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur==end:</span><br><span class="line">                ans = max(ans, prob)</span><br><span class="line">            <span class="keyword">elif</span> prob&gt;ans:</span><br><span class="line">                <span class="keyword">for</span> point, _prob <span class="keyword">in</span> graph[cur].items():</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> passed&amp;(<span class="number">1</span>&lt;&lt;point) <span class="keyword">and</span> _prob*prob&gt;ans:</span><br><span class="line">                        stack.append([point, _prob*prob, passed^<span class="number">1</span>&lt;&lt;point])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProbability</span><span class="params">(self, n: int, e: List[List[int]], succProb: List[float], start: int, end: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># defaultdict 构造 graph</span></span><br><span class="line">        graph = collections.defaultdict(dict)</span><br><span class="line">        <span class="comment"># 因为这个题目比较特殊，权重是乘性的并且0-1之间，所以可以用一个dic记录从start开始到每个节点的最大权重。 然后每次你只需要判断pop出的节点的权重就可以。如果比曾经记录的dic中的权重小那就没必要继续（这里面包含了环，回头），如果比曾经记录的权重大，那么继续进行。</span></span><br><span class="line">        d = collections.defaultdict(float)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">            p1, p2 = e[i]</span><br><span class="line">            graph[p1][p2] = succProb[i]</span><br><span class="line">            graph[p2][p1] = succProb[i]</span><br><span class="line">        stack = collections.deque()</span><br><span class="line">        stack.append([start, <span class="number">1</span>]) <span class="comment"># start 到 当前点 的 概率</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            cur, prob = stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur==end:</span><br><span class="line">                ans = max(ans, prob)</span><br><span class="line">            <span class="keyword">elif</span> prob&gt;ans:</span><br><span class="line">                <span class="keyword">for</span> point, _prob <span class="keyword">in</span> graph[cur].items():</span><br><span class="line">                    <span class="keyword">if</span> _prob*prob&gt;ans <span class="keyword">and</span> _prob*prob&gt;d.get(point, <span class="number">0</span>):</span><br><span class="line">                        d[point] = _prob*prob</span><br><span class="line">                        stack.append([point, _prob*prob])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/number-of-good-pairs/&quot;&gt;好数对的数目&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/number-of-substrings-with-only-1s/&quot;&gt;仅含 1 的子串数&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/path-with-maximum-probability/&quot;&gt;概率最大的路径&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/best-position-for-a-service-centre/&quot;&gt;服务中心的最佳位置&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-30</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-30.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-30.html</id>
    <published>2020-07-12T05:46:55.000Z</published>
    <updated>2020-07-12T16:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-30/problems/reformat-date/">转变日期格式</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-30/problems/range-sum-of-sorted-subarray-sums/">子数组和排序后的区间和</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-30/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/">三次操作后最大值与最小值的最小差</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-30/problems/stone-game-iv/">石子游戏 IV</a><strong>6</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reformatDate</span><span class="params">(self, date: str)</span> -&gt; str:</span></span><br><span class="line">        day, month, year = date.split()</span><br><span class="line">        day = day[:<span class="number">-2</span>]</span><br><span class="line">        month = [<span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span>, <span class="string">"Apr"</span>, <span class="string">"May"</span>, <span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>, <span class="string">"Sep"</span>, <span class="string">"Oct"</span>, <span class="string">"Nov"</span>, <span class="string">"Dec"</span>].index(month)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;-&#123;&#125;-&#123;&#125;'</span>.format(year, str(month).zfill(<span class="number">2</span>), day.zfill(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rangeSum</span><span class="params">(self, nums: List[int], n: int, left: int, right: int)</span> -&gt; int:</span></span><br><span class="line">        _sum = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        _sum[<span class="number">0</span>], _sum[<span class="number">1</span>] = <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            _sum[i+<span class="number">1</span>] += _sum[i]+nums[i]</span><br><span class="line">        l = [_sum[j]-_sum[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n+<span class="number">1</span>)]</span><br><span class="line">        l.sort()</span><br><span class="line">        <span class="keyword">return</span> sum(l[left<span class="number">-1</span>:right]) % (<span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDifference</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 思路: 取 4 个最小值，4 个最大值，最多 8 个元素时，可以暴力解法</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">9</span>:</span><br><span class="line">            nums.sort()</span><br><span class="line">            <span class="comment"># 1 2 3 4 5   -&gt; 5-4(删除 123), 4-3(删除 125), 3-2(删除 145), 2-1(删除 345)</span></span><br><span class="line">            n = len(nums)</span><br><span class="line">            <span class="keyword">return</span> min(nums[n<span class="number">-1</span>]-nums[<span class="number">3</span>], nums[n<span class="number">-2</span>]-nums[<span class="number">2</span>], nums[n<span class="number">-3</span>]-nums[<span class="number">1</span>], nums[n<span class="number">-4</span>]-nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 取 4 个最小值</span></span><br><span class="line">                mini = i</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                    <span class="keyword">if</span> nums[j]&lt;nums[mini]:</span><br><span class="line">                        mini = j</span><br><span class="line">                nums[mini], nums[i] = nums[i], nums[mini]</span><br><span class="line">                l.append(nums[i])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 4 个最大值</span></span><br><span class="line">                mini = i</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                    <span class="keyword">if</span> nums[j]&gt;nums[mini]:</span><br><span class="line">                        mini = j</span><br><span class="line">                nums[mini], nums[i] = nums[i], nums[mini]</span><br><span class="line">                l.append(nums[i])</span><br><span class="line">            <span class="keyword">return</span> self.minDifference(l)</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">winnerSquareGame</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        dp = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            j = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j*j&lt;=i:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> dp[i-j*j]:</span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-30/problems/reformat-date/&quot;&gt;转变日期格式&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-30/problems/range-sum-of-sorted-subarray-sums/&quot;&gt;子数组和排序后的区间和&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-30/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/&quot;&gt;三次操作后最大值与最小值的最小差&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-30/problems/stone-game-iv/&quot;&gt;石子游戏 IV&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-196</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-196.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-196.html</id>
    <published>2020-07-08T12:29:59.000Z</published>
    <updated>2020-07-12T16:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>又是怀疑人生的一次比赛</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(self, arr: List[int])</span> -&gt; bool:</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        arr.sort()</span><br><span class="line">        gap = arr[<span class="number">1</span>]-arr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> all(arr[i]-arr[i<span class="number">-1</span>]==gap <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLastMoment</span><span class="params">(self, n: int, left: List[int], right: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">return</span> max(max(left), n-min(right))</span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            <span class="keyword">return</span> max(left)</span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            <span class="keyword">return</span> n-min(right)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;又是怀疑人生的一次比赛&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 53. Maximum Subarray</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-53-Maximum-Subarray.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-53-Maximum-Subarray.html</id>
    <published>2020-07-08T12:26:47.000Z</published>
    <updated>2020-07-10T01:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximum-subarray/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/maximum-subarray/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at<br>least one number) which has the largest sum and return its sum.</p><p><strong>Example:</strong></p><pre><code>Input: [-2,1,-3,4,-1,2,1,-5,4],Output: 6Explanation:  [4,-1,2,1] has the largest sum = 6.</code></pre><p><strong>Follow up:</strong></p><p>If you have figured out the O( <em>n</em> ) solution, try coding another solution<br>using the divide and conquer approach, which is more subtle.</p><p><strong>Tags:</strong> Array, Divide and Conquer, Dynamic Programming</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode id=53 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [53] Maximum Subarray</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="comment">// 长度从0~nums.length</span></span><br><span class="line"><span class="comment">// solution(0~i) = max(solution(i-1)+nums[i],nums[i])</span></span><br><span class="line"><span class="comment">// solution = max(solutions)</span></span><br><span class="line"><span class="comment">// 下面用dp(dynamic programming) 表示 solution</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxdp = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp = Math.max(dp+nums[i], nums[i]);</span><br><span class="line">            maxdp = Math.max(dp, maxdp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxdp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># -2 1 -3 4 -1 2 1 -5 4  nums</span></span><br><span class="line">        <span class="comment"># -2 1 -2 4  3 5 6  1 5  dp(表示以 i 结尾的最大和)</span></span><br><span class="line">        <span class="comment"># if dp[i-1] &lt;= 0: dp[i] = nums[i]</span></span><br><span class="line">        <span class="comment"># else: dp[i] = dp[i-1]+nums[i]</span></span><br><span class="line">        <span class="comment"># 可以看到若要返回那个数组，范围是 [maxdp 前第一个非负的 dp : maxdp]</span></span><br><span class="line">        dp = maxdp = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> dp&lt;=<span class="number">0</span>: dp = num</span><br><span class="line">            <span class="keyword">else</span>: dp += num</span><br><span class="line">            maxdp = max(maxdp, dp)</span><br><span class="line">        <span class="keyword">return</span> maxdp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/maximum-subarray/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray (containing at&lt;br&gt;least one number) which has the largest sum and return its sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation:  [4,-1,2,1] has the largest sum = 6.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have figured out the O( &lt;em&gt;n&lt;/em&gt; ) solution, try coding another solution&lt;br&gt;using the divide and conquer approach, which is more subtle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Divide and Conquer, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Divide and Conquer" scheme="https://zronghui.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 企业题库</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-%E4%BC%81%E4%B8%9A%E9%A2%98%E5%BA%93.html</id>
    <published>2020-07-08T02:05:20.000Z</published>
    <updated>2020-07-08T02:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>来源：<a href="https://blog.nowcoder.net/lingo/20178">LeetCode 企业题库_牛客博客</a></p><h2 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h2><img src="https://i.loli.net/2020/07/08/qixt5ZOSjWGlnIb.png" alt="图片说明" style="zoom: 67%;" /><h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><img src="https://i.loli.net/2020/07/08/rdNRXtueDkjPB7m.png" alt="图片说明" style="zoom:67%;" /><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><img src="https://i.loli.net/2020/07/08/7LHGKzAvVXb1DSq.png" alt="图片说明" style="zoom:67%;" /><h2 id="阿里巴巴"><a href="#阿里巴巴" class="headerlink" title="阿里巴巴"></a>阿里巴巴</h2><img src="https://i.loli.net/2020/07/08/1czlxJMHAj3V2Bd.png" alt="图片说明" style="zoom:67%;" /><h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><img src="https://i.loli.net/2020/07/08/3VTg1G6qFNpA4Co.png" alt="图片说明" style="zoom:67%;" /><h2 id="微软"><a href="#微软" class="headerlink" title="微软"></a>微软</h2><img src="https://i.loli.net/2020/07/08/a359RoHZJwVTh7r.png" alt="图片说明" style="zoom:67%;" /><h2 id="今日头条"><a href="#今日头条" class="headerlink" title="今日头条"></a>今日头条</h2><img src="https://i.loli.net/2020/07/08/K9xs2mZ3Yy6EBbQ.png" alt="图片说明" style="zoom:67%;" /><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><img src="https://i.loli.net/2020/07/08/3VNC9sktaAolrpg.png" alt="图片说明" style="zoom:67%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题 17.26 稀疏相似度</title>
    <link href="https://zronghui.github.io/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/%E9%9D%A2%E8%AF%95%E9%A2%98-17-26-%E7%A8%80%E7%96%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6.html"/>
    <id>https://zronghui.github.io/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/%E9%9D%A2%E8%AF%95%E9%A2%98-17-26-%E7%A8%80%E7%96%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6.html</id>
    <published>2020-07-08T01:43:41.000Z</published>
    <updated>2020-07-08T02:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="程序员面试金典" scheme="https://zronghui.github.io/categories/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>面试题 17.25 单词矩阵</title>
    <link href="https://zronghui.github.io/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/%E9%9D%A2%E8%AF%95%E9%A2%98-17-25-%E5%8D%95%E8%AF%8D%E7%9F%A9%E9%98%B5.html"/>
    <id>https://zronghui.github.io/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/%E9%9D%A2%E8%AF%95%E9%A2%98-17-25-%E5%8D%95%E8%AF%8D%E7%9F%A9%E9%98%B5.html</id>
    <published>2020-07-08T01:43:39.000Z</published>
    <updated>2020-07-08T02:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="程序员面试金典" scheme="https://zronghui.github.io/categories/leetcode/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B8/"/>
    
    
  </entry>
  
</feed>
