<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-06-11T01:29:45.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 983. Minimum Cost For Tickets</title>
    <link href="https://zronghui.github.io/leetcode-983-Minimum-Cost-For-Tickets.html"/>
    <id>https://zronghui.github.io/leetcode-983-Minimum-Cost-For-Tickets.html</id>
    <published>2020-06-10T13:35:32.000Z</published>
    <updated>2020-06-11T01:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-cost-for-tickets/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/minimum-cost-for-tickets/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>In a country popular for train travel, you have planned some train travelling<br>one year in advance.  The days of the year that you will travel is given as an<br>array <code>days</code>.  Each day is an integer from <code>1</code> to <code>365</code>.</p><p>Train tickets are sold in 3 different ways:</p><ul><li>a 1-day pass is sold for <code>costs[0]</code> dollars;</li><li>a 7-day pass is sold for <code>costs[1]</code> dollars;</li><li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li></ul><p>The passes allow that many days of consecutive travel.  For example, if we get<br>a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7,<br>and 8.</p><p>Return the minimum number of dollars you need to travel every day in the given<br>list of <code>days</code>.</p><p><strong>Example 1:</strong></p><pre><code>Input: days = [1,4,6,7,8,20], costs = [2,7,15]Output: 11Explanation:For example, here is one way to buy passes that lets you travel your travel plan:On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.In total you spent $11 and covered all the days of your travel.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]Output: 17Explanation:For example, here is one way to buy passes that lets you travel your travel plan:On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.In total you spent $17 and covered all the days of your travel.</code></pre><p><strong>Note:</strong></p><ol><li><code>1 &lt;= days.length &lt;= 365</code></li><li><code>1 &lt;= days[i] &lt;= 365</code></li><li><code>days</code> is in strictly increasing order.</li><li><code>costs.length == 3</code></li><li><code>1 &lt;= costs[i] &lt;= 1000</code></li></ol><p><strong>Tags:</strong> Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>遇到一道不算简单的 DP，好不容易吭哧吭哧写出来，结果：</p><img src="https://i.loli.net/2020/06/11/tpRq6cuehr2OJ9Q.png" alt="image-20200610213723057" style="zoom:50%;" /><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mincostTickets</span><span class="params">(self, days: List[int], costs: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp[n][4]  n: 最多n天，4: -1(不买) 1 7 30 这 4 种选择</span></span><br><span class="line">        <span class="comment"># 主要考虑：n 在不在 days 中； -1 买没买</span></span><br><span class="line">        <span class="comment"># n 不在 days 中，一定不用买，其他三种情况存 sys.maxsize</span></span><br><span class="line">        </span><br><span class="line">        n = days[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># start 和 nxt 都存放 index</span></span><br><span class="line">        start = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> days:</span><br><span class="line">            nxt = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        dp = [[sys.maxsize <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        dp[start] = [sys.maxsize, costs[<span class="number">0</span>], costs[<span class="number">1</span>], costs[<span class="number">2</span>]]</span><br><span class="line">        </span><br><span class="line">        m = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">7</span>, <span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nxt!=i:</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> days:</span><br><span class="line">                nxt = days.pop(<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">0</span>]</span><br><span class="line">            dp[i][<span class="number">2</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">1</span>]</span><br><span class="line">            dp[i][<span class="number">3</span>] = min(dp[i<span class="number">-1</span>]) + costs[<span class="number">2</span>]</span><br><span class="line">            <span class="comment"># 要求：i-j &gt;= start -&gt; j &lt;= i-start</span></span><br><span class="line">            mj = i-start</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, min(<span class="number">29</span>, mj)+<span class="number">1</span>):</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i-j][<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, min(<span class="number">6</span>, mj)+<span class="number">1</span>):</span><br><span class="line">                dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], dp[i-j][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/minimum-cost-for-tickets/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;In a country popular for train travel, you have planned some train travelling&lt;br&gt;one year in advance.  The days of the year that you will travel is given as an&lt;br&gt;array &lt;code&gt;days&lt;/code&gt;.  Each day is an integer from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;365&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Train tickets are sold in 3 different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 1-day pass is sold for &lt;code&gt;costs[0]&lt;/code&gt; dollars;&lt;/li&gt;
&lt;li&gt;a 7-day pass is sold for &lt;code&gt;costs[1]&lt;/code&gt; dollars;&lt;/li&gt;
&lt;li&gt;a 30-day pass is sold for &lt;code&gt;costs[2]&lt;/code&gt; dollars.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The passes allow that many days of consecutive travel.  For example, if we get&lt;br&gt;a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7,&lt;br&gt;and 8.&lt;/p&gt;
&lt;p&gt;Return the minimum number of dollars you need to travel every day in the given&lt;br&gt;list of &lt;code&gt;days&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation:
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total you spent $11 and covered all the days of your travel.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation:
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total you spent $17 and covered all the days of your travel.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= days.length &amp;lt;= 365&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= days[i] &amp;lt;= 365&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;days&lt;/code&gt; is in strictly increasing order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;costs.length == 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= costs[i] &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;遇到一道不算简单的 DP，好不容易吭哧吭哧写出来，结果：&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2020/06/11/tpRq6cuehr2OJ9Q.png&quot; alt=&quot;image-20200610213723057&quot; style=&quot;zoom:50%;&quot; /&gt;

&lt;p&gt;
    
    </summary>
    
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>qq机器人</title>
    <link href="https://zronghui.github.io/Mac/qq%E6%9C%BA%E5%99%A8%E4%BA%BA.html"/>
    <id>https://zronghui.github.io/Mac/qq%E6%9C%BA%E5%99%A8%E4%BA%BA.html</id>
    <published>2020-06-09T06:24:46.000Z</published>
    <updated>2020-06-11T01:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e2caa01b9cd8d30ce315f586e48f458c2b60928cda769f5cfdf26abb29bb9238">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d3ef55391930c1e05b3595486b916f45ddd93d21127fff6ed5ecd98e642a95bf3a05e88975056bb05558235f0e1ec87a5141695a7ceb1e704866fcead3b64474f01c82cf4ab9d0677a93142bb59fc57b033771479bd563846c258f34f28780a12f070e9cf12fd8364949201a0cf827be440976dcf958a2f6929bc2e9be4cd737b35d15867291356a7afd6b454bb81965ba7de8af6b99079f0688d0262a8d3a30e390350382ea296857ab95876142015caa6ef365e33b5db16594a975f4ed447c78c3e092bbdea87a804c160f8e908fd35efacade5d486a3a4ab19db13b26d607e220ffb31a73a57d97a60cdadcb2962003fd294b07e5ecc5354ffed006f5d82b91e7b3b53ef96b892d5b6eacf783ba7eca74a39d5637d08c79569458f0d530c65ad0a1e8a778884f8b6d225b5733cb82166d909573a068c11569cb8921a062ef772e1ebe4391f956974b547867bce937e4bf248d383f4217e41bac88a570388791277ff8dad62c2e2b731e3553f96c47568d4ab6d20e2b38c829867d7d4d916bd96b450311cdab5e0d6926c9f64f20333ab55942887e27dc7e67ad6a9dc5f60e65474684b247227e479537d96e78cdbc11833e04be725c09be6fc0073986e5ace7999f18bc1e494fdc7d30fc49e85fdc4a541537706c9332b121c86cb1cc88aa40c7f3287f39b2fc7fb2a57e7c81ae98ffbdaeb8d8aff06b25e71a114a8e40e47f86730918e7c252b555228aa0e6bcba54651415420746e8e8d7c9a3f169bba0fa78d924304730f4a7d235b39c26db46cd37756c5cd3bb1696b8c7d2f181a76ecbf2a1405d1a5e0155c25f278e76810e24150f71d94ca12ed07877b20ca411771cdaf1d9507633c8be3c1916292921ec0f772f245ca0f923894322218fddc5121d93caf326fc38202e52a7835dfceb2e39ad1ff971905e8e36034ed8a9426cb75eef8a22cf76a65aa9b75eca3cdd2652916623de276a82755e8655e22c0965bfdb4aded3bf582af96ba5cdcfc9d0562aea668f99f42c3dd4a7df23251158fb73c5f10767ee4d3a13a386aff6e4975213a757b7ffee92840ee048b607b45ea83e6a635373f18a18117b17610acbbe8484c9fe19e69107897b7507741ac16ec6a1a7287961856bea80f3a5ddb45a9779eabef2351579d805b01ce7fd938967f1c1e326573622c35b128c3d0c152a20e36fe47f6b9a8b9caa09b5aebeadcf146b5c5d7a410f79033e5bdef7d24d78e71f548f9c56aee4bc9c0f1846942d8214ab591d0b5ec4d6d55a005a14e7e876c05175c3cd7c27fc0eb38c94648eb3f844df3b0ffc67671c3e168d291380aff0947311ad24c93b65d1d36f3b08431ba6fb6680156a71a862e8fc40051d7a1a62f18e9558978e7f24d9469b9ba40f2253739411903c050297629f4bff70f01f130ec696237fcd7eff4612fb1a7b5d11d5b66b28c10ba37b83a3cb6454d9d358d9b2a418d577105eb13a06f118ac1e2f3badb90da152d6a53ac9509c9e1e19b86ae8f4b9831bcea5ffb94b1ccd9a4ed4e4cef7d9d6963333c58b56678898daafe3d54f87afb915b4ed227a8c84e01bfe8297b8f42018b832b8c64cc03b82d186230ca776ddb1c5bf67ebb03eac3a1888d8ff243f3ef8a4872c8c4de850ec8039370f0a8880c06322d2e8ff73437f6aa95c4b190735594846ada9945b10d543bb74ef510692e9985d3f5193fa5a0003c0aa9d5ef7ee26bebfdcc52c7f2ccb4642972c3ad7f51113089b70fe15740ec94c41e1881e84985956d4bd7bc85889c39d739bdfef909c16651cea343f68f15b60f3135b39c4c529028d815e9c21457f6a5d4a0bc55dd779ec3b8bf5eb0ccdbed8cbf0c64cf4943840b3577e3ab8082f369948af450aa766b780a018717699b9a28011b2e97208d327d70177978d30125394ce39c33262b5a54ccb6c75382fa3f9e68f801501c92ee443afc79f3aaae638738da2ddd3da2deefd9cd463672333ee1fd21c927eb50686e8e87c99e510df9e32d094fdc0e6126a48f2b34eee1381bc00c3d9e144c8f1273dd1aa9c00d939b64dae5f7d821bc0ebb3ec94b93331da34436763e2ee870557cc626a682a4149fc270e268ffa848af26970b744761039c20d8b5e85af185cd65fc2127d8cf33c4cb9f71eb23a5ee540da62eb9d9370f5c65e034b768918fc71691449cc04aef51b0109c83b86d17d47f1b57233eaef4639e7809824f8129967ad98eed406208a0a6728594244c3517834842add5c7bb6914abd6898ac7c20e5439fcb535f27630bec16221b6953c60d92f38dbcf77f8c13e95eda5d81e4ca692ddc66a480543ba774c5e90fde296632923c89fd87fdf7f4de222dfe6c537014d6b2498280a285415f6c80250948cef060586fd2a90852f4e0d206945dbd45d803b596e572b2480cdd07cdb2530c8bedd7030495855714f6662b78ce7d092ccaf8e5ef8aa58406949a14754f73cc7da59d0210f58e127c8cc76855baa5ca933edddfde5e645ac6f8578cb9c1a3935e886218c07294f1e499fbe1ccee0e6ad49c2ee502056988c2567ed93f48c659e413cca680c86c2d1d15cd4f36e4933f0ddbdd98ab453b0c41779374e287756518c27a40f0c553f0fc939180c6af68cdd161ab4cf171fbb13a271c8ed77cb57ed5ef246f2732007f2efa9e005f35d97a00014643e92907f6ce36c8c320fcb4137616ce7bbf26e4bba159750cb29ac86a2e14d3dd94b8b45a012c178136619d178f5c3133df70bb6493edf65ed4e7a8abd2727eaee4c80962b879a9973bac74995e753ee344850af4fd0a01547801186393f01f886a81c73259e7edca564aaa67ab23d9c44feac8ac7b93114b3ccefbf6448cfa9b9ec5c4aa3df6988f4fbd3bb70ca730ba5e2beb0a9ecd87ee051d932ff723c416e60841520d565656e9e106509910dfd40d2a8fcdc36c41f4cf63821231fa5feb980849f87ff6977f7c2d11c015b69e6cb19d4b730ebbf07f63e62245765bdc60fe25e405c58f55be0f46f67156c04d063f53689d55481281cc7793a29dbb99eb591420444e211db2a46e96a5b70dfb5598d09ff655fae5da456326f068fa9e3d11ffac06ebb5f213775a986995849eab317bdb73b03016a9dad5f6b3f45974409a15f4b3b733554de781a197045f89e6970b7857317cc47e3329fec2136cdb792d880e31343ba0aa83c0f06a6f3b0d555eedce0b93a74b12fde7dd3732785f5aba8a41b3696039f339a21cef7a05bd3bcbf577f9429d9fdf09da6e80f78d9a0e23ad425414110751ee9c04a77e335deebd40d81101ce30dee969bce12f51d291df27b829bf88e26490cf01f9f2e3048f366add12f6152862b562a6fdfb5350368426090f9d24f7e4c23997229f5bde5ae8c19144423067776bae42a2f11b72fa7b34c18886403c5bf124f964f9447538b969600611060982cb495212c0962a000f595980735523809ee5f717b554bb393676d1f3f12d5c51ce40ecf2e21380b652cb9cec76a4706a62efb2bed298e4a8402ae10441ea6a6bf614a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>软件测试读论文作业</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E8%AE%BA%E6%96%87%E4%BD%9C%E4%B8%9A.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E8%AE%BA%E6%96%87%E4%BD%9C%E4%B8%9A.html</id>
    <published>2020-06-09T05:02:15.000Z</published>
    <updated>2020-06-09T12:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="软件测试" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 680. Valid Palindrome II</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-680-Valid-Palindrome-II.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-680-Valid-Palindrome-II.html</id>
    <published>2020-06-09T04:59:14.000Z</published>
    <updated>2020-06-09T12:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-palindrome-ii/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/valid-palindrome-ii/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a non-empty string <code>s</code>, you may delete <strong>at most</strong> one character. Judge<br>whether you can make it a palindrome.</p><p><strong>Example 1:</strong>  </p><pre><code>Input: &quot;aba&quot;Output: True</code></pre><p><strong>Example 2:</strong>  </p><pre><code>Input: &quot;abca&quot;Output: TrueExplanation: You could delete the character &apos;c&apos;.</code></pre><p><strong>Note:</strong>  </p><ol><li>The string will only contain lowercase characters a-z. The maximum length of the string is 50000.</li></ol><p><strong>Tags:</strong> String</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">if</span> s[l]!=s[r]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validPalindrome</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        r = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">if</span> s[l]!=s[r]:</span><br><span class="line">                <span class="keyword">return</span> self.isPalindrome(s[l:r]) <span class="keyword">or</span> self.isPalindrome(s[l+<span class="number">1</span>:r+<span class="number">1</span>])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-palindrome-ii/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/valid-palindrome-ii/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a non-empty string &lt;code&gt;s&lt;/code&gt;, you may delete &lt;strong&gt;at most&lt;/strong&gt; one character. Judge&lt;br&gt;whether you can make it a palindrome.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;aba&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;abca&amp;quot;
Output: True
Explanation: You could delete the character &amp;apos;c&amp;apos;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The string will only contain lowercase characters a-z. The maximum length of the string is 50000.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 572. Subtree of Another Tree</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-572-Subtree-of-Another-Tree.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-572-Subtree-of-Another-Tree.html</id>
    <published>2020-06-08T12:23:46.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/subtree-of-another-tree/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/subtree-of-another-tree/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two non-empty binary trees <strong>s</strong> and <strong>t</strong> , check whether tree <strong>t</strong><br>has exactly the same structure and node values with a subtree of <strong>s</strong>. A<br>subtree of <strong>s</strong> is a tree consists of a node in <strong>s</strong> and all of this node’s<br>descendants. The tree <strong>s</strong> could also be considered as a subtree of itself.</p><p><strong>Example 1:</strong><br>Given tree s:</p><pre><code>    3   / \  4   5 / \1   2</code></pre><p>Given tree t:</p><pre><code>  4  / \1   2</code></pre><p>Return <strong>true</strong> , because t has the same structure and node values with a<br>subtree of s.</p><p><strong>Example 2:</strong><br>Given tree s:</p><pre><code>    3   / \  4   5 / \1   2   /  0</code></pre><p>Given tree t:</p><pre><code>  4 / \1   2</code></pre><p>Return <strong>false</strong>.</p><p><strong>Tags:</strong> Tree</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSubtree(s.left, t) <span class="keyword">or</span> self.isSubtree(s.right, t) <span class="keyword">or</span> self.isSameTree(s, t)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, s: TreeNode, t: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> t <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> any([s <span class="keyword">is</span> <span class="literal">None</span>, t <span class="keyword">is</span> <span class="literal">None</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> s.val==t.val <span class="keyword">and</span> self.isSameTree(s.left, t.left) <span class="keyword">and</span> self.isSameTree(s.right, t.right)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subtree-of-another-tree/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/subtree-of-another-tree/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two non-empty binary trees &lt;strong&gt;s&lt;/strong&gt; and &lt;strong&gt;t&lt;/strong&gt; , check whether tree &lt;strong&gt;t&lt;/strong&gt;&lt;br&gt;has exactly the same structure and node values with a subtree of &lt;strong&gt;s&lt;/strong&gt;. A&lt;br&gt;subtree of &lt;strong&gt;s&lt;/strong&gt; is a tree consists of a node in &lt;strong&gt;s&lt;/strong&gt; and all of this node’s&lt;br&gt;descendants. The tree &lt;strong&gt;s&lt;/strong&gt; could also be considered as a subtree of itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;Given tree s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    3
   / \
  4   5
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Given tree t:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  4 
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;strong&gt;true&lt;/strong&gt; , because t has the same structure and node values with a&lt;br&gt;subtree of s.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;Given tree s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    3
   / \
  4   5
 / \
1   2
   /
  0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Given tree t:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  4
 / \
1   2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Tree&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Tree" scheme="https://zronghui.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-192</title>
    <link href="https://zronghui.github.io/weekly-contest-192.html"/>
    <id>https://zronghui.github.io/weekly-contest-192.html</id>
    <published>2020-06-07T03:38:18.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>我好菜</p><p><img src="https://i.loli.net/2020/06/07/tPdg3qjHvmWRhJz.png" alt="image-20200607113911523"></p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/shuffle-the-array/">重新排列数组</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/the-k-strongest-values-in-an-array/">数组中的 k 个最强值</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/design-browser-history/">设计浏览器历史记录</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-192/problems/paint-house-iii/">给房子涂色 III</a><strong>6</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(self, nums: List[int], n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            ans.append(nums[i])</span><br><span class="line">            ans.append(nums[n+i])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStrongest</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        arr.sort()</span><br><span class="line">        n = len(arr)</span><br><span class="line">        m = arr[int((n<span class="number">-1</span>)/<span class="number">2</span>)]</span><br><span class="line">        print(m)</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @functools.lru_cache(maxsize=None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sortkey</span><span class="params">(a, b)</span>:</span></span><br><span class="line">            x = abs(a-m)-abs(b-m)</span><br><span class="line">            <span class="keyword">if</span> x==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> a-b</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="comment"># 选择排序</span></span><br><span class="line">        <span class="comment"># for i in range(k):</span></span><br><span class="line">        <span class="comment">#     mi = i</span></span><br><span class="line">        <span class="comment">#     for j in range(i+1, n):</span></span><br><span class="line">        <span class="comment">#         if sortkey(arr[j], arr[mi])&gt;0:</span></span><br><span class="line">        <span class="comment">#             mi = j</span></span><br><span class="line">        <span class="comment">#     arr[mi], arr[i] = arr[i], arr[mi]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 双指针</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = n<span class="number">-1</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="comment"># while left&lt;=right:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> sortkey(arr[left], arr[right])&gt;=<span class="number">0</span>:</span><br><span class="line">                ans.append(arr[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(arr[right])</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserHistory</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, homepage: str)</span>:</span></span><br><span class="line">        self.his = [homepage]</span><br><span class="line">        self.cur = <span class="number">1</span> <span class="comment"># 当前位置到开头 URL 的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(self, url: str)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.his = self.his[:self.cur]</span><br><span class="line">        self.his.append(url)</span><br><span class="line">        self.cur = self.cur+<span class="number">1</span></span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">back</span><span class="params">(self, steps: int)</span> -&gt; str:</span></span><br><span class="line">        self.cur = max(<span class="number">1</span>, self.cur-steps)</span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line">        <span class="keyword">return</span> self.his[self.cur<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, steps: int)</span> -&gt; str:</span></span><br><span class="line">        self.cur = min(len(self.his), self.cur+steps)</span><br><span class="line">        <span class="comment"># print(self.cur, self.his)</span></span><br><span class="line">        <span class="keyword">return</span> self.his[self.cur<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your BrowserHistory object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = BrowserHistory(homepage)</span></span><br><span class="line"><span class="comment"># obj.visit(url)</span></span><br><span class="line"><span class="comment"># param_2 = obj.back(steps)</span></span><br><span class="line"><span class="comment"># param_3 = obj.forward(steps)</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;我好菜&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/06/07/tPdg3qjHvmWRhJz.png&quot; alt=&quot;image-20200607113911523&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-27</title>
    <link href="https://zronghui.github.io/biweekly-contest-27.html"/>
    <id>https://zronghui.github.io/biweekly-contest-27.html</id>
    <published>2020-06-06T14:02:30.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/">通过翻转子数组使两个数组相等</a><strong>3</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/">检查一个字符串是否包含所有长度为 K 的二进制子串</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/course-schedule-iv/">课程安排 IV</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/cherry-pickup-ii/">摘樱桃 II</a><strong>6</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canBeEqual</span><span class="params">(self, l1: List[int], l2: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getcount</span><span class="params">(l)</span>:</span></span><br><span class="line">            m = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> m:</span><br><span class="line">                    m[i] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    m[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        m1 = getcount(l1)</span><br><span class="line">        m2 = getcount(l2)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m1:</span><br><span class="line">            <span class="keyword">if</span> m2.get(i)!=m1.get(i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasAllCodes</span><span class="params">(self, s: str, k: int)</span> -&gt; bool:</span></span><br><span class="line">        ss = set()</span><br><span class="line">        <span class="keyword">if</span> len(s)&lt;=k:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k, len(s)+<span class="number">1</span>):</span><br><span class="line">            ss.add(s[i-k:i])</span><br><span class="line">        print(ss, len(ss), <span class="number">2</span>**k)</span><br><span class="line">        <span class="keyword">return</span> len(ss)==<span class="number">2</span>**k</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="法一：dfs-functools-lru-cache"><a href="#法一：dfs-functools-lru-cache" class="headerlink" title="法一：dfs  + functools.lru_cache"></a>法一：dfs  + functools.lru_cache</h2><p>collections.defaultdict</p><p>@functools.lru_cache</p><p>执行用时 :692 ms, 在所有<em>Python</em>3 提交中击败了53.77%的用户</p><p>内存消耗 :31.8 MB, 在所有<em>Python</em>3 提交中击败了100.00%的用户</p><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/solution/dfs-ji-yi-hua-hua-fu-xiu-wei-shen-qi-by-fuxuemingz/">DFS + 记忆化，化腐朽为神奇 - 课程安排 IV - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        self.graph = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres:</span><br><span class="line">            self.graph[a].append(b)</span><br><span class="line">        <span class="keyword">return</span> [self.dfs(start, end) <span class="keyword">for</span> start, end <span class="keyword">in</span> qs]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 默认 maxsize 128 ，即存储最近 128 次调用</span></span><br><span class="line"><span class="meta">    @functools.lru_cache(maxsize=None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start==end:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> any(self.dfs(nxt, end) <span class="keyword">for</span> nxt <span class="keyword">in</span> self.graph[start])</span><br></pre></td></tr></table></figure><h2 id="法二：Floyd"><a href="#法二：Floyd" class="headerlink" title="法二：Floyd"></a>法二：Floyd</h2><p>执行用时 :956 ms, 在所有<em>Python</em>3 提交中击败了48.57%的用户</p><p>内存消耗 :15.5 MB, 在所有<em>Python</em>3 提交中击败了100.00%的用户</p><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/solution/pythonbu-fu-za-de-da-biao-fa-by-bestfitting/">Python双百，不要DFS，不要BFS，只要最简单的打表法 - 课程安排 IV - 力扣（LeetCode）</a></p><p><a href="https://zh.wikipedia.org/zh-hans/Floyd-Warshall%E7%AE%97%E6%B3%95">Floyd-Warshall算法 - 维基百科，自由的百科全书</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres:</span><br><span class="line">            dp[a][b] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> [dp[a][b] <span class="keyword">for</span> a, b <span class="keyword">in</span> qs]</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 25. Reverse Nodes in k-Group</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-25-Reverse-Nodes-in-k-Group.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-25-Reverse-Nodes-in-k-Group.html</id>
    <published>2020-06-06T13:39:13.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/reverse-nodes-in-k-group/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and<br>return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the<br>linked list. If the number of nodes is not a multiple of <em>k</em> then left-out<br>nodes in the end should remain as it is.</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><p><strong>Tags:</strong> Linked List</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>虽说效率有点低，但是图很直观</p><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/">图解k个一组翻转链表 - K 个一组翻转链表 - 力扣（LeetCode）</a></p><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        pre = dummy</span><br><span class="line">        cur = dummy</span><br><span class="line">        <span class="keyword">while</span> cur.next:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">                cur = cur.next</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            start = pre.next</span><br><span class="line">            next = cur.next</span><br><span class="line">            cur.next = <span class="literal">None</span></span><br><span class="line">            pre.next = self.reverse(start)</span><br><span class="line">            start.next = next</span><br><span class="line">            pre = start</span><br><span class="line">            cur = start</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            next = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = next</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/reverse-nodes-in-k-group/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and&lt;br&gt;return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt; is a positive integer and is less than or equal to the length of the&lt;br&gt;linked list. If the number of nodes is not a multiple of &lt;em&gt;k&lt;/em&gt; then left-out&lt;br&gt;nodes in the end should remain as it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given this linked list: &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;k&lt;/em&gt; = 2, you should return: &lt;code&gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;3-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;k&lt;/em&gt; = 3, you should return: &lt;code&gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only constant extra memory is allowed.&lt;/li&gt;
&lt;li&gt;You may not alter the values in the list’s nodes, only nodes itself may be changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Linked List&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;虽说效率有点低，但是图很直观&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t/&quot;&gt;图解k个一组翻转链表 - K 个一组翻转链表 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Linked List" scheme="https://zronghui.github.io/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-191</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-191.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-191.html</id>
    <published>2020-06-05T13:15:03.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/maximum-product-of-two-elements-in-an-array/">数组中两元素的最大乘积</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/">切割后面积最大的<em>蛋糕</em></a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/">重新规划路线</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/">两个盒子中球的颜色数相同的概率</a><strong>7</strong></li></ul><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        m1 = m2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i&gt;m1:</span><br><span class="line">                m1, m2 = i, m1</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> i&gt;m2:</span><br><span class="line">                m2 = i</span><br><span class="line">        print(m1, m2)</span><br><span class="line">        <span class="keyword">return</span> (m1<span class="number">-1</span>)*(m2<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, h: int, w: int, hCuts: List[int], vCuts: List[int])</span> -&gt; int:</span></span><br><span class="line">        hCuts.append(<span class="number">0</span>)</span><br><span class="line">        hCuts.append(h)</span><br><span class="line">        vCuts.append(<span class="number">0</span>)</span><br><span class="line">        vCuts.append(w)</span><br><span class="line">        hCuts.sort()</span><br><span class="line">        vCuts.sort()</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxInterval</span><span class="params">(cuts)</span>:</span></span><br><span class="line">            m = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(cuts)):</span><br><span class="line">                m = max(m, cuts[i]-cuts[i<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        <span class="keyword">return</span> (maxInterval(hCuts)*maxInterval(vCuts))%(<span class="number">1000000007</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minReorder</span><span class="params">(self, n: int, connections: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        To, In = [set() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)], [set() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        To[x] -&gt; y</span></span><br><span class="line"><span class="string">        In[y] -&gt; x</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> connections:</span><br><span class="line">            To[x].add(y)</span><br><span class="line">            In[y].add(x)</span><br><span class="line">        </span><br><span class="line">        queue = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="comment"># 不为空，添加所有与 cur 相连的节点，若反向，添加到 ans 里</span></span><br><span class="line">            </span><br><span class="line">            cur = queue.pop()</span><br><span class="line">            <span class="comment"># 如 0 -&gt; 1 ，所以 To 里面都是需要纠正的</span></span><br><span class="line">            <span class="comment"># To 添加到 queue 里面后，discard In 里面对应的数据</span></span><br><span class="line">            <span class="comment"># In 添加到 queue 里面后，discard To 里面对应的数据</span></span><br><span class="line">            ans += len(To[cur])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> To[cur]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                In[i].discard(cur)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> In[cur]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">                To[i].discard(cur)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-06</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-06.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-06.html</id>
    <published>2020-06-02T03:40:59.000Z</published>
    <updated>2020-06-11T01:29:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b2c6dac06804a3091dc029f092937c7a229870bae0c9a4f33c378d9f088ac735"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>tools to use</title>
    <link href="https://zronghui.github.io/todo/tools-to-use.html"/>
    <id>https://zronghui.github.io/todo/tools-to-use.html</id>
    <published>2020-06-01T12:37:37.000Z</published>
    <updated>2020-06-09T12:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="06c4e24397f6a967b16ac9931ad9a8910d49d838f5a70563076d1a97b7b9fb9f">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d9a45bacecaba7ac1e6748ab25d1f452f1531a3bc167e66fb568f8d9235dc116534773262386048b2a23ee50e2da3ed6e03d520800b78ef1017a518af8217bc89f4a40dcd38dd0cc4c62ed84f392ad3f1f8e96c1b5cf24dd1e1a230d8c933f1ef44fa8408157ead32e582e20841e1a365b64aa6eca43b79603008192c6bdd9b66076e43a2b44e50036a6058d34b13c42e9c108e4523d01a739f31fc9f8f0c8466463ca13c1989a75c46843b4ff2394590d9d571968ff0a42958d2f3db33d544870c88aedae8d80052fdf901dea772526acdc64377f39e78da82b25df26bf00b1b849abe3e1786f5a0c12a01e0333a2e18d22d62bc7a88a2f03c698e9e748b8be60602f643ef47eb6e42c369b1ed1d1a32a1e0ff604696df65db3a3f6a3b38ab098c59e2aeb4703f957509d070b0cebb5034beb20daaaa7ce7248458d37c561e773b3e80d6ca981c267bf4d8567d3a3d7208ca33f6843e8a2aced36bff5178a6a8c0064b4cc1805ba83a0b433bafc072349c7cda55175c786e334f5901089560a57bc3642125b0e5b5d941021710ed6e9f2203bd20b096c6d568868e4ded15accf15c8ba17d80acb9a8527b4a3d951e0b4598e7012e250d38a0db6b729b446f1f67c7f07e396d65a379d56e040ad7e0752283b790566ee4891964c6d2f108e678defcb7a887407130d696121963fea1e89724594129ff022c53f8f754128dea52c64329db4fd94101b5d3be45e9be5dd7f4f22934010f4cc8307e452c9eab89320a7340858cae04a3a77fc38aa283c8cdbc7642a9d2ee3d00f2b969127a620d5b75c9a989676cc65a578a10c7b452a16783f7b5110b2ae48fba5eaac588f7fb503bf4a20f521e2d69f9572fb8fc07b05be7217c95e097edb41471e7235919e3c3cb0712ad1bfe6d7fc44464e948fcda9c59e36451a4fce3174774356c7da2316affa63b2f218de5e2bee5e5174abc6caee2e9c52f4d16c9cf46d430a44a773e77cc8f980fef7cdab7e4377ad1c810ba11cfd7887e4d476ccefb96afc4fbd4ba63cfe7eaa2b969efc73c4393ef5c42b9ac6c23a8c28d14505ac1ce3637052153ae91ea065a8db1b877c3f43588e2d42a9002dc86bba07fddbf0e5db840d6583a1a60eab31ac8b87b0105b850c19296f0f823413dec6c4823e1c6e8b33fc098db085facf628fb9489662d365c281b1e052955962082effa47d9d8f46aab4a1118bc8133061d75e022d48df36fd9871f9f899688d8d1f2540426cd5bd45283b0ea67814002f2864d7e3080084c0c66bc8ffd16a1cdb1dd7ceecea1748eb526832a39b40ab9168719231867d7bfc00625faa1c4937dc6e06639a73dfebdab1862f819c8ce48dc2fd1e3a2f782748a3993a237cc5d10f4860c06128796253c8815ffd54d662bac0a8d46b43df7e6e28831b9e4c9cf8ca1929d068da330f9da1eac55b8a0e60285d86b2dc8c4063fced33e09b6daabb78fb77f4079c3d6b69b809e14a091e937ca9f9b5d35264fafec72f418991f6e37ff88942a481c9f07beed67926b97926bd676f568985731e64527836c292f9393a8785077ac81b59f25143b9360225414f2dfb04c8c67e2dc5e319d3ba22a90eccbce04b493b297384ee598a844bb43d40e3d3fc484a6f0fde85e296396e842d80c4bd424630cc7000f6a523ebefcb52c9041622c609ff95a37040f2fa47513960d1ee5f85e0b07374847062799aff67f37fa716d6159be6d09f1c96338e9d70cb85dc490ca97599338265a48f8aec9617158d19b56004381f210adf87dac56cac1384a335d4717c22901c55a50242dc902cca9de7cd0494bddf49108049d49caf80ae60a7a8c680452b07a6363076c6d2fd764efbbb8ac8b2393cfefba401aee023307f61add39e4c717f19a991593fcb7a2144e7ac2e76c96b2b2bb8664b211bf46188c68af89077780025d8e4c5f3acb37795d44f4d0a5d707600c46c2ce9bd7349316972754dd712508383a8356352d829f6871b779143e921769d88daca9328dfe14257bd3e06d050d59cf11ba47d51fc969750c4cf9c5ed31130e40c4e76cebb17b1864dede5214e363961672a5c9744639cfcfd20dc0e733f576b03685ad01c6d0b834fbf5ccab52391d1d982fbfb7f9e849168b8708e12255380510cc0761270351ec3aef3b82329daab47ccbd2e70c40ae8c823f434c5b9b1d68cc00847c528b83662c69a712d1445d2c79d655c82c196daaefdee6d5d7ee15eb0e9d0c3d660f99e1d1851df9653ff4a6637b147728171289386a8bdc9a2e64388c7966defce768084b0a70afe1c95128fbf6d24faf1c1acd41bf45628cba6cc0a2fd85920850e9b602a3917c17650e2de419fee5c30ca8a7da7a899e250e255d6fabb75560dc45d59975dc276334b87ad0c46611fda70c36174f831f06eb77297a74e02a09b3976aed904dd7b2b800e547d30fd1742ead30364fa616114af4d0e9cabcb107e025e0f39111e33f819cee3634bab255c013593b86f1ac3171534e2cf6e9087f5b3350e581c2f1231e13cab71f5e8c35cda0252af3faa02711c19b3f7221c4ceb224b35c510fc0c451b7a9e0e1bf515c18920ad7cde95128c1aacecd32d6775818c3f53ab9cda929333374391a3aa286ee0dd443e4728ce3be5fa2a9930299cc833a6d1c929cf555756650a5d023e6a16d8bfe7d810ff19156563fbd56cbcfdc6d2135d0476370f37782a17790e0a064b61a8db4c28c81315e61053e2f3a183a611493a9982f833ed73ed85be5888fb51ddb5a66482b695e1a43cca63e586c200ec2f6b7389b5e3de3e51392713ab0a7a20f3d6d356ea4706dc278e812bdd51a1f96d2d147e5417dee033dbb38f6b55c592580d61aad1993f2ed56e3a3263066de123d8a6b237ce51e88b625df40aca7674bd1ce209e62927627a2af92321ab5e028c685c04729d56d411c2df411cef530b1ef909784e57fc8d0d11ca5789b1b28ae482b94e1fa8bd44f6cc1596b6883eb0f0aa44b6ca85aca09d185a6d97190631287bf3005577a886e823c4d5281d338b9da9f342cbc20f4abd779272bd78e8555e457f04eb3b3d8cc252f739eb74fc4f5490a484a315546a05499564a3f1e01057b51f543d48e51000a0f0cefa035c3ebc8efdd536767c45d1454c83a63329c45204e47e108088e36c49feb8602af64b035395302cac99d4b6aa8f9449c3b2d3ee7d9e924f2853225e3458c7e8d296ab9fac4eb9355ab041a31d17add85c265df8f96126a3fef09ca098ea85b5335b0ea46ee6a32a5464fbc6f7dc1983e1b45fd72d7484505ba770c4dbd5637f31deecf9e38fb95c8680f2b72212913707e3f54e3a56a84770ce552ce16c7a4a397030d4b1764581b28a979cfcb021ad776f68ab430945b7443391ff3d90ee3f3ac075bee701e429f0949825c15947cf283b5166403a8bf8030a5541f515288bcc0e393ed2f6608aff5872e5bff0bf8e7c3a94d308d5ec840ab9b5c6d3e00e86c7f02a91757008d352e02e9934623aada552caf0cbc2577cc134058694467ffc1c42be7784d50aab30bee1e85999ac23c9488eb04f81263b13f30f45f6133bc8006465ece111fbcb12becda7bc05ad6f5133157910d8f9269c52c44cba00da0ff3bbcabecd598444758feaed736abeea59b04d5a3410642d4dd28f38d1ac00863a8eccbf0f7ced1ab9cf77e6950c95fab554b527fbd7a0ba1e43d9dea76b3a60c35eb81252628cc6ec83521110518fa67772d65db196f027481666b9b2ecb83b39d04e665d10ea43e5eb264563550f6cddf47ca3d1862839bb0109f790b8deaac94edb8205566a27e79366b4973ffc83f90e6de14e83f5450b3ff2ac7e165ad909516cd96cd87b32b34b72824ab375c301a997c384be88c60d90bcc1ec7659cd80746b3d34e07e3cf348c4b60715e8fcbc8a2245c86a9a4e2f0ec9efd3931eb093cf576eb0052c0dc26435783dbb0941ae5fa79fcad716d24660ee8df2dcd0cf07679b6093af3fe27d32a97d4c94bc33046e6f5e9984feb3d2cb9d40b1dfa43f581761076373115dacb4a8eca3ae206c37163a1d1c9bba901e010a84511bec678bd5955e45a7b928ba7e2102ec69201262ef79c5f241cd747f4e59a5363300225f8ae117677893775d7855b1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://zronghui.github.io/redis/redis.html"/>
    <id>https://zronghui.github.io/redis/redis.html</id>
    <published>2020-05-29T07:56:39.000Z</published>
    <updated>2020-06-08T14:19:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>cv 学习法。。。</p><h3 id="redis-七种数据类型"><a href="#redis-七种数据类型" class="headerlink" title="redis 七种数据类型"></a>redis 七种数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># string        key-&gt;value,像是 map</span><br><span class="line">set k v</span><br><span class="line">mset k1 v1 k2 v2</span><br><span class="line">get k</span><br><span class="line">mget k1 k2</span><br><span class="line"></span><br><span class="line"># hash        key-&gt; &#123;k1: v1, k2: v2&#125;  像是 map 的 map</span><br><span class="line">hmset key k1 v1 k2 v2</span><br><span class="line">hgetall key</span><br><span class="line"></span><br><span class="line"># list        name -&gt; [i1, i2...]    value 是个 list</span><br><span class="line">lpush name i1</span><br><span class="line">lpush name i2</span><br><span class="line">lrange name 0 10</span><br><span class="line"></span><br><span class="line"># set        name -&gt; &#123;i1, i2, ...&#125;</span><br><span class="line">哈希表实现的，增删查 复杂度都是 o1</span><br><span class="line">sadd name i1</span><br><span class="line">sadd name i2</span><br><span class="line">smembers name</span><br><span class="line"></span><br><span class="line"># zset       name -&gt; &#123;i1-&gt;score1, i2-&gt;score2, ...&#125;</span><br><span class="line">#  有序 set 为什么是 z 而不是 s(sort) sset</span><br><span class="line">每个元素关联一个分数</span><br><span class="line">zadd name score1 i1</span><br><span class="line">zincreby name i1 自动加一</span><br><span class="line">zrangebyscore name 0 1000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Bitmaps</span><br><span class="line">通过类似 map 的结果存放 0 1</span><br><span class="line">可以用来统计状态，如日活？ 是否浏览过某个东西</span><br><span class="line"></span><br><span class="line"># HyperLogLogs </span><br><span class="line">接受许多个元素作为输入，以很少空间给出元素的基数估算值</span><br><span class="line">基数：len(set(l))</span><br><span class="line">估算值：可能有一点误差</span><br><span class="line">PFADD unique::ip::counter &#39;192.168.0.1&#39;</span><br><span class="line">PFADD unique::ip::counter &#39;127.0.0.1&#39;</span><br><span class="line">PFCOUNT unique::ip::counter</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h3 id="Redis-键-key-命令"><a href="#Redis-键-key-命令" class="headerlink" title="Redis 键(key) 命令"></a>Redis 键(key) 命令</h3><p>如 del key, del 则是一个 key 命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-del.html">DEL</a></td><td>用于删除 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-dump.html">DUMP</a></td><td>序列化给定 key ，并返回被序列化的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-exists.html">EXISTS</a></td><td>检查给定 key 是否存在</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-expire.html">EXPIRE</a></td><td>为给定 key 设置过期时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-expireat.html">EXPIREAT</a></td><td>用于为 key 设置过期时间点 接受的时间参数是 UNIX 时间戳</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pexpire.html">PEXPIRE</a></td><td>设置 key 的过期时间，以毫秒计</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pexpireat.html">PEXPIREAT</a></td><td>设置 key 过期时间的时间戳(unix timestamp)，以毫秒计</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-keys.html">KEYS</a></td><td>查找所有符合给定模式的 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-move.html">MOVE</a></td><td>将当前<em>数据库</em>的 key 移动到给定的<em>数据库</em>中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-persist.html">PERSIST</a></td><td>移除 key 的过期时间，key 将<strong>持久保持</strong></td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-pttl.html">PTTL</a></td><td>以毫秒为单位返回 key 的剩余的过期时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-ttl.html">TTL</a></td><td>以秒为单位，返回给定 key 的剩余生存时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-randomkey.html">RANDOMKEY</a></td><td>从当前<em>数据库</em>中随机返回一个 key</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-rename.html">RENAME</a></td><td>修改 key 的名称</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-renamenx.html">RENAMENX</a></td><td>仅当 newkey 不存在时，将 key 改名为 newkey</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-keys-type.html">TYPE</a></td><td>返回 key 所储存的值的类型</td></tr></tbody></table><h3 id="Redis-字符串-String-命令"><a href="#Redis-字符串-String-命令" class="headerlink" title="Redis 字符串(String) 命令"></a>Redis 字符串(String) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-set.html">SET</a></td><td>设置指定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-get.html">GET</a></td><td>获取指定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getrange.html">GETRANGE</a></td><td>返回 key 中字符串值的子字符</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getset.html">GETSET</a></td><td>将给定 key 的值设为 value ，并返回 key 的旧值 ( old value )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-getbit.html">GETBIT</a></td><td>对 key 所储存的字符串值，获取指定偏移量上的位 ( bit )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-mget.html">MGET</a></td><td>获取所有(一个或多个)给定 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setbit.html">SETBIT</a></td><td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setex.html">SETEX</a></td><td>设置 key 的值为 value 同时将过期时间设为 seconds</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setnx.html">SETNX</a></td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-setrange.html">SETRANGE</a></td><td>从偏移量 offset 开始用 value 覆写给定 key 所储存的字符串值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-strlen.html">STRLEN</a></td><td>返回 key 所储存的字符串值的长度</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-mset.html">MSET</a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-msetnx.html">MSETNX</a></td><td>同时设置一个或多个 key-value 对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-psetex.html">PSETEX</a></td><td>以毫秒为单位设置 key 的生存时间</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incr.html">INCR</a></td><td>将 key 中储存的数字值增一</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incrby.html">INCRBY</a></td><td>将 key 所储存的值加上给定的增量值 ( increment )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-incrbyfloat.html">INCRBYFLOAT</a></td><td>将 key 所储存的值加上给定的浮点增量值 ( increment )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-decr.html">DECR</a></td><td>将 key 中储存的数字值减一</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-decrby.html">DECRBY</a></td><td>将 key 所储存的值减去给定的减量值 ( decrement )</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-strings-append.html">APPEND</a></td><td>将 value 追加到 key 原来的值的末尾</td></tr></tbody></table><h3 id="Redis-哈希-Hash-命令"><a href="#Redis-哈希-Hash-命令" class="headerlink" title="Redis 哈希(Hash) 命令"></a>Redis 哈希(Hash) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hdel.html">HDEL</a></td><td>删除一个或多个哈希表字段</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hexists.html">HEXISTS</a></td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hget.html">HGET</a></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hgetall.html">HGETALL</a></td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hincrby.html">HINCRBY</a></td><td>为哈希表 key 中的指定字段的整数值加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hincrbyfloat.html">HINCRBYFLOAT</a></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hkeys.html">HKEYS</a></td><td>获取所有哈希表中的字段</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hlen.html">HLEN</a></td><td>获取哈希表中字段的数量</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hmget.html">HMGET</a></td><td>获取所有给定字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hmset.html">HMSET</a></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hset.html">HSET</a></td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hsetnx.html">HSETNX</a></td><td>只有在字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hvals.html">HVALS</a></td><td>获取哈希表中所有值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hscan.html">HSCAN</a></td><td>迭代哈希表中的键值对</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hashes-hstrlen.html">HSTRLEN</a></td><td>返回哈希表 key 中， 与给定域 field 相关联的值的字符串长度</td></tr></tbody></table><h3 id="Redis-列表-List-命令"><a href="#Redis-列表-List-命令" class="headerlink" title="Redis 列表(List) 命令"></a>Redis 列表(List) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-blpop.html">BLPOP</a></td><td>移出并获取列表的第一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-brpop.html">BRPOP</a></td><td>移出并获取列表的最后一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-brpoplpush.html">BRPOPLPUSH</a></td><td>从列表中弹出一个值，并将该值插入到另外一个列表中并返回它</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lindex.html">LINDEX</a></td><td>通过索引获取列表中的元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-linsert.html">LINSERT</a></td><td>在列表的元素前或者后插入元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-llen.html">LLEN</a></td><td>获取列表长度</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpop.html">LPOP</a></td><td>移出并获取列表的第一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpush.html">LPUSH</a></td><td>将一个或多个值插入到列表头部</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lpushx.html">LPUSHX</a></td><td>将一个值插入到已存在的列表头部</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lrange.html">LRANGE</a></td><td>获取列表指定范围内的元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lrem.html">LREM</a></td><td>移除列表元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-lset.html">LSET</a></td><td>通过索引设置列表元素的值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-ltrim.html">LTRIM</a></td><td>对一个列表进行修剪(trim)</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpop.html">RPOP</a></td><td>移除并获取列表最后一个元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpoplpush.html">RPOPLPUSH</a></td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpush.html">RPUSH</a></td><td>在列表中添加一个或多个值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-lists-rpushx.html">RPUSHX</a></td><td>为已存在的列表添加值</td></tr></tbody></table><h3 id="Redis-集合-Set-命令"><a href="#Redis-集合-Set-命令" class="headerlink" title="Redis 集合(Set) 命令"></a>Redis 集合(Set) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sadd.html">SADD</a></td><td>向集合添加一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-scard.html">SCARD</a></td><td>获取集合的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sdiff.html">SDIFF</a></td><td>返回给定所有集合的差集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sdiffstore.html">SDIFFSTORE</a></td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sinter.html">SINTER</a></td><td>返回给定所有集合的交集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sinterstore.html">SINTERSTORE</a></td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sismember.html">SISMEMBER</a></td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-smembers.html">SMEMBERS</a></td><td>返回集合中的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-smove.html">SMOVE</a></td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-spop.html">SPOP</a></td><td>移除并返回集合中的一个随机元素</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-srandmember.html">SRANDMEMBER</a></td><td>返回集合中一个或多个随机数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-srem.html">SREM</a></td><td>移除集合中一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sunion.html">SUNION</a></td><td>返回所有给定集合的并集</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sunionstore.html">SUNIONSTORE</a></td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sets-sscan.html">SSCAN</a></td><td>迭代集合中的元素</td></tr></tbody></table><h3 id="Redis-有序集合-sorted-set-命令"><a href="#Redis-有序集合-sorted-set-命令" class="headerlink" title="Redis 有序集合(sorted set) 命令"></a>Redis 有序集合(sorted set) 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zadd.html">ZADD</a></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zcard.html">ZCARD</a></td><td>获取有序集合的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zcount.html">ZCOUNT</a></td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zincrby.html">ZINCRBY</a></td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zinterstore.html">ZINTERSTORE</a></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zlexcount.html">ZLEXCOUNT</a></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrange.html">ZRANGE</a></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrangebylex.html">ZRANGEBYLEX</a></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrangebyscore.html">ZRANGEBYSCORE</a></td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrank.html">ZRANK</a></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrem.html">ZREM</a></td><td>移除有序集合中的一个或多个成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX</a></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK</a></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE</a></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrange.html">ZREVRANGE</a></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrangebyscore.html">ZREVRANGEBYSCORE</a></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zrevrank.html">ZREVRANK</a></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zscore.html">ZSCORE</a></td><td>返回有序集中，成员的分数值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zunionstore.html">ZUNIONSTORE</a></td><td>计算一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-sorted-sets-zscan.html">ZSCAN</a></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h3 id="Redis-HyperLogLog-命令"><a href="#Redis-HyperLogLog-命令" class="headerlink" title="Redis HyperLogLog 命令"></a>Redis HyperLogLog 命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfadd.html">PFADD</a></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfcount.html">PFCOUNT</a></td><td>返回给定 HyperLogLog 的基数估算值</td></tr><tr><td><a href="https://www.twle.cn/l/yufei/redis/redis-basic-hyperloglog-pfmerge.html">PFMERGE</a></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><h3 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h3><p><a href="https://www.twle.cn/l/yufei/redis/redis-basic-pub-sub.html">Redis 发布订阅 - Redis 基础教程 - 简单教程，简单编程</a></p><h3 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h3><h3 id="Redis-Script-脚本-命令"><a href="#Redis-Script-脚本-命令" class="headerlink" title="Redis Script( 脚本 ) 命令"></a>Redis Script( 脚本 ) 命令</h3><h3 id="Redis-连接命令"><a href="#Redis-连接命令" class="headerlink" title="Redis 连接命令"></a>Redis 连接命令</h3><h3 id="Redis-服务器"><a href="#Redis-服务器" class="headerlink" title="Redis 服务器"></a>Redis 服务器</h3><h3 id="Java-使用-Redis"><a href="#Java-使用-Redis" class="headerlink" title="Java 使用 Redis"></a>Java 使用 Redis</h3><h3 id="PHP-和-Redis"><a href="#PHP-和-Redis" class="headerlink" title="PHP 和 Redis"></a>PHP 和 Redis</h3><h3 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h3><h3 id="Redis-服务安全"><a href="#Redis-服务安全" class="headerlink" title="Redis 服务安全"></a>Redis 服务安全</h3><h3 id="Redis-性能测试"><a href="#Redis-性能测试" class="headerlink" title="Redis 性能测试"></a>Redis 性能测试</h3><h3 id="Redis-客户端连接"><a href="#Redis-客户端连接" class="headerlink" title="Redis 客户端连接"></a>Redis 客户端连接</h3><h3 id="Redis-管道技术"><a href="#Redis-管道技术" class="headerlink" title="Redis 管道技术"></a>Redis 管道技术</h3><h3 id="Redis-分区"><a href="#Redis-分区" class="headerlink" title="Redis 分区"></a>Redis 分区</h3><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Mac："><a href="#Mac：" class="headerlink" title="Mac："></a>Mac：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line"><span class="meta">#</span><span class="bash"> To have launchd start redis now and restart at login:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   brew services start redis</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span></span><br><span class="line">brew update;brew services start redis</span><br><span class="line"></span><br><span class="line">cotEdit /usr/local/etc/redis.conf</span><br><span class="line">注释 bind 127.0.0.1</span><br><span class="line">取消注释 requirepass foobare， 并配置密码</span><br><span class="line"></span><br><span class="line">brew services list                </span><br><span class="line"><span class="meta">#</span><span class="bash"> Name          Status  User         Plist</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> elasticsearch stopped</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis         started zhangronghui /Users/zhangronghui/Library/LaunchAgents/homebrew.mxcl.redis.plist</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> unbound       stopped</span></span><br><span class="line"></span><br><span class="line">brew services restart redis</span><br><span class="line">pip install iredis</span><br><span class="line">redis-cli/iredis -a redispassword --raw</span><br></pre></td></tr></table></figure><h3 id="Linux-上"><a href="#Linux-上" class="headerlink" title="Linux 上"></a>Linux 上</h3><p><a href="https://juejin.im/post/5ecc754bf265da770f51f373">centos安装redis - 掘金</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span></span><br><span class="line">rsync -azvhP ~/Downloads/Compressed/redis-5.0.7.tar.gz  root@47.93.53.47:/tmp</span><br><span class="line">cd /tmp</span><br><span class="line">tar xf /tmp/redis-5.0.7.tar.gz</span><br><span class="line">cd redis-5.0.7</span><br><span class="line">make</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/redis/etc</span><br><span class="line">cp redis.conf /usr/local/redis/etc</span><br><span class="line">vim /usr/local/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line">1）配置redis为后台启动：daemonize no  修改为 daemonize yes</span><br><span class="line">2）开启外网访问：bind 127.0.01  注释掉</span><br><span class="line">3）配置密码：requirepass 设置密码</span><br><span class="line"></span><br><span class="line">pip install iredis</span><br><span class="line">iredis --raw</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line">export PATH=/usr/local/redis/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line">iredis --raw</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/03/12/CXDx73TjfPUGYwL.png" alt="CXDx73TjfPUGYwL" style="zoom:33%;" /><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://github.com/laixintao/iredis">laixintao/iredis: Interactive Redis: A Terminal Client for Redis with AutoCompletion and Syntax Highlighting.</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install iredis</span><br></pre></td></tr></table></figure><p>启动 redis-cli 或者更好的替代品 iredis ( pip install iredis )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iredis -a redispassword --raw # --raw 为了可以查看中文</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mylxsw/redis-tui">mylxsw/redis-tui: A Redis Text-based UI client in CLI</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://zronghui.github.io/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>待总结</title>
    <link href="https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html"/>
    <id>https://zronghui.github.io/todo/%E5%BE%85%E6%80%BB%E7%BB%93.html</id>
    <published>2020-05-25T12:26:42.000Z</published>
    <updated>2020-06-03T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://mp.weixin.qq.com/s/MA1CLXdknLvnPV_s3ZQUSg">通俗易懂 限流算法原理剖析</a></p><p>3 种限流算法</p><p><a href="https://www.cnblogs.com/keyyang/p/4128424.html">Thread.sleep(0)的意义&amp; 多线程详解 - 走过路过ボ不要错过 - 博客园</a></p><p>为了重新竞争 CPU ，防止系统假死</p><p><a href="https://www.tracholar.top/2018/07/19/how-to-simulate-the-environment-cron-executes-a-script-with/">如何模拟环境cron执行脚本？ | 智子</a></p><p>感觉就是把 env 保存下来，再删除当前 shell 的 env</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>books to read</title>
    <link href="https://zronghui.github.io/todo/books-to-read.html"/>
    <id>https://zronghui.github.io/todo/books-to-read.html</id>
    <published>2020-05-23T09:29:44.000Z</published>
    <updated>2020-06-08T12:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>TXT、EPUB、UMD</p><h2 id="技术书籍"><a href="#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h2><h2 id="放松"><a href="#放松" class="headerlink" title="放松"></a>放松</h2><ul><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/27029890/">外婆的道歉信 (豆瓣)</a></li><li><input disabled="" type="checkbox"> <a href="https://book.douban.com/subject/30140436/">清单人生 (豆瓣)</a></li></ul><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input disabled="" type="checkbox"> 放学后  东野圭吾</li><li><input disabled="" type="checkbox"> 恶意   东野圭吾</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>to read</title>
    <link href="https://zronghui.github.io/to-read.html"/>
    <id>https://zronghui.github.io/to-read.html</id>
    <published>2020-05-23T09:29:02.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>fabric</title>
    <link href="https://zronghui.github.io/blockchain/fabric.html"/>
    <id>https://zronghui.github.io/blockchain/fabric.html</id>
    <published>2020-05-21T07:28:00.000Z</published>
    <updated>2020-06-03T14:13:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>分类账 – 账本</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p><strong>channel</strong> : 定义 Fabric 网络功能, 比如块的制作方式和节点可以使用的 Fabric 版本 、 定义了哪些组织是联盟的成员。channel是特定网络成员之间的私有通信层。 只有被邀请到频道的组织才能使用频道，而网络中的其他成员是看不见的。每个channel都有一个独立的区块链分类账。 被邀请“加入”其同行的组织存储通道分类账并验证通道上的交易。</p><p><strong>ordering nodes</strong>: 允许 peers 专注于验证事务并将它们提交到分类账中, 从客户端接收经过认可的事务后，它们对事务的顺序达成共识，然后将它们添加到块中</p><p><strong>peers</strong>: 验证交易并将交易块添加到区块链分类账时，它们不会决定交易的顺序</p><p><strong>smart contract</strong>: 智能合约。包含管理区块链分类账上资产的业务逻辑。 由网络成员运行的应用程序可以调用智能合同在分类账上<strong>创建</strong>资产，以及<strong>更改和转移</strong>这些资产。 应用程序还可以<strong>查询</strong>智能合同来<strong>读取</strong>分类账上的数据。</p><p><strong>multiple signatures</strong>: 多重签名。为了确保交易有效，使用智能合同创建的交易通常需要由多个组织签署，以便提交给渠道分类账。</p><p><strong>chaincode</strong>: 在 fabric 中，是智能合约打的包。链码安装在一个组织的 peer 上，在将链码部署到通道之前，通道的成员需要就链码定义达成一致，以建立链码治理。 当所需的组织数量一致时，链码定义可以提交给通道，并且链码已经可以使用了。然后部署到一个通道，在那里它可以用来认可交易和与区块链分类账互动。 </p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p><a href="https://github.com/hyperledger/fabric-samples">hyperledger/fabric-samples</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh">https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh</a></p><p>此脚本实现以下功能：</p><p>克隆 hyperledger/fabric-samples 仓库<br>检出适当的版本标签<br>将指定版本的Hyperledger Fabric平台特定二进制文件和配置文件安装到fabric-samples下的/bin和/config目录中<br>下载指定版本的Hyperledger Fabric docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mcd fabric</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 bootstrap.sh 弄到这个目录里</span></span><br><span class="line">chmod u+x bootstrap.sh</span><br><span class="line">./bootstrap.sh</span><br><span class="line"></span><br><span class="line">export PATH=/root/fabric/fabric-samples/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="Bring-up-the-test-network"><a href="#Bring-up-the-test-network" class="headerlink" title="Bring up the test network"></a>Bring up the test network</h3><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/test_network.html">Using the Fabric test network — hyperledger-fabricdocs master 文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br><span class="line">./network.sh -h</span><br><span class="line">./network.sh down # 从以前的运行中删除任何容器或工件</span><br><span class="line">./network.sh up # 启动网络</span><br><span class="line">docker ps -a # 应该可以看到由 network.sh 脚本创建的三个节点</span><br><span class="line">./network.sh createChannel</span><br><span class="line"><span class="meta">#</span><span class="bash"> createChannel 主要的操作：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. Creating channel mychannel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. Join Org1 peers to the channel...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. Join Org2 peers to the channel...</span></span><br><span class="line"></span><br><span class="line">export GOPROXY=https://goproxy.io</span><br><span class="line">export GO111MODULE=on</span><br><span class="line"></span><br><span class="line">./network.sh deployCC # 在通道上启动链码</span><br><span class="line"><span class="meta">#</span><span class="bash"> deployCC 主要的操作：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 安装 golang 的依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. Chaincode is packaged on peer0.org1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. Chaincode is installed on peer0.org1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. Chaincode is installed on peer0.org2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5. Query installed successful on peer0.org1 on channel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6. Chaincode definition approved on peer0.org1 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7. Checking the commit readiness of the chaincode definition on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8. Checking the commit readiness of the chaincode definition on peer0.org2 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9. Chaincode definition approved on peer0.org2 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10. Chaincode definition committed on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 11. Querying chaincode definition on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 12. Querying chaincode definition on peer0.org2 on channel <span class="string">'mychannel'</span>...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 13. Invoke transaction successful on peer0.org1 peer0.org2 on channel <span class="string">'mychannel'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 14. Querying on peer0.org1 on channel <span class="string">'mychannel'</span>...</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pQZr7wJ.png" alt="image-20200528105117015"></p><p><img src="https://i.imgur.com/Lse0e7F.png" alt="image-20200528183519799"></p><h4 id="查询、更改"><a href="#查询、更改" class="headerlink" title="查询、更改"></a>查询、更改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PWD&#125;/../bin:$&#123;PWD&#125;:$PATH</span><br><span class="line">export FABRIC_CFG_PATH=$PWD/../config/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Environment variables <span class="keyword">for</span> Org1</span></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org1MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询</span></span><br><span class="line">peer chaincode query -C mychannel -n fabcar -c '&#123;"Args":["queryAllCars"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改</span></span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls true --cafile $&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n fabcar --peerAddresses localhost:7051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '&#123;"function":"changeCarOwner","Args":["CAR9","Dave"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询运行在 org 2对等节点上的链码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Environment variables <span class="keyword">for</span> Org2</span></span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID="Org2MSP"</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br><span class="line"></span><br><span class="line">peer chaincode query -C mychannel -n fabcar -c '&#123;"Args":["queryAllCars"]&#125;'</span><br><span class="line"></span><br><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/KWkBjMD.png" alt="image-20200528204924722"></p><h3 id="Fabcar-：用-fabric-的-SDK-调用智能合约"><a href="#Fabcar-：用-fabric-的-SDK-调用智能合约" class="headerlink" title="Fabcar ：用 fabric 的 SDK 调用智能合约"></a>Fabcar ：用 fabric 的 SDK 调用智能合约</h3><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/write_first_app.html">编写你的第一个应用 — hyperledger-fabricdocs master 文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd fabric/fabric-samples/first-network</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除旧网络</span></span><br><span class="line">./byfn.sh down</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rm -f $(docker ps -aq) <span class="comment"># 删除所有 images，不可调用</span></span></span><br><span class="line">docker rmi -f $(docker images | grep fabcar | awk '&#123;print $3&#125;')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动网络</span></span><br><span class="line">cd ../fabcar</span><br><span class="line">./startFabric.sh javascript</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后出现下面的 doc</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Follow the instructions for the programming language of your choice:</span><br><span class="line"></span><br><span class="line">JavaScript:</span><br><span class="line"></span><br><span class="line">  Start by changing into the "javascript" directory:</span><br><span class="line">    cd javascript</span><br><span class="line"></span><br><span class="line">  Next, install all required packages:</span><br><span class="line">    npm install</span><br><span class="line"></span><br><span class="line">  Then run the following applications to enroll the admin user, and register a new user</span><br><span class="line">  called appUser which will be used by the other applications to interact with the deployed</span><br><span class="line">  FabCar contract:</span><br><span class="line">    node enrollAdmin</span><br><span class="line">    node registerUser</span><br><span class="line"></span><br><span class="line">  You can run the invoke application as follows. By default, the invoke application will</span><br><span class="line">  create a new car, but you can update the application to submit other transactions:</span><br><span class="line">    node invoke</span><br><span class="line"></span><br><span class="line">  You can run the query application as follows. By default, the query application will</span><br><span class="line">  return all cars, but you can update the application to evaluate other transactions:</span><br><span class="line">    node query</span><br><span class="line"></span><br><span class="line">TypeScript:</span><br><span class="line"></span><br><span class="line">  Start by changing into the "typescript" directory:</span><br><span class="line">    cd typescript</span><br><span class="line"></span><br><span class="line">  Next, install all required packages:</span><br><span class="line">    npm install</span><br><span class="line"></span><br><span class="line">  Next, compile the TypeScript code into JavaScript:</span><br><span class="line">    npm run build</span><br><span class="line"></span><br><span class="line">  Then run the following applications to enroll the admin user, and register a new user</span><br><span class="line">  called appUser which will be used by the other applications to interact with the deployed</span><br><span class="line">  FabCar contract:</span><br><span class="line">    node dist/enrollAdmin</span><br><span class="line">    node dist/registerUser</span><br><span class="line"></span><br><span class="line">  You can run the invoke application as follows. By default, the invoke application will</span><br><span class="line">  create a new car, but you can update the application to submit other transactions:</span><br><span class="line">    node dist/invoke</span><br><span class="line"></span><br><span class="line">  You can run the query application as follows. By default, the query application will</span><br><span class="line">  return all cars, but you can update the application to evaluate other transactions:</span><br><span class="line">    node dist/query</span><br><span class="line"></span><br><span class="line">Java:</span><br><span class="line"></span><br><span class="line">  Start by changing into the "java" directory:</span><br><span class="line">    cd java</span><br><span class="line"></span><br><span class="line">  Then, install dependencies and run the test using:</span><br><span class="line">    mvn test</span><br><span class="line"></span><br><span class="line">  The test will invoke the sample client app which perform the following:</span><br><span class="line">    - Enroll admin and appUser and import them into the wallet (if they don't already exist there)</span><br><span class="line">    - Submit a transaction to create a new car</span><br><span class="line">    - Evaluate a transaction (query) to return details of this car</span><br><span class="line">    - Submit a transaction to change the owner of this car</span><br><span class="line">    - Evaluate a transaction (query) to return the updated details of this car</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装应用程序</span></span><br><span class="line">cd javascript</span><br><span class="line">npm install</span><br><span class="line">ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 你会看到下边的文件：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> enrollAdmin.js  node_modules       package.json  registerUser.js</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> invoke.js       package-lock.json  query.js      wallet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登记管理员用户</span></span><br><span class="line">node enrollAdmin.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注册和登记 user1</span></span><br><span class="line">node registerUser.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询账本</span></span><br><span class="line">node query.js # 使用 user1 查询账本</span><br><span class="line"><span class="meta">#</span><span class="bash"> query.js 里面有一句是</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> const result = await contract.evaluateTransaction(<span class="string">'queryAllCars'</span>);</span></span><br><span class="line">vim query.js # 把它调成 queryCar</span><br><span class="line"><span class="meta">#</span><span class="bash"> const result = await contract.evaluateTransaction(<span class="string">'queryCar'</span>, <span class="string">'CAR4'</span>);</span></span><br><span class="line">node query.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新账本</span></span><br><span class="line">node invoke.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建和提交交易到网络的代码段：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> await contract.submitTransaction(<span class="string">'createCar'</span>, <span class="string">'CAR12'</span>, <span class="string">'Honda'</span>, <span class="string">'Accord'</span>, <span class="string">'Black'</span>, <span class="string">'Tom'</span>);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意是 submitTransaction 而不是 evaluateTransaction</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了查看这个被写入账本的交易，返回到 query.js 并将参数 CAR4 更改为 CAR12</span></span><br><span class="line">node query.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设 Tom 很大方，想把他的 Honda Accord 送给一个叫 Dave 的人。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了完成这个，返回到 invoke.js 然后利用输入的参数，将智能合约的交易从 createCar 改为 changeCarOwner ：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> await contract.submitTransaction(<span class="string">'changeCarOwner'</span>, <span class="string">'CAR12'</span>, <span class="string">'Dave'</span>);</span></span><br><span class="line">node invoke.js</span><br><span class="line">node query.js</span><br></pre></td></tr></table></figure><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><p>centos aliyun 搭建 Java 环境，再测试代码</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="Hyperledger-Composer-已经过时了"><a href="#Hyperledger-Composer-已经过时了" class="headerlink" title="Hyperledger Composer (已经过时了)"></a><strong>Hyperledger Composer (已经过时了)</strong></h3><p><a href="https://hyperledger.github.io/composer/latest/installing/installing-index"><strong>Installing</strong></a></p><p><a href="https://hyperledger.github.io/composer/latest/installing/installing-prereqs">Installing pre-requisites</a></p><p>Install nvm and switch node to 8</p><p>install docker、 vs code、Hyperledger Composer plugin for vscode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> new iterm2 tab</span></span><br><span class="line">nvm —-version</span><br><span class="line"></span><br><span class="line">nvm install v8</span><br><span class="line">nvm use 8</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>你了解你的女儿吗</title>
    <link href="https://zronghui.github.io/other/jiao-%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B.html"/>
    <id>https://zronghui.github.io/other/jiao-%E7%9A%84%E9%82%A3%E7%82%B9%E7%A0%B4%E4%BA%8B.html</id>
    <published>2020-05-20T14:12:02.000Z</published>
    <updated>2020-05-25T14:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d00e61f1ff08af8a18ca3363e59cc470b8b4665522bc280023b5df65570015c7"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>docker mindmap[图片版]</title>
    <link href="https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html"/>
    <id>https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html</id>
    <published>2020-05-17T10:21:52.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/17/r17xMI4pSjAGFb6.png" alt="Docker"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>如何编写最佳的Dockerfile</title>
    <link href="https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html"/>
    <id>https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html</id>
    <published>2020-05-17T07:09:57.000Z</published>
    <updated>2020-05-17T13:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://rock-it.pl/how-to-write-excellent-dockerfiles/">How to write excellent Dockerfiles</a><br><a href="https://blog.fundebug.com/2017/05/15/write-excellent-dockerfile/">如何编写最佳的Dockerfile</a></p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile | 菜鸟教程</a></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><ul><li>更快的构建速度</li><li>更小的 Docker 镜像大小</li><li>更少的 Docker 镜像层</li><li>充分利用镜像缓存</li><li>增加 Dockerfile 可读性</li><li>让 Docker 容器使用起来更简单</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>编写.dockerignore 文件</li><li>容器只运行单个应用</li><li>将多个 RUN 指令合并为一个</li><li>基础镜像的标签不要用 latest</li><li>每个 RUN 指令后删除多余文件</li><li>选择合适的基础镜像(alpine 版本最好)</li><li>设置 WORKDIR 和 CMD</li><li>使用 ENTRYPOINT (可选)</li><li>在 entrypoint 脚本中使用 exec</li><li>COPY 与 ADD 优先使用前者</li><li>合理调整 COPY 与 RUN 的顺序</li><li>设置默认的环境变量，映射端口和数据卷</li><li>使用 LABEL 设置镜像元数据</li><li>添加 HEALTHCHECK</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 Dockerfile 犯了几乎所有的错(当然我是故意的)。接下来，我会一步步优化它。假设我们需要使用 Docker 运行一个 Node.js 应用，下面就是它的 Dockerfile(CMD 指令太复杂了，所以我简化了，它是错误的，仅供参考)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line">RUN apt-get install -y nodejs ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line"># this should start three processes, mysql and ssh</span><br><span class="line"># in the background and node app in foreground</span><br><span class="line"># isn&#39;t it beautifully terrible? &lt;3</span><br><span class="line">CMD mysql &amp; sshd &amp; npm start</span><br></pre></td></tr></table></figure><p>构建镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wtf .</span><br></pre></td></tr></table></figure><h3 id="1-编写-dockerignore-文件"><a href="#1-编写-dockerignore-文件" class="headerlink" title="1. 编写.dockerignore 文件"></a>1. 编写.dockerignore 文件</h3><p>构建镜像时，Docker 需要先准备<code>context</code> ，将所有需要的文件收集到进程中。默认的<code>context</code>包含 Dockerfile 目录中的所有文件，但是实际上，<strong>我们并不需要.*git* 目录，node_modules 目录等内容</strong>。 <code>.dockerignore</code> 的作用和语法类似于 <code>.gitignore</code>，可以忽略一些不需要的文件，这样可以有效加快镜像构建时间，同时减少 Docker 镜像的大小。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.git&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br></pre></td></tr></table></figure><h3 id="2-容器只运行单个应用"><a href="#2-容器只运行单个应用" class="headerlink" title="2. 容器只运行单个应用"></a>2. 容器只运行单个应用</h3><p>从技术角度讲，你可以在 Docker 容器中运行多个进程。你可以将<em>数据库</em>，前端，后端，ssh，supervisor 都运行在同一个 Docker 容器中。但是，这会让你非常痛苦:</p><ul><li>非常长的构建时间(修改前端之后，整个后端也需要重新构建)</li><li>非常大的镜像大小</li><li>多个应用的日志难以处理(不能直接使用 stdout，否则多个应用的日志会混合到一起)</li><li>横向扩展时非常浪费资源(不同的应用需要运行的容器数并不相同)</li><li>僵尸进程问题 - 你需要选择合适的 init 进程</li></ul><p>因此，我建议大家为每个应用构建单独的 Docker 镜像，然后使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 运行多个 Docker 容器。</p><p>现在，我从 Dockerfile 中删除一些不需要的安装包，另外，SSH 可以用<a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a>替代。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line"></span><br><span class="line"># we should remove ssh and mysql, and use</span><br><span class="line"># separate container for database</span><br><span class="line">RUN apt-get install -y nodejs  # ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="3-将多个-RUN-指令合并为一个"><a href="#3-将多个-RUN-指令合并为一个" class="headerlink" title="3. 将多个 RUN 指令合并为一个"></a>3. 将多个 RUN 指令合并为一个</h3><p>Docker 镜像是分层的，下面这些知识点非常重要:</p><ul><li>Dockerfile 中的每个指令都会创建一个新的镜像层。</li><li>镜像层将被缓存和复用</li><li>当 Dockerfile 的指令修改了，复制的文件变化了，或者构建镜像时指定的变量不同了，对应的镜像层缓存就会失效</li><li>某一层的镜像缓存失效之后，它之后的镜像层缓存都会失效</li><li>镜像层是不可变的，如果我们再某一层中添加一个文件，然后在下一层中删除它，则镜像中依然会包含该文件(只是这个文件在 Docker 容器中不可见了)。</li></ul><p>Docker 镜像类似于洋葱。它们都有很多层。为了修改内层，则需要将外面的层都删掉。记住这一点的话，其他内容就很好理解了。</p><p>现在，我们<strong>将所有的<a href="https://docs.docker.com/engine/reference/builder/#run">RUN</a>指令合并为一个</strong>。同时把<code>apt-get upgrade</code>删除，因为它会使得镜像构建非常不确定(我们只需要依赖基础镜像的更新就好了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    &amp;&amp; cd &#x2F;app \</span><br><span class="line">    &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>记住一点，我们只能将变化频率一样的指令合并在一起。将 node.js 安装与 npm 模块安装放在一起的话，则每次修改源代码，都需要重新安装 node.js，这显然不合适。因此，正确的写法是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="4-基础镜像的标签不要用-latest"><a href="#4-基础镜像的标签不要用-latest" class="headerlink" title="4. 基础镜像的标签不要用 latest"></a>4. 基础镜像的标签不要用 latest</h3><p>当镜像没有指定标签时，将默认使用<code>latest</code> 标签。因此， <code>FROM ubuntu</code> 指令等同于<code>FROM ubuntu:latest</code>。当时，当镜像更新时，latest 标签会指向不同的镜像，这时构建镜像有可能失败。如果你的确需要使用最新版的基础镜像，可以使用 latest 标签，否则的话，最好指定确定的镜像标签。</p><p>示例 Dockerfile 应该使用<code>16.04</code>作为标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04  # it&#39;s that easy!</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="5-每个-RUN-指令后删除多余文件"><a href="#5-每个-RUN-指令后删除多余文件" class="headerlink" title="5. 每个 RUN 指令后删除多余文件"></a>5. 每个 RUN 指令后删除多余文件</h3><p>假设我们更新了 apt-get 源，下载，解压并安装了一些软件包，它们都保存在<code>/var/lib/apt/lists/</code>目录中。但是，运行应用时 Docker 镜像中并不需要这些文件。我们最好将它们删除，因为它会使 Docker 镜像变大。</p><p>示例 Dockerfile 中，我们可以删除<code>/var/lib/apt/lists/</code>目录中的文件(它们是由 apt-get update 生成的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    # added lines</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="6-选择合适的基础镜像-alpine-版本最好"><a href="#6-选择合适的基础镜像-alpine-版本最好" class="headerlink" title="6. 选择合适的基础镜像(alpine 版本最好)"></a>6. 选择合适的基础镜像(alpine 版本最好)</h3><p>在示例中，我们选择了<code>ubuntu</code>作为基础镜像。但是我们只需要运行 node 程序，有必要使用一个通用的基础镜像吗？<code>node</code>镜像应该是更好的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"># we don&#39;t need to install node</span><br><span class="line"># anymore and use apt-get</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>更好的选择是 alpine 版本的<code>node</code>镜像。alpine 是一个极小化的 Linux 发行版，只有 4MB，这让它非常适合作为基础镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management">apk</a>是 Alpine 的包管理工具。它与<code>apt-get</code>有些不同，但是非常容易上手。另外，它还有一些非常有用的特性，比如<code>no-cache</code>和 <code>--virtual</code>选项，它们都可以帮助我们减少镜像的大小。</p><h3 id="7-设置-WORKDIR-和-CMD"><a href="#7-设置-WORKDIR-和-CMD" class="headerlink" title="7. 设置 WORKDIR 和 CMD"></a>7. 设置 WORKDIR 和 CMD</h3><p><a href="https://docs.docker.com/engine/reference/builder/#workdir">WORKDIR</a>指令可以设置默认目录，也就是运行<code>RUN</code> / <code>CMD</code> / <code>ENTRYPOINT</code>指令的地方。</p><p><a href="https://docs.docker.com/engine/reference/builder/#cmd">CMD</a>指令可以设置容器创建是执行的默认命令。另外，你应该讲命令写在一个数组中，数组中每个元素为命令的每个单词(参考<a href="https://docs.docker.com/engine/reference/builder/#cmd">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="8-使用-ENTRYPOINT-可选"><a href="#8-使用-ENTRYPOINT-可选" class="headerlink" title="8. 使用 ENTRYPOINT (可选)"></a>8. 使用 ENTRYPOINT (可选)</h3><p><a href="https://docs.docker.com/engine/reference/builder/#entrypoint">ENTRYPOINT</a>指令并不是必须的，因为它会增加复杂度。<code>ENTRYPOINT</code>是一个脚本，它会默认执行，并且将指定的命令错误其参数。它通常用于构建可执行的 Docker 镜像。entrypoint.sh 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env sh</span><br><span class="line"># $0 is a script name,</span><br><span class="line"># $1, $2, $3 etc are passed arguments</span><br><span class="line"># $1 is our command</span><br><span class="line">CMD&#x3D;$1</span><br><span class="line"></span><br><span class="line">case &quot;$CMD&quot; in</span><br><span class="line">  &quot;dev&quot; )</span><br><span class="line">    npm install</span><br><span class="line">    export NODE_ENV&#x3D;development</span><br><span class="line">    exec npm run dev</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  &quot;start&quot; )</span><br><span class="line">    # we can modify files here, using ENV variables passed in</span><br><span class="line">    # &quot;docker create&quot; command. It can&#39;t be done during build process.</span><br><span class="line">    echo &quot;db: $DATABASE_ADDRESS&quot; &gt;&gt; &#x2F;app&#x2F;config.yml</span><br><span class="line">    export NODE_ENV&#x3D;production</span><br><span class="line">    exec npm start</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">   * )</span><br><span class="line">    # Run custom command. Thanks to this line we can still use</span><br><span class="line">    # &quot;docker run our_image &#x2F;bin&#x2F;bash&quot; and it will work</span><br><span class="line">    exec $CMD $&#123;@:2&#125;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例 Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>可以使用如下命令运行该镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 运行开发版本</span><br><span class="line">docker run our-app dev</span><br><span class="line"></span><br><span class="line"># 运行生产版本</span><br><span class="line">docker run our-app start</span><br><span class="line"></span><br><span class="line"># 运行bash</span><br><span class="line">docker run -it our-app &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h3 id="9-在-entrypoint-脚本中使用-exec"><a href="#9-在-entrypoint-脚本中使用-exec" class="headerlink" title="9. 在 entrypoint 脚本中使用 exec"></a>9. 在 entrypoint 脚本中使用 exec</h3><p>在前文的 entrypoint 脚本中，我使用了<code>exec</code>命令运行 node 应用。不使用<code>exec</code>的话，我们则不能顺利地关闭容器，因为 SIGTERM 信号会被 bash 脚本进程吞没。<code>exec</code>命令启动的进程可以取代脚本进程，因此所有的信号都会正常工作。</p><h3 id="10-COPY-与-ADD-优先使用前者"><a href="#10-COPY-与-ADD-优先使用前者" class="headerlink" title="10. COPY 与 ADD 优先使用前者"></a>10. COPY 与 ADD 优先使用前者</h3><p><a href="https://docs.docker.com/engine/reference/builder/#copy">COPY</a>指令非常简单，仅用于将文件拷贝到镜像中。<a href="https://docs.docker.com/engine/reference/builder/#add">ADD</a>相对来讲复杂一些，可以用于下载远程文件以及解压压缩包(参考<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="11-合理调整-COPY-与-RUN-的顺序"><a href="#11-合理调整-COPY-与-RUN-的顺序" class="headerlink" title="11. 合理调整 COPY 与 RUN 的顺序"></a>11. 合理调整 COPY 与 RUN 的顺序</h3><p>我们应该<strong>把变化最少的部分放在 Dockerfile 的前面</strong>，这样可以充分利用镜像缓存。</p><p>示例中，源代码会经常变化，则每次构建镜像时都需要重新安装 NPM 模块，这显然不是我们希望看到的。因此我们可以先拷贝<code>package.json</code>，然后安装 NPM 模块，最后才拷贝其余的源代码。这样的话，即使源代码变化，也不需要重新安装 NPM 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY package.json &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="12-设置默认的环境变量，映射端口和数据卷"><a href="#12-设置默认的环境变量，映射端口和数据卷" class="headerlink" title="12. 设置默认的环境变量，映射端口和数据卷"></a>12. 设置默认的环境变量，映射端口和数据卷</h3><p>运行 Docker 容器时很可能需要一些环境变量。在 Dockerfile 设置默认的环境变量是一种很好的方式。另外，我们应该在 Dockerfile 中设置映射端口和数据卷。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line"></span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/reference/builder/#env">ENV</a>指令指定的环境变量在容器中可以使用。如果你只是需要指定构建镜像时的变量，你可以使用<a href="https://docs.docker.com/engine/reference/builder/#arg">ARG</a>指令。</p><h3 id="13-使用-LABEL-设置镜像元数据"><a href="#13-使用-LABEL-设置镜像元数据" class="headerlink" title="13. 使用 LABEL 设置镜像元数据"></a>13. 使用 LABEL 设置镜像元数据</h3><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="14-添加-HEALTHCHECK"><a href="#14-添加-HEALTHCHECK" class="headerlink" title="14. 添加 HEALTHCHECK"></a>14. 添加 HEALTHCHECK</h3><p>运行容器时，可以指定<code>--restart always</code>选项。这样的话，容器崩溃时，Docker 守护进程(docker daemon)会重启容器。对于需要长时间运行的容器，这个选项非常有用。但是，如果容器的确在运行，但是不可(陷入死循环，配置错误)用怎么办？使用<a href="https://docs.docker.com/engine/reference/builder/#healthcheck">HEALTHCHECK</a>指令可以让 Docker 周期性的检查容器的健康状况。我们只需要指定一个命令，如果一切正常的话返回 0，否则返回 1。对 HEALTHCHECK 感兴趣的话，可以参考<a href="https://blog.newrelic.com/2016/08/24/docker-health-check-instruction/">这篇博客</a>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line">HEALTHCHECK CMD curl --fail http:&#x2F;&#x2F;localhost:$APP_PORT || exit 1</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>当请求失败时，<code>curl --*fail*</code> 命令返回非 0 状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://zronghui.github.io/docker%20k8s/k8s.html"/>
    <id>https://zronghui.github.io/docker%20k8s/k8s.html</id>
    <published>2020-05-16T06:59:37.000Z</published>
    <updated>2020-05-28T23:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="从零开始入门-K8s"><a href="#从零开始入门-K8s" class="headerlink" title="**从零开始入门 K8s"></a>**从零开始入门 K8s</h2><p><a href="https://kubernetes.io/zh/docs/tasks/#%e4%bd%bf%e7%94%a8-kubectl-%e5%91%bd%e4%bb%a4%e8%a1%8c">任务 - Kubernetes</a></p><p><a href="https://juejin.im/post/5ea7f9ef5188256d9c25988e">K8s 资源全汇总 | K8s 大咖带你 31 堂课从零入门 K8s - 掘金</a></p><h3 id="课时3-k8s-核心概念"><a href="#课时3-k8s-核心概念" class="headerlink" title="课时3. k8s 核心概念"></a>课时3. k8s 核心概念</h3><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p>调度、自动修复、水平伸缩</p><p>服务的发现与负载的均衡；<br><strong>容器的自动装箱–scheduling–调度</strong>，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接；<br><strong>自动化的容器的恢复</strong>。在一个集群中，经常会出现宿主机的问题或者说是 OS 的问题，导致容器本身的不可用，Kubernetes 会自动地对这些不可用的容器进行恢复；<br>Kubernetes 会帮助我们去做<strong>应用的自动发布与应用的回滚</strong>，以及与应用相关的配置密文的管理；<br>对于 job 类型任务，Kubernetes 可以去做批量的执行；<br>为了让这个集群、这个应用更富有弹性，Kubernetes 也<strong>支持水平的伸缩</strong>。</p><h4 id="Kubernetes-的架构"><a href="#Kubernetes-的架构" class="headerlink" title="Kubernetes 的架构"></a>Kubernetes 的架构</h4><img src="https://i.loli.net/2020/05/19/Mk3d2bi7JwPyHQx.png" alt="5728b58a8d2cf6c2be789bca5acbb77dde9c4d4c" style="zoom: 25%;" /><img src="https://i.loli.net/2020/05/19/Oi2e5o8jgNauMls.png" alt="b161e11eae280d950de7259873193f1a9359b97f" style="zoom: 25%;" /><img src="https://i.loli.net/2020/05/19/ORNK3QshCVWFMpB.png" alt="9dbdfbe3b7068f32d95b02dc2dd29302c82c9e3e" style="zoom: 25%;" /><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><img src="https://i.loli.net/2020/05/19/vRxHMos7wycODZu.png" alt="616cc75b2ce8d734d6389f521c16f4d1d6f56dff" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/paTk4l9nbVUgsqC.png" alt="5d7c4142358a29dee77740cb9ebe978b04aec2eb" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/VoYe3G6EOsq25WK.png" alt="70fdf18aac3c814fff9c0a6f2a83dd9eed29f387" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/o17wgJbYSUNBzd8.png" alt="ac386185dd887052ed3236a05c82cb9e565733fd" style="zoom:25%;" /><img src="https://i.loli.net/2020/05/19/9KRm6YNWyl8sMDF.png" alt="8995bce3a619f4e182fd65410ddddf477cbf869a" style="zoom:25%;" /><p>一个比较有意思的 metadata 叫做“label”</p><p>这些 label 是可以被 selector，也就是选择器所查询的。这个能力实际上跟我们的 sql 类型的 select 语句是非常相似的</p><img src="https://i.loli.net/2020/05/19/P8ntC5p6ydsYxjR.png" alt="1_17" style="zoom:25%;" /><h3 id="课时4-Pod-与容器设计模式"><a href="#课时4-Pod-与容器设计模式" class="headerlink" title="课时4. Pod 与容器设计模式"></a>课时4. Pod 与容器设计模式</h3><p><a href="https://mp.weixin.qq.com/s/OW7zvGhPgGAnBuo4A_SXFw">从零入门 K8s| 人人都能看懂 Pod 与容器设计模式</a></p><h4 id="为什么需要-Pod"><a href="#为什么需要-Pod" class="headerlink" title="为什么需要 Pod"></a>为什么需要 Pod</h4><p><strong>容器的基本概念</strong></p><p>容器的本质实际上是一个进程，是一个视图被隔离，资源受限的进程。很多人都说 Kubernetes 是云时代的操作系统，这个非常有意思，因为如果以此类推，容器镜像就是这个操作系统的软件安装包。</p><p><strong>真实操作系统里的例子</strong></p><p>如果说 Kubernetes 就是操作系统的话，那么不妨看一下真实的操作系统的例子。</p><p>例子里面有一个程序叫做 Helloworld，这个 Helloworld 程序实际上是由一组进程组成的，需要注意一下，这里说的进程实际上等同于 Linux 中的线程。</p><p>因为 Linux 中的线程是轻量级进程，所以如果从 Linux 系统中去查看 Helloworld 中的 pstree，将会看到这个 Helloworld 实际上是由四个线程组成的，分别是 {api、main、log、compute}。也就是说，四个这样的线程共同协作，共享 Helloworld 程序的资源，组成了 Helloworld 程序的真实工作情况。</p><p>这是操作系统里面进程组或者线程组中一个非常真实的例子，以上就是进程组的一个概念。</p><p>在真实的操作系统里面，一个程序往往是根据进程组来进行管理的。Kubernetes 把它类比为一个操作系统，比如说 Linux。针对于容器我们前面提到可以类比为进程，就是前面的 Linux 线程。那么 Pod 又是什么呢？实际上 Pod 就是我们刚刚提到的进程组，也就是 Linux 里的线程组。</p><p><strong>进程组概念</strong></p><p>若为了管理很多个进程，直接把容器里 PID=1 的进程直接改成 systemd，那么会有一些问题：</p><p>首先，PID=1 进程是应用本身，如果现在把这个 PID=1 的进程给 kill 了，或者它自己运行过程中死掉了，那么剩下三个进程的资源就没有人回收了。</p><p>其次，不能知道应用是不是退出，fail， 异常</p><p><strong>Pod = “进程组”</strong></p><p>在 Kubernetes 里面，Pod 实际上正是 Kubernetes 项目为你抽象出来的一个可以类比为进程组的概念。</p><p>Pod 在 Kubernetes 里面只有一个逻辑单位，没有一个真实的东西对应说这个就是 Pod。</p><p>真正起来在物理上存在的东西，就是容器</p><p><strong>为什么 Pod 必须是原子调度单位？</strong></p><p>为了解决Task co-scheduling 问题，具体分析过程见原文</p><p><strong>再次理解 Pod</strong></p><p>Pod 里面的容器是“超亲密关系”</p><p>超亲密关系大概分为以下几类：</p><ul><li>比如说两个进程之间会发生<strong>文件交换</strong>，前面提到的例子就是这样，一个写日志，一个读日志；</li><li>两个进程之间需要通过 localhost 或者说是本地的 Socket 去进行<strong>通信</strong>，这种本地通信也是超亲密关系；</li><li>这两个容器或者是微服务之间，需要发生非常<strong>频繁的 RPC 调用</strong>，出于性能的考虑，也希望它们是超亲密关系；</li><li>两个容器或者是应用，它们需要<strong>共享某些 Linux Namespace</strong>。最简单常见的一个例子，就是我有一个容器需要加入另一个容器的 Network Namespace。这样我就能看到另一个容器的网络设备，和它的网络信息。</li></ul><p><strong>Pod 要解决的问题</strong></p><p>具体的解法分为两个部分：网络和存储</p><ul><li><p><strong>共享网络</strong></p></li><li><p>比如说现在有一个 Pod，其中包含了一个容器 A 和一个容器 B，它们两个就要共享 Network Namespace。在 Kubernetes 里的解法是这样的：在每个 Pod 里，额外起一个 Infra container 小容器来共享整个 Pod 的  Network Namespace。（Infra container 是一个非常小的镜像，大概 100~200KB 左右。所以说一个 Pod 里面的所有容器，它们看到的网络视图是完全一样的。即：它们看到的网络设备、IP地址、Mac地址等等，跟网络相关的信息，其实全是一份）</p></li><li><p>所以整个 Pod 里面，必然是 Infra container 第一个启动。并且整个 <strong>Pod 的生命周期是等同于 Infra container 的生命周期</strong>的，与容器 A 和 B 是无关的。这也是为什么在 Kubernetes 里面，<strong>它是允许去单独更新 Pod 里的某一个镜像</strong>的，即：做这个操作，整个 Pod 不会重建，也不会重启，这是非常重要的一个设计。</p></li><li><p><strong>共享存储</strong></p></li><li><p>比如说现在有两个容器，一个是 Nginx，另外一个是非常普通的容器，在 Nginx 里放一些文件，让我能通过 Nginx 访问到。所以它需要去 share 这个目录。我 share 文件或者是 share 目录在 Pod 里面是非常简单的，实际上就是把 volume 变成了 Pod level。然后所有容器，就是所有同属于一个 Pod 的容器，他们共享所有的 volume。</p></li></ul><h4 id="详解容器设计模式"><a href="#详解容器设计模式" class="headerlink" title="详解容器设计模式"></a>详解容器设计模式</h4><p><strong>举例</strong></p><p>有一个 WAR 包需要把它放到 Tomcat 的 web APP 目录下面，这样就可以把它启动起来了。可是像这样一个 WAR 包或 Tomcat 这样一个容器的话，怎么去做，怎么去发布</p><p>第一种方式：可以把 WAR 包和 Tomcat 打包放进一个镜像里面。但是这样带来一个问题，就是现在这个镜像实际上揉进了两个东西。那么接下来，无论是我要更新 WAR 包还是说我要更新 Tomcat，都要重新做一个新的镜像，这是比较麻烦的；</p><p>第二种方式：就是<strong>镜像里面只打包 Tomcat</strong>。它就是一个 Tomcat，但是需要使用数据卷的方式，比如说 hostPath，从宿主机上把 WAR 包挂载进我们 Tomcat 容器中，挂到我的 web APP 目录下面，这样把这个容器启用起来之后，里面就能用了。</p><p><strong>InitContainer</strong></p><p>在上图的 yaml 里，首先定义一个 Init Container，它只做一件事情，就是把 WAR 包从镜像里拷贝到一个 Volume 里面，它做完这个操作就退出了，所以 Init Container 会比用户容器先启动，并且严格按照定义顺序来依次执行</p><p><strong>容器设计模式：Sidecar</strong></p><p>在 Pod 里面，可以定义一些专门的容器，来执行主业务容器所需要的一些辅助工作，比如我们前面举的例子，其实就干了一个事儿，这个 Init Container，它就是一个 Sidecar，它只负责把镜像里的 WAR 包拷贝到共享目录里面，以便被 Tomcat 能够用起来。</p><ul><li>Sidecar：应用与日志收集</li><li>业务容器将日志写在一个 Volume 里面,Sidecar 容器一定可以通过共享该 Volume，直接把日志文件读出来，然后存到远程存储里面，或者转发到另外一个例子</li><li>Sidecar：代理容器</li><li>单独写一个小的 Proxy，用来处理对接外部的服务集群，它对外暴露出来只有一个 IP 地址就可以了。所以接下来，业务容器主要访问 Proxy，然后由 Proxy 去连接这些服务集群</li><li>Sidecar：适配器容器</li><li>有个例子：现在业务容器暴露出来的监控接口是 /metrics，访问这个容器的 metrics 的 URL 就可以拿到了。可是现在，这个监控系统升级了，它访问的 URL 是 /health，我只认得暴露出 health 健康检查的 URL，才能去做监控，metrics 不认识。那这个怎么办？那就需要改代码了，但可以不去改代码，额外写一个 Adapter，用来把所有对 health 的这个请求转发给 metrics 就可以了，所以这个 Adapter 对外暴露的是 health 这样一个监控的 URL，这就可以了，你的业务就又可以工作了。</li></ul><h3 id="课时5-应用编排与管理-一-：核心原理"><a href="#课时5-应用编排与管理-一-：核心原理" class="headerlink" title="课时5. 应用编排与管理(一)：核心原理"></a>课时5. 应用编排与管理(一)：核心原理</h3><h4 id="资源元信息"><a href="#资源元信息" class="headerlink" title="资源元信息"></a>资源元信息</h4><p>元数据 包括 labels annotations owereference, 常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有 pods</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl apply -f pod1.yaml</span><br><span class="line">kubectl apply -f pod2.yaml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有 pods, 并且显示 labels</span></span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line">kubectl get pods nginx1 -o yaml | less</span><br><span class="line"><span class="meta">#</span><span class="bash"> 增 label</span></span><br><span class="line">kubectl label pods nginx1 env=test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改 label</span></span><br><span class="line">kubectl label pods nginx1 env=test —overwrite</span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删 label</span></span><br><span class="line">kubectl label pods nginx tie-</span><br><span class="line">kubectl get pods —show-labels</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查 label</span></span><br><span class="line">kubectl get pods —show-labels -l env=test</span><br><span class="line">kubectl get pods —show-labels -l env=test,env=dev # , 与 的关系</span><br><span class="line">kubectl get pods —show-labels -l env=dev,tie=front</span><br><span class="line">kubectl get pods —show-labels -l ’env in (dev,test)’</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加 annotation</span></span><br><span class="line">kubectl annotate pods nginx1 my-annotate=‘my annotate,ok’</span><br><span class="line">kubectl get pods nging1 -o yaml | less</span><br><span class="line">kubectl apply -f rs.yaml</span><br><span class="line">kubectl get replicasets  nginx-replicasets -o yaml |less</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get pods nginx-replicasets-rhd68 -o yaml | less</span><br></pre></td></tr></table></figure><h4 id="控制器模式"><a href="#控制器模式" class="headerlink" title="控制器模式"></a>控制器模式</h4><ol><li>控制循环</li><li>Sensor</li><li>控制循环例子-扩容</li></ol><p>没看懂</p><p>总结：</p><ol><li><p>两种 API 设计方法</p><p><strong>Kubernetes 控制器模式依赖声明式的 API</strong>。另外一种常见的 API 类型是命令式 API。为什么 Kubernetes 采用声明式 API，而不是命令式 API 来设计整个控制器呢？</p></li></ol><p>   首先，比较两种 API 在交互行为上的差别。在生活中，常见的<strong>命令式</strong>的交互方式是家长和孩子交流方式，因为孩子欠缺目标意识，无法理解家长期望，家长往往通过<strong>一些命令</strong>，教孩子一些<strong>明确的动作</strong>，比如说：吃饭、睡觉类似的命令。我们在容器编排体系中，命令式 API 就是通过向系统发出明确的操作来执行的。</p><p>   而常见的<strong>声明式</strong>交互方式，就是老板对自己员工的交流方式。老板一般不会给自己的员工下很明确的决定，实际上可能老板对于要操作的事情本身，还不如员工清楚。因此，老板通过给员工<strong>设置可量化的业务目标</strong>的方式，来发挥员工自身的主观能动性。比如说，老板会要求某个产品的市场占有率达到 80%，而不会指出要达到这个市场占有率，要做的具体操作细节。</p><p>   类似的，在容器编排体系中，我们可以执行一个应用实例副本数保持在 3 个，而不用明确的去扩容 Pod 或是删除已有的 Pod，来保证副本数在三个。</p><ol start="2"><li><p>命令式 API 的问题</p><img src="https://i.loli.net/2020/05/24/c2WNj5UPGnXBVYk.jpg" alt="img" style="zoom:50%;" /></li><li><p>控制器模式总结</p><p>控制型模式中最核心的就是控制循环的概念；</p><p>两种 API 设计方法：声明式 API 和命令式 API ；Kubernetes 所采用的控制器模式，是由声明式 API 驱动的。</p></li></ol><h3 id="课时6-应用编排与管理-二-：Deployment"><a href="#课时6-应用编排与管理-二-：Deployment" class="headerlink" title="课时6. 应用编排与管理(二)：Deployment"></a>课时6. 应用编排与管理(二)：Deployment</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><p><strong>Deployment：管理部署发布的控制器</strong></p><p>Deployment 能帮我们做什么事情呢？</p><p>首先，<strong>Deployment 定义了一种 Pod 期望数量</strong>，比如说应用 A，我们期望 Pod 数量是四个，那么这样的话，controller 就会持续维持 Pod 数量为期望的数量。当我们与 Pod 出现了网络问题或者宿主机问题的话，controller 能帮我们恢复，也就是新扩出来对应的 Pod，来保证可用的 Pod 数量与期望数量一致；<br>配置 Pod 发布方式，也就是说 controller 会<strong>按照用户给定的策略来更新 Pod</strong>，而且更新过程中，也可以设定不可用 Pod 数量在多少范围内；<br>如果更新过程中发生问题的话，即所谓<strong>“一键”回滚</strong>，也就是说你通过一条命令或者一行修改能够将 Deployment 下面所有 Pod 更新为某一个旧版本 。</p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><p><strong>Deployment 语法</strong></p><p><img src="https://i.loli.net/2020/05/25/U86LwdBntlyrhsM.png" alt="c3"></p><p>“apiVersion：apps/v1”，也就是说 Deployment 当前所属的组是 apps，版本是 v1</p><p>Deployment.spec 中首先要有一个核心的字段，即 replicas，这里定义期望的 Pod 数量为三个；selector 其实是 Pod 选择器，那么所有扩容出来的 Pod，它的 Labels 必须匹配 selector 层上的 image.labels，也就是 app.nginx</p><ul><li>MinReadySeconds：Deployment 会根据 Pod ready 来看 Pod 是否可用，ready 的 Pod 不一定是 available 的，它一定要超过 MinReadySeconds 之后，才会判断为 available；</li><li>revisionHistoryLimit：保留历史 revision，即保留历史 ReplicaSet 的数量，默认值为 10 个。这里可以设置为一个或两个，如果回滚可能性比较大的话，可以设置数量超过 10；</li><li>paused：paused 是标识，Deployment 只做数量维持，不做新的发布，这里在 Debug 场景可能会用到；</li><li>progressDeadlineSeconds：前面提到当 Deployment 处于扩容或者发布状态时，它的 condition 会处于一个 processing 的状态，processing 可以设置一个超时时间。如果超过超时时间还处于 processing，那么 controller 将认为这个 Pod 会进入 <em>failed</em> 的状态。</li></ul><p><img src="https://i.loli.net/2020/05/25/P3HKm8ZdVowSxiq.png" alt="c29"></p><p><strong>升级策略字段解析</strong></p><p>Deployment 在 RollingUpdate 中主要提供了两个策略，一个是 MaxUnavailable，另一个是 MaxSurge。这两个字段解析的意思，可以看下图中详细的 comment，或者简单解释一下：</p><ul><li>MaxUnavailable：滚动过程中最多有多少个 Pod 不可用；</li><li>MaxSurge：滚动过程中最多存在多少个 Pod 超过预期 replicas 数量。</li></ul><p> MaxSurge 和 MaxUnavailable 不能同时为 0。</p><p><strong>查看 Deployment 状态</strong></p><p>kubectl get deployment</p><p><img src="https://i.loli.net/2020/05/25/SbPa2fpuKtLQRyo.png" alt="c4"></p><p><strong>查看 Pod</strong></p><p><img src="https://i.loli.net/2020/05/25/dJ6wFpXaNSfCuMV.png" alt="c5"></p><p>Pod 名字格式我们不难看到。</p><p>最前面一段：nginx-deployment，其实是 Pod 所属 Deployment.name；中间一段：template-hash，这里三个 Pod 是一样的，因为这三个 Pod 其实都是同一个 template 中创建出来的。最后一段，是一个 random 的字符串</p><p><strong>更新镜像</strong></p><p>kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1</p><p><img src="https://i.loli.net/2020/05/25/ZO9FANjJDqmHpxP.png" alt="c6"></p><p>首先 kubectl 后面有一个 set image 固定写法，这里指的是设定镜像；<br>其次是一个 deployment.v1.apps，这里也是一个固定写法，写的是我们要操作的资源类型，deployment 是资源名、v1 是资源版本、apps 是资源组，这里也可以简写为 deployment 或者 deployment.apps，比如说写为 deployment 的时候，默认将使用 apps 组 v1 版本。<br>第三部分是要更新的 deployment 的 name，也就是我们的 nginx-deployment；再往后的 nginx 其实指的是 template，也就是 Pod 中的 container.name；这里我们可以注意到：一个 Pod 中，其实可能存在多个 container，而我们指定想要更新的镜像的 container.name，就是 nginx。<br>最后，指定我们这个容器期望更新的镜像版本，这里指的是 nginx: 1.9.1。如下图所示：当执行完这条命令之后，可以看到 deployment 中的 template.spec 已经更新为 nginx: 1.9.1。</p><p><strong>快速回滚</strong></p><p><img src="https://i.loli.net/2020/05/25/CtnsmlSfHrdEqG8.png" alt="c7"></p><p><strong>DeploymentStatus</strong></p><p><img src="https://i.loli.net/2020/05/25/WB1saQiNyUSx3Gv.png" alt="c8"></p><p>Processing 指的是 Deployment 正在处于扩容和发布中。比如说 Processing 状态的 deployment，它所有的 replicas 及 Pod 副本全部达到最新版本，而且是 available，这样的话，就可以进入 complete 状态。而 complete 状态如果发生了一些扩缩容的话，也会进入 processing 这个处理工作状态。</p><p>如果在处理过程中遇到一些问题：比如说拉镜像失败了，或者说 readiness probe 检查失败了，就会进入 failed 状态；如果在运行过程中即 complete 状态，中间运行时发生了一些 pod readiness probe 检查失败，这个时候 deployment 也会进入 failed 状态。进入 failed 状态之后，除非所有点 replicas 均变成 available，而且是 updated 最新版本，deployment 才会重新进入 complete 状态。</p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><p>略</p><h4 id="四、架构设计"><a href="#四、架构设计" class="headerlink" title="四、架构设计"></a>四、架构设计</h4><p>管理模式</p><p><img src="https://i.loli.net/2020/05/25/Vt9fZGaIzbNkLeO.png" alt="c23"></p><h3 id="课时7-应用编排与管理-三-：Job-amp-DaemonSet"><a href="#课时7-应用编排与管理-三-：Job-amp-DaemonSet" class="headerlink" title="课时7. 应用编排与管理(三)：Job &amp; DaemonSet"></a>课时7. 应用编排与管理(三)：Job &amp; DaemonSet</h3><h4 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h4><p>Job 为我们<strong>提供的功能</strong></p><ul><li>它可以创建一个或多个 Pod 来指定 Pod 的数量，并可以监控它是否成功地运行或终止；</li><li>我们可以根据 Pod 的状态来给 Job 设置重置的方式及重试的次数；</li><li>我们还可以根据依赖关系，保证上一个任务运行完成之后再运行下一个任务；</li><li>同时还可以控制任务的并行度，根据并行度来确保 Pod 运行过程中的并行次数和总体完成大小。</li></ul><p><strong>Job 语法</strong></p><img src="https://i.loli.net/2020/05/25/C149GlHXgQrxFvj.png" alt="image-20200525164348534" style="zoom:33%;" /><p>上图是 Job 最简单的一个 yaml 格式，这里主要新引入了一个 kind 叫 Job，这个 Job 其实就是 job-controller 里面的一种类型。 然后 metadata 里面的 name 来指定这个 Job 的名称，下面 spec.template 里面其实就是 pod 的 spec。</p><p>所以在 Job 里面，我们主要重点关注的是 <strong>restartPolicy 重启策略</strong>和 <strong>backoffLimit 重试次数限制</strong>。</p><p>Never、OnFailure、Always</p><p><strong>Job 状态</strong></p><img src="https://i.loli.net/2020/05/25/eOglzMFTWyAZ1xq.png" alt="image-20200525164532590" style="zoom:33%;" /><p>Job 创建完成之后，我们就可以通过 kubectl get jobs 这个命令，来查看当前 job 的运行状态。得到的值里面，基本就有 Job 的名称、当前完成了多少个 Pod 以及运行了多长时间。</p><p><strong>查看 Pod</strong></p><p>kubectl get pods </p><p>kubectl get pods pi-4cids -o yaml</p><p>Pod 的名称会以“${job-name}-${random-suffix}”</p><p><strong>并行运行 Job</strong></p><p>主要看两个参数：一个是 completions，一个是 parallelism</p><p>分别含义为： Job 指定的可以运行的总次数 、 并行执行的个数</p><p>比如说 Job 一定要执行 8 次（completions），每次并行 2 个 Pod（parallelism），这样的话，一共会执行 4 个批次。</p><p><strong>查看并行 Job 运行</strong></p><h4 id="cronjob"><a href="#cronjob" class="headerlink" title="cronjob"></a>cronjob</h4><img src="https://i.loli.net/2020/05/25/qv7UAIsGMFxNYVj.png" alt="image-20200525164906142" style="zoom:50%;" /><p>startingDeadlineSeconds：如果等待时间超过startingDeadlineSeconds的话，CronJob 就会停止这个 Job；</p><p>concurrencyPolicy：就是说是否允许并行运行。所谓的并行运行就是，当第二个 Job 要到时间需要去运行的时候，上一个 Job 还没完成。如果这个 policy 设置为 <strong>true</strong> 的话，那么不管你前面的 Job 是否运行完成，每分钟都会去执行；如果是 false，它就会等上一个 Job 运行完成之后才会运行下一个；</p><p>JobsHistoryLimit：这个就是每一次 CronJob 运行完之后，它都会遗留上一个 Job 的运行历史、查看时间。当然这个额不能是无限的，所以需要设置一下历史存留数，一般可以设置默认 10 个或 100 个都可以</p><h4 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h4><p><strong>略</strong></p><p>Job 的编排文件<br>Job 的创建及运行验证<br>并行 Job 的编排文件<br>并行 Job 的创建及运行验证<br>Cronjob 的编排文件<br>Cronjob 的创建及运行验证</p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p><strong>略</strong></p><p>Job 管理模式<br>Job 控制器</p><h4 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h4><p>DaemonSet：守护进程控制器</p><img src="https://i.loli.net/2020/05/25/hylNU3JPtaWoDO1.png" alt="image-20200525165437046" style="zoom: 50%;" /><p><strong>查看 DaemonSet 状态</strong></p><p>kubectl get ds</p><img src="https://i.loli.net/2020/05/25/ArkPTVvJClXh79H.png" alt="image-20200525165535852" style="zoom:50%;" /><p>有几个参数，分别是：需要的 pod 个数、当前已经创建的 pod 个数、就绪的个数，以及所有可用的、通过健康检查的 pod；还有 <strong>NODE SELECTOR</strong>，因为 NODE SELECTOR 在 DaemonSet 里面非常有用。</p><p>有时候我们可能<strong>希望只有部分节点去运行这个 pod 而不是所有的节点</strong>，所以有些节点上被打了标的话，DaemonSet 就只运行在这些节点上。比如，我只希望 master 节点运行某些 pod，或者只希望 Worker 节点运行某些 pod，就可以使用这个 NODE SELECTOR。</p><p><strong>更新 DaemonSet</strong></p><img src="https://i.loli.net/2020/05/25/LN4gjsvqcA1Cbxn.jpg" alt="img" style="zoom:50%;" /><h4 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a>操作演示</h4><p><strong>略</strong></p><p>DaemonSet 的编排<br>DaemonSet 的创建与运行验证<br>DaemonSet 的更<br>DaemonSet 管理模式<br>DaemonSet 控制器</p><h3 id="课时8-应用配置管理：ConfigMap-Secret"><a href="#课时8-应用配置管理：ConfigMap-Secret" class="headerlink" title="课时8. 应用配置管理：ConfigMap Secret"></a>课时8. 应用配置管理：ConfigMap Secret</h3><p><a href="https://mp.weixin.qq.com/s/8r-_Ekje__GVHsKLfJ-66A">从零开始入门 K8s | 如何实现应用配置管理？</a></p><h4 id="ConfigMap-和-Secret"><a href="#ConfigMap-和-Secret" class="headerlink" title="ConfigMap 和 Secret"></a>ConfigMap 和 Secret</h4><p>首先介绍了 ConfigMap 和 Secret 的创建方法和使用场景，然后对 ConfigMap 和 Secret 的常见使用注意点进行了分类和整理。最后介绍了私有仓库镜像的使用和配置；</p><p><strong>使用场景</strong>：一些可变的配置。因为我们不可能把一些可变的配置写到镜像里面，当这个配置需要变化的时候，可能需要我们重新编译一次镜像，这个肯定是不能接受的，所以有了 <strong>ConfigMap</strong>; 一些敏感信息的存储和使用。比如说应用需要使用一些密码，或者用一些 token， 所以有了 Secret。</p><p><strong>创建方法</strong>：</p><p><img src="https://i.imgur.com/0LzM8Gh.jpg" alt="640"></p><p>主要用 –from-file 和 –from-literal 引入配置</p><p><img src="https://i.imgur.com/QEyF03B.jpg" alt="下载"></p><p>一二联合使用，首先引入配置为环境变量，再用 $x。三是挂载配置文件到容器内</p><p><img src="https://i.imgur.com/A8vWl2L.jpg" alt="下载"></p><p><strong>Pod 身份认证</strong>: 首先介绍了 ServiceAccount 和 Secret 的关联关系，然后从源码角度对 Pod 身份认证流程和实现细节进行剖析，同时引出了 Pod 的权限管理 (即 RBAC 的配置管理)；</p><p><img src="https://i.imgur.com/qBoFE5t.jpg" alt="下载"></p><p><img src="https://i.imgur.com/beMXTne.jpg" alt="下载"></p><p>容器资源和安全：首先介绍了容器常见资源类型 (CPU/Memory) 的配置，然后对 Pod 服务质量分类进行详细的介绍。同时对 SecurityContext 有效层级和权限配置项进行简要说明；<br>InitContainer: 首先介绍了 InitContainer 和普通 container 的区别以及 InitContainer 的用途。然后基于实际用例对InitContainer 的用途进行了说明。</p><p>略</p><h3 id="课时9-应用存储和持久化数据卷：核心知识"><a href="#课时9-应用存储和持久化数据卷：核心知识" class="headerlink" title="课时9. 应用存储和持久化数据卷：核心知识"></a>课时9. 应用存储和持久化数据卷：核心知识</h3><p>首先来看一下 Pod Volumes 的使用场景：</p><ul><li>场景一：如果 pod 中的某一个容器在运行时异常退出，被 kubelet 重新拉起之后，如何保证之前容器产生的重要数据没有丢失？</li><li>场景二：如果同一个 pod 中的多个容器想要共享数据，应该如何去做？</li></ul><p>以上两个场景，其实都可以借助 Volumes 来很好地解决，接下来首先看一下 Pod Volumes 的常见类型：</p><ol><li>本地存储，常用的有 emptydir/hostpath；</li><li>网络存储：网络存储当前的实现方式有两种，一种是 in-tree，它的实现代码是放在 K8s 代码仓库中的，随着 K8s 对存储类型支持的增多，这种方式会给 K8s 本身的维护和发展带来很大的负担；而第二种实现方式是 out-of-tree，它的实现其实是给 K8s 本身解耦的，通过抽象接口将不同存储的 driver 实现从 K8s 代码仓库中剥离，因此 <strong>out-of-tree 是后面社区主推的一种实现网络存储插件的方式</strong>；</li><li>Persistent Volumes：它其实是将一些配置信息，如 secret/configmap 用卷的形式挂载在容器中，让容器中的程序可以通过 POSIX 接口来访问配置数据；</li></ol><p>课时 9 后面的暂时就不看了</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="Kubectl-安装、启动"><a href="#Kubectl-安装、启动" class="headerlink" title="Kubectl 安装、启动"></a>Kubectl 安装、启动</h2><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><p>安装失败</p><p><a href="https://www.linuxtechi.com/install-kubernetes-k8s-minikube-centos-8/">How to Install Kubernetes(k8s) with Minikube on CentOS 8</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"</span><br><span class="line"></span><br><span class="line">curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/darwin/amd64/kubectl"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有代理的话，很慢，可以本地下载好，传到服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/darwin/amd64/kubectl</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rsync -azvhP kubectl root@47.93.53.47:/root/k8s</span></span><br><span class="line"></span><br><span class="line">chmod +x ./kubectl</span><br><span class="line">mv ./kubectl /usr/local/bin/kubectl</span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure><h4 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">chmod +x minikube</span><br><span class="line">mkdir -p /usr/local/bin/</span><br><span class="line">install minikube /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用无需虚拟机的方式启动</span></span><br><span class="line">minikube start --driver=none</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><a href="https://matthewpalmer.net/kubernetes-app-developer/articles/guide-install-kubernetes-mac.html">How to Install Kubernetes on Mac with Docker, Minikube, VirtualBox - Kubernetes Book</a></p><p>/usr/local/bin/kubectl is v1.15.5, which may be incompatible with Kubernetes v1.18.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export HOMEBREW_NO_AUTO_UPDATE=true</span><br><span class="line">brew install kubectl</span><br><span class="line">brew cask install virtualbox</span><br><span class="line">brew install minikube</span><br><span class="line">brew install bash-completion</span><br><span class="line"></span><br><span class="line">minikube start --image-mirror-country cn \</span><br><span class="line">    --iso-url=https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/iso/minikube-v1.9.0.iso \</span><br><span class="line">    --registry-mirror=https://vbd8z16m.mirror.aliyuncs.com</span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 自动补全</span><br><span class="line"># 编辑 ~&#x2F;.zshrc 文件</span><br><span class="line">if [ $commands[kubectl] ]; then</span><br><span class="line">  source &lt;(kubectl completion zsh)</span><br><span class="line">fi</span><br><span class="line"># 2. 更新 plugins&#x3D; 行以包含 kubectl 插件</span><br><span class="line">plugins&#x3D;(kubectl)</span><br><span class="line"></span><br><span class="line">source ~&#x2F;.zshrc</span><br><span class="line">tail -n 5 ~&#x2F;.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> minikube 可选参数</span></span><br><span class="line">minikube start \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --vm-driver=&lt;driver_name&gt; \</span><br><span class="line">  --extra-config=kubelet.MaxPods=5</span><br></pre></td></tr></table></figure><p>minikube stop 命令可用于停止集群</p><p>minikube delete 命令可用于删除集群</p><p>此命令将关闭并删除 Minikube 虚拟机，不保留任何数据或状态</p><p>minikube status 查看集群是否正常</p><h3 id="停止k8s"><a href="#停止k8s" class="headerlink" title="停止k8s"></a>停止k8s</h3><img src="https://i.loli.net/2020/05/19/sMSRDOwT654lK1j.png" alt="image-20200519222349284" style="zoom:33%;" /><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.提交一个 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment.yaml</span><br><span class="line"></span><br><span class="line">2.升级 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml</span><br><span class="line"></span><br><span class="line">3.扩容 nginx deployment</span><br><span class="line">kubectl apply -f https://k8s.io/examples/application/deployment-scale.yaml</span><br><span class="line"></span><br><span class="line">kubectl describe deployment nginx-deployment</span><br><span class="line">kubectl get --watch deployments</span><br><span class="line"></span><br><span class="line">kubectl delete deployment nginx-deployment</span><br><span class="line">kubectl delete deployments --all</span><br><span class="line">kubectl delete pods --all</span><br></pre></td></tr></table></figure><p><a href="http://docs.kubernetes.org.cn/618.html">Kubernetes kubectl delete 命令详解 _ Kubernetes(K8S)中文文档_Kubernetes中文社区</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="配置高效的-Kubernetes-命令行终端"><a href="#配置高效的-Kubernetes-命令行终端" class="headerlink" title="*配置高效的 Kubernetes 命令行终端"></a>*配置高效的 Kubernetes 命令行终端</h2><p><a href="https://www.chenshaowen.com/blog/how-to-configure-efficient-k8s-terminal.html">如何配置高效的 Kubernetes 命令行终端 - 陈少文的博客</a></p><p><a href="https://ywnz.com/linuxml/3094.html">交互式Kubernetes客户端，搭建高效Kubernetes命令行终端_Linux命令_云网牛站</a></p><h3 id="1-自动补全"><a href="#1-自动补全" class="headerlink" title="1. *自动补全"></a>1. *自动补全</h3><p><strong>kube-shell</strong> 好用点，支持模糊搜索</p><p><a href="https://github.com/cloudnativelabs/kube-shell">cloudnativelabs/kube-shell: Kubernetes shell: An integrated shell for working with the Kubernetes</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kube-shell</span><br></pre></td></tr></table></figure><p><a href="https://github.com/c-bata/kube-prompt">c-bata/kube-prompt: An interactive kubernetes client featuring auto-complete.</a></p><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-complete@2</span><br></pre></td></tr></table></figure><p>不仅仅是 kubectl ，也给其他命令行提供自动补全的命令提示。</p><p>在 .zshrc 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl complete</span><br><span class="line">source &lt;(kubectl completion zsh)</span><br></pre></td></tr></table></figure><p>在输入 <code>kubectl get pod</code> 命令时，键入 <code>Tab</code> 会自动列举当前类型下的资源，如果没有任何资源，则列举目录文件。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/completion-demo.gif"><img src="https://i.loli.net/2020/05/16/c7G2k8mFKrzHPpq.gif" alt="Demo"></a></p><h3 id="2-环境切换和管理-kubectx"><a href="#2-环境切换和管理-kubectx" class="headerlink" title="2. 环境切换和管理 - kubectx"></a>2. 环境切换和管理 - kubectx</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectx</span><br></pre></td></tr></table></figure><p>提供两个命令行工具：</p><ul><li>kubectx ，切换不同集群</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubectx-demo.gif"><img src="https://i.loli.net/2020/05/16/H8k5BhUpcZnFRiW.gif" alt="官方 Demo"></a></p><ul><li>kubens ，切换不同 Namespaces</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubens-demo.gif"><img src="https://i.loli.net/2020/05/16/CmHiRVcdIZK3Agp.gif" alt="官方 Demo"></a></p><h3 id="3-将当前环境显示在命令中-kube-ps1"><a href="#3-将当前环境显示在命令中-kube-ps1" class="headerlink" title="3. 将当前环境显示在命令中 - kube-ps1"></a>3. 将当前环境显示在命令中 - kube-ps1</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kube-ps1</span><br></pre></td></tr></table></figure><p>在 .profile 中添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kube-ps1</span><br><span class="line">source &quot;&#x2F;usr&#x2F;local&#x2F;opt&#x2F;kube-ps1&#x2F;share&#x2F;kube-ps1.sh&quot;</span><br><span class="line">PS1&#x3D;&#39;$(kube_ps1)&#39;$PS1</span><br></pre></td></tr></table></figure><p>但是由于通常 config 中配置的 context 名比较长，同时不易区分，需要修改下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i&#39;.s&#39; -E &#39;s&#x2F;kubernetes-admin@cluster.local&#39;&#x2F;dev&#x2F; ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>将 <a href="mailto:kubernetes-admin@cluster.local"><em>kubernetes</em>-admin@cluster.local</a> 替换为 dev ，可以配合 <a href="https://www.chenshaowen.com/blog/developing-tips-19.html#1-本地快速切换不同-Kubernetes-环境">本地快速切换不同 <em>Kubernetes</em> 环境</a> 使用。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-ps1-demo.gif"><img src="https://i.loli.net/2020/05/16/9ePf2ADi5lRNdvM.gif" alt="官方 Demo"></a></p><h3 id="4-交互式命令-kube-prompt"><a href="#4-交互式命令-kube-prompt" class="headerlink" title="4. 交互式命令 - kube-prompt"></a>4. 交互式命令 - kube-prompt</h3><p>kube-prompt 可以让用户省略每次都需要输入的 <code>kubectl</code> ，同时给出一些交互式的自动补全。kube-shell 也提供交互式的自动补全，但是很长时间没有更新了，使用 <code>pip install kube-shell</code> 进行安装，在服务器上可能用得上。</p><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install c-bata&#x2F;kube-prompt&#x2F;kube-prompt</span><br></pre></td></tr></table></figure><p>开始使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube-prompt</span><br></pre></td></tr></table></figure><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif"><img src="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif" alt="官方 Demo"></a></p><h3 id="5-Kubectl-Aliases"><a href="#5-Kubectl-Aliases" class="headerlink" title="5.Kubectl Aliases"></a>5.Kubectl Aliases</h3><p><a href="https://github.com/ahmetb/kubectl-aliases">https://github.com/ahmetb/kubectl-aliases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载 https://raw.githubusercontent.com/ahmetb/kubectl-alias/master/.kubectl_aliases</span><br><span class="line">[ -f ~/dotfiles/kubectl_aliases.sh ] &amp;&amp; source ~/dotfiles/kubectl_aliases.sh</span><br></pre></td></tr></table></figure><p>别名规则</p><p><img src="https://i.loli.net/2020/05/19/9YxDIobfXj2RUWP.jpg" alt="交互式Kubernetes客户端，搭建高效Kubernetes命令行终端"></p><h3 id="Kubeval、Kubens"><a href="#Kubeval、Kubens" class="headerlink" title="Kubeval、Kubens"></a>Kubeval、Kubens</h3><p>Kubeval 是一个用于校验 Kubernetes YAML 或 JSON 配置文件的工具，支持多个 Kubernetes 版本，可以帮助我们解决不少的麻烦。</p><p>项目地址：<a href="https://github.com/garethr/kubeval">https://github.com/garethr/kubeval</a></p><p>Kubens</p><p>该工具可以帮助您快速的在 <em>Kubernetes</em> 的多个命名空间之间切换。</p><p>项目地址：<a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></p><p>Kubens 使用效果图：</p><p><img src="https://i.loli.net/2020/05/19/JIYwCd5VmisrMUf.jpg" alt="交互式Kubernetes客户端，搭建高效Kubernetes命令行终端"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></li><li><a href="https://github.com/jonmosco/kube-ps1">https://github.com/jonmosco/kube-ps1</a></li><li><a href="https://github.com/c-bata/kube-prompt">https://github.com/c-bata/kube-prompt</a></li><li><a href="https://github.com/cloudnativelabs/kube-shell">https://github.com/cloudnativelabs/kube-shell</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://www.chenshaowen.com/blog/how-to-set-proxy-for-kubernetes.html">给 Kubernetes 配置 Proxy - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/kubernetes-cheat-sheet.html">Kubernetes Cheat Sheet - 陈少文的博客</a></p><h2 id="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"><a href="#Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？" class="headerlink" title="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"></a>Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？</h2><p>简单来说就是几个工具的使用场景不一样，Minikube 通过虚拟机方式快速安装单节点 Kubernetes 集群，可用于个人电脑快速体验Kubernetes；Kubeadm 是官方推荐的Kubernetes 分发工具，该工具有助于在现有基础架构上引导最佳 Kubernetes 集群实践，优点是能够在任何地方发布最小的可行 Kubernetes 集群；但 Kubeadm 不提供基础架构配置（例如：网络、负载均衡、存储等都需要额外配置）；Kops适合于在阿里云、AWS、GCE、Azure、OpenStack等云平台上部署Kubernetes群集，目前不支持裸机部署。Kubespray是产线部署常用工具，依赖Ansible，支持AWS，GCE，Azure，OpenStack等云平台，以及物理服务器的IaaS平台。</p><p><a href="https://liqiang.io/post/9f5d6241">Kubernetes 部署 Dashboard</a><br><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">网页界面 (Dashboard) - Kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
</feed>
