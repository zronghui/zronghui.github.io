<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-05-18T15:22:01.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker mindmap[图片版]</title>
    <link href="https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html"/>
    <id>https://zronghui.github.io/docker%20k8s/docker-mindmap-%E5%9B%BE%E7%89%87%E7%89%88.html</id>
    <published>2020-05-17T10:21:52.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><img src="https://i.loli.net/2020/05/17/r17xMI4pSjAGFb6.png" alt="Docker"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>如何编写最佳的Dockerfile</title>
    <link href="https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html"/>
    <id>https://zronghui.github.io/docker%20k8s/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%9C%80%E4%BD%B3%E7%9A%84Dockerfile.html</id>
    <published>2020-05-17T07:09:57.000Z</published>
    <updated>2020-05-17T13:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://rock-it.pl/how-to-write-excellent-dockerfiles/">How to write excellent Dockerfiles</a><br><a href="https://blog.fundebug.com/2017/05/15/write-excellent-dockerfile/">如何编写最佳的Dockerfile</a></p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile | 菜鸟教程</a></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><ul><li>更快的构建速度</li><li>更小的 Docker 镜像大小</li><li>更少的 Docker 镜像层</li><li>充分利用镜像缓存</li><li>增加 Dockerfile 可读性</li><li>让 Docker 容器使用起来更简单</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>编写.dockerignore 文件</li><li>容器只运行单个应用</li><li>将多个 RUN 指令合并为一个</li><li>基础镜像的标签不要用 latest</li><li>每个 RUN 指令后删除多余文件</li><li>选择合适的基础镜像(alpine 版本最好)</li><li>设置 WORKDIR 和 CMD</li><li>使用 ENTRYPOINT (可选)</li><li>在 entrypoint 脚本中使用 exec</li><li>COPY 与 ADD 优先使用前者</li><li>合理调整 COPY 与 RUN 的顺序</li><li>设置默认的环境变量，映射端口和数据卷</li><li>使用 LABEL 设置镜像元数据</li><li>添加 HEALTHCHECK</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例 Dockerfile 犯了几乎所有的错(当然我是故意的)。接下来，我会一步步优化它。假设我们需要使用 Docker 运行一个 Node.js 应用，下面就是它的 Dockerfile(CMD 指令太复杂了，所以我简化了，它是错误的，仅供参考)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line">RUN apt-get install -y nodejs ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line"># this should start three processes, mysql and ssh</span><br><span class="line"># in the background and node app in foreground</span><br><span class="line"># isn&#39;t it beautifully terrible? &lt;3</span><br><span class="line">CMD mysql &amp; sshd &amp; npm start</span><br></pre></td></tr></table></figure><p>构建镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t wtf .</span><br></pre></td></tr></table></figure><h3 id="1-编写-dockerignore-文件"><a href="#1-编写-dockerignore-文件" class="headerlink" title="1. 编写.dockerignore 文件"></a>1. 编写.dockerignore 文件</h3><p>构建镜像时，Docker 需要先准备<code>context</code> ，将所有需要的文件收集到进程中。默认的<code>context</code>包含 Dockerfile 目录中的所有文件，但是实际上，<strong>我们并不需要.*git* 目录，node_modules 目录等内容</strong>。 <code>.dockerignore</code> 的作用和语法类似于 <code>.gitignore</code>，可以忽略一些不需要的文件，这样可以有效加快镜像构建时间，同时减少 Docker 镜像的大小。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.git&#x2F;</span><br><span class="line">node_modules&#x2F;</span><br></pre></td></tr></table></figure><h3 id="2-容器只运行单个应用"><a href="#2-容器只运行单个应用" class="headerlink" title="2. 容器只运行单个应用"></a>2. 容器只运行单个应用</h3><p>从技术角度讲，你可以在 Docker 容器中运行多个进程。你可以将<em>数据库</em>，前端，后端，ssh，supervisor 都运行在同一个 Docker 容器中。但是，这会让你非常痛苦:</p><ul><li>非常长的构建时间(修改前端之后，整个后端也需要重新构建)</li><li>非常大的镜像大小</li><li>多个应用的日志难以处理(不能直接使用 stdout，否则多个应用的日志会混合到一起)</li><li>横向扩展时非常浪费资源(不同的应用需要运行的容器数并不相同)</li><li>僵尸进程问题 - 你需要选择合适的 init 进程</li></ul><p>因此，我建议大家为每个应用构建单独的 Docker 镜像，然后使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 运行多个 Docker 容器。</p><p>现在，我从 Dockerfile 中删除一些不需要的安装包，另外，SSH 可以用<a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a>替代。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get upgrade -y</span><br><span class="line"></span><br><span class="line"># we should remove ssh and mysql, and use</span><br><span class="line"># separate container for database</span><br><span class="line">RUN apt-get install -y nodejs  # ssh mysql</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="3-将多个-RUN-指令合并为一个"><a href="#3-将多个-RUN-指令合并为一个" class="headerlink" title="3. 将多个 RUN 指令合并为一个"></a>3. 将多个 RUN 指令合并为一个</h3><p>Docker 镜像是分层的，下面这些知识点非常重要:</p><ul><li>Dockerfile 中的每个指令都会创建一个新的镜像层。</li><li>镜像层将被缓存和复用</li><li>当 Dockerfile 的指令修改了，复制的文件变化了，或者构建镜像时指定的变量不同了，对应的镜像层缓存就会失效</li><li>某一层的镜像缓存失效之后，它之后的镜像层缓存都会失效</li><li>镜像层是不可变的，如果我们再某一层中添加一个文件，然后在下一层中删除它，则镜像中依然会包含该文件(只是这个文件在 Docker 容器中不可见了)。</li></ul><p>Docker 镜像类似于洋葱。它们都有很多层。为了修改内层，则需要将外面的层都删掉。记住这一点的话，其他内容就很好理解了。</p><p>现在，我们<strong>将所有的<a href="https://docs.docker.com/engine/reference/builder/#run">RUN</a>指令合并为一个</strong>。同时把<code>apt-get upgrade</code>删除，因为它会使得镜像构建非常不确定(我们只需要依赖基础镜像的更新就好了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    &amp;&amp; cd &#x2F;app \</span><br><span class="line">    &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>记住一点，我们只能将变化频率一样的指令合并在一起。将 node.js 安装与 npm 模块安装放在一起的话，则每次修改源代码，都需要重新安装 node.js，这显然不合适。因此，正确的写法是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="4-基础镜像的标签不要用-latest"><a href="#4-基础镜像的标签不要用-latest" class="headerlink" title="4. 基础镜像的标签不要用 latest"></a>4. 基础镜像的标签不要用 latest</h3><p>当镜像没有指定标签时，将默认使用<code>latest</code> 标签。因此， <code>FROM ubuntu</code> 指令等同于<code>FROM ubuntu:latest</code>。当时，当镜像更新时，latest 标签会指向不同的镜像，这时构建镜像有可能失败。如果你的确需要使用最新版的基础镜像，可以使用 latest 标签，否则的话，最好指定确定的镜像标签。</p><p>示例 Dockerfile 应该使用<code>16.04</code>作为标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04  # it&#39;s that easy!</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="5-每个-RUN-指令后删除多余文件"><a href="#5-每个-RUN-指令后删除多余文件" class="headerlink" title="5. 每个 RUN 指令后删除多余文件"></a>5. 每个 RUN 指令后删除多余文件</h3><p>假设我们更新了 apt-get 源，下载，解压并安装了一些软件包，它们都保存在<code>/var/lib/apt/lists/</code>目录中。但是，运行应用时 Docker 镜像中并不需要这些文件。我们最好将它们删除，因为它会使 Docker 镜像变大。</p><p>示例 Dockerfile 中，我们可以删除<code>/var/lib/apt/lists/</code>目录中的文件(它们是由 apt-get update 生成的)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y nodejs \</span><br><span class="line">    # added lines</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><h3 id="6-选择合适的基础镜像-alpine-版本最好"><a href="#6-选择合适的基础镜像-alpine-版本最好" class="headerlink" title="6. 选择合适的基础镜像(alpine 版本最好)"></a>6. 选择合适的基础镜像(alpine 版本最好)</h3><p>在示例中，我们选择了<code>ubuntu</code>作为基础镜像。但是我们只需要运行 node 程序，有必要使用一个通用的基础镜像吗？<code>node</code>镜像应该是更好的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line"># we don&#39;t need to install node</span><br><span class="line"># anymore and use apt-get</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p>更好的选择是 alpine 版本的<code>node</code>镜像。alpine 是一个极小化的 Linux 发行版，只有 4MB，这让它非常适合作为基础镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">CMD npm start</span><br></pre></td></tr></table></figure><p><a href="https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management">apk</a>是 Alpine 的包管理工具。它与<code>apt-get</code>有些不同，但是非常容易上手。另外，它还有一些非常有用的特性，比如<code>no-cache</code>和 <code>--virtual</code>选项，它们都可以帮助我们减少镜像的大小。</p><h3 id="7-设置-WORKDIR-和-CMD"><a href="#7-设置-WORKDIR-和-CMD" class="headerlink" title="7. 设置 WORKDIR 和 CMD"></a>7. 设置 WORKDIR 和 CMD</h3><p><a href="https://docs.docker.com/engine/reference/builder/#workdir">WORKDIR</a>指令可以设置默认目录，也就是运行<code>RUN</code> / <code>CMD</code> / <code>ENTRYPOINT</code>指令的地方。</p><p><a href="https://docs.docker.com/engine/reference/builder/#cmd">CMD</a>指令可以设置容器创建是执行的默认命令。另外，你应该讲命令写在一个数组中，数组中每个元素为命令的每个单词(参考<a href="https://docs.docker.com/engine/reference/builder/#cmd">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="8-使用-ENTRYPOINT-可选"><a href="#8-使用-ENTRYPOINT-可选" class="headerlink" title="8. 使用 ENTRYPOINT (可选)"></a>8. 使用 ENTRYPOINT (可选)</h3><p><a href="https://docs.docker.com/engine/reference/builder/#entrypoint">ENTRYPOINT</a>指令并不是必须的，因为它会增加复杂度。<code>ENTRYPOINT</code>是一个脚本，它会默认执行，并且将指定的命令错误其参数。它通常用于构建可执行的 Docker 镜像。entrypoint.sh 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env sh</span><br><span class="line"># $0 is a script name,</span><br><span class="line"># $1, $2, $3 etc are passed arguments</span><br><span class="line"># $1 is our command</span><br><span class="line">CMD&#x3D;$1</span><br><span class="line"></span><br><span class="line">case &quot;$CMD&quot; in</span><br><span class="line">  &quot;dev&quot; )</span><br><span class="line">    npm install</span><br><span class="line">    export NODE_ENV&#x3D;development</span><br><span class="line">    exec npm run dev</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">  &quot;start&quot; )</span><br><span class="line">    # we can modify files here, using ENV variables passed in</span><br><span class="line">    # &quot;docker create&quot; command. It can&#39;t be done during build process.</span><br><span class="line">    echo &quot;db: $DATABASE_ADDRESS&quot; &gt;&gt; &#x2F;app&#x2F;config.yml</span><br><span class="line">    export NODE_ENV&#x3D;production</span><br><span class="line">    exec npm start</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">   * )</span><br><span class="line">    # Run custom command. Thanks to this line we can still use</span><br><span class="line">    # &quot;docker run our_image &#x2F;bin&#x2F;bash&quot; and it will work</span><br><span class="line">    exec $CMD $&#123;@:2&#125;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>示例 Dockerfile:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>可以使用如下命令运行该镜像:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 运行开发版本</span><br><span class="line">docker run our-app dev</span><br><span class="line"></span><br><span class="line"># 运行生产版本</span><br><span class="line">docker run our-app start</span><br><span class="line"></span><br><span class="line"># 运行bash</span><br><span class="line">docker run -it our-app &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h3 id="9-在-entrypoint-脚本中使用-exec"><a href="#9-在-entrypoint-脚本中使用-exec" class="headerlink" title="9. 在 entrypoint 脚本中使用 exec"></a>9. 在 entrypoint 脚本中使用 exec</h3><p>在前文的 entrypoint 脚本中，我使用了<code>exec</code>命令运行 node 应用。不使用<code>exec</code>的话，我们则不能顺利地关闭容器，因为 SIGTERM 信号会被 bash 脚本进程吞没。<code>exec</code>命令启动的进程可以取代脚本进程，因此所有的信号都会正常工作。</p><h3 id="10-COPY-与-ADD-优先使用前者"><a href="#10-COPY-与-ADD-优先使用前者" class="headerlink" title="10. COPY 与 ADD 优先使用前者"></a>10. COPY 与 ADD 优先使用前者</h3><p><a href="https://docs.docker.com/engine/reference/builder/#copy">COPY</a>指令非常简单，仅用于将文件拷贝到镜像中。<a href="https://docs.docker.com/engine/reference/builder/#add">ADD</a>相对来讲复杂一些，可以用于下载远程文件以及解压压缩包(参考<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy">官方文档</a>)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="11-合理调整-COPY-与-RUN-的顺序"><a href="#11-合理调整-COPY-与-RUN-的顺序" class="headerlink" title="11. 合理调整 COPY 与 RUN 的顺序"></a>11. 合理调整 COPY 与 RUN 的顺序</h3><p>我们应该<strong>把变化最少的部分放在 Dockerfile 的前面</strong>，这样可以充分利用镜像缓存。</p><p>示例中，源代码会经常变化，则每次构建镜像时都需要重新安装 NPM 模块，这显然不是我们希望看到的。因此我们可以先拷贝<code>package.json</code>，然后安装 NPM 模块，最后才拷贝其余的源代码。这样的话，即使源代码变化，也不需要重新安装 NPM 模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">COPY package.json &#x2F;app</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><h3 id="12-设置默认的环境变量，映射端口和数据卷"><a href="#12-设置默认的环境变量，映射端口和数据卷" class="headerlink" title="12. 设置默认的环境变量，映射端口和数据卷"></a>12. 设置默认的环境变量，映射端口和数据卷</h3><p>运行 Docker 容器时很可能需要一些环境变量。在 Dockerfile 设置默认的环境变量是一种很好的方式。另外，我们应该在 Dockerfile 中设置映射端口和数据卷。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line"></span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/reference/builder/#env">ENV</a>指令指定的环境变量在容器中可以使用。如果你只是需要指定构建镜像时的变量，你可以使用<a href="https://docs.docker.com/engine/reference/builder/#arg">ARG</a>指令。</p><h3 id="13-使用-LABEL-设置镜像元数据"><a href="#13-使用-LABEL-设置镜像元数据" class="headerlink" title="13. 使用 LABEL 设置镜像元数据"></a>13. 使用 LABEL 设置镜像元数据</h3><p>使用<a href="https://docs.docker.com/engine/reference/builder/#label">LABEL</a>指令，可以为镜像设置元数据，例如<strong>镜像创建者</strong>或者<strong>镜像说明</strong>。旧版的 Dockerfile 语法使用<a href="https://docs.docker.com/engine/reference/builder/#maintainer-deprecated">MAINTAINER</a>指令指定镜像创建者，但是它已经被弃用了。有时，一些外部程序需要用到镜像的元数据，例如<a href="https://github.com/NVIDIA/nvidia-docker">nvidia-docker</a>需要用到<code>com.nvidia.volumes.needed</code>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="14-添加-HEALTHCHECK"><a href="#14-添加-HEALTHCHECK" class="headerlink" title="14. 添加 HEALTHCHECK"></a>14. 添加 HEALTHCHECK</h3><p>运行容器时，可以指定<code>--restart always</code>选项。这样的话，容器崩溃时，Docker 守护进程(docker daemon)会重启容器。对于需要长时间运行的容器，这个选项非常有用。但是，如果容器的确在运行，但是不可(陷入死循环，配置错误)用怎么办？使用<a href="https://docs.docker.com/engine/reference/builder/#healthcheck">HEALTHCHECK</a>指令可以让 Docker 周期性的检查容器的健康状况。我们只需要指定一个命令，如果一切正常的话返回 0，否则返回 1。对 HEALTHCHECK 感兴趣的话，可以参考<a href="https://blog.newrelic.com/2016/08/24/docker-health-check-instruction/">这篇博客</a>。示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM node:7-alpine</span><br><span class="line">LABEL maintainer &quot;jakub.skalecki@example.com&quot;</span><br><span class="line"></span><br><span class="line">ENV PROJECT_DIR&#x3D;&#x2F;app</span><br><span class="line">WORKDIR $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">COPY package.json $PROJECT_DIR</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">ENV MEDIA_DIR&#x3D;&#x2F;media \</span><br><span class="line">    NODE_ENV&#x3D;production \</span><br><span class="line">    APP_PORT&#x3D;3000</span><br><span class="line"></span><br><span class="line">VOLUME $MEDIA_DIR</span><br><span class="line">EXPOSE $APP_PORT</span><br><span class="line">HEALTHCHECK CMD curl --fail http:&#x2F;&#x2F;localhost:$APP_PORT || exit 1</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;start&quot;]</span><br></pre></td></tr></table></figure><p>当请求失败时，<code>curl --*fail*</code> 命令返回非 0 状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://zronghui.github.io/docker%20k8s/k8s.html"/>
    <id>https://zronghui.github.io/docker%20k8s/k8s.html</id>
    <published>2020-05-16T06:59:37.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="配置高效的-Kubernetes-命令行终端"><a href="#配置高效的-Kubernetes-命令行终端" class="headerlink" title="*配置高效的 Kubernetes 命令行终端"></a>*配置高效的 Kubernetes 命令行终端</h2><p><a href="https://www.chenshaowen.com/blog/how-to-configure-efficient-k8s-terminal.html">如何配置高效的 Kubernetes 命令行终端 - 陈少文的博客</a></p><h3 id="1-自动补全-kubectl"><a href="#1-自动补全-kubectl" class="headerlink" title="1. 自动补全 - kubectl"></a>1. 自动补全 - kubectl</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bash-complete@2</span><br></pre></td></tr></table></figure><p>不仅仅是 kubectl ，也给其他命令行提供自动补全的命令提示。</p><p>在 .zshrc 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kubectl complete</span><br><span class="line">source &lt;(kubectl completion zsh)</span><br></pre></td></tr></table></figure><p>在输入 <code>kubectl get pod</code> 命令时，键入 <code>Tab</code> 会自动列举当前类型下的资源，如果没有任何资源，则列举目录文件。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/completion-demo.gif"><img src="https://i.loli.net/2020/05/16/c7G2k8mFKrzHPpq.gif" alt="Demo"></a></p><h3 id="2-环境切换和管理-kubectx"><a href="#2-环境切换和管理-kubectx" class="headerlink" title="2. 环境切换和管理 - kubectx"></a>2. 环境切换和管理 - kubectx</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectx</span><br></pre></td></tr></table></figure><p>提供两个命令行工具：</p><ul><li>kubectx ，切换不同集群</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubectx-demo.gif"><img src="https://i.loli.net/2020/05/16/H8k5BhUpcZnFRiW.gif" alt="官方 Demo"></a></p><ul><li>kubens ，切换不同 Namespaces</li></ul><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kubens-demo.gif"><img src="https://i.loli.net/2020/05/16/CmHiRVcdIZK3Agp.gif" alt="官方 Demo"></a></p><h3 id="3-将当前环境显示在命令中-kube-ps1"><a href="#3-将当前环境显示在命令中-kube-ps1" class="headerlink" title="3. 将当前环境显示在命令中 - kube-ps1"></a>3. 将当前环境显示在命令中 - kube-ps1</h3><p>OS X 安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kube-ps1</span><br></pre></td></tr></table></figure><p>在 .profile 中添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kube-ps1</span><br><span class="line">source &quot;&#x2F;usr&#x2F;local&#x2F;opt&#x2F;kube-ps1&#x2F;share&#x2F;kube-ps1.sh&quot;</span><br><span class="line">PS1&#x3D;&#39;$(kube_ps1)&#39;$PS1</span><br></pre></td></tr></table></figure><p>但是由于通常 config 中配置的 context 名比较长，同时不易区分，需要修改下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i&#39;.s&#39; -E &#39;s&#x2F;kubernetes-admin@cluster.local&#39;&#x2F;dev&#x2F; ~&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><p>将 <a href="mailto:kubernetes-admin@cluster.local"><em>kubernetes</em>-admin@cluster.local</a> 替换为 dev ，可以配合 <a href="https://www.chenshaowen.com/blog/developing-tips-19.html#1-本地快速切换不同-Kubernetes-环境">本地快速切换不同 <em>Kubernetes</em> 环境</a> 使用。</p><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-ps1-demo.gif"><img src="https://i.loli.net/2020/05/16/9ePf2ADi5lRNdvM.gif" alt="官方 Demo"></a></p><h3 id="4-交互式命令-kube-prompt"><a href="#4-交互式命令-kube-prompt" class="headerlink" title="4. 交互式命令 - kube-prompt"></a>4. 交互式命令 - kube-prompt</h3><p>kube-prompt 可以让用户省略每次都需要输入的 <code>kubectl</code> ，同时给出一些交互式的自动补全。kube-shell 也提供交互式的自动补全，但是很长时间没有更新了，使用 <code>pip install kube-shell</code> 进行安装，在服务器上可能用得上。</p><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install c-bata&#x2F;kube-prompt&#x2F;kube-prompt</span><br></pre></td></tr></table></figure><p>开始使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube-prompt</span><br></pre></td></tr></table></figure><p><a href="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif"><img src="https://www.chenshaowen.com/blog/images/2020/05/kube-prompt-demo.gif" alt="官方 Demo"></a></p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><ul><li><a href="https://github.com/ahmetb/kubectx">https://github.com/ahmetb/kubectx</a></li><li><a href="https://github.com/jonmosco/kube-ps1">https://github.com/jonmosco/kube-ps1</a></li><li><a href="https://github.com/c-bata/kube-prompt">https://github.com/c-bata/kube-prompt</a></li><li><a href="https://github.com/cloudnativelabs/kube-shell">https://github.com/cloudnativelabs/kube-shell</a></li></ul><p><a href="https://www.chenshaowen.com/blog/how-to-set-proxy-for-kubernetes.html">给 Kubernetes 配置 Proxy - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/kubernetes-cheat-sheet.html">Kubernetes Cheat Sheet - 陈少文的博客</a></p><h2 id="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"><a href="#Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？" class="headerlink" title="Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？"></a>Minikube、kubeadm、Kubespray、Kops等Kubernetes部署工具该如何选择？</h2><p>简单来说就是几个工具的使用场景不一样，Minikube 通过虚拟机方式快速安装单节点 Kubernetes 集群，可用于个人电脑快速体验Kubernetes；Kubeadm 是官方推荐的Kubernetes 分发工具，该工具有助于在现有基础架构上引导最佳 Kubernetes 集群实践，优点是能够在任何地方发布最小的可行 Kubernetes 集群；但 Kubeadm 不提供基础架构配置（例如：网络、负载均衡、存储等都需要额外配置）；Kops适合于在阿里云、AWS、GCE、Azure、OpenStack等云平台上部署Kubernetes群集，目前不支持裸机部署。Kubespray是产线部署常用工具，依赖Ansible，支持AWS，GCE，Azure，OpenStack等云平台，以及物理服务器的IaaS平台。</p><p><a href="https://liqiang.io/post/9f5d6241">Kubernetes 部署 Dashboard</a><br><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">网页界面 (Dashboard) - Kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>万一有 iPhone/iPad 了呢</title>
    <link href="https://zronghui.github.io/%E4%B8%87%E4%B8%80%E6%9C%89-iPhone-iPad-%E4%BA%86%E5%91%A2.html"/>
    <id>https://zronghui.github.io/%E4%B8%87%E4%B8%80%E6%9C%89-iPhone-iPad-%E4%BA%86%E5%91%A2.html</id>
    <published>2020-05-10T13:54:27.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.waerfa.com/simple-timers">Simple Timers 可同时运行多个计时的 app – Mac玩儿法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>app to install</title>
    <link href="https://zronghui.github.io/todo/app-to-install.html"/>
    <id>https://zronghui.github.io/todo/app-to-install.html</id>
    <published>2020-05-10T01:02:22.000Z</published>
    <updated>2020-05-10T09:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="Volume-Styles：个性化你的音量调节面板"><a href="#Volume-Styles：个性化你的音量调节面板" class="headerlink" title="Volume Styles：个性化你的音量调节面板"></a>Volume Styles：个性化你的音量调节面板</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://zronghui.github.io/docker%20k8s/docker.html"/>
    <id>https://zronghui.github.io/docker%20k8s/docker.html</id>
    <published>2020-05-08T09:30:20.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="docker-服务-端口对应"><a href="#docker-服务-端口对应" class="headerlink" title="docker 服务 端口对应"></a>docker 服务 端口对应</h2><p>gitlab 8001</p><p>yunmusic 8002</p><p>portainer 9000</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://study.163.com/course/courseLearn.htm?courseId=1002892012#/learn/video?lessonId=1003323253&courseId=1002892012">动手玩Docker - 网易云课堂</a></p><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程</a></p><h2 id="1-docker-安装"><a href="#1-docker-安装" class="headerlink" title="1.docker 安装"></a>1.docker 安装</h2><p><a href="https://docs.docker.com/engine/install/centos/#install-docker-engine">Install Docker Engine on CentOS | Docker Documentation</a></p><p><a href="https://www.runoob.com/docker/macos-docker-install.html">MacOS Docker 安装 | 菜鸟教程</a></p><p><a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">Docker 镜像加速 | 菜鸟教程</a></p><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载旧版本</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 用存储库进行安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 yum-utils 包(它提供 yum-config-manager 实用工具)并设置稳定存储库</span></span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 DOCKER 引擎</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证指纹是否与060A 61c51b558a7f 742B 77AA C52F EB6B 621E 9F35匹配，如果是，接受它</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 Docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>镜像加速</p><p>配置文件: /etc/docker/daemon.json</p><p>阿里云 ID 见：<a href="https://cr.console.aliyun.com/undefined/instances/mirrors">https://cr.console.aliyun.com/undefined/instances/mirrors</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://my-id.mirror.aliyuncs.com"</span>, <span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>docker info 查看是否生效</p><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>Linux 需要安装 docker-compose ；Mac win 自带</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="meta">#</span><span class="bash">sudo pip install docker-compose <span class="comment"># 此时 alias 失效</span></span></span><br><span class="line">pip3 install docker-compose</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><a href="https://www.runoob.com/docker/macos-docker-install.html">MacOS Docker 安装 | 菜鸟教程</a></p><p>从手动下载安装开始看</p><p><del>特慢的 brew</del></p><p><img src="https://i.loli.net/2020/05/09/FL5WbDVsj2myoTq.png" alt="FL5WbDVsj2myoTq"></p><h2 id="2-docker-操作"><a href="#2-docker-操作" class="headerlink" title="2.docker 操作"></a>2.docker 操作</h2><p><a href="https://snowdreams1006.tech/devops/docker-ops.html">docker 操作 · 雪之梦技术驿站</a></p><p><a href="https://www.cnblogs.com/sparkdev/p/7821376.html">查看 docker 容器使用的资源 - sparkdev - 博客园</a></p><ul><li>帮助命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><ul><li>运行容器</li></ul><blockquote><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>退出容器</li></ul><blockquote><p><code>exit</code></p></blockquote><ul><li>查看容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>启动容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start b750bbbcfd88</span><br></pre></td></tr></table></figure><h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器-container"></a>容器-container</h3><ul><li>后台运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>停止容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;容器 ID&gt;</span><br><span class="line">docker <span class="built_in">kill</span> &lt;容器 ID&gt; <span class="comment"># 强制停止</span></span><br></pre></td></tr></table></figure><ul><li>重启容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><ul><li>进入容器</li></ul><blockquote><p><code>docker attach</code> 和 <code>docker exec</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 1e560fca3906</span><br></pre></td></tr></table></figure><blockquote><p>注意: 如果从这个容器退出,会导致容器的停止.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 243c32535da7 /bin/bash</span><br></pre></td></tr></table></figure><ul><li>导出容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><ul><li>导入容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import - <span class="built_in">test</span>/ubuntu:v1</span><br></pre></td></tr></table></figure><ul><li>删除容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f 1e560fca3906</span><br></pre></td></tr></table></figure><ul><li>清理掉所有处于终止状态的容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><ul><li>端口映射 ？</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port bf08b7f2cd89</span><br></pre></td></tr></table></figure><ul><li>查看容器日志</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f bf08b7f2cd89</span><br></pre></td></tr></table></figure><ul><li>查看容器进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ul><li>列出镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>下载镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure><ul><li>查找镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search httpd</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><ul><li>创建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">"updated"</span> -a=<span class="string">"snowdreams1006"</span> eb3c83541f05 snowdreams1006/ubuntu</span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher &quot;fisher@sudops.com&quot;</span><br><span class="line"></span><br><span class="line">RUN     &#x2F;bin&#x2F;echo &#39;root:123456&#39; |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     &#x2F;bin&#x2F;echo &#39;runoob:123456&#39; |chpasswd</span><br><span class="line">RUN     &#x2F;bin&#x2F;echo -e &quot;LANG&#x3D;\&quot;en_US.UTF-8\&quot;&quot; &gt;&#x2F;etc&#x2F;default&#x2F;local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     &#x2F;usr&#x2F;sbin&#x2F;sshd -D</span><br></pre></td></tr></table></figure><blockquote><p>Dockerfile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure><ul><li>设置镜像标签</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 860c279d2fec runoob/centos:dev</span><br></pre></td></tr></table></figure><h3 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h3><ul><li>随机映射</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>指定端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>指定地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><ul><li>命名容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name runoob training/webapp python app.py</span><br></pre></td></tr></table></figure><ul><li>新建网络</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge <span class="built_in">test</span>-net</span><br></pre></td></tr></table></figure><ul><li>连接容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 --network <span class="built_in">test</span>-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>sudo docker logs -f -t –tail 10 s12</p><h3 id="常用操作-我用过的操作-："><a href="#常用操作-我用过的操作-：" class="headerlink" title="常用操作(我用过的操作)："></a>常用操作(我用过的操作)：</h3><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>docker ps -a</td><td>查看所有容器</td></tr><tr><td>docker stop xxx</td><td>停止容器</td></tr><tr><td>docker restart xxx</td><td>重启容器</td></tr><tr><td>docker container prune</td><td>清除所有停止的容器</td></tr><tr><td>-p outDocker:inDocker</td><td>端口映射</td></tr><tr><td>docker stats</td><td>类似top, 查看各个容器的 CPU mem 占用情况（为什么不是 states）</td></tr><tr><td>docker stats –no-stream</td><td>查看一次</td></tr><tr><td>docker images</td><td>查看所有 image</td></tr><tr><td>docker log -f xxxxx</td><td>查看容器日志</td></tr><tr><td>docker rmi xx</td><td>删除 image</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="容器资源限制：内存、CPU、带宽"><a href="#容器资源限制：内存、CPU、带宽" class="headerlink" title="容器资源限制：内存、CPU、带宽"></a>容器资源限制：内存、CPU、带宽</h3><p><a href="https://www.hangge.com/blog/cache/detail_2413.html">Docker - 常用命令汇总2（容器资源限制：内存、CPU、带宽）</a></p><p>一、内存限额<br>1，参数说明<br>2，使用样例<br>二、CPU 限额<br>1，参数说明<br>2，使用样例<br>三、Block IO 宽带限额<br>1，block io 权重<br>2，限制 bps 和 iops </p><h3 id="Dockerize"><a href="#Dockerize" class="headerlink" title="Dockerize"></a>Dockerize</h3><p><a href="https://rock-it.pl/better-docker-containers-with-dockerize-wrapper/">Better Docker experience with Dockerize</a></p><p>假设有docker-compose.yml内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.example.com/our-application</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">node</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br></pre></td></tr></table></figure><p>文件没问题，但是逻辑有问题，node 应用依赖于 database，有一定几率 node 启动失败</p><p>解决办法，使用 dockerize</p><p>在 dockerfile 里添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV DOCKERIZE_VERSION v0.4.0</span><br><span class="line">RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \</span><br><span class="line">    &amp;&amp; tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \</span><br><span class="line">    &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz</span><br></pre></td></tr></table></figure><p>修改 docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.example.com/our-application</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">dockerize</span> <span class="string">-wait</span> <span class="string">tcp://database:5432</span> <span class="string">node</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><p>更多用法、参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redirect files to stdout and stderr</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-stdout</span> <span class="string">info.log</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-stdout</span> <span class="string">perf.log</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wait for 2 services with 10s timeout</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-wait</span> <span class="string">tcp://db:5432</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-wait</span> <span class="string">http://web:80</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-timeout</span> <span class="string">10s</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># template option</span></span><br><span class="line"><span class="string">dockerize</span> <span class="string">\</span></span><br><span class="line">  <span class="string">-template</span> <span class="string">nginx.tmpl:nginx.conf</span> <span class="string">\</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="docker-django-es"><a href="#docker-django-es" class="headerlink" title="docker django es"></a>docker django es</h3><p><a href="https://hub.docker.com/_/elasticsearch?tab=description">elasticsearch - Docker Hub</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">Install Elasticsearch with Docker | Elasticsearch Reference [7.5] | Elastic</a></p><h2 id="3-docker-gitlab-8001"><a href="#3-docker-gitlab-8001" class="headerlink" title="3.docker gitlab :8001"></a>3.docker gitlab :8001</h2><p>主要看 gitlab 官方文档</p><p><a href="https://docs.gitlab.com/omnibus/docker/">GitLab Docker images | GitLab</a></p><p><a href="https://snowdreams1006.tech/devops/docker-gitlab.html">docker + gitlab · 雪之梦技术驿站</a><br><a href="https://www.jianshu.com/p/080a962c35b6">docker下gitlab安装配置使用(完整版) - 简书</a></p><p><a href="https://juejin.im/post/5a4c9ff36fb9a04507700fcc#heading-9">通过 docker 搭建自用的 gitlab 服务 - 掘金</a><br><a href="https://michael728.github.io/2019/06/15/docker-compose-install-gitlab-runner/">使用 Dockcer-Compose 安装 Gitlab 服务 | Michael翔</a><br><a href="https://github.com/sameersbn/docker-gitlab">sameersbn/docker-gitlab: Dockerized GitLab</a></p><p>For Linux users set the path to /srv</p><p>export GITLAB_HOME=/srv</p><p>For Mac OS users, use the user’s $HOME folder.</p><p>export GITLAB_HOME=$HOME</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export GITLAB_HOME=/srv</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> GITLAB_HOME=<span class="variable">$HOME</span></span></span><br><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.zronghui.com \</span><br><span class="line">  --publish 443:443 --publish 8001:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  -m 500M \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume $GITLAB_HOME/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><p><strong>由于某些疏忽，Mac 和服务器的 gitlab home都为空</strong></p><p>所以：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.zronghui.com \</span><br><span class="line">  --publish 443:443 --publish 8001:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h3 id="mem-占用过高问题解决："><a href="#mem-占用过高问题解决：" class="headerlink" title="mem 占用过高问题解决："></a>mem 占用过高问题解决：</h3><p>然而并没有解决，启动不了，而且 mem 占用仍然很高，差点的服务器跑不起来</p><p><a href="https://stackoverflow.com/questions/36122421/high-memory-usage-for-gitlab-ce">git - High memory usage for Gitlab CE - Stack Overflow</a><br><a href="https://edspencer.me.uk/posts/2017-07-30-reducing-the-amount-of-memory-used-by-gitlab/">Reducing the amount of memory used by gitlab - Ed Spencer - Performance obsessive web developer</a><br><a href="https://blog.csdn.net/qq446282412/article/details/84066417">【Git学习】解决GitLab内存消耗大的问题_运维_欧阳鹏-CSDN博客</a></p><p>vim /gitlab/config/gitlab.rb</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去除注释</span></span><br><span class="line">unicorn[<span class="string">'worker_processes'</span>] = <span class="number">2</span> <span class="comment"># 最低为 2</span></span><br><span class="line">postgresql[<span class="string">'shared_buffers'</span>] = <span class="string">"256MB"</span></span><br><span class="line">postgresql[<span class="string">'max_worker_processes'</span>] = <span class="number">1</span> <span class="comment"># 默认为 8</span></span><br><span class="line">sidekiq[<span class="string">'concurrency'</span>] = <span class="number">1</span> <span class="comment"># 默认为 25</span></span><br><span class="line">prometheus_monitoring[<span class="string">'enable'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab gitlab-ctl reconfigure</span><br><span class="line">docker exec -it gitlab gitlab-ctl restart</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/05/10/7ilcTwUIMGAkYj6.jpg" alt="7ilcTwUIMGAkYj6" style="zoom:50%;" /><p>等待3分钟，访问 127.0.0.1:8001 ,设置 root 密码</p><p>添加 group，添加用户，将用户添加到 group 里，创建 group 的项目</p><p>我感觉可以直接创建 root 的项目，反正是自己一个人使用</p><p>语言设置：</p><p><img src="https://i.loli.net/2020/05/10/zfFZkTYc4HjMhKW.png" alt="zfFZkTYc4HjMhKW"></p><h3 id="添加本地已有仓库"><a href="#添加本地已有仓库" class="headerlink" title="添加本地已有仓库"></a>添加本地已有仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitlab http://47.93.53.47:8001/group1/zronghui_xxxt</span><br><span class="line">git push -u gitlab master</span><br><span class="line"></span><br><span class="line">cot .git/config</span><br><span class="line"></span><br><span class="line">[remote "origin"] 下面添加 gitlab 的 URL:</span><br><span class="line">url = http://47.93.53.47:8001/group1/zronghui_xxxt</span><br></pre></td></tr></table></figure><h2 id="4-解锁网易云灰色歌曲-8002"><a href="#4-解锁网易云灰色歌曲-8002" class="headerlink" title="4. 解锁网易云灰色歌曲 :8002"></a>4. 解锁网易云灰色歌曲 :8002</h2><p><a href="https://github.com/nondanee/UnblockNeteaseMusic">nondanee/UnblockNeteaseMusic: Revive unavailable songs for Netease Cloud Music</a></p><p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/48">进阶配置 · Issue #48 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22">食用指南 · Issue #22 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/527">全端通用方案搭建教程 · Issue #527 · nondanee/UnblockNeteaseMusic</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name yunmusic -p 8002:8080 nondanee/unblockneteasemusic</span><br></pre></td></tr></table></figure><h2 id="5-rsshub-1200"><a href="#5-rsshub-1200" class="headerlink" title="5. rsshub :1200"></a>5. rsshub :1200</h2><p><a href="https://github.com/DIYgod/RSSHub">DIYgod/RSSHub: 🍰 Everything is RSSible</a><br><a href="https://docs.rsshub.app/">介绍 | RSSHub</a></p><p><a href="https://docs.rsshub.app/install/#docker-compose-bu-shu">部署 | RSSHub</a></p><p>部分RSS需要单独配置后方可生成，如 pixiv、disqus、twitter、youtube、telegram、github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mcd rsshub</span><br><span class="line">wget https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功，但是外网无法访问</span></span><br><span class="line">git clone https://github.com/DIYgod/RSSHub.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者只下载项目下的 lib/middleware/header.js</span></span><br><span class="line">vim lib/middleware/header.js</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 allow-origin 改为 0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'0.0.0.0'</span>,</span></span><br><span class="line">docker cp lib/middleware/header.js 8c144637ddef:/app/lib/middleware/</span><br><span class="line">docker restart 8c144637ddef</span><br></pre></td></tr></table></figure><h2 id="9-Django-工具"><a href="#9-Django-工具" class="headerlink" title="9.Django 工具"></a>9.Django 工具</h2><h3 id="kitematic-–-Mac管理-docker"><a href="#kitematic-–-Mac管理-docker" class="headerlink" title="kitematic – Mac管理 docker"></a>kitematic – Mac管理 docker</h3><h3 id="portainer-–-在网页端远程管理-docker"><a href="#portainer-–-在网页端远程管理-docker" class="headerlink" title="portainer – 在网页端远程管理 docker"></a>portainer – 在网页端远程管理 docker</h3><p><a href="https://github.com/portainer/portainer">portainer/portainer: Making Docker management easy.</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><p>启动起来后，开启 9000 端口，然后在本地：</p><p>访问 <a href="http://47.93.53.47:9000/">http://47.93.53.47:9000/</a></p><p>设置密码，选择 Local–Manage the local Docker environment</p><p><a href="https://www.infoq.cn/article/687ItzzHZ2P3pN5PMVSb">推荐5款好用的开源Docker工具 - InfoQ</a></p><p>watchtower ：自动更新 Docker 容器<br>docker-gc ：容器和镜像的垃圾回收<br>docker-slim ：面向容器的神奇减肥药<br>rocker ：突破 Dockerfile 的限制<br>ctop：容器的类顶层接口</p><h2 id="常用的Docker"><a href="#常用的Docker" class="headerlink" title="**常用的Docker"></a>**常用的Docker</h2><p><a href="http://bbs.nas66.com/thread-8409-1-1.html">汇总一下我常用的Docker镜像以及说明 - 矿渣社区 - 其他系统 - 软件专区</a></p><p>google 更多</p><ol><li>CentOS6</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">镜像：treasureboat/ssh</span><br><span class="line">用户名：root</span><br><span class="line">密码：<span class="number">123456</span></span><br><span class="line">建站的，配合这个脚本超好用：</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:<span class="comment">//download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span></span><br><span class="line">#</span><br><span class="line">#该镜像安装aria的步骤为：</span><br><span class="line">wget http:<span class="comment">//ftp.tu-chemnitz.de/pub/linux/dag/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm </span></span><br><span class="line">rpm -ivh rpmforge-<span class="built_in">release</span><span class="number">-0.5</span><span class="number">.3</span><span class="number">-1.</span>el6.rf.x86_64.rpm </span><br><span class="line">yum -y install aria2</span><br></pre></td></tr></table></figure><ol start="2"><li>Ubuntu18</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：rastasheep/ubuntu-sshd</span><br><span class="line">用户名：root</span><br><span class="line">密码：root</span><br></pre></td></tr></table></figure><ol start="3"><li>宝塔面板</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：tangniyuqi/baota</span><br><span class="line">用户名：admin</span><br><span class="line">密码：admin123</span><br></pre></td></tr></table></figure><ol start="4"><li>Debian</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：hklcf/debian-ssh-docker</span><br><span class="line">用户名: root</span><br><span class="line">密码：password</span><br></pre></td></tr></table></figure><ol start="5"><li>Centos</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tutum/centos:latest .</span><br><span class="line">tutum/centos:centos5 centos5</span><br><span class="line">tutum/centos:centos6 centos6</span><br><span class="line">tutum/centos:centos7 centos7</span><br><span class="line">用户名：root</span><br><span class="line">密码随机，在docker日志中查看密码</span><br></pre></td></tr></table></figure><ol start="6"><li>OwnCloud</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：imdjh/owncloud-with-ocdownloader</span><br><span class="line">端口：<span class="number">80</span></span><br><span class="line">就是owncloud</span><br></pre></td></tr></table></figure><ol start="7"><li>peerflix-server（磁力下载工具）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像：fish/peerflix-server</span><br><span class="line">端口：<span class="number">9000</span></span><br></pre></td></tr></table></figure><ol start="8"><li>Owncloud（可以启用外部存储并具有下载功能）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">镜像：limaofeng/owncloud-with-ocdownloader</span><br><span class="line">端口：<span class="number">80</span></span><br></pre></td></tr></table></figure><ol start="9"><li>chrome浏览器</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像：</span><br><span class="line">consol/centos-xfce-vnc #（支持中文）</span><br><span class="line">consol/ubuntu-xfce-vnc #（不支持中文）</span><br><span class="line">密码：vncpassword</span><br><span class="line">端口：<span class="number">5901</span></span><br></pre></td></tr></table></figure><ol start="10"><li>xware-kodexplorer</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：mrlyc/xware-kodexplorer</span><br><span class="line">端口：<span class="number">80</span></span><br><span class="line">初始账号密码：admin</span><br></pre></td></tr></table></figure><p>宝塔面板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">镜像：tangniyuqi/baota</span><br><span class="line">用户名：admin</span><br><span class="line">密码：admin123</span><br></pre></td></tr></table></figure><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>网址：<a href="https://hub.docker.com/_/tomcat/">https://hub.docker.com/_/tomcat/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull tomcat</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name tomcat -p 8081:8080 tomcat</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>网址：<a href="https://hub.docker.com/_/nginx/">https://hub.docker.com/_/nginx/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull nginx</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name nginx -p 80:80 nginx</span><br><span class="line"># 静态资源放入 nginx 中 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 目录下</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><em>MySQL</em></h3><p>网址：<a href="https://hub.docker.com/_/mysql/">https://hub.docker.com/<em>/</em>mysql_/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#拉取</span><br><span class="line">docker pull mysql</span><br><span class="line"># 运行</span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;ROOT_Password -d mysql</span><br></pre></td></tr></table></figure><h4 id="MySQL-连接问题"><a href="#MySQL-连接问题" class="headerlink" title="MySQL 连接问题"></a><em>MySQL</em> 连接问题</h4><p><img src="https://i.loli.net/2020/05/18/lzPnNQmOyBsW5kr.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问题：Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br><span class="line"></span><br><span class="line">解决方案：进入容器内，登录容器内的MySQL，在SQL中执行以下命令即可：</span><br><span class="line">alter user &#39;root&#39;@&#39;%&#39; identified with mysql_native_password by &#39;19491001&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>网址：<a href="https://hub.docker.com/r/wnameless/oracle-xe-11g/">https://hub.docker.com/r/wnameless/oracle-xe-11g/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull wnameless&#x2F;oracle-xe-11g</span><br><span class="line"># 运行，默认账号 system，默认密码 oracle，-e 允许远程连接</span><br><span class="line">docker run -d --name oracle -p 49161:1521 -e ORACLE_ALLOW_REMOTE&#x3D;true wnameless&#x2F;oracle-xe-11g</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><em>Redis</em></h3><p>网址：<a href="https://hub.docker.com/_/redis/">https://hub.docker.com/<em>/</em>redis_/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull redis</span><br><span class="line"># 运行</span><br><span class="line">## 无密码运行</span><br><span class="line">docker run -d --name redis -p 6379:6379  redis</span><br><span class="line">## 有密码运行</span><br><span class="line">docker run -d --name redis10 -p 6379:6379 redis --requirepass 19491001</span><br></pre></td></tr></table></figure><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>网址：<a href="https://hub.docker.com/_/mongo/">https://hub.docker.com/_/mongo/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull mongo</span><br><span class="line"># 运行</span><br><span class="line">## 无账号密码运行</span><br><span class="line">docker run -d --name mongo -p 27017:27017 mongo</span><br><span class="line">## 账号密码运行</span><br><span class="line">docker run -d --name mongo  -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME&#x3D;mongo -e MONGO_INITDB_ROOT_PASSWORD&#x3D;19491001 mongo</span><br></pre></td></tr></table></figure><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><p>网址：<a href="https://hub.docker.com/r/gitlab/gitlab-ce/">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用 docker 拉取 gitlab 镜像</span><br><span class="line">docker pull gitlab&#x2F;gitlab-ce</span><br><span class="line"># 运行 giltab 镜像</span><br><span class="line">docker run -di --name&#x3D;gitlab-ce -p 7000:80 gitlab&#x2F;gitlab-ce</span><br><span class="line"># 进入 gitlab 容器中</span><br><span class="line">docker exec -it gitlab-ce &#x2F;bin&#x2F;bash</span><br><span class="line"># 执行 giltab 配置,访问 http:&#x2F;&#x2F;IP:7000 即可，首次访问需要配置 root 密码</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>DockerHub 官网：<a href="https://hub.docker.com/_/jenkins/">https://hub.docker.com/_/jenkins/</a></p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull jenkins</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name simbajenkins -p 7000:8080 -p 50000:50000 jenkins</span><br></pre></td></tr></table></figure><h3 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h3><p>DockerHub 官网：<a href="https://hub.docker.com/r/rancher/server/">https://hub.docker.com/r/rancher/server/</a></p><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取</span><br><span class="line">docker pull rancher&#x2F;server</span><br><span class="line"># 运行</span><br><span class="line">docker run -di --name simbarancher -p 7001:8080 rancher&#x2F;server</span><br></pre></td></tr></table></figure><h2 id="参考、学习资料"><a href="#参考、学习资料" class="headerlink" title="参考、学习资料"></a>参考、学习资料</h2><p><a href="https://github.com/wsargent/docker-cheat-sheet">wsargent/docker-cheat-sheet: Docker Cheat Sheet</a><br><a href="https://github.com/veggiemonk/awesome-docker">veggiemonk/awesome-docker: A curated list of Docker resources and projects</a><br><a href="https://github.com/yeasy/docker_practice">yeasy/docker_practice: Learn and understand Docker technologies, with real DevOps practice!</a></p><p><a href="https://www.infoq.cn/article/tp28JvvgkZ-UPDY4THk5">谁在运行我的Kubernetes Pod？容器运行时的过去、现在和未来 - InfoQ</a></p><p><a href="https://snowdreams1006.tech/devops/docker-ops.html">docker 操作 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/devops/docker-compose.html">docker compose · 雪之梦技术驿站</a></p><p><a href="https://www.runoob.com/docker/docker-compose.html">Docker Compose | 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker k8s" scheme="https://zronghui.github.io/categories/docker-k8s/"/>
    
    
  </entry>
  
  <entry>
    <title>追剧</title>
    <link href="https://zronghui.github.io/todo/%E8%BF%BD%E5%89%A7.html"/>
    <id>https://zronghui.github.io/todo/%E8%BF%BD%E5%89%A7.html</id>
    <published>2020-05-08T06:16:49.000Z</published>
    <updated>2020-05-17T13:41:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><h3 id="悬疑电影"><a href="#悬疑电影" class="headerlink" title="悬疑电影"></a>悬疑电影</h3><ul><li><input disabled="" type="checkbox"> 9.钟表馆事件</li><li><input disabled="" type="checkbox"> 8.恶意</li><li><input disabled="" type="checkbox"> 7.奇想，天动</li><li><input disabled="" type="checkbox"> 6.看不见的客人</li><li><input disabled="" type="checkbox"> 5.控方证人</li><li><input disabled="" type="checkbox"> 4.X的悲剧</li><li><input disabled="" type="checkbox"> 3.罗杰疑案</li><li><input disabled="" type="checkbox"> 2.耳语之人</li><li><input disabled="" type="checkbox"> 1.高尔夫球场的疑云</li></ul><h2 id="韩剧"><a href="#韩剧" class="headerlink" title="韩剧"></a>韩剧</h2><p><a href="https://www.douban.com/doulist/2942804/">豆瓣评分8.0以上的韩剧（评价人数≥1000）</a></p><img src="https://i.loli.net/2020/05/08/y9BZ6dtkEX3KezY.png" alt="y9BZ6dtkEX3KezY" style="zoom: 33%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-05</title>
    <link href="https://zronghui.github.io/blockchain/blockchain-05.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain-05.html</id>
    <published>2020-05-07T08:34:38.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="P9-09-BTC-比特币脚本"><a href="#P9-09-BTC-比特币脚本" class="headerlink" title="P9. 09-BTC-比特币脚本"></a>P9. 09-BTC-比特币脚本</h2><p>比特币使用的脚本与原理</p><p>如图(第15秒)是比特币的一个交易实例。该交易有一个输入两个输出。左上角写着output，其实是这个交易的输入。右边两个输出，上面unspent即没有花出，下面spent表示已花出。该交易已经收到了23个确认，所以回滚的可能性很小了。</p><p>下面是这个交易的输入输出脚本，输入脚本包含两个操作，分别把两个很长的数压入栈里。比特币使用的脚本语言是非常简单的，唯一能访问的内存空间就是一个堆栈。不像通用的编程语言，像C语言C++那样有全局变量、局部变量、动态分配的内存空间，它这里就是一个栈，所以叫做基于栈的语言。这里输出脚本有两行，分别对应上面的两个输出。每个输出有自己单独的一段脚本。</p><p>如图(第1分第40秒)是交易的具体内容。首先看交易的一些宏观信息。第一行:transaction ID，第二行hash，该交易的哈希值。第三行:使用的比特币协议的版本。第四行:该交易的大小。第五行:用来设定交易的生效时间。此处的0表示立即生效。绝大多数情况下，locktime都是0。如果是非零值，那么该交易要过一段时间才能生效。比如要等10个区块以后才能被写入区块链里。第六行第七行的vin、vout是输入输出部分，后面会详细讲解。第八行是这个交易所在区块的哈希值。第九行:该交易已经有多少个确认信息。第十行是交易产生的时间，第十一行是这个区块产生的时间。(time 和block time都是指很早的一个时间到现在过了多少秒)</p><p>如图(第3分第32秒)是交易的输入结构。一个交易可以有多个输入，在这个例子中只有一个输入。每个输入都要说明该输入花的币是来自之前哪个交易的输出，所以前两行给出输出币的来源。第一行:之前交易的哈希值。vout表示这个交易里的第几个输出。所以这里表示花的币来自于哈希值为c0cb…c57b的交易中第0个输出。接下来是输入脚本，输入脚本最简单的形式就是给出signification就行了，证明你有权利花这个钱。(后面的PPT中scriptsig就写成input script输入脚本)。如果一个交易有多个输入，每个输入都要说明币的来源，并且要给出签名，也就是说比特币中的一个交易可能需要多个签名。</p><p>如图(第5分)是交易的输出，也是一个数组结构。该例子中有两个输出，value是输出的金额，就是给对方转多少钱，单位是比特币，即0.22684个比特币。还有的单位是satoshi(一聪)，是比特币中最小的单位。1比特币=10的8次方聪。n是序号，表示这是这个交易里的第几个输出。</p><p>scriptpubkey是输出脚本，后面都写成output script。输出脚本最简单的形式就是给出一个pubkey。下面asm是输出脚本的内容，里面包含一系列的操作，在后面会详细解释。require sigs表示这个输出需要多少个签名才能兑现，这两个例子中都是只需要一个签名。type是输出的类型，这两个例子类型都是pubkeyhash，是公钥的哈希。addresses是输出的地址。</p><p>如图(第6分 第36秒)是展示输入和输出脚本是怎样执行的。在区块链第二个区块里有A→B的转账交易，B收到转来的钱后，又隔了两个区块，把币又转给了C。所以B→C交易的txid、vout是指向A→B交易的输出。而要验证交易的合法性，是要把B→C的输入脚本，跟A→B交易的输出脚本拼接在一起执行。</p><p>如图(第7分 第40秒)这里有个交叉，前面交易的输出脚本放在后面，后面交易的输入脚本放在前面。在早期的比特币实践中，这两个脚本是拼接在一起，从头到尾执行一遍。后来出于安全因素的考虑，这两个脚本改为分别执行。首先执行输入脚本，如果没有出错就再执行输出脚本。如果能顺利执行，最后栈顶的结果为非零值，也就是true，那么验证通过，这个交易就是合法的。如果执行过程中出现任何错误，这个交易就是非法的。如果一个交易有多个输入的话，那么每个输入脚本都要和所对应的交易的输出脚本匹配之后来进行验证。全都验证通过了，这个交易才是合法的。</p><p>如图(第8分第45秒)是输入、输出脚本的几种形式。一种最简单的形式就是P2PK(pay to public key)。输出脚本里直接给出收款人的公钥，下面一行checksig，是检查签名的操作。在输入脚本里，直接给出签名就行了。这个签名是用私钥对输入脚本所在的整个交易的签名。这种形式是最简单的，因为公钥是直接在输出脚本里给出的。</p><p>如图(第9分第18秒)是脚本的实际执行情况。这三行是把输入脚本和输出脚本拼接起来之后的结果。第一行来自输入脚本，后两行来自输出脚本。注意，实际代码中出于安全考虑，这两个脚本实际上是分别执行的。第一行:把输入脚本提供的签名压入栈，第二条把输出里提供的公钥压入栈，第三条checksig是把栈顶的这两个元素弹出来。用公钥检查一下这个签名是否正确。如果正确，返回true，说明验证通过。否则，执行出错，这个交易就是非法的。</p><p>如图(第10分第24秒)是P2PK的一个实例。上面交易的输入脚本就是把签名压入栈，下面交易是上面交易输入的币的来源。它的输出有两行，第一行是把公钥压入栈，第二行就是checksig。这是第一种形式。</p><p>如图(第10分第52秒)是第二种形式P2PKH(pay to public key hash)，跟第一种区别是输出脚本里没有直接给出收款人的公钥，给出的是公钥的哈希。公钥是在输入脚本里给出的。输入脚本既要给出签名，也要给出公钥。输出脚本里还有一些其他操作，DUP、HASH160等等，这些操作都是为了验证签名的正确性。P2PKH是最常用的形式。</p><p>如图(第11分第37秒)是脚本的执行结果，这个是把上一页的输入脚本和输出脚本拼接之后得到的，前两条语句来自输入脚本，后面的语句来自输出脚本，还是从上往下执行。第一条语句先把签名压入栈，第二条语句把公钥压入栈。第三条语句是把栈顶的元素复制一遍，所以栈顶又多了一个公钥。HASH160是把栈顶元素弹出来，取哈希，然后把得到的哈希值再压入栈。所以栈顶变成了公钥的哈希值。</p><p>第五行是把输出脚本里提供的公钥的哈希值压入栈。这个时候栈顶有两个哈希值，上面的哈希值是输出脚本里面提供的，收款人公钥的哈希，即我发布交易时，转账的钱是转给谁的，在输出脚本里提供一个收款人的公钥的哈希。下面的哈希是指你要花这个钱时在输入脚本里给出的公钥，然后前面的操作HASH160是取哈希后得到的。倒数第二行操作的作用是弹出栈顶的两个元素，比较是否相等，即比较其哈希值是否相等。这样做的目的是防止有人莫名顶替，用自己的公钥冒充收款人的公钥。假设两个哈希是相等的，那么就从栈顶消失了。最后一条作用是用公钥检查弹出栈顶的元素是否正确。假设签名是正确的，整个脚本就顺利运行结束，栈顶留下的是true。如果执行过程任何一个环节发生错误，比如输入里给出的公钥跟输出里给出的哈希值对不上，或者是输入里给出的签名跟给出的公钥对不上，那么这个交易就是非法的。</p><p>P2PKH是最常用的脚本信息，该实例(第14分第20秒)用的就是这种脚本。输入脚本就是把签名压入栈，把公钥压入栈。下面的输出脚本复制栈顶元素，然后取哈希值，hash160。然后把公钥的哈希压入栈，最后比较栈顶的两个哈希值，检查签名。</p><p>最后一种如图(第15分第25秒)，也是最复杂的一种脚本形式，是Pay to Script Hash。这种形式的输出脚本给出的不是收款人的公钥的哈希，而是收款人提供的一个脚本的哈希，这个脚本叫redeemscript，赎回脚本。将来花这个钱时输入脚本里要给出redeemscript(这个赎回脚本的具体内容)，同时还要给出让赎回脚本能够正确运行所需要的签名。</p><p>验证时分为两部(如图第15分第40秒)，第一步验证输入脚本里给出的赎回脚本是不是跟输出脚本里给出的哈希值匹配，如果不匹配说明给出的赎回脚本是不对的，就类似于刚才讲的pay to public key hash里面给出的公钥不对一样。匹配不上说明给出的赎回脚本是不对的，那么验证就失败了。如果输入里给出的赎回脚本是正确的，那么第二步还要把赎回脚本的内容当做操作指令来执行一遍，看看最后能不能顺利执行。如果两步验证都通过了，那么这个交易才是合法的。听上去有点抽象，那么下面看一个具体的例子。</p><p>(如图第16分第47秒)用pay to script hash实现pay to public key 的功能。这里的输入脚本就是给出签名，再给出序列化的赎回脚本，赎回脚本的内容就是给出公钥，然后用checksig检查签名。下面这个输出脚本是用来验证输入脚本里给出的赎回脚本是否正确。</p><p>如图(第17分第13秒)看一下pay to script hash的执行过程。开始也是把输入脚本和输出脚本拼接在一起，前两行来自输入脚本，后面三行来自输出脚本。首先把输入脚本的签名压入栈，然后把赎回脚本压入栈，然后是取哈希的操作，得到赎回脚本的哈希。这里RSH是指redeem script hash，赎回脚本的哈希值。接下来还要把输出脚本里给出的哈希值压入栈，这时栈里就有两个哈希值了。最后用equal比较这两个哈希值是否相等，如果不等就失败了。假设相等，那这两个哈希值就从栈顶消失了，到这里第一阶段的验证就算结束了，接下来还要进行第二个阶段的验证。</p><p>如图(第18分第28秒)第二个阶段首先要把输入脚本提供的序列化的赎回脚本进行反序列化，这个反序列化的操作在PPT上并没有展现出来，这是每个节点自己要完成的。然后执行赎回脚本，首先把public key压入栈，然后用checksig验证输入脚本里给出的签名的正确性。验证痛过之后，整个pay to script hash才算执行完成。</p><p>有人可能会问:干脆用pay to public key就行了，搞这么复杂干嘛?为什么非要把这些功能嵌入到赎回脚本里面?对于这个简单的例子来说确实是复杂了，但pay to script hash它的常见的应用场景是对多重签名的支持。</p><p>比特币系统中一个输出可能要求多个签名才能把钱取出来，比如某个公司的账户，可能要求五个合伙人中任意三个人签名才能把公司账户上的钱取走，这样为私钥的泄露提供了一些安全的保护。</p><p>比如说有某个合伙人私钥泄露出去了，那么问题也不大，因为还需要两个人的签名才能把钱取走。这同时也为私钥的丢失提供了一些冗余，即使有两个人把私钥忘掉了，省下的三个人依然可以把钱取出来，然后转到某一个安全的账户。</p><p>以上的功能是通过check multisig来实现的。<br>如图(第21分)，输出脚本里给出N个公钥，同时指定一个预值M。输入脚本只要提供接N个公钥对应的签名中任意M个合法的签名就能通过验证。</p><p>比如刚才举的例子中，N=5，M=3，五个合伙人中任意三个的签名都可以，输入脚本的第一行有一个红色的“✘”，这是什么意思呢?</p><p>比特币中check multisig的实现，有一个bug，执行的时候会从堆栈上多弹出一个元素，这个就是它的代码实现的一个bug。这个bug现在已经没有办法改了，因为这是个去中心化的系统，要想通过软件升级的方法去修复这个bug代价是很大的，要改的话需要硬分叉。所以实际采用的解决方案，是在输入脚本里，往栈上多压进去一个没用的元素，第一行的“✘”就是没用的多余的元素。另外需要注意给出的M个签名的相对顺序，要跟它们在N个公钥中的相对顺序是一致的才行。</p><p>如图(第22分第48秒)是check multisig的执行过程。这个例子假设三个签名中给出两个就行。图中可以看到这两个签名给出的相对顺序也是跟它们在公钥中的顺序是一样的。在公钥当中，第一个公钥排在第二个公钥前面。那么给出这两个签名的时候也是第一个签名排在第二个的前面。</p><p>第一行的false就是前面说的多余的元素。首先把多余的元素压入栈里，然后把两个签名依次压入栈，这个时候输入脚本就执行完了。接下来的输出脚本里把M的值，即预值M压入栈。然后把三个公钥压入栈，接着把N的值压入栈，最后执行check multisig，看看堆栈里是不是包含了这三个签名中的两个，如果是那么验证通过。</p><p>注意:这个过程中并没有用到pay to script hash。就是用比特币脚本中原生的check multisig来实现的。这么实现有什么问题吗？<br>早期的多重签名就是这样实现的，在实际的应用当中，有一些不是很方便的地方。</p><p>比如:网上购物。某个电商用multi签名，要求有五个合伙人中任意三个人的签名才能把钱取出来，要求网上购物的用户在支付的时候生成的转账交易里给出这五个合伙人的公钥，同时要给出N和M值。在这个例子中，N=5，M=3，这些都是用户在网上购物的时候生成转账交易时输出脚本里要给出的信息，给出这五个公钥，给出N和M值。</p><p>那么用户怎么知道这些信息呢?需要购物网站在网上公布出来，比如网上可以公布我们用了多重签名，我们用的五个签名中要给出三个，这是五个公钥，然后用户生成这个转账交易的时候，就把这些信息填进去。那么不同的电商采用的多重签名的规则是不一样的。有的电商可能是五个签名中要任意三个，有的可能要四个。这就给用户生成转账交易带来了一些不方便的地方，因为这些复杂性都暴露给用户了。</p><p>那么该如何解决?这里就要用到pay to script hash。<br>如图(第26分第39秒)是用pay to script hash实现的多重签名，它的本质是把复杂度从输出脚本转移到了输入脚本。现在这个输出脚本变得非常简单，只有这三行。原来的复杂度被转移到redeemscript赎回脚本里。输出脚本只要给出这个赎回脚本的哈希值就可以了。赎回脚本里要给出这N个公钥，还有N和M的值，这个赎回脚本是在输入脚本里提供的，也就是说是由收款人提供的。</p><p>像前面网上购物的例子，收款人是电商，他只要在网站上公布赎回脚本的哈希值，然后用户生成转账交易的时候把这个哈希值包含在输出脚本里就行了。至于这个电商用什么样的多重签名规则，对用户来说是不可见的，用户没必要知道。从用户的角度来看采用这种支付方式跟采用pay to public key hash没有多大区别，只不过把公钥的哈希值换成了赎回脚本的哈希值。当然，输出脚本的写法上也有一些区别，但不是本质性的。这个输入脚本是电商在花掉这笔输出的时候提供的，其中包含赎回脚本的序列化版本，同时还包含让这个赎回脚本验证通过所需的M个签名。将来如果这个电商改变了所采用的多重签名规则，比如由五个里选三个变成三个里选两个，那么只要改变输入脚本和赎回脚本的内容，然后把新的哈希值公布出去就行了。对用户来说，只不过是付款的时候，要包含的哈希值发生了变化，其他的变化没有必要知道。</p><p>如图(第29分第14秒)是具体的执行过程。这是把输入脚本和输出脚本拼接在一起后的情况，第一行的FALSE就是为了应付check multisig的bug而准备的一个没用的元素，执行的时候先把它压入栈，然后依次把两个签名压入栈，接下来是序列化的赎回脚本，目前只是把它作为数据压入栈，到这里输入脚本就执行完了。下面是输出脚本，取哈希，然后把输出脚本里提供的哈希值压入栈顶。最后判断两个哈希值是否相等，到这里第一阶段的验证就完成了。</p><p>如图(第30分第18秒)开始第二阶段的验证，把赎回脚本展开后执行。先把M压入栈，然后把三个公钥压入栈，把N压入栈，最后检查多重签名的正确性，三个里面有两个是正确的。第二阶段的验证过程跟前面直接使用check multisig的情况是类似的。</p><p>如图(第30分第52秒)是网上使用pay to script hash来做多重签名的一个实例。上面输入脚本的最后一个就是序列化的赎回脚本，反序列化之后得到的就是三个里面取两个的多重签名脚本。下面这个输出脚本的内容，跟前面讲的是一样的。现在的多重签名，一般都是采用这种pay to script hash的形式。</p><p>如图(第31分第25秒)这种脚本格式是比较特殊的，这种格式的输出脚本开头是return的操作，后面可以跟任意的内容。return操作的作用，是无条件的返回错误，所以包含这个操作的脚本永远不可能通过验证，执行到return语句，就会出错，然后执行就终止了，后面跟的内容根本没有机会执行。</p><p>为什么要设计这样的输出脚本呢？这样的输出岂不是永远花不出去吗？无论输入脚本写的是什么内容，执行到输出的return语句，它就会报错，那么这里的钱永远都花不出去。确实如此，这个脚本是销毁比特币的一种方法。</p><p>为什么要销毁比特币呢？这个一般有两种应用场景:<br>①有些小的币种要求销毁一定数量的比特币才能够得到这个币种，有时候把这种小币种称为AltCoin(Alternative coin)。除了比特币之外的其他小的加密货币都可以认为是Alternative Coin。比如有的小币种要求销毁一个比特币可以得到1000个小币，也就是说要用上述的方法证明已经付出了一定的代价才能够得到这个小币种。</p><p>②往区块链里写入一些内容。区块链是个不可篡改的账本，有人就利用这个特性往里面添加一些需要永久保存的内容，比如第一节课讲的digital commitment。要证明在某个时间，知道某些事情。比如涉及知识产权保护的，把某项知识产权的内容取哈希之后，把哈希值放到return语句的后面，其后面的内容反正是永远不会执行的，往里面写什么都没关系。而且放在这里的是一个哈希值，不会占太大的地方，而且也没有泄露出来你知识产权的具体内容。将来如果出现了纠纷，像知识产权的一些专利诉讼，再把具体的哈希值的输入内容公布出去，证明你在某个时间点已经知道某个知识了。</p><p>这个应用场景和coinbase域相似。coinbase transaction里面有个coinbase域，在这个域里写什么内容同样是没人管的，那这里为什么不用coinbase的方法呢？coinbase还不用销毁比特币，就可以直接往里写。</p><p>coinbase的方法只有获得记账权的那个节点才能用。如果是一个全节点，挖矿挖到了，然后发布一个区块，可以往coinbase transaction 里的coinbase域写入一些内容，这是可以的。</p><p>而我们说的上述方法，是所有节点都可以用的，甚至不一定是个节点，可能就是一个普通的比特币上的一个用户，任何人都可以用这种方法去写入一些内容。发布交易不需要有记账权，发布区块才需要有记账权。任何用户都可以用这种方法销毁很少的比特币，比如0.0000001个比特币，换取往区块链里面写入一些内容的机会。其实有些交易根本没有销毁比特币，只不过支付了交易费。</p><p>下面看两个实例<br>如图(第37分第44秒)是一个coinbase transaction。这个交易有两个输出，第一个输出的脚本是正常的pay to public key hash，输出的金额就是得到的block reward加上transaction fee。第二个输出的金额是0，输出脚本就是刚才提到的格式:开头是return，后面跟了一些乱七八糟的内容，第二个输出的目的就是为了往区块链里写一些东西。</p><p>这种形式的脚本的一个好处是:矿工看到这种脚本的时候知道它里面的输出永远不可能兑现，所以就没必要把它保存在UTXO里面，这样对全节点是比较友好的。还有一点要说明:这个PPT当中涉及到比特币脚本的操作为了简单起见都没有加上OP前缀。比如CHECKSIG，实际上应该写成OP_CHECKSIG，CHECKMULTISIG、DUP也是如此。</p><p>比特币系统中用到的这种脚本语言是非常简单的，甚至连专门的名字都没有，它就叫比特币脚本语言(bitcoin scripting language)。后面可以看到，以太坊当中用的智能合约的语言比这个要复杂的多。比如说比特币的脚本语言不支持循环，所以有很多功能这个语言是实现不了的，这样的设计是有其用意的，不支持循环就不会有死循环，就不用担心停机问题。以太坊当中智能合约的语言表达能力很强，所以就要靠汽油费的机制来防止程序陷入死循环。</p><p>另外一方面，这个语言虽然在某些方面功能是很有限的，但是在另外一些方面它的功能却很强大，比如跟密码学相关的功能。如checkmultisig，检查多重签名用一条语句就能够完成，这个比很多通用的编程语言要方便的多。所以比特币的脚本语言虽然看上去很简单，但其实针对比特币的应用场景做了很好的优化。</p><h2 id="P10-10-BTC-分叉"><a href="#P10-10-BTC-分叉" class="headerlink" title="P10. 10-BTC-分叉"></a>P10. 10-BTC-分叉</h2><p>比特币分叉</p><p>区块链由一条链变为两条链就叫分叉。分叉可能是多种原因造成的，比如挖矿的时候，两个节点差不多同一个时候挖到了矿，就会出现一个临时性的分叉，我们把这个分叉叫作state fork，是由于对比特币区块链当前的状态有意见分歧而导致的分叉。</p><p>前面还讲过分叉攻击(forking attack)，它也属于state fork，也是属于对比特币这个区块链当前的状态产生的意见分歧，只不过这个意见分歧是故意造成的，人为造成的，所以我们又叫它deliberate fork。</p><p>除了这种state fork 之外，还有一种产生分叉的情况是，比特币的协议发生了改变，要修改比特币系统需要软件升级。在一个去中心化的系统里，升级软件的时候没有办法保证所有的节点同时都升级软件。</p><p>假设大部分节点升级了软件，少数节点因为种种原因可能没有升级，有可能是还没来得及升级，也可能是不同意对这个协议的修改。即假如你想把协议改成某个样子社区中可能是有人不支持的，这个时候也会出现分叉，这种分叉叫protocol fork(协议分叉)。因为对比特币协议产生了分歧，用不同版本的协议造成的分叉，我们称作protocol fork。</p><p>根据对协议修改的内容的不同，我们又可以进一步分成硬分叉和软分叉。出现硬分叉的情况:如果对比特币协议增加一些新的特性，扩展一些新的功能，这些时候那些没有升级软件的这些旧的节点，它是不认可这些新特性的，认为这些特性是非法的，这就属于对比特币协议内容产生了意见分歧，所以会导致分叉。</p><p>硬分叉的一个例子就是比特币中的区块大小限制(block size limit)。比特币系统规定每个区块最多是1M字节，有些人认为1M的限制太小了，也增加了交易的延迟。可以计算一下:1M=1百万  一个交易大概认为是250个字节 1百万/250=4000  一个区块大概是4000个交易  平均10分钟出现一个区块 4000/(60×10)=7  大概每秒钟产生7笔交易即7tx/sec 这个传输速度是非常低的。</p><p>有人发布一个软件更新，把block size limit从1M增加到4M。假设大多数节点更新这个软件，把block size limit更新到4M，少数节点没有更新。这里的大多数节点和少数节点不是按照账户数目来算的，而是按照算力，即系统中拥有大多数哈希算力的节点都更新了软件。新节点认为区块大小限制是4M，旧节点认为是1M。</p><p>如图(第11分第40秒)这时运行系统，会有什么结果?假如一个新节点挖出一个区块，这个区块比较大，但旧节点不认可，它忽略大区块的存在会继续沿着它的前一个小区块接着挖。而旧节点如果挖出了区块新节点是认可的，因为4M的限制指不能超过4M，比4M小是可以的。</p><p>那为什么会产生分岔呢?大区块挖出之后，因为大多数区块是更新了的，是认可新的大区块的，所以会沿着它继续挖。只有少数旧节点会接着下面链往下挖，这时新节点认为上下两条链都是合法的，但上面那条是最长合法链，所以会沿着上面一条挖。而且算力足够大会使上面那条链越来越长。而旧节点认为上面的链无论多长都是非法的，它们只会沿着下面的链挖。当然上面的链也可能出现小区块，因为新节点也可能挖出大小不到1M的区块，虽然这种是新旧节点都认可的，但这是没有用的，因为这条链上它们认为有非法的区块。所以这种分叉是永久性的，只要旧节点不更新软件，分叉就不会消失，所以才叫它硬结点。</p><p>比特币社区当中有些人是比较保守的，提高block size limit有些人就是不同意。而且区块的大小也不是越大越好，比特币底层系统是个P2P overlay network，它的传播主要采用flooding的方式，所以对带宽的消耗是很大的，带宽是瓶颈。</p><p>那么旧节点挖出的小的区块还有没有出块奖励呢？出现hard fork后出现了两条平行运行的链，平行运行链彼此之间有各自的加密货币。下面链的出块奖励在下面链里是认的。而分叉之前的币按道理应该是上下两条链都认可，所以会拆成两部分。</p><p>曾经出现过这样的问题:分叉前有A→B的交易，分叉后在上面链出现了B→C，下面链也出现了B→C，因为账户，私钥都是一样的。既然如此，就会有人利用这个特性，想收到上下两条链的转账。但如果没有人转账给他怎么办？</p><p>可以这样做:比如说B去购物，花一笔钱，给了C。后来B要退货，要取消这笔交易，C又把钱交给B。然后B又在下面一条链进行回放，就赚了一笔钱。那么在开始B转给C的交易在下面链会不会回放呢？所以这样做也是有风险的。为了解决这个问题，就让这两条链各带一个chain ID，所以现在以太坊的分叉已经没有问题了，就是两条独立运行的链了。</p><p>soft fork:<br>软分叉出现的情况是什么?如果对比特币协议加一些限制，加入限制之后原来合法的交易或区块在新的协议当中有可能变的不是合法了，这就引起软分叉。</p><p>假设有人发布一个软件更新，把这个区块大小变小了。调整区块大小不止是改变一个参数那么简单。一个去中心化的系统，改变一个参数，就可能导致分叉，而且取决于这个参数是怎么改的。有可能是硬分叉，有可能是软分叉。这里把区块大小变小只是为了解释软分叉这个概念，实际中是不会这么做的。</p><p>假设新节点把区块大小改为0.5M，旧节点依然以1M为准，这时候会出现什么情况？假如一个区块链开始分叉，新节点挖出小区块，这种区块旧节点也是认的。而旧节点挖出的大区块新节点是不认的。这样下去，旧节点看到上面链更长，而且是合法的之后，就会转去挖上面链。</p><p>所以为什么称这种分叉是软分叉?因为这种分叉是临时性的。所以旧节点如果不更新软件，它们挖的区块可能就白挖了。旧节点转向上面链挖的话，问题可能又会出现:它们可能又挖出了大区块。而新节点不认这个，新节点会继续沿着大区块前面一个小区块挖，如图(第29分第25秒)所示。</p><p>实际中可能出现软分叉的情况:给某些目前协议中没有规定的域增加一些新的含义，赋予它们一些新的规则，典型的例子就是coinbase域。前面讲过每一个发布的区块里可以有一个铸币交易(coinbase transaction)，coinbase transaction里有一个域叫coinbase域，这个域用来干什么是没人规定也没人检查的。</p><p>前面讲过coinbase域的一个用途:可以把它作为extra nonce。挖矿的时候要不断调整block header里的nonce，但block header里的nonce只有四个字节，最多只有2的32次方个可能性，所以实际中可以把coinbase前八个字节用来做extra nonce。两个合在一起就成了2的96次方，对于目前的挖矿难度，这个域已经是足够了。但coinbase域不止是八个字节，后面还有很多，剩下的字节有人就提议做UTXO集合的根哈希值。</p><p>目前这个集合只是每个全节点自己在内存中维护的，主要是为了快速查找、判断该交易是不是属于double spending，但这个集合的内容并没有写到区块链里，这跟前面讲到的merkle proof是不太一样的。</p><p>merkle proof能证明什么？证明某个交易是不是在给定的区块里。比如一个轻节点，没有维护整个区块的内容，只知道block header。轻节点问一个全节点:该交易是不是在这个区块里?全节点返回一个merkle proof作为证明，轻节点就可以验证是否属实。但如果是另外一种情况，想要证明某个账户上有多少钱，这个目前在比特币系统中是证不出来的。如果是全节点还可以算一下，方法如下:想要知道A账户有多少钱，就看一下A在UTXO里对应的输出总共收到多少个币，就是该账户上有多少钱。</p><p>对于全节点是可以算出来的，但如果是区块链钱包、有的手机上的APP，它不可能在手机上维护一个完整的区块链，它实际上是个轻节点，它想要知道账户的余额需要询问全节点。全节点返回一个结果，怎么知道这个结果是否属实呢？现在是证不出来的。如果你自己不维护一个UTXO集合，就没法用merkle proof 证出来。</p><p>有人提议把UTXO集合当中的内容也组织成一颗merkle tree，这个merkle tree有一个根哈希值，根哈希值写在coinbase域里面。因为block header没法再改了，改block header动静就太大了，coinbase域正好是没人用的，所以就写入UTXO的根哈希值。coinbase域当中的内容最终往上传递的时候会传递到block header里的根哈希值里。所以改coinbase域的内容，根哈希值会跟着改。</p><p>因此这个提案就是说把UTXO集合的内容组织成merkle tree，算出一个根哈希值来，写入coinbase域里某个位置。coinbase域的内容本身也会算哈希，算到block header里的根哈希值，这样就可以用merkle proof证出来了。</p><p>假设有人发布一个软件更新，规定coinbase域要按照这个要求来填写，大多数节点都升级了软件，少数节点没有更新，这属于软分叉，因为新节点发布的区块旧节点认为是合法的，因为旧节点不管新节点写什么内容。但旧节点发布的区块新节点可能是不认的，因为如果coinbase域不按要求写它是不认的，所以属于软分叉。</p><p>比特币历史上比较著名的软分叉的例子是pay to script hash。P2SH这个功能在最初的比特币版本里是没有的，它是后来通过软分叉的功能给加进去的。这是什么意思呢?你支付的时候不是付给一个public key的哈希，而是付给一个赎回脚本的哈希。花钱的时候要把这个交易的输入脚本跟前面币的来源的交易的输出脚本拼接在一起执行。执行的时候验证分为两步，第一步是要验证输入脚本中给出的redeem script跟前面那个输出脚本给出的script的哈希值是对的上的，证明输入脚本里提供的script是正确的。第二步再执行redeem script，来验证输入脚本里给出的签名是合法的。</p><p>对于旧节点来说，它不知道P2SH的特性，只会做第一阶段的验证，即验证redeem script是否正确。新节点才会做第二阶段的验证，所以旧节点认为合法的交易新节点可能认为是非法的(如果第二阶段的验证通不过的话)。而新节点认为合法的交易旧节点肯定认为是合法的，因为旧节点只验证第一阶段。</p><p>总结:soft fork是什么?只要系统中拥有半数以上算力的节点更新了软件，那么系统就不会出现永久性的分叉，只可能有一些临时性的分叉。hard fork特点是什么？必须是所有的节点都要更新软件，系统才不会出现永久性的分叉，如果有小部分节点不愿意更新，那么系统就会分成两条链。</p><h2 id="P11-11-BTC-问答"><a href="#P11-11-BTC-问答" class="headerlink" title="P11. 11-BTC-问答"></a>P11. 11-BTC-问答</h2><h2 id="P12-12-BTC-匿名性"><a href="#P12-12-BTC-匿名性" class="headerlink" title="P12. 12-BTC-匿名性"></a>P12. 12-BTC-匿名性</h2><h2 id="P13-13-BTC-思考"><a href="#P13-13-BTC-思考" class="headerlink" title="P13. 13-BTC-思考"></a>P13. 13-BTC-思考</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-05-07</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05-07.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05-07.html</id>
    <published>2020-05-06T14:57:32.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="85433c65d058693c07a266763b837029ebc40040de64da03baeb918fc557dfa3">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a8521792c77f9e5daf58bf40859309482a95c772f70caf3a4d7098f22e8c4189ee4f861e2d2c5078cd4e37b9f8590da2fc0c3839315554091cdffeec1fa19d9869bbc950d3eb086250d304d7d4ef19f936012571b7ee42591d36d3a2b4046afef8c62ecae332afcc678602fdfa12447ce4115a5d33fb3e710b3d474271fedf70dba810734bbf76e2bbf8550ad5c91d6a33b353ccf9e3b456bee8e18073d2326c374b584f5b56a6a6cf4beda43511154846e8a280e559f58a4aa4cc83ac8205e87479061356733a6a571ac242738b96866d17263247252db87f83e4a76fc2ae66497fa73790965e193476d80a729b4c90aeefc6c50cfa631304eced4f5c3f76bb514c847aa3d780855dd75bd175662bb49f75bb270a6a833564820f32f40f5456962313cefd74d8ac667412eea97803723141fb59bab61c23ee0d08a1926ed18d0134bd466cbfb76944a1dfdec3959bd09866927a328d985827420b5e6e553275bce73f4d3e53ba5e5972c28e967b3d51c56e381bdfc710dca4465f6b8ad4230392714b726a2f7bc3b94e277e47ee8d107cad26e64d3c829ab382bcd7a518fc8019545384275fc6c174c45968de21eae0e42bf0e48b625ee6d456ce8560e634b5ab1987260f8bcc28ccbeb6f0d7c895e828f9eb4ea7463f3441cdb45f30c16edeb65cfae7d695b90b56e9bf4bedda0b3cb7ee2716fc65d3d2f88bf59f37c48d9e716788f5beab098a7c4f359f6663f041f45827c72789de987e1eea168d70847df3f483bb4e4cfeeb36a4119dc0452b4094ac28c5d21c2b5c2b7cc4acd7b448774132c3170e7835f51b123e40052090423ddd22a5aaf60828db0fe2d421b4ee524cdcd47a565910dc96d8642a80f95d657973aa65f05b89f8937d0fd44e02b9efabee4cd836099b9ed88a3bcd45fa4a2bc0658b2fe43bf973ef26c8ac617617473d6236ef09f9b9650f3838cd99cf24488340bdb0e807d9054ed669047bd9600609c63ffc5744fdacb05749344e6ae6dc00685fe4cf39e32966779440a3dbdeb95fae2a1108586fdcdc1e329e8f021e738149ee9eab76a8c68c0c54b6d4ef36340aba6462fe81c70f3838e7a9cad5a52b664941846b1cd0cf7dfbb0a395213facac1eee8a22530587f56299167041a22f88b6baf123c528bd9f09593c5717fcc806ea40a72cd1a3e8501fe6a51f1abe03666fff1d2fd895f7d4857642ac6da54f2f547d83dcea294af26722342d6514aade8fc3585f659be2f2c5ffff1c0323c323e9a9647f73cf50e41ece78c854e820ce5c576b5c34ca178d08b46b73fdcaff473ca515684864b9d3f6c3a052424512068a9c355d641781a667e98cf67bbdede45e8ce20251c3f4ccad5b00d1d943a4b85a7f1c69ae3eca43e022a7fe3b41ed5fff1b8da37488c3b86e8aa63326a03fc392fc57f8dfe6a8ae9e502aa3cd61bb7568eb026740e6ed54509c069db8bc65a4edafd</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-05-06</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05-06.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05-06.html</id>
    <published>2020-05-05T13:45:10.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c3229e77de706670f365777714b4f357d61ff5aaccb1e3e8e19a9265bc0f34cf">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a8521792c77f9e5daf58bf40859309482a95c772f70caf3a4d7098f22e8c4189ee4f861e2d2c5078cd4e37b9f8590da2fc0c3839315554091cdffeec1fa19d9869bbc950d3eb086250d304d7d4ef19f936012571b7ee42591d36d3a2b4046afef8c62ecae332afcc678602fdfa12447ce4115a5d33fb3e710b3d474271fedf70dba810734bbf76e2bbf8550ad5c91d6a33b353ccf9e3b456bee8e18073d2326c374b584f5b56a6a6cf4beda43511154846e8a28949cced5fed64e28cd2f28d1e88fd65068c91af957a2b6c3ae735740ab5286332b2e882bcf5130a4af525fe019ba0760067ff59f773d603c0e258a74a33591f0c8920165bad0cb1e12bad3fcefaa138e4285590933dcf6e0b8d97de8f0b9e37ed165bb074fa77fccf9a51135b383a1e066a0fc45999134fecd158614d3256dac155db92686a73981a7bfa45494643702cf1af27dc44a856342fb8e492ba3ce9a99b5b3e2062e02ac0b4bf28df91b9e5f4e812e43d7d590e352377f49215ba7aee626be7c9d8dd7e3ffd92549a26319cca0c09378fc74ab5003b7e5225a392ddfc3541a02b5d5e59801f133ec3c68db2378356a6f16a043d84367f959c9a696ac39b0aedb75e0977155a7fde38c3954b2565e983b01494e204230aec3096209ce72d2f59ef26f3d24bfccb59d67502de3f60116f56d0cbec1ac92455dd535cfd64e3d16851f8aadd7b5b0f903a70082a5ca9bb7f5210becbf0a961281106e7dcf6f03d93188ca693e68c6830c452f0ea76244844a37e686feb999ac25d795b0d2af9daa1806916bd2b902e15bb31265a566dfa12a95a6c2333a05525ebe6e633ed16f8e0e704df0d3d45c6d79ab4c34a74c5e2c141a650c7703fc1924f7dbf13dec738fc0b8928f5a6e409c0997627b196d9f56943dd9e915d46223f11424326b6e726a8b16a77a396b2b9adf706f22fbad2dbe648031e0eefa113d277395b6a60cddbc91e3521dbb36397e793ff824038dbbf7dad662c460d439bfcad8b2b01466d28c3bff78023e919854be875f65644524985a8b5c61facb605c30b8e22784b0ae5c83299b655f854cd08d7b6f1f6e2be151bbd9d4428164fdd6c282aebb1d78ce6e9a8576d3ec431bfacd2bbab273a29fde3519f29d95dcb51e7b1ec21ef0bffcd1b15ce4ec168c86984c94f1a87b809c1d832203c6326966de8721b8627d7e19fa54efcdd7adab71d0fbf6b69c3e3e2b7dcce0745b7161b234b627a00100e711fcc8de11555712ff5965f428c3d1e0b3ce8c88e9e6bb67394d082488547fd85915e038fd2007908691c70fead72505364923e6c8099ee542f16a01b9cf51418a724c2ffd3da4ff888f47526f0258faea354accdfd7b0d7d17f236025405bfcd689190df6fc563b1968e6c0261da5ada0ba19f810dfbf4910346f8dfde99d229792d60cbe25b80a38e78fc332f59f9796bd71ee97c7dcc6e1f8959b774f72ff0a600a7b41a26ff2b11d1aabf288896b1ee7cfd820fa20bec3a39af654b34aea89e2071a65c72ad6382220f0adb72c6763e0e82b5f30ff1e5ec8ee4f53a892cbcca460cf816419276364028fd3f94f329020c6019e258db68c17babc678777076ace08662080025a24b48d4939409b81ac293847f8f16968031d34bd75083d647ce5381e8313f2ea474d5d84a1ccee9bc8a64abd0148966fc25233322f9149</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>to-read</title>
    <link href="https://zronghui.github.io/todo/to-read.html"/>
    <id>https://zronghui.github.io/todo/to-read.html</id>
    <published>2020-05-05T13:41:11.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="05-04"><a href="#05-04" class="headerlink" title="05-04"></a>05-04</h2><p><a href="https://mp.weixin.qq.com/s/Cimeyo4cVQsF-MfHBsNgGg?1=a">https://mp.weixin.qq.com/s/Cimeyo4cVQsF-MfHBsNgGg?1=a</a><br><a href="https://mp.weixin.qq.com/s/nFXtvH-i6SwSbyWttDaAeg">读懂MySQL Explain结果，上亿数据的查询耗时从几分钟降到63毫秒</a><br><a href="https://juejin.im/post/5e5622dae51d4526f55f04e6">记一次 SQL 优化过程，从 7.2s 到 10ms - 掘金</a><br><a href="https://juejin.im/post/5e4f7ccdf265da574a1ead44">考前复习必备MySQL数据库（关系型数据库管理系统） - 掘金</a><br><a href="https://mp.weixin.qq.com/s/CTDEFxTKdk0qxK9VNSEIqw">数据库密码配置项都不加密？心也太大了！</a><br><a href="https://linux.cn/article-12053-1.html?utm_source=rss&utm_medium=rss">技术|必知必会的 Vim 编辑器基础命令</a><br><a href="https://linux.cn/article-12064-1.html?utm_source=rss&utm_medium=rss">技术|使用 Python 在 GitHub 上运行你的博客</a><br><a href="https://linux.cn/article-12011-1.html?utm_source=rss&utm_medium=rss">技术|10 篇对初学者和专家都有用的 Linux 命令教程</a><br><a href="http://www.ruanyifeng.com/blog/2020/02/software-outsourcing.html">我的外包经验：印度、中国和菲律宾（译文） - 阮一峰的网络日志</a><br><a href="https://linux.cn/article-12007-1.html?utm_source=rss&utm_medium=rss">容器与云|适用于初学者的基本 kubectl 和 Helm 命令</a><br><a href="https://juejin.im/post/5eaa61735188256d976df55d">又一款Docker/K8s管理平台的瑞士军刀 - 掘金</a><br><a href="https://linux.cn/article-12048-1.html?utm_source=rss&utm_medium=rss">分享|4 个 Linux 命令行下的 Markdown 工具</a><br><a href="https://juejin.im/post/5e58905f6fb9a07caa270bb0">写给大忙人看的操作系统 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/xYeF8bE9JE6IbL7HoDyURg">从后端开发转职前端开发，我学到了什么？</a><br><a href="https://mp.weixin.qq.com/s/qTWVAUlm7NGe2UhPUg-S2g">一日一学–如何对数值型特征进行分桶</a><br><a href="https://mr-houzi.com/2019/03/18/use-phone-capture-package/">https://mr-houzi.com/2019/03/18/use-phone-capture-package/</a><br><a href="https://mp.weixin.qq.com/s/lvbZamr4_t2GKDiuEWi_IQ">redis 分布式锁的 5个坑，真是又大又深</a><br><a href="https://juejin.im/post/5eabffc7f265da7bed6b235c">[译]编写更快、更好的JavaScript的13个技巧 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/WEizNquzbZC8_yBWBHYL-A">Redis基础知识总结（面试必备）</a><br><a href="https://mp.weixin.qq.com/s/VAIVp2LrxPNil77-YUvjcg">MySQL 数据库的提速器-写缓存（Change Buffer）</a><br><del><a href="https://juejin.im/post/5ea7f9ef5188256d9c25988e">K8s 资源全汇总 | K8s 大咖带你 31 堂课从零入门 K8s - 掘金</a></del><br><a href="https://juejin.im/post/5e555bf56fb9a07ce01a2941">K8S ? K3S ! - 掘金</a><br><a href="https://mp.weixin.qq.com/s/v2uZnkWhGKXvTJu87iUWLg">Java8的Stream流真香，没体验过的永远不知道</a><br><a href="https://mp.weixin.qq.com/s/mlWuigUL2dQYwIHisec_7w">Git 分支设计规范</a><br><a href="https://github.com/Germey?tab=stars">Germey (崔庆才丨静觅) / Starred</a><br><a href="https://cloud.tencent.com/developer/article/1529651">Elasticsearch数据迁移与集群容灾 - 云+社区 - 腾讯云</a><br><a href="https://yq.aliyun.com/articles/599185">Elasticsearch 跨集群同步-云栖社区-阿里云</a><br><a href="https://segmentfault.com/a/1190000020395065">(16) ElasticSearch分页与深度分页问题解决 - 大数据学习笔记 - SegmentFault 思否</a><br><a href="https://mp.weixin.qq.com/s/ASjH1JmybIVXEAKfM4ie2A">Docker搭建与配置检查</a><br><a href="https://juejin.im/post/5eac74456fb9a0437e0e898a">Docker实战之Gitlab搭建 - 掘金</a><br><a href="https://juejin.im/post/5ea25cc66fb9a03c9037aad7">Docker 还需要学习吗？ - 掘金</a><br><a href="https://www.startutorial.com/articles/view/debug-mysql-slow-query">Debug MySQL slow query</a><br><a href="https://mp.weixin.qq.com/s/f9N13fnyTtnu2D5sKZiu9w">3w字深度好文|Redis面试全攻略，读完这个就可以和面试官大战几个回合了</a><br><a href="https://juejin.im/post/5e529dd9f265da570b3f2a35">7个有用的JavaScript技巧 - 掘金</a><br><a href="https://mp.weixin.qq.com/s/rDypsB9yAua9uX2aC9_y1A">2020 年为什么要选择 Go 并放弃 Python</a><br><a href="https://juejin.im/post/5e57d0dfe51d4526ce6147f2">10分钟教你手写8个常用的自定义hooks - 掘金</a><br><a href="https://github.com/0voice/from_coder_to_expert">0voice/from_coder_to_expert: 2019年最新总结，从程序员到CTO，从专业走向卓越，分享大牛企业内部pdf与PPT</a></p><h2 id="05-05"><a href="#05-05" class="headerlink" title="05-05"></a>05-05</h2><p><a href="https://www.youtube.com/watch?v=Sg5VTTBIhqo">30 Days of Python - Day 13 - Using a REST API Service - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=5rWGWetiBHo">30 Days of Python - Day 14 - Web App with Flask, FastAPI, ngrok, and Invictify - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=m6chqKlhpPo">30 Days of Python - Day 15 - Automated Video Processing with Moviepy - Python TUTORIAL - YouTube</a><br><a href="https://www.youtube.com/watch?v=7S73WERRqO4">Docker Tutorial and Introduction. Simple and Easy. - YouTube</a><br><a href="https://www.youtube.com/watch?v=1pZbuvbvYY8">Django on Docker Tutorial - Deploy Django on Heroku with OpenCV - YouTube</a></p><p><a href="https://juejin.im/post/5d9c7b285188253f5447bcfa">Django-Docker容器化部署：Django-Docker本地部署 - 掘金</a><br><a href="http://www.dockone.io/article/3656">使用 Docker 容器化 Django Web 应用 - DockOne.io</a><br><a href="https://github.com/erroneousboat/docker-django">erroneousboat/docker-django: A project to get you started with Docker and Django.</a><br><a href="https://github.com/testdrivenio/django-on-docker">testdrivenio/django-on-docker</a><br><a href="https://breakwire.me/deploy-django-with-docker.html">使用 Docker 部署 Python/Django 项目 (单机/swarm集群)</a></p><p><a href="https://wiki.jikexueyuan.com/project/docker-technology-and-combat/django.html">实战 Django - Docker —— 从入门到实践 - 极客学院Wiki</a><br><a href="https://github.com/twtrubiks/docker-tutorial">twtrubiks/docker-tutorial: Docker 基本教學 - 從無到有 Docker-Beginners-Guide 教你用 Docker 建立 Django + PostgreSQL 📝</a><br><a href="https://github.com/twtrubiks/docker-django-nginx-uwsgi-postgres-tutorial">twtrubiks/docker-django-nginx-uwsgi-postgres-tutorial: Docker + Django + Nginx + uWSGI + Postgres 基本教學 - 從無到有 ( Docker + Django + Nginx + uWSGI + Postgres Tutorial )</a><br><a href="https://linux.cn/article-10006-1.html">容器与云|如何 Docker 化 Python Django 应用程序</a><br><a href="https://zhuanlan.zhihu.com/p/44423066">如何 Docker 化 Python Django 应用程序 - 知乎</a><br><a href="https://larrylu.blog/step-by-step-dockerize-your-app-ecd8940696f4">Docker 實戰系列（一）：一步一步帶你 dockerize 你的應用 - Larry・Blog</a><br><a href="https://medium.com/@s.lyapustin/django-polls-app-with-elasticsearch-ffc02b9e79d9">Django, Docker and Elasticsearch - Sergey Lyapustin - Medium</a><br><a href="https://kknews.cc/code/ox4l5n6.html">使用Docker和Elasticsearch搭建全文本搜索引擎应用(上) - 每日头条</a><br><a href="https://www.itread01.com/content/1545386616.html">Django的haystack對接elasticsearch伺服器完成全文檢索詳解 - IT閱讀</a><br><a href="https://www.kutu66.com/GitHub/article_127110">es-django-example,使用Elasticsearch的示例 Django 项目,下载es-django-example的源码_GitHub_酷徒</a></p><h2 id="05-09"><a href="#05-09" class="headerlink" title="05-09"></a>05-09</h2><p><a href="https://www.cnblogs.com/QuestionsZhang/p/11606815.html">Mac息屏后如何保持网络连接，方便远程访问 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/11708897.html">Mac下使用Charles抓包https接口 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/11110537.html">MacOs上的Intellij idea高频快捷键总结（2018.1版本） - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/10693838.html">彻底解决MacOS上应用程序快捷键冲突的问题，自定义快捷键设置 - Questions张 - 博客园</a><br><a href="https://www.cnblogs.com/QuestionsZhang/p/10596146.html">ZOC7在Mac下发送命令到多个窗口设置 - Questions张 - 博客园</a></p><p><a href="https://snowdreams1006.tech/other/reminder.html">倒计时提醒 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.github.io/learn-java/">java8新特性 · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/zero2devops/webhook.html">webhook · 雪之梦技术驿站</a><br><a href="https://snowdreams1006.tech/zero2devops/">从零开始搭建服务器 · 雪之梦技术驿站</a></p><p><a href="https://github.com/docker/kitematic">docker/kitematic: Visual Docker Container Management on Mac &amp; Windows</a><br><a href="https://github.com/moby/moby">moby/moby: Moby Project - a collaborative project for the container ecosystem to assemble container-based systems</a><br><a href="https://github.com/netdata/netdata">netdata/netdata: Real-time performance monitoring, done right! https://www.netdata.cloud</a><br><a href="https://github.com/containous/traefik">containous/traefik: The Cloud Native Edge Router</a><br><a href="https://github.com/Kong/kong">Kong/kong: 🦍 The Cloud-Native API Gateway</a><br><a href="https://github.com/drone/drone">drone/drone: Drone is a Container-Native, Continuous Delivery Platform</a><br><a href="https://github.com/tootsuite/mastodon">tootsuite/mastodon: Your self-hosted, globally interconnected microblogging community</a><br><a href="https://github.com/wagoodman/dive">wagoodman/dive: A tool for exploring each layer in a docker image</a><br><a href="https://github.com/docker/compose">docker/compose: Define and run multi-container applications with Docker</a><br><a href="https://github.com/wsargent/docker-cheat-sheet">wsargent/docker-cheat-sheet: Docker Cheat Sheet</a><br><a href="https://github.com/veggiemonk/awesome-docker">veggiemonk/awesome-docker: A curated list of Docker resources and projects</a><br><a href="https://github.com/yeasy/docker_practice">yeasy/docker_practice: Learn and understand Docker technologies, with real DevOps practice!</a></p><p><a href="https://blog.cugxuan.cn/2019/12/03/Software/use-charles-to-sniffer-packet/">如何使用 Charles 抓包 | Xuan’s blog</a><br><a href="https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/">使用 webhook 自动更新博客 | Xuan’s blog</a></p><h2 id="05-10"><a href="#05-10" class="headerlink" title="05-10"></a>05-10</h2><p><a href="https://www.52fzg.com/pcrj/7354.html">pandownload还能用的旧版本 百度网盘资源不限速下载神器 - 无二辅助网</a><br><a href="https://fulibus.net/tianxiabachang.html">《鬼吹灯》作者天下霸唱为你讲述盗墓故事-福利吧</a><br><a href="https://nav.hzwdd.cn/?hao.su">西瓜导航-收藏你喜欢的网站！</a></p><p><a href="https://www.bilibili.com/video/av882799501">pandownload不能用了？Docker容器推荐第一期:Linux版本百度云_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br><a href="https://www.bilibili.com/video/av285538978">搭建内网DNS解析过滤广告。Docker容器推荐第四期:ADGUARDHOME_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.daniao.org/4962.html">宝塔面板Docker安装UnblockNeteaseMusic – 解锁网易云音乐变灰歌曲 - 大鸟博客</a><br><a href="https://www.daniao.org/btpanel/">宝塔linux面板使用教程，以及一些宝塔技术分享！</a><br><a href="https://www.macxin.com/archives/16150.html">Android手机/Docker使用UnblockNeteaseMusic播放网易云音乐客户端无版权歌曲 Mac/Win/Linux/iOS/Android | MAC萌新网</a></p><p><a href="https://www.hangge.com/blog/cache/category_81_1.html">航歌-Docker / K8s-第1页</a><br><a href="https://www.hangge.com/blog/cache/detail_2414.html">K8s - Kubernetes集群的安装部署教程（CentOS系统）</a></p><p><a href="https://www.hangge.com/blog/cache/category_80_1.html">航歌-SpringBoot / Cloud-第1页</a></p><h2 id="05-11"><a href="#05-11" class="headerlink" title="05-11"></a>05-11</h2><p><a href="https://p3terx.com/archives/docker-watchtower.html">Watchtower - 自动更新 Docker 镜像与容器 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/ssh-to-the-github-actions-virtual-server-environment.html">SSH 连接到 GitHub Actions 虚拟服务器环境 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-actions-email-notification-of-successful-workflow-running.html">GitHub Actions 开启工作流程运行成功邮件通知 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-actions-started-tutorial.html">GitHub Actions 入门教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/termux-tutorial-2.html">Termux 使用教程 #2 - 打造手机上的最强终端 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/termux-tutorial-1.html">Termux 使用教程 #1 - Android 手机安装 Linux - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/ssh-key-installer.html">SSH 密钥一键配置脚本 使用教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/git-multi-remote-repository-management.html">Git 多远程仓库管理：GitHub 与 Gitee 双向同步 - P3TERX ZONE</a></p><p><a href="https://p3terx.com/archives/the-strongest-terminal-solution-under-windows-10.html">打造 Windows 10 下最强终端方案：WSL + Terminus + Oh My Zsh + The Fuck - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/cheap-and-costeffective-vps-recommended.html">便宜高性价比 VPS 推荐 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/boot-and-hide-the-cmd-window-program-to-run-in-the-background-winsw-tutorial.html">开机启动并隐藏 cmd 窗口程序在后台运行 - winsw 使用教程 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/baidunetdisk-transfer-to-onedrive-and-google-drive.html">不限速！百度网盘转存到 OneDrive 、Google Drive 等其他网盘 - P3TERX ZONE</a></p><p><a href="https://p3terx.com/archives/update-the-project-on-fork-on-github.html">更新 GitHub 上 fork 的项目 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/github-warehouse-cleaning-delete-all-commit-records.html">删除 GitHub 所有 Commit 记录 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/undo-operation-in-git.html">Git 中的撤销操作 - P3TERX ZONE</a><br><a href="https://p3terx.com/archives/git-common-command-quick-lookup-table.html">Git 常用命令速查表 - P3TERX ZONE</a></p><p><a href="https://github.com/tuteng/Best-websites-a-programmer-should-visit-zh#blogs-of-developers">tuteng/Best-websites-a-programmer-should-visit-zh: 程序员应该访问的最佳网站中文版</a></p><p><a href="https://hufangyun.com/2017/short-url/?hao.su">短网址(short URL)系统的原理及其实现</a><br><a href="https://hufangyun.com/2018/ui-design-get/?hao.su">小猿大圣的设计资源收藏夹</a></p><p><a href="https://testdriven.io/blog/">Web Development Tutorials | TestDriven.io</a></p><p><a href="https://redislabs.com/resources/how-to-redis-enterprise/#using-redis-with-python">How To: Redis Enterprise Products and Code Samples | Redis Labs</a></p><p><a href="https://rss.pipedream.com/">RSS for Hackers</a><br><a href="https://pipedream.com/@zronghui/copy-of-generate-an-rss-feed-from-http-post-requests-retrieve-via-get-request-p_QPCeD2/edit">Copy of Generate an RSS feed from HTTP POST requests, retrieve via GET request | Edit - Pipedream</a><br><a href="https://docs.pipedream.com/workflows/steps/triggers/#app-based-triggers">Triggers | Docs</a></p><p><a href="https://blog.quickbird.uk/domesticating-kubernetes-d49c178ebc41">Domesticating Kubernetes | Practical kubernetes as a home server | Quickbird</a><br><a href="https://hampton.pw/posts/shrinking-this-sites-docker-image/">Shrinking this sites docker image</a><br><a href="https://24ways.org/2018/fast-autocomplete-search-for-your-website/">Fast Autocomplete Search for Your Website ◆ 24 ways</a><br><a href="https://insomnia.rest/">Insomnia | API Design Platform and REST Client</a></p><p><a href="https://github.com/leeoniya/uPlot">leeoniya/uPlot: 📈 A small, fast chart for time series, lines, areas, ohlc &amp; bars</a></p><p><a href="https://tara.ai/">Tara</a></p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/84141/1588895319908-26b6100c-df5e-45c1-88b9-3304dee42ce8.jpeg" alt="img" style="zoom: 50%;" /><p>项目管理软件 Jira 的一个免费仿制品。</p><p>2、<a href="https://insomnia.rest/">Insomnia</a></p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/84141/1588895319893-edd924c5-a734-4f4f-9c65-0a8abbd08468.jpeg" alt="img" style="zoom:50%;" /><p>一个开源的桌面软件，用于简化 API 的设计和开发。</p><p><a href="https://www.nginx.com/blog/help-the-world-by-healing-your-nginx-configuration/">Help the World by Healing Your NGINX Configuration - NGINX</a><br><a href="https://blog.acrossapp.com/how-a-2-person-startup-already-uses-28-other-tools/">How a 2 person startup already uses 28 other tools</a></p><p><a href="https://rednafi.github.io/digressions/python/2020/04/21/python-concurrent-futures.html">Effortless Concurrency with Python’s concurrent.futures | Red’s Digressions</a></p><p><a href="https://realpython.com/courses/python-mock-object-library/">Improve Your Tests With the Python Mock Object Library – Real Python</a></p><p><a href="https://pbpython.com/notebook-alternative.html">Exploring an Alternative to Jupyter Notebooks for Python Development - Practical Business Python</a><br><a href="https://pbpython.com/interactive-dashboards.html">Creating Interactive Dashboards from Jupyter Notebooks - Practical Business Python</a><br><a href="https://pbpython.com/wsl-python.html">Using WSL to Build a Python Development Environment on Windows - Practical Business Python</a></p><p><a href="https://www.youtube.com/channel/UCGFnqWaBEHVzPD40PuH7vbg/videos">GoDjango - YouTube</a></p><h2 id="05-16"><a href="#05-16" class="headerlink" title="05-16"></a>05-16</h2><p><a href="https://www.chenshaowen.com/blog/tag/Kubernetes/">Kubernetes - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/the-use-of-homebrew.html">Homebrew 使用 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/tag/%E5%B7%A5%E5%85%B7/page/3/">工具 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/notes-on-making-strategy-of-the-presentation.html">PPT制作攻略之呈现篇课程笔记 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/introduction-of-various-environmental-isolating-tools-under-python.html">Python 下各种环境隔离工具简介 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/vim-necessary-plugin.html">Vim 必备插件 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/elk-log-search-practice.html">ELK 日志搜索实践 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/toolbox.html">我的工具箱 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html">交互式笔记本-Jupyter - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/common-git-commands.html">常用 Git 命令 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/build-django-development-environment-using-vagrant.html">Vagrant 搭建 Django 开发环境 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/django-debug-toolbar.html">Django 调试工具 django-debug-toolbar - 陈少文的博客</a></p><p><a href="https://www.chenshaowen.com/blog/tag/%E5%B0%8F%E6%8A%80%E5%B7%A7/">小技巧 - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-1.html">开发 Tips（1） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-2.html">开发 Tips（2） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-3.html">开发 Tips（3） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-4.html">开发 Tips（4） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-5.html">开发 Tips（5） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-6.html">开发 Tips（6） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-7.html">开发 Tips（7） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-8.html">开发 Tips（8） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-9.html">开发 Tips（9） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-10.html">开发 Tips（10） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-11.html">开发 Tips（11） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-12.html">开发 Tips（12） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-13.html">开发 Tips（13） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-14.html">开发 Tips（14） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-15.html">开发 Tips（15） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-16.html">开发 Tips（16） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-17.html">开发 Tips（17） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-18.html">开发 Tips（18） - 陈少文的博客</a><br><a href="https://www.chenshaowen.com/blog/developing-tips-19.html">开发 Tips（19） - 陈少文的博客</a></p><p><a href="https://sourabhbajaj.com/mac-setup/iTerm/fzf.html">fzf · macOS Setup Guide</a></p><p><a href="https://www.youtube.com/watch?v=tG6O8YF91HE&list=PLEsfXFp6DpzSUvTvnKaN8xmu4bRZIaawC&index=11">YouTube</a><br><a href="https://www.youtube.com/playlist?list=PLEsfXFp6DpzTHpw-kUzOd9WWY0zVdzl6q">Docker Tutorials - YouTube</a><br><a href="https://www.youtube.com/watch?v=3cRT1RmCyKg">(1) Dockerize your Django App for Production (nginx + gunicorn) - Part 1 - YouTube</a><br><a href="https://nextfe.com/">New Frontend</a><br><a href="https://nextfe.com/command-line-tools-3/">优秀的命令行工具（三）</a><br><a href="https://nextfe.com/command-line-tools-1/">优秀的命令行工具（一）</a><br><a href="https://darrenburns.net/">A Blog by Darren Burns</a><br><a href="https://nextfe.com/command-line-tools-2/">优秀的命令行工具（二）</a></p><h2 id="05-17"><a href="#05-17" class="headerlink" title="05-17"></a>05-17</h2><p>通知滤盒</p><p><a href="https://sspai.com/post/59502">App+1 | 解决 Android 通知管理难题，用正则表达式过滤无关推送：通知滤盒 - 少数派</a><br><a href="https://sspai.com/post/60536">微信群聊不是法外之地：用通知滤盒降低敏感词「炸群」风险 - 少数派</a></p><p><a href="https://www.abcxlab.com/topic/it/202004060147144915.html">2020年程序猿必读10本好书推荐 - ABC实验室</a><br><a href="https://juejin.im/post/5ebe6cf0f265da7bac22587d#heading-0">刚才面试官问我你会Mysql吗，我一聊一个多小时！ - 掘金</a><br><a href="https://juejin.im/post/5ebe9bcee51d454d945368b2#heading-1">[译]让Web应用更安全的13个小技巧 - 掘金</a></p><p><a href="https://testdriven.io/blog/django-caching/?utm_campaign=Django%2BNewsletter&utm_medium=web&utm_source=Django_Newsletter_22">Caching in Django | TestDriven.io</a></p><p><a href="https://benzblog.site/2020-04-25-docker_basic_skills/">Docker 基本使用技巧 | 奔哲明的博客</a><br><a href="http://bbs.nas66.com/thread-8409-1-1.html">汇总一下我常用的Docker镜像以及说明 - 矿渣社区 - 其他系统 - 软件专区</a><br><a href="https://vpsman.net/page/554/">VPS菜鸟园</a><br><a href="https://www.ioiox.com/archives/94.html">本站提供免费 RSS 和 RSSHub 服务 - 思有云 - IOIOX</a><br><a href="https://www.ioiox.com/">思有云 - IOIOX - 个人博客 生活记录 原创文章 技术分享 资源分享 群晖技巧 群晖教程 免费FRP 免费内网穿透</a><br><a href="https://diygod.me/">Hi, DIYgod</a><br><a href="https://rss.ioiox.com/">Tiny Tiny RSS : Login</a></p><p><a href="https://g.ioiox.com/">GitHub 文件加速</a><br><a href="https://www.ioiox.com/archives/102.html">分享优质工具 - gh-proxy 代理下载或 git clone Github 仓库 - 思有云 - IOIOX</a><br><a href="https://www.ioiox.com/archives/95.html">iptables 常用命令,选项,参数及实例整理收集 - 思有云 - IOIOX</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>docker-todo</title>
    <link href="https://zronghui.github.io/todo/docker-todo.html"/>
    <id>https://zronghui.github.io/todo/docker-todo.html</id>
    <published>2020-05-05T13:27:03.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="√-解锁网易云灰色歌曲"><a href="#√-解锁网易云灰色歌曲" class="headerlink" title="√ 解锁网易云灰色歌曲"></a>√ 解锁网易云灰色歌曲</h2><p><a href="https://github.com/nondanee/UnblockNeteaseMusic">nondanee/UnblockNeteaseMusic: Revive unavailable songs for Netease Cloud Music</a></p><p><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/48">进阶配置 · Issue #48 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/22">食用指南 · Issue #22 · nondanee/UnblockNeteaseMusic</a><br><a href="https://github.com/nondanee/UnblockNeteaseMusic/issues/527">全端通用方案搭建教程 · Issue #527 · nondanee/UnblockNeteaseMusic</a></p><h2 id="√-gitlab"><a href="#√-gitlab" class="headerlink" title="√ gitlab"></a>√ gitlab</h2><p><a href="https://snowdreams1006.tech/devops/docker-gitlab.html">docker + gitlab · 雪之梦技术驿站</a><br><a href="https://www.jianshu.com/p/080a962c35b6">docker下gitlab安装配置使用(完整版) - 简书</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 387. First Unique Character in a String</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-3**/leetcode-387-First-Unique-Character-in-a-String%20(copy).html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-3**/leetcode-387-First-Unique-Character-in-a-String%20(copy).html</id>
    <published>2020-05-05T12:42:43.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/first-unique-character-in-a-string/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/first-unique-character-in-a-string/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string, find the first non-repeating character in it and return it’s<br>index. If it doesn’t exist, return -1.</p><p><strong>Examples:</strong></p><pre><code>s = &quot;leetcode&quot;return 0.s = &quot;loveleetcode&quot;,return 2.</code></pre><p><strong>Note:</strong> You may assume the string contain only lowercase letters.</p><p><strong>Tags:</strong> Hash Table, String</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">firstUniqChar</span><span class="params">(self, ss: str)</span> -&gt; <span class="keyword">int</span>:</span></span><br><span class="line"><span class="function">        # 添加未重复的 字母：index</span></span><br><span class="line"><span class="function">        m </span>= &#123;&#125;</span><br><span class="line">        # 重复的字母</span><br><span class="line">        s = set()</span><br><span class="line">        <span class="keyword">for</span> i, <span class="function">c in <span class="title">enumerate</span><span class="params">(ss)</span>:</span></span><br><span class="line"><span class="function">            <span class="keyword">if</span> c in s:</span></span><br><span class="line"><span class="function">                <span class="keyword">continue</span></span></span><br><span class="line"><span class="function">            <span class="keyword">if</span> c in m:</span></span><br><span class="line"><span class="function">                del m[c]</span></span><br><span class="line"><span class="function">                s.<span class="title">add</span><span class="params">(c)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">else</span>:</span></span><br><span class="line"><span class="function">                m[c] </span>= i</span><br><span class="line">        <span class="keyword">return</span> min(m.items(), key=lambda i:i[<span class="number">1</span>])[<span class="number">1</span>] <span class="keyword">if</span> m <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/first-unique-character-in-a-string/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/first-unique-character-in-a-string/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a string, find the first non-repeating character in it and return it’s&lt;br&gt;index. If it doesn’t exist, return -1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = &amp;quot;leetcode&amp;quot;
return 0.

s = &amp;quot;loveleetcode&amp;quot;,
return 2.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may assume the string contain only lowercase letters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Hash Table, String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-3**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-3/"/>
    
    
      <category term="Hash Table" scheme="https://zronghui.github.io/tags/Hash-Table/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 278. First Bad Version</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-278-First-Bad-Version%20(copy).html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-278-First-Bad-Version%20(copy).html</id>
    <published>2020-05-05T02:26:02.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/first-bad-version/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/first-bad-version/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>You are a product manager and currently leading a team to develop a new<br>product. Unfortunately, the latest version of your product fails the quality<br>check. Since each version is developed based on the previous version, all the<br>versions after a bad version are also bad.</p><p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the<br>first bad one, which causes all the following ones to be bad.</p><p>You are given an API <code>bool isBadVersion(version)</code> which will return whether<br><code>version</code> is bad. Implement a function to find the first bad version. You<br>should minimize the number of calls to the API.</p><p><strong>Example:</strong></p><pre><code>Given n = 5, and version = 4 is the first bad version.call isBadVersion(3) -&gt; falsecall isBadVersion(5) -&gt; truecall isBadVersion(4) -&gt; trueThen 4 is the first bad version. </code></pre><p><strong>Tags:</strong> Binary Search</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The isBadVersion API is already defined for you.</span></span><br><span class="line"><span class="comment"># @param version, an integer</span></span><br><span class="line"><span class="comment"># @return a bool</span></span><br><span class="line"><span class="comment"># def isBadVersion(version):</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstBadVersion</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        left, right = <span class="number">1</span>, n</span><br><span class="line">        <span class="keyword">while</span> left&lt;right:</span><br><span class="line">            mid = left+(right-left)//<span class="number">2</span></span><br><span class="line">            <span class="comment"># 最后 left right 都指向第一个 badVersion</span></span><br><span class="line">            <span class="keyword">if</span> isBadVersion(mid):</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/first-bad-version/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;You are a product manager and currently leading a team to develop a new&lt;br&gt;product. Unfortunately, the latest version of your product fails the quality&lt;br&gt;check. Since each version is developed based on the previous version, all the&lt;br&gt;versions after a bad version are also bad.&lt;/p&gt;
&lt;p&gt;Suppose you have &lt;code&gt;n&lt;/code&gt; versions &lt;code&gt;[1, 2, ..., n]&lt;/code&gt; and you want to find out the&lt;br&gt;first bad one, which causes all the following ones to be bad.&lt;/p&gt;
&lt;p&gt;You are given an API &lt;code&gt;bool isBadVersion(version)&lt;/code&gt; which will return whether&lt;br&gt;&lt;code&gt;version&lt;/code&gt; is bad. Implement a function to find the first bad version. You&lt;br&gt;should minimize the number of calls to the API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -&amp;gt; false
call isBadVersion(5) -&amp;gt; true
call isBadVersion(4) -&amp;gt; true

Then 4 is the first bad version. &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Binary Search&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Binary Search" scheme="https://zronghui.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>2020-05</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05.html</id>
    <published>2020-05-05T02:07:05.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="32b4cf97cb48ae9b4df118f86e1914ae9553625cdfbc788c5131aae9be88800a">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d9a45bacecaba7ac1e6748ab25d1f452f86815e2727791a004cb6798779ddc4e82c0f7671d0be79dfc4243e2beb5a8f7973cebc86185fb071f3a5f8391c53e13f0a3f83a674fc8f303e2072efaf1e0c6c0ef15d6e93e5f29b6198b1faba1305d007fe7e4fb1532d2a627d2a99ede5d432e64a2ee9129ce0f11fa4efc3f621ddae32f8f9027f62677015285d7ddb4f12ddcd112c3b9844057cad25ad0ebbe9eb77b1cba595d70e8d14cba2ac182cf8f5415775b424125110a446e7437ed5c780d9d3d39c5151a48b5beb2dbe3ed1df352d11690a387de6793de752c62ad42c8664e35cf5a4e9d8fa0e8972edf26c334cdc6cda0abc5cdbfc38c401e2b62e917d82f490edc0dc76109a375135f823f19c586c3e5fdebc6be08df0fcd3617c4d439c80bb12d122767a535b251c68568dad466d1a8634622215211faff3be0aff478a04c5d135abb462367506c8cdf30eb84e35f90d3e32a401ae9d047332c94d9e5a773780932e51a777a9d8508fd6129c823734cd17c48a7f33a7e90faae6a822b36a09e7f9b4fe1c07c82542c41fbc6178ce4d1ec5c39aee028695af9dc78d9583af14d14dc7432069c7c40eddd7813ee93dd9bf42c0a3b0a6c1f97dc4dd8c1b3bbc1fc469e2adc1897b518267a1e58709df69644c18c3fdae134e4e01d4eb3c7a87f103fe6f11b4ef9e3f5a290f519921ca05a36a5ab6d4c74448f77c59255d41b684dc5d562247a12c9047897541be7efe8054257c539fc0d9d2a04ad56dfda1fca284916762b72bfd43bbb2143f381c851e807bc02a3c3bacb0123a6b04ba2f2f5459a8c8d07824c3de6927b1c2e1a5277c57bf53ef14fea2ec05bbba843b6e47cc5832674bf643c02cfab2fdfdc0c0ef12ecf5e5f0b3529a0f0347e5cd3609c05b8ec7b39921d5223f81696f0532e54babba811d16d2d5658a4a150f0a0417648777b6d3098c7f877dc37a3e403cda16efc87aee78be1b3f3cd6f666642a7af4492a092eaabb1c4d70cf8621edc57740fc5160cda3295e7a9e6518f2610996c81e25c940361b7b53957132b2fd9846a6ed0cbe93faa88d884d81d6b966f547568e0bf5fed614aa3d339b25618e59527d5e1a922e4d03328638d1759b6104bc05c93fdd2e6b04710a3ffc79a288a540a3ebabed9e0eb6a5c6fa9d5d729a0b66dde848339bb6ee6ba790b9f26ec144d676a8c5a84e35cf59d43fb0a9fbc36134712bf87153cd568d0b88cb309894e633f5b0d3d604980e9f492106ea3774568aa969835ab1ad8dc0b5662b81e023ce42d512c1f8b72f0348fe084d21b349f4fb798f2972fd678dfae830dcf2104980881d82267a2f2c7fff3405bd96ecf9c61866ca9a118fc1f5d962016c0c3a99ba6891b3834872347cde25e1e4259e928a34bf63049158fbd769b8ff7ec735082b1ae4db103a7b563027ba2d544b249cc902e9d51d1fd799d5f1177e7e94ba2323daddf2780bb6885bfbd92d10ea4a1fd452ea014b35860324feea33e87f9d1eb72b69849584981d2baf63a821963e92f2406a5004d4749a6d291568b5e0615fe42316cee7c65e8f3a498ddbd99d8fb698f60aa98fb8dd42fe875e03ff58ab2320599524962c2687d31ee855a9c346c79c2b206f232302cdefa9120956934d1bc2a46e7f1451c441f4a2aad1a5b3cf1010f2132e9263a9e422cb8cb360c8c45655d2b4932c6460a324199dc087c724bc44eb0e37009a97069f8c3e81c846eccf8cb65bf5f5983d7bec6409590829e01b3bed39baafd6b6aa5850a7651f6c639477e31f6294919bb47905c066f25d922a32672564db1bfedda2371661d694ecc035c66aeea39af2906cb69f425da01db18dc278230a149edddfc4d6512ffa85ecdf87a19fcd4e871766086331681dd9d4828a1fccf6c839cc0fcbded3ff61fb52e7dd4fcf7a378bfbeac79ca7443b8686cdd6b44a7adfee38b47e811ac26d3827ff3e12aaa0478e7b2afc8d2f48cf697d9bc8378b52c3a72b3da47ca3e6c9fcc81d9560fc0ff5c2d3f9733c2574666c0c50efcc46206ea3cb5874a7ac8410107e5d0bb185efeb0af1bc8a7194431861273af72d94fd3abda796c337a39a03f18d1b585933cf200e6f69b65d5002fd85455198dee41d8b4f719a577fbca9c46ebd186cbffda23dfd366415d16aabe98c03b35f8764566ff7b07a9b7c4f1780e130e404225582bc5513fc12f4185df234a6b3050949bb49ae075d388511072fc9886586fecfb551f652feafc85451a87cc728322b0e43399ed9cc9fb7021d7ea6666788d129ef090e0916a5721fe06a8402566f</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-05-05</title>
    <link href="https://zronghui.github.io/private/2020/05/2020-05-05.html"/>
    <id>https://zronghui.github.io/private/2020/05/2020-05-05.html</id>
    <published>2020-05-05T02:06:00.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5001eb8a1995512a5f1ee85829eb1817b1637bb47c9255cab0aee5b56f3765ba">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a85217932c5af0ed34d2756766311258d19f0b0af3245a5f26b60bca23e36f84f048ddb59bdcc24daccff4d5853c21ae445eb3fd6e2ae4463ae56fa26ec4a5a822d06d7a597a2a1a659ded102fc1a53a5f25d89fe02f6e87c1f824084dc3c241b64ee13c62c879cc15a8627f934f422cd0b61965b82681e801533a1b5cb8599151819e81eb12c8cd4cf65a523fd091ce62dcbf49b84dc75c7a40066910deaf2748b838eb6dbef845bedf40b3de049706f0f7ede967f57e50907efee0b650861e28ed50cede324ebe88037c45402142058248f6ad9842dfe695fa34bec04d2539612dc48d17d5eae997b0e4b21aef75df9711a6e4002bfa74682c1edb7f9dd2668d14dafcc3b8195a3c34f5864fa57d750c457293c8fa084e3501c8f2a4077fde390b73f668da3c48f7888f220a942b975d43bcf4c61346dd7fbbd4b14e5a18148615703a6fed7d0c854bc85969ecb5ac9f9b63bf1a931483ce1a707eb049d991334ad9233f22f8ccc9748501b29b1358af172d391527b4c06f13b60bdee64af9f5b91407c5622ca27fc5ba4850a454019f99726422fcad94f751a51a6029b37b926f66bc960613afbf90d3ebf065000c226d8fbc286a977e81584d4695e2a8e080cc36993e110657aa26b2fe3a76d146511f96dbf9d0a0bdada5827f82c733799d19c981729828f25a4b564399262a3e66b70f551cbc7ad24859d587bbfeadfcac4621e7f9a3030fd91579eef2a04bbd0e1487eb19d5840f2d42376df67af56ad6f5ce2b4ead08cef7fe08d88e37cd70c323cfa0dc23fa4b66578f8a59e3d0dfd91af127992173db69f9541dbdad37730db9cb84355cf582888fb50ab08f9ca111b24ee7b7b96e30e26f95419b43b0eaf6e2107ca1a6d4c422b9d983149112fbbe4dc127f6996c9e8821e8002890c29b44f0d5d458fe0dd650c297361a1175cd83a57eff9265d9e4ca9f6ebeab43f7026daa5eca1716d50829ba65352654ead296a70fde9f4a4ef9564317c17462ccdd5d0c6674b535b683f6cc83d933b94d5245548228170e5f171c0435dea222ee9e4e7a08e6e1d72570f8abc5286bc6e7cb6d5dca4e2d11e59b1645ab2434c2fa2cd1ca7735e8de059bc8a601f419047991d4fb7e9af59fe48708a6ad86e927d72e0d710d954cc903461785ee1c9d1aef1c1845aaf453980bd1b0b4362650f8532bff87244e7a194815ad3fdcce616be6007b968a44c477a8ca793ff131c7388cdddf55856ba4bb0efc6358c33efbd6ade1487053461d13c278d8565d9b9c14bff8de18b3429122a2fd3d0bf967fb7dce51e847701a68446b4feb4919c4053adafe85d646cbcfb95190a7ca41168117c134a69c6a2d114f02e21d1b3091eee6e6318813c7685d6fb9cf869baa2b016951085e61042f54dc46ae2b4212d8e3ad152ff2e89d042e1fc8d3c19ed8f2fb3cec12cbcbc5a3ade1d4774c6fa8cf58000b1ad8522e35b7608dd799dcd4bc693c5284a3ecb3299e460004a32c177c44468fde34cb050f7967ff7bca23b280dfb90369b34547b0053eda3b96b786dcc7dec261066f5c3f27997b3523bafa49813091af82fd2ff4519c1ab24455a84b38fe9294c4e9129dcf25a1a1210eddbed5c6f4f683b305833be51bce60525347bd4b1894c02beb67d5f7567ab0de1425728709f88d5b8e3</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="5" scheme="https://zronghui.github.io/categories/private/2020/5/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-187</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-187.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-187.html</id>
    <published>2020-05-04T12:52:25.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/destination-city/">旅行终点站</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/check-if-all-1s-are-at-least-length-k-places-away/">是否所有 1 都至少相隔 k 个元素</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">绝对差不超过限制的最长连续子数组</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/">有序矩阵中的第 k 个最小数组和</a><strong>7</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destCity</span><span class="params">(self, paths: List[List[str]])</span> -&gt; str:</span></span><br><span class="line">        res = paths[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        m = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> s, e <span class="keyword">in</span> paths[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> s==res:</span><br><span class="line">                res = e</span><br><span class="line">                <span class="keyword">while</span> res <span class="keyword">in</span> m:</span><br><span class="line">                    res = m.get(res)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m[s] = e</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kLengthApart</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            last = nums.index(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(last+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i]==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i-last&lt;k+<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                last = i</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, mat: List[List[int]], k: int)</span> -&gt; int:</span></span><br><span class="line">        l = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(mat)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(mat)==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> mat[<span class="number">0</span>]</span><br><span class="line">            la = mat.pop()</span><br><span class="line">            lb = mat.pop()</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> la:</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> lb:</span><br><span class="line">                    res.append(a+b)</span><br><span class="line">            res.sort()</span><br><span class="line">            mat.append(res[:k])</span><br><span class="line">            <span class="keyword">return</span> helper(mat)</span><br><span class="line">        </span><br><span class="line">        mat = helper(mat)</span><br><span class="line">        mat.sort()</span><br><span class="line">        <span class="keyword">return</span> mat[k<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/destination-city/&quot;&gt;旅行终点站&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/check-if-all-1s-are-at-least-length-k-places-away/&quot;&gt;是否所有 1 都至少相隔 k 个元素&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/&quot;&gt;绝对差不超过限制的最长连续子数组&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/&quot;&gt;有序矩阵中的第 k 个最小数组和&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-05</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-05.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-05.html</id>
    <published>2020-05-01T00:08:33.000Z</published>
    <updated>2020-05-18T15:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fd64fa102996e516d642dcac3359244d11fd7ad2f04c0094e3523f32ca23a7a1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-04</title>
    <link href="https://zronghui.github.io/blockchain/blockchain-04.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain-04.html</id>
    <published>2020-04-30T06:37:19.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="P4-04-BTC-协议"><a href="#P4-04-BTC-协议" class="headerlink" title="P4. 04-BTC-协议"></a>P4. 04-BTC-协议</h2><p>数字货币和纸质货币区别是可以复制，叫作双花攻击  即double spending attack。</p><h3 id="去中心化货币要解决两个问题"><a href="#去中心化货币要解决两个问题" class="headerlink" title="去中心化货币要解决两个问题"></a><strong>去中心化货币要解决两个问题</strong></h3><p><strong>①数字货币的发行②怎么验证交易的有效性，防止double spending attack。</strong>   </p><p>答案:①比特币的发行是由挖矿决定的<br>②依靠区块链的数据结构<br>比特币的发行者A拥有铸币权(createcoin) 假如发行10个比特币  A(10)分别给B和C各五个  → B(5)C(5) 该交易需要有A的签名，证明经A同意。(designed by A)同时还要说明花掉的10个比特币从哪来的。<br>下图中， 第二个方框中的钱是从第一个框内铸币交易中来的。</p><img src="https://i.loli.net/2020/05/06/kINAS5gcP2BDXME.png" alt="kINAS5gcP2BDXME" style="zoom:50%;" /><h3 id="比特币系统中每个交易都包含输入和输出两部分"><a href="#比特币系统中每个交易都包含输入和输出两部分" class="headerlink" title="比特币系统中每个交易都包含输入和输出两部分"></a>比特币系统中每个交易都包含输入和输出两部分</h3><p><strong>输入部分要说明币的来源，输出部分要给出收款人公钥的哈希。</strong><br>有的交易部分比较复杂，如C的货币来源是第二第三个方框，要标识清楚。</p><p>图中构成了一个小型的区块链，<strong>这里有两种哈希指针</strong>，<strong>一种哈希指针是连接在各个区块之间</strong>的，把它们串起来构成一个链表，前面学的就是这种哈希指针。而在该图中还有<strong>第二种哈希指针，是指向前面某个交易的指针，用来指明币的来源</strong>。为什么要说明币的来源:证明币不是凭空捏造的是有记录的，同时也是防范double spending。</p><p>现在来看第二个方框里<strong>A向B的转账，该交易需要A的签名和B的地址</strong>。比特币系统里收款的地址是通过公钥推算出来的。比如B的地址就是B的公钥取哈希然后经过一些转换得到的。</p><h3 id="A如何知道B的地址、B需要知道A的什么信息、如何才能知道A的公钥"><a href="#A如何知道B的地址、B需要知道A的什么信息、如何才能知道A的公钥" class="headerlink" title="A如何知道B的地址、B需要知道A的什么信息、如何才能知道A的公钥"></a><strong>A如何知道B的地址</strong>、B需要知道A的什么信息、如何才能知道A的公钥</h3><p>比特币系统中没有查询对方地址的功能，<strong>必须通过其他渠道</strong>。比如某个电商网站，接受比特币支付，就可以<strong>公开它的地址或公钥</strong>。</p><p>A需要知道B的地址，B需要知道A的什么信息吗?B其实也要知道A的公钥，这代表A的身份。不仅是B，<strong>所有节点都需要知道A的公钥</strong>。而<strong>签名是用私钥签名公钥验证</strong>(注意不要跟前面知识弄混了，加密是用接收人的公钥加密私钥解密)，所以区块链上每个节点都要独立验证。</p><p>那<strong>如何才能知道A的公钥</strong>?实际上交易里就包含了。<strong>输入时不仅要输入币的来源，还要输入公钥</strong>。那就存在了安全漏洞，假如B的同伙伪造了这次交易呢?其实<strong>第一个方框里铸币交易的输出就有A的公钥的哈希，所以第二个方框交易里A的公钥要跟前面哈希对的上</strong>。</p><p>在比特币系统当中，前面这些验证过程，是通过执行脚本来实现的。每个交易的输入提一段脚本，包括给出公钥的过程，公钥也是在输入的脚本里指定的。每个交易的输出也是一段脚本，验证其的合法性，就需要把当前交易的输入脚本跟前面交易(提供币来源的交易)的输出脚本拼在一起，然后看看能不能顺利执行，如果能执行说明是合法的。比特币脚本(BitCoin Script)。</p><p><strong>实际上每个区块(对应图中的每个方框)可以有很多交易</strong>，这些交易就组成merkle tree。<strong>每个区块分为块头和块身</strong>。</p><p><strong>块头包含的是区块的宏观信息</strong>，比如:用的是比特币哪个版本(version)的协议，区块链当中<strong>指向前一个区块的指针</strong>(hash of previous block header)，整颗merkle tree 的根哈希值(merkle root hash)，还有两个域是跟挖矿相关的，一个是<strong>挖矿的难度目标预值(target)，另一个是随机数nonce</strong>。</p><p>这里的target，就是前面讲到的，<strong>整个块头的哈希要小于这个预值</strong>，即H(block header)≤target。block header里存的就是这个目标预值的编码(nBits)。这里需要注意，前一个区块的哈希只算的是前一个区块的块头，所以前面画的，一个区块引出一个箭头指向另一个区块中间，是不正确的，所以有的书箭头是指向一个区块的上面。取哈希时是把块头的所有部分都取哈希。</p><p><strong>块身里面有交易列表</strong>(transaction list)。</p><p>前面还有一个内容讲的时候简化了:<strong>每个节点都需要验证所有的交易</strong>，实际上<strong>系统中的节点分全节点(full node)和轻节点(light node</strong>)，<strong>全节点是保存区块链所有的信息</strong>的，验证每一个交易，所以全节点又叫fully validating node。<strong>轻节点只保存block header的信息</strong>，一般来说轻节点没法独立验证交易的合法性。</p><p>比如一个交易是不是double spending，轻节点没有存以前的交易信息所以它没法验证。<strong>系统中大多数节点是轻节点</strong>，这节课内容主要针对全节点，因为<strong>轻节点没有参与区块链的构造和维护，只是利用了区块链的一些信息做一些查询</strong>。</p><h3 id="区块链里的内容是如何写到区块链里面的呢"><a href="#区块链里的内容是如何写到区块链里面的呢" class="headerlink" title="区块链里的内容是如何写到区块链里面的呢"></a><strong>区块链里的内容是如何写到区块链里面的呢</strong></h3><p>每个节点，<strong>每个账户都可以发布交易，交易是广播给所有节点的</strong>。有些交易是合法的，有些是非法的。谁来决定哪些交易应该被写入下一个区块中呢?按照什么顺序写呢?如果每个节点自己决定可以吗?如果每个人在本地维护一个区块链，那区块链的统一性得不到保证，而<strong>账本的内容是要取得分布式的共识</strong>(distributed consensus)。</p><p>下面的笔记跟比特币的应用关系不大，可以作为了解:<br>分布式的共识一个简单的例子就是分布式的哈希表(distributed hash table)，比如系统里有很多台机器，共同维护一个全局的哈希表。</p><p>这里需要取得共识的内容是什么？哈希表中包含了哪些键值对key valve pair。假如有人在自己电脑上插入一个键值对，’xiao’这个pair对应的是12345，即’xiao’→12345。那么别人在另一台读的时候也要能把这个读出来，这就叫一个全局的哈希表。</p><p>关于分布式系统有很多不可能结论(impossibility result)，其中最著名的是FLP。这三个字母是三个专家的名字缩写，他们的结论是:在一个异步的(asynchronous)系统里，(网络传输迟延没有上限就叫异步系统)，即使只有一个成员是有问题的(faulty)，也不可能取得共识。</p><p>还有一个著名结论:CAP Theorem。(CAP是指分布式系统的三个我们想要的性质，Consistency【系统状态的一致性】  Availability【别人都可以用】 Partition tolerance)。该理论内容是:任何一个分布式系统，比如分布式哈希表，这三个性质中，最多只能满足两个，假如想要前两个性质，那么就不会得到第三个性质。</p><p>分布式共识一个著名的协议是Paxos，该协议能够保证一致性，即第一个性质。如果该协议达成了共识，那么这个共识一定是一致的，即每个成员所认为的共识都是相同的。但是，某些情况下，该协议可能永远无法达成共识，这种可能性比较小但是客观存在的。</p><h3 id="比特币中的共识协议-consensus-in-BitCoin"><a href="#比特币中的共识协议-consensus-in-BitCoin" class="headerlink" title="比特币中的共识协议(consensus in BitCoin)"></a>比特币中的共识协议(consensus in BitCoin)</h3><p>比特币中共识要解决的一个问题是，有些节点可能是有恶意的。我们<strong>假设系统中大多数节点是好的</strong>，那么该如何取得共识协议?</p><p>第一种方案是投票，首先应该确定哪些区块有投票权，有些membership是有严格要求的，这种情况下基于投票的方案是可行的。但比特币系统创建账户是很容易的，甚至一个人产生了公私钥对别人都无法得知，只有转账时别人才知道。所以有些人<strong>可以不停的创建账户</strong>，<strong>当超过账户总数的一半时就有了控制权</strong>，这种称为女巫攻击(sybil attack)。因此<strong>投票方法不可取</strong>。</p><p>比特币账户巧妙的解决了这个问题，不是按照账户数目投票，而是<strong>按照计算力来投票</strong>。每个节点都可以在本地组装出一个候选区块，把它认为合法的交易放在里面，然后开始尝试各种nonce值(占4 byte)，看哪一个能满足不等式H(block header)≤target的要求。如果某个节点找到了符合要求的nonce，它就获得了<strong>记账权</strong>。</p><p><strong>所谓的记账权，就是往比特币账本里写入下一个区块的权利</strong>。只有找到这个nonce，获得记账权的节点才有权利发布下一个区块。其他节点收到这个区块之后，要<strong>验证这个区块的合法性</strong>。</p><p>比如括号里block header的内容填的对不对；block header里面有一个域，叫nBits域，实际上它是目标预值的一个编码检查一下nBits域设置的是不是符合比特币协议中规定的难度要求；该不等式是否成立。假设都符合要求，然后检查block body 里面的交易列表，验证一下每个交易都是合法的:①要有合法的签名②以前没有被花过。如果有一项不符合要求，这个区块就是不能被接受的。如果所有条件都符合，也不一定接受。</p><h4 id="假如生成了一个新区块，怎么知道新区块插在了哪里"><a href="#假如生成了一个新区块，怎么知道新区块插在了哪里" class="headerlink" title="假如生成了一个新区块，怎么知道新区块插在了哪里"></a>假如生成了一个新区块，怎么知道新区块插在了哪里</h4><p>根据生成区块的指针。有可能就存在一个问题，如图5(第四个视频第65分钟) ，这两个交易指A转账给B，以及A转账给自己。这种情况不是double spending，判断一个交易是不是double spending ，是看这个区块所在的分支上币又没有被花掉。如图，一直到第三个区块，币都没有花过，所以这个交易是合法的。<strong>虽然该交易是合法的，但是它不在最长合法链</strong>(longest valid chain)上。这种称为<strong>分叉攻击</strong>(forking attack)。所以<strong>接收的区块应该是扩展最长合法链</strong>。</p><p><strong>区块链在正常情况下也可能出现分叉:两个节点同时获得记账权</strong>。每个节点在本地自己组装一个它认为合适的区块，然后去试各种nonce，如果两个节点在差不多同一个时间找到了符合要求的nonce，就都可以把区块发布，这时会出现<strong>两个等长的分叉</strong>。这两条都是最长合法链，那该接受那条呢?比特币协议当中，在缺省(默认的意思)情况下，<strong>每个节点是接受它最早收到的那个</strong>。所以不同节点根据在网络上的位置不同，有的节点先听到新生成的其中一个区块，那就接受这个区块；有些节点先听到另一个区块，那就接受另一个区块。</p><p>如何判断接收了一个区块?比特币协议中用到了implicit consign，如果沿着这个区块往下继续扩展，就算认可了这个发布的区块。比如在新生成的其中一个区块后面又拓展一个区块，表明就认可了这个新区块。</p><p><strong>等长的临时性的分叉会维持一段时间，直到一个分叉胜出。也就是哪一个链抢先一步生成了新的区块，哪一条就是最长合法链</strong>。另一个作废的就叫orphan block。这两个新区块有可能会各自拉拢，两个区块链看谁的算力强，有时候也是看谁的运气好，就会胜出。</p><p>竞争记账权的好处:首先获得记账权的节点本身有一定的权力，可以决定哪些交易写到下一个区块里。但这些不应该被设定为竞争记账权的动力，所以巧妙地建立了一个机制:区块奖励(block reward)。</p><p><strong>比特币协议中规定获得记账权的节点在发布的区块里可以有一个特殊的交易:铸币交易</strong>。在这个交易里可以发布一定数量的比特币。</p><p>这里要回到前面的问题①，谁来决定货币的发行?coinbase transaction币基交易是比特币系统中发行新的比特币的唯一方法，后面的交易都是比特币的转移。这个交易不用指出币的来源。</p><p><strong>那么能造多少币呢</strong>?开始时比特币刚上线的时候，每一个发布的区块可以产生50BTC(BTC就是比特币的符号)。协议中规定，21万个区块以后，初块奖励就要减半，就变成了25BTC。再过21万个区块，又要减半。</p><p>因此当一个区块胜出后，另一个作废的区块得到的比特币是没有作用的，其他诚实的区块是不会承认的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>比特币系统中要取得什么共识?去中心化的账本要取得共识。</p><p>谁又能决定账本的内容呢?只有获得记账权的节点才能写东西。</p><p>怎么获得记账权呢?就是解pow(挖矿)。按照算力记票，算力可以用每秒能试多少nonce数值表示。</p><p>那怎样防范女巫攻击呢?按算力记票，即使创建再多的账户，也无法使算力增强。</p><p>比特币争夺记账权的过程叫作挖矿(mining)，比特币被称为数字黄金(digital gold)，争夺记账权的节点被称为矿工(miner)。</p><h2 id="P5-05-BTC-实现"><a href="#P5-05-BTC-实现" class="headerlink" title="P5. 05-BTC-实现"></a>P5. 05-BTC-实现</h2><p>比特币系统的实现</p><p>区块链是去中心化的账本，比特币使用的是基于交易的这种账本模式(transaction【交易】-based ledger【账本】)。<strong>系统当中并不会显示每个账户有多少钱</strong>。</p><p><strong>比特币系统的全节点要维护一个叫UTXO</strong>(unspent transaction output)(还没有被花出去的交易的输出)的数据结构。区块链上有很多交易，有些交易的输出可能已经被花掉，有些还没有被花掉。所有<strong>没有被花掉的输出的集合就叫做UTXO</strong>。</p><p>一个交易可能有多个输出。假如A给B5个比特币，B花掉了。A也给了C3个比特币，C没有花掉。这时5个比特币就不算UTXO，而3个比特币算。UTXO集合当中的每个元素要给出产生输出的交易的哈希值，以及它在这个交易里是第几个输出。这两个信息就可以定位到UTXO中的输出。</p><p><strong>要UTXO集合有什么作用</strong>?<br><strong>为了检测double spending</strong>。即检测新发布的交易是否合法。因此全节点要在内存中维护UTXO这样一个数据结构，以便快速检测double spending。</p><p>每个交易要消耗掉一部分输出，也会产生新的输出。还看上面的例子，B花掉的5个比特币虽然不在UTXO里面，但如果他转账给D，而D没有花掉，那么这5个比特币又要保存在UTXO里面。如果D始终不花，那么这个信息要永久保存在UTXO里面。有可能是不想花，也有可能是把密钥丢了。</p><p>每个交易可以有多个输入，也可以有多个输出，所有输入金额之和要等于输出金额之和。即total inputs=total outputs。因此一个交易可能来自多个地址，可能有多个签名。</p><p>有些交易total inputs略微大于total outputs。<br>假如输入1比特币，输出0.99比特币，另外0.01比特币作为交易费给获得记账权发布区块的节点。</p><p>区块奖励也不能完全作为挖矿的奖励，发布区块的节点为什么一定要把你的交易打包在区块呢?他们还要验证你的交易的合法性，如果交易较多占用的带宽会比较大，网络传播速度也会更慢。所以只有区块奖励是不够的。</p><p>因此<strong>比特币系统设计了第二个激励机制:交易费</strong>(transaction fee)。也就是你把我的交易打包在区块里，我给你一些小费。交易费一般很小，也有一些简单的交易没有交易费。</p><p>21万个区块大概要挖多长时间呢?大约是4年。比特币系统设计的平均出块时间是10分钟，就是整个系统平均10分钟会产生一个新的区块。</p><p>除了<strong>比特币这种基于交易的模式</strong>，<strong>与之对应的还有基于账户的模式(account-based ledger)，比如以太坊系统</strong>。<strong>在这种模式中，系统是要显示的记录每个账户上有多少币</strong>。</p><p>比特币基于交易的模式，<strong>隐私保护性较好</strong>。缺点是比特币当中的转账交易<strong>要说明币的来源</strong>，而基于账户的模式就不用。</p><h3 id="不重要内容"><a href="#不重要内容" class="headerlink" title="不重要内容"></a>不重要内容</h3><p>如图⑥(第五节视频  16分钟处)<br>一个区块的例子<br>第一行表明:该区块包含了686个交易<br>第二行:总输出XXX个比特币<br>第四行:总交易费(686个交易的交易费之和)<br>最下面一行:区块奖励(矿工挖矿的主要动力)<br>第五行:区块的序号<br>第六行:区块的时间戳<br>第九行:挖矿的难度(每隔2016个区块要调整挖矿的难度，保持出块时间在10分钟左右)<br>倒数第二行:挖矿时尝试的随机数</p><p>右边:第一行:该区块块头的哈希值<br>第二行:前一个区块块头的哈希值<br>(注意:计算哈希值只算块头)<br>两个哈希值的共同点:前面都有一串0。是因为，设置的目标预值，表示成16进制，就是前面一长串的0。所以凡是符合难度要求的区块，块头的哈希值算出来都是要有一长串的0。<br>第四行:merkle root 是该区块中包含的那些交易构成的merkle tree的根哈希值。</p><p>如图⑥(见第五节视频 第20分钟)块头的数据结构<br>最后一行:是32位的无符号整数。nonce只有2的32次方个可能的取值。按照比特币现在的挖矿情况来说，很可能把2的32次方个取值都验了一遍也找不到合适的。那怎么办呢?block header 的数据结构里还有哪些域是可以调整的呢?</p><p>如图⑦ 块头里各个域的描述(见第五个视频 第21分钟)<br>第一行:比特币协议的版本号(无法更改的)<br>第二行:前一个区块的块头的哈希值(无法更改)<br>第三行:merkle tree的根哈希值(可以更改)<br>第四行:区块产生的时间(可以调整)比特币系统不要求特别精确的时间，可以在一定范围内调整。<br>第五行:目标预值(编码后的版本)(只能按协议中的要求定期调整)<br>第六行:随机数</p><p><strong>挖矿时只改随机数不够，还可以更改根哈希值</strong>。</p><p>如图⑧(见第五节视频 第23分钟)<br>铸币交易没有输入，它有一个coinbase，可以写入任何的内容。也可以把digital commitment里的commit的哈希值写入里面。也可以把第一节讲到的预测股市的内容写入里面，coinbase的内容是没有人会检查的，甚至可以写你的心情。</p><p>那这个域对我们有什么用呢?</p><p>如图⑨(见第五节视频 第24分钟)<br>对应的是最后一个block header里的根哈希值对应的merkle tree，左下角的交易是coinbase，把它的域改了之后，其上的哈希值就发生了变化，然后沿着merkle tree的结构往上传递。最后导致block header里的根哈希值发生变化(merkle root是block header的一部分)。块头里4个字节的nonce不够用，还有其他字节可以用，比如coinbase域的前八个字节当做extra nonce来用，这样子搜索空间就增大到了2的96次方。</p><p>所以真正挖矿的时候只有两层循环，外层循环调整coinbase域的extra nonce。算出block header里的根哈希值之后，内层循环再调整header里的nonce。</p><p>如图⑩ 普通的转账交易的例子(见第五节视频 第26分钟)<br>该交易有两个输入和两个输出。<br>左上角:这里的output其实是输入，指的是之前交易的output。<br>右上角:这里的output都是unspent，都没有被花掉，会保存在UTXO里面。<br>右边表格第一行:输入的总金额。<br>依次往下:输出总金额、两者之间的差值。<br>两表格下面:可以看出输入和输出都是用脚本的形式来指定的。</p><p>比特币系统中验证交易的合法性，就是把input scripts和output script配对后执行来完成的。注意:不是把图中的input scripts<br>和output scripts配对，因为这两个脚本是一个交易中的脚本。不是把同一个交易里的输入脚本和输出脚本配对，而是把这里的输入脚本和前面提供币来源的交易的输出脚本配对。如果输入输出脚本拼接在一起，能顺利执行不出现错误，那么该交易就是合法的。</p><p>如图十一，是在求解puzzle的过程。<br>注意:求哈希时只用到了block header的内容，而交易的具体信息在block header里面是没有的。block header里面只有merkle tree 的根哈希值，这个就已经能保证交易是没有被篡改的。</p><p>挖矿过程每次尝试一个nonce可以看作是一个Bernoulli trial(伯努利实验)。每一个随机的伯努利实验就构成了一个伯努利过程。它的一个性质是:无记忆性。</p><p>每尝试一个nonce成功的概率是很小的，要进行大量的实验。这时可以用泊松过程来代替伯努利过程。我们真正关心的是系统出块时间，出块时间是服从指数分布。可以画出一个坐标轴，纵轴表示概率密度，横轴表示出块时间(整个系统的出块时间，并不是每个矿工的出块时间)。具体到每一个矿工，他能挖到下一个区块的时间取决于矿工的算力占系统算力的百分比。</p><p>假如一个人的算力占系统总算力的1%，那么系统出100个区块，就有一个区块是这个人挖的。</p><p>指数分布也是无记忆性的。因为概率分布曲线的特点是:随便从一个地方截断，剩下一部分曲线跟原来是一样的。比如:已经等十分钟了，还没有人找到合法的区块，那么还需要等多久呢?仍然参考概率密度函数分布 ，平均仍然要等十分钟。将来还要挖多长时间，跟过去已经挖了多长时间是没有关系的。这个过程也叫:progress free。</p><p>如果没有progress free ，会出现什么现象:算力强的矿工会有不成比例的优势。因为算力强的矿工过去做的工作是更多的，过去尝试了那么多不成功的nonce之后，后面nonce成功的概率就会增大。以此progress free 是挖矿公平性的保证。</p><p>出块奖励是系统中产生新的比特币的唯一途径。产生的比特币构成的一个几何序列。21万＊50+21万＊25+21万＊12.5+……=21万＊50＊(1+1/2+1/4+……)=2100万</p><p>比特币求解的puzzle，除了比拼算力之外，没有其他实际意义。比特币的稀缺性是人为造成的。</p><p>虽然挖矿求解puzzle本身没有实际意义，但是挖矿的过程对于维护比特币系统的安全性是至关重要的。挖矿提供一种凭借算力投票的有效手段，只要大部分算力是掌握在诚实的节点手里，系统的安全性就能够得到保证。</p><p>虽然挖矿奖励越来越小，难度越来越大，但这几年挖矿的竞争是越来越激烈的，因为比特币的价格是飙升的。<strong>最终区块奖励为0了，是不是就没有动力挖矿了呢?不是的，因为还有交易费激励机制</strong>。</p><p>假设大部分算力是掌握在诚实的矿工手里，我们能得到什么样的安全保证?能不能保证写入区块链的交易都是合法的。挖矿给出的只是概率上的保证，只能说有比较大的概率下一个区块是由诚实的矿工发布的，但是不能保证记账权不会落到有恶意的节点手里。</p><p>比如好的矿工占90%的算力，坏的矿工占10%的算力。那么10%的概率下记账权会落在有恶意的矿工手里，这时候会出现什么情况?</p><p>先考虑第一个问题:他能不能偷币?能不能把别人账上的钱转给自己?不能，因为他没有办法伪造别人的签名。</p><p>假设M是有恶意的，他想把A账上的钱转走，所以他发布一个A转给M的交易，但这个交易需要有A的签名，M虽然获得记账权，但他不知道A的私钥，所以伪造不了签名。</p><p>如果M把交易硬写在区块链上，诚实的节点不会接受这个区块，因为它包含有非法的交易。所以诚实的节点会继续沿前一个区块挖，生成新的区块代替非法的区块，其他诚实的区块会沿着这个合法的区块继续挖。比特币要求是扩展正常合法链，M生成的不是合法区块，所以该区块作废。这对他造成的代价是很大的，因为没有了区块奖励，又没有偷到钱。</p><p>第二个问题:他能不能把已经花了的币再花一遍(即double spending)?假如他把M→A的交易写在了一个区块里面，现在他获得了记账权，他又发布另一个交易，把这个钱转回给自己，即M→M’。同样，这很明显是double spending，只要是诚实的节点都不会接受这个区块。</p><p>他如果想发布这个区块，只能连在写了M→A交易区块的前一个区块。注意:区块插在哪个位置，在刚挖矿时就是要决定的，因为设置的block header里要填上前一个block header的哈希。所以他想插到那个区块的话，一开始就要认定，而不是等获得记账权以后再认定。</p><p>这样生成的两条区块链，都是合法的。参考图十二(第五节视频  第56分钟处)。要看其他节点沿着哪一个链往下扩展，最后一个胜出一个作废。</p><p>这种攻击的目的是什么?如果M→A的交易，产生了某种不可逆的外部效果，然后M→M’再把M→A的交易回滚了，那么M就可以从中不当获利。</p><p>比如:网上购物时，M购买一些商品，然后该网站接受比特币支付，M发起一个交易把账转给网站。网站监听到交易写入了区块链里，以为支付成功了，所以就把商品给了M。M拿到商品之后，又发起一个交易，把支出的钱转给自己，然后把下面的链拓展成最长合法链。这样的结果是:既得到了商品，又收回了花掉的钱，就达到了double spending的目的。</p><p>如何防范这种攻击呢?如果M→A的交易所在的区块不是最后一个区块，那么这种攻击的难度就会大大增加。要是想回滚M→A的交易，还是要插在它之前的一个区块，然后想办法成为最长合法链。这个难度是很大的。因为诚实的节点，不会沿着它生成的区块往下扩展，因为它不是最长合法链。因此防范这种攻击的方法就是多等几个区块，或者叫多等几个确认confirmation。</p><p>M→A交易刚刚写入区块里时，我们把它叫作one confirmation。这时后面加的区块，依次叫two confirmation、three confirmation…比特币协议当中，缺省(系统默认)的是要等六个confirmation。有了六个confirmation，才认定M→A的交易是不可篡改的。这需要等多长时间呢?平均出块时间是10分钟，因此要等一个小时。</p><p>区块链是不可篡改的账本，那是不是意味着凡是写入区块链中的内容就永远改不了呢?经上述分析可以看出，这种分析只是一种概率上的保证。<strong>刚刚写入区块链的内容，还是比较容易被改动的</strong>。经过一段等待时间之后，或者后面几个区块被确认之后，被篡改的概率就大幅度下降(指数级别的下降)。</p><p>其实还有一种，叫零确认(其具体位置可见第五节视频  第62分第26秒)。意思是说，这个转账交易发布出去了，但还没又被写入区块链里。即M→A的交易已经发布，但下面包含M→M’的区块还没有被挖出来。</p><p>这个概念相当于电商购物的例子中，在支付时你发布一个转账交易，告诉电商自己已经转过钱了。</p><p>电商运行一个全节点或委托一个全节点监听区块链上的交易，他收到转账交易之后要验证该交易的合法性(有合法的签名，以前没有被花过)，甚至不用等到该交易写入区块链里。这种操作听起来风险很大，交易刚发布出去，都没往区块链里写呢。其实，零确认在实际当中，用的还是比较普遍的。为什么呢?</p><p>这其中有两个原因:①比特币协议缺省的设置是节点接收最先听到的那个交易。所以在零确认的位置，M→A的节点收到后，再发M→M’的交易，有比较大的概率诚实的节点是不会接受的。<br>②很多购物网站，从支付成功，到发货，是有一定的时间间隔的，即有一定的处理时间。</p><p>回到前面的问题:假设某个有恶意的节点获得记账权，它还能做什么坏事?能不能故意不把某些合法的交易写入区块链里?即<strong>发布的区块故意不包含某些交易。这是可以的</strong>。</p><p>比特币协议并没有规定获得记账权的节点一定要把那些交易发布到区块里。<strong>但出现这种情况问题也不大，因为这些合法的交易一定会被写入下一个区块里，总有诚实的节点愿意发布这些交易</strong>。</p><p>其实，区块链在<strong>正常工作下，也会出现合法的交易没有被包含进去的情况</strong>，可能就是这段时间交易的数目太多了。比特币协议中规定，每个区块的大小是有限制的，最多不能超过一兆字节。所以如果交易的数目太多了，那么有些交易可能就只能等到下一个区块再发布。</p><p>会不会出现这种情况?M→M’的交易所在的区块所在的链条虽然短，但是先偷偷的生成比上面更多的区块，然后等上面的链条公布后再公布，就能够胜过上面的几个区块了?这种方法叫作selfish mining。</p><p>正常情况下挖到一个区块马上就发布，原因是你不发布别人可能就发布了，那样就拿不到区块奖励了。而selfish mining是先藏着不急着发布，这是分叉工具的一种手段。</p><p>但这样成功的概率并不大，因为有恶意的节点本来算力占比就不高，还要生成更多的区块，就非常困难。</p><p>以上是selfish mining的其中一个目的，它还有另一个目的。假如A挖了两个区块都没有发布，而在B挖到一个区块公布后立马公布，这样B挖的区块就作废了。这样的好处就是减少竞争，因为A在挖第二个区块时，别人还在挖第一个区块(前提是A算力足够强)。</p><p>但这样也有不好的地方，假如A挖出一个区块，A以为他能赶在别人面前再挖一个区块，结果这时有人挖出了第一个区块，那这样的话A就要在别人发布之后立马发布，去争取区块奖励。</p><h2 id="P6-06-BTC-网络"><a href="#P6-06-BTC-网络" class="headerlink" title="P6. 06-BTC-网络"></a>P6. 06-BTC-网络</h2><p>比特币工作在应用层(application layer:Bitcoin block chain)，它的底层是一个网络层(network layer:P2P overlay network)。</p><p><strong>比特币的P2P网络是非常简单的，所有节点都是对等的</strong>。不像有的P2P网络有所谓的超级节点、纸节点。</p><p>要加入P2P网络首先得知道至少有一个种子节点，然后你要跟种子节点联系，它会告诉你它所知道的网络中的其他节点，节点之间是通过TCP通信的，这样有利于穿透防火墙。当你要离开时不需要做任何操作，不用通知其他节点，退出应用程序就行了。别的节点没有听到你的信息，过一段时间之后就会把你删掉。</p><p>比特币网络的设计原则是:简单、鲁棒，而不是高效。每个节点维护一个零度节点的集合，消息传播在网络中采取flooding的方式。节点第一次听到某个消息的时候，把它传播给去他所有的零度节点，同时记录一下这个消息我已经收到过了。下次再收到这个消息的时候，就不用转发给零度节点了。</p><p>零度节点的选取是随机的，没有考虑底层的拓扑结构。比如一个在加利福尼亚的节点，它选的零度节点可能是在阿根廷的。这样设计的好处是增强鲁棒性，它没有考虑底层的拓扑结构，但是牺牲的是效率，你向身边的人转账和向美国的人转账速度是差不多的。</p><p>比特币系统中，<strong>每个节点要维护一个等待上链的交易的集合</strong>。假如一个集合的交易都是等待写入区块链里的，那么第一次听到某个交易的时候，把这个交易加入这个集合，并且转发这个交易给节点，以后再收到这个交易就不用转发了，这样避免交易会在网络上无线的传播下去。转发的前提是该交易是合法的</p><p>这里有冲突的情况，有可能你会有两个有冲突的交易，差不多同时被广播到网络上。比如说A→B和A→C，这两个如果同时广播在网络上，那么每个节点根据在网络中的位置的不同，收到两个交易的先后顺序不同。</p><p>比如一个人先收到第一个交易，就写入到集合里，再收到第二个交易的时候就不会写入集合，因为跟上一个交易有冲突，就认定是非法的。假设这两个交易花的是同一个币，那么写入集合的交易就会被删掉。</p><p>比如说节点听到一个新发布的区块，里面包含了A→B的交易，那么这个交易就可以删掉了，因为已经写入到了区块链里。如果节点又听到了A→C的交易，该怎么办?这时候也要把A→B删掉。因为A→C如果已经被写入到了区块里，那么A→B就变成了非法交易，就变成了double spending，这就是冲突的情况。可能某个先收到A→C的节点，抢先挖到了矿，发布了区块。</p><p>新发布的区块在网络上的传播有很多方式，跟新发布的交易是类似的。每个节点除了要检查区块的内容合法性之外，还要查它是不是在最长合法链里。越是大的区块，在网络上传播速度越慢。</p><p>比特币协议对区块的大小有1M字节的限制。<strong>比特币系统采用的传播方式是非常耗费带宽的，带宽是瓶颈</strong>。按1M的区块大小限制来算的话，<strong>一个新发布的区块有可能需要几十秒，才能传输到网络大部分境地</strong>，这已经是挺长时间了，所以这个限制值不算小。</p><p>还需要注意的一点:我们讲的比特币网络的传播属于best effort 。一个交易发布到比特币网络上，不一定所以的节点都能收到，而且不同的节点收到这个交易的顺序也不一定是一样的。网络传播存在延迟，而且这个延迟有的时候可能会很长，有的节点也不一定按照比特币协议的要求进行转发。</p><p>可能有的该转发的不转发，导致某些合法的交易收不到，也有的节点可能转发一些不该转发发的消息，比如说有些不合法的交易也被转发了。这就是我们面临的一个实际问题。</p><h2 id="P7-07-BTC-挖矿难度"><a href="#P7-07-BTC-挖矿难度" class="headerlink" title="P7. 07-BTC-挖矿难度"></a>P7. 07-BTC-挖矿难度</h2><p>比特币的挖矿难度调整</p><p>目标预值越小，挖矿的难度越大。调整挖矿的难度就是调整目标空间在整个输出空间中所占的比例。</p><p>比特币用的哈希算法是SHA-256，这个产生的哈希值是256位。所以整个输出空间是2的256次方。调整这个比例，即目标空间占输出空间的比例，通俗的说，就是哈希值前面要有多少个0。比如说256位的哈希值，要是合法的区块，要求算出来的哈希，前面至少有70个0。当然这只是通俗的说法，因为这个目标预值，并不是说前面都是0，从某一个位置开始，后面都变成了1。</p><p>挖矿的难度跟目标预值是成反比的，公式是:difficulty=difficulty 1 target / target。上面是指挖矿难度等于1的时候所对应的目标预值，挖矿难度最小就是1，这个时候对应的目标预值是个非常大的数。</p><p>即target越大，挖矿是越容易的。所以公式里很大的一个数，除以当前的目标预值，得到的就是当前的挖矿难度。所以difficulty和target大小是成反比的。</p><h3 id="为什么要调整挖矿难度"><a href="#为什么要调整挖矿难度" class="headerlink" title="为什么要调整挖矿难度"></a><strong>为什么要调整挖矿难度</strong></h3><p>如果不调会有什么问题呢?系统里的总算力越来越强，<strong>挖矿难度保持不变的话，出块时间是越来越短的</strong>。</p><p><strong>出块时间越来越短，会有什么问题吗</strong>?<br>比如说不到一秒就出一个区块，区块在网络上传播的时间可能需要几十秒，底层的比特币网络可能需要几十秒才能让其他节点都收到。别的节点没有收到这个区块之前还是继续沿着已有的区块链往下扩展。如果有两个节点同时都发布一个区块，这个时候就会出现分叉。</p><p><strong>出块时间如果越来越短的话，这种分叉会成为常态</strong>，而且不仅会出现二分叉，可能会出现很多的分叉。比如10个区块同时被挖出来，系统可能会出现10分叉。</p><p><strong>分叉如果过多，对于系统达成共识是没有好处的，而且危害了系统的安全性</strong>。比特币协议是假设大部分算力掌握在诚实的矿工手里。系统当中的总算力越强，安全性就越好，因为有恶意的节点想掌控51%的算力就越难。如果掌握了51%的算力，它就可以干很多坏事，比如分叉攻击。</p><p><strong>如果后面分叉多</strong>的话，前面某个区块里的某个交易，很可能就遭受分叉攻击，恶意节点会试图回滚。因为后面分叉多，<strong>算力就会分散，恶意节点得逞的概率更大。这个时候恶意节点就不需要51%的算力了，可能10%的算力就够了</strong>，因此出块时间不是越短越好。</p><p>那10分钟的出块时间是不是最优的呢?不一定。改成其他值也可以，有间隔只是说应该有个常数范围。<strong>以太坊系统出块时间就降低到了15s，所以以太坊的出块速度是比特币的40倍</strong>。</p><p>出块时间大幅度下降之后，<strong>以太坊就要设计新的协议，叫ghost</strong>。在该协议中，<strong>这些分叉，产生的orphan block(即产生最长合法链后另一个要被丢弃的区块)就不能丢弃掉了，而是也要给它们一些奖励，这叫uncle reward</strong>。以太坊也要调整挖矿难度，使出块时间保持在15s。</p><h3 id="怎么调整挖矿难度-没看"><a href="#怎么调整挖矿难度-没看" class="headerlink" title="怎么调整挖矿难度-没看"></a>怎么调整挖矿难度-没看</h3><p>讲完了为什么要调整挖矿难度，现在讲一下怎么调整挖矿难度。比特币协议中规定，每2016个区块后就要调整目标预值，这大概是每两个星期调整一次。</p><p>具体的调整公式:target =target×(actual time/expected time)。actual time指产生2016个区块实际花费的时间，expected time指产生2016个区块应用的时间，即2016×10min。</p><p>如果实际花费时间超过了两周，即平均出块时间超过了10min。那么这时候挖矿难度要调的低一点，应该让出块更容易。因此该公式算出来的target会变大，则难度会下降。</p><p>实际上，上调和下调都有四倍的限制。假如实际时间超过了8个星期，那么我们计算公式时也只能按4倍算，目标预值增大最多只能增大4倍。</p><p>那怎么才能让所有的矿工同时调整目标预值呢?计算target的方法写在比特币系统的代码里，每挖到2016个区块会自动进行调整。如果有有恶意的节点故意不调，会怎么样?</p><p>如果一个节点不调，将区块发布出去，诚实的节点是不会认的。nBits是target一个编码的版本，在block header里没有直接存储target的域，因为target的域是256位，直接存target的话要32个字节。nBits在header里只有四个字节，所以可以认为是它的一个压缩编码。</p><p>如果遇到有恶意的矿工，该调的时候不调，这时检查区块的合法性就通不过。因为每个节点要独立的验证发布的区块的合法性。检查的内容就包括:nBits，目标预值设的对不对。如果投机取巧设计一个过大的目标预值，使得你自己挖矿容易了，但这个区块是不会被接受的。</p><p>如图(第七节视频  第26分钟)显示的是比特币系统中总算力的变化情况。在比特币没有流行前，有很长一段时间，算力没有太明显的增长，前面这些年的hash rate几乎是0。其实这些年算力也是增长的，只是后面这些年算力增长的太快了，所以前面部分看上去像是一条直线。去年是涨得非常猛的一年，这也体现在了hash rate 的增长上，算力呈现出指数级的增长。即使在这段黄金时期，算力也不是单调递增的，中间也是有很多波动。</p><p>如图(第七节视频  第27分钟)是挖矿难度的变化情况，跟算力的增长基本上是同步的，这也符合难度调整的设计目标。通过调整挖矿难度，使得出块时间保持稳定。注意这个图显示的是挖矿难度，不是目标预值。</p><p>如图(第七节视频 第27分第27秒)是最近半年的难度调整曲线，可以看出很明显是一段一段的。每隔两个星期，难度上一个台阶，说明挖矿的人越来越多，用的设备越来越先进，反应出大家对比特币的热情越来越高。如果出现相反的情况，比如某个加密货币的挖矿难度越调越小，说明挖矿变得越来越容易了。但这不是好事，说明大家对币的热情是逐渐减小的。持续出现这种情况说明这个币将被淘汰。</p><p>如图(第七节视频 第28分第13秒)显示的是每天的出块时间。可以看出，总的来说出块时间稳定在10分钟上下振动。</p><p>如图(第七节视频 第28分第36秒)显示最近半年的出块时间，也是维持在10分钟左右。</p><p>挖矿难度的公式:下一个难度=前一个难度＊两周/挖前2016个区块用的时间(注意:前面的公式是目标预值的公式，不要混淆了)</p><h2 id="P8-08-BTC-挖矿"><a href="#P8-08-BTC-挖矿" class="headerlink" title="P8. 08-BTC-挖矿"></a>P8. 08-BTC-挖矿</h2><h3 id="挖矿的设备"><a href="#挖矿的设备" class="headerlink" title="挖矿的设备"></a>挖矿的设备</h3><p>挖矿设备演化趋势是越来越趋于专业化，最早的时候用的是普通的CPU挖矿，像家里计算机、笔记本电脑。但如果买一台计算机专门用来挖矿是非常不划算的，计算机当中的大部分内存都是闲置的，挖矿只用到其中很小一部分内存，CPU当中的大部分部件也是闲置的，因为挖矿当中计算哈希值的操作只用到了通用CPU当中的很少一部分指令。硬盘和其他很多资源也都是闲置的，所以随着比特币挖矿难度的提高，用CPU挖矿，用通用计算机挖矿显得性价比太低。</p><p>所以挖矿转入<strong>第二代设备:GPU。GPU效率相比CPU提高了很多</strong>，主要用于大规模的并行计算。但GPU用来挖矿还是有点浪费了，GPU是用于通用并行计算而设计的，用来挖矿的话有很多部件仍然是出于闲置状态，比如说用于浮点数计算的部件。这些部件对于深度学习来说是很重要的，但比特币的操作只用到了整数挖矿。所以GPU虽然效率提高了很多但仍然有不小的浪费。这些年GPU价格涨得很快，有些人归因于深度学习的火热，其实有很多GPU是用来挖矿的。不过有一个好消息，随着比特币挖矿难度的提升，用GPU挖矿已经划不来了，已经超过了GPU的算力范围，所以GPU现在可以更多的用于深度学习、游戏应用的服务。</p><p>有一些新开发的加密货币有的还在用GPU挖矿，而<strong>现在更多用ASIC芯片挖矿</strong>，<strong>这是专门为了挖矿而设计的芯片</strong>，上面没有多余的电动逻辑，整个芯片就是为了比特币挖矿、计算哈希值的操作而设计的。它的性价比是最高的，这个芯片除了挖矿什么事都干不了，而且为某一种加密货币设计的ASIC芯片，只能挖这一种加密货币。除非这两个加密货币用同一个mining puzzle。</p><p>有些加密货币刚发行的时候，为了解决能启动问题，会故意用一个已有的加密货币的mining puzzle，比如说跟比特币一样的mining puzzle，这样可以吸引更多的人来挖矿，这种情况叫merge mining。除了这种情况，其他都是一个芯片只能为一个加密货币挖矿。ASIC芯片生产周期需要一年，但跟其他通用芯片相比，ASIC芯片研发速度已经是非常快的了。</p><p>在这么长的生产周期里面，如果比特币价格出现剧烈变化的话，前期投入的研发费用可能就打水漂了。从历史上看，比特币的价格变化是比较剧烈的。曾经发生好几次，比特币的价格在几个月之内，下跌了80%，然后又慢慢恢复。</p><p>如果比特币价格大幅度下降的话，挖矿可能是赔本的，可能还抵不上电费。即使在比特币发展的黄金时期，价格不断上涨，这时挖矿是有利可图的。但是竞争也是越来越激烈的，定制的ASIC芯片可能用不了几个月就过时了。一款ASIC矿机刚上市的时候大部分的利润是在它上市的前两个月获得的，因为这个时候它的算力在同类产品中是最强的。再往后随着更强的矿机出现，它就可能被淘汰掉。所以购买ASIC矿机的时机很重要，现在都是要提前预定的。有些不良厂商，ASIC矿机生产出来之后，不是立即提供给消费者，而是自己先用来挖矿一段时间，赚取比特币，等到最赚钱的黄金时间即这前两个月过去之后，再把矿机发给用户。当比特币系统中算力突然有一个很大的提升，就说明某个大公司生产出了新一款的ASIC矿机。所以在挖矿热潮中真正赚钱的不一定是挖矿的用户，而可能是卖矿机的大厂商。</p><p><strong>挖矿机的变化趋势，是从通用变得越来越专用，CPU是通用计算，GPU是通用并行计算，ASIC是专用计算</strong>。ASIC一旦过时就作废了，不像CPU和GPU还能做其他工作。很多人觉得这是不好的，是跟去中心化的理念是不相符的，也违背了比特币设计的初衷。最民主的情况是，大家都用家里的CPU计算机挖矿。后来改为GPU噪音是很大的。而有些新的加密货币设计的是Alternative mining puzzle。而设计它的出发点是asic resistance(抗asic芯片化)，目的是让通用的计算机也能参与挖矿的过程。</p><h3 id="大型矿池"><a href="#大型矿池" class="headerlink" title="大型矿池"></a>大型矿池</h3><p>挖矿的另一个趋势是大型矿池的出现，单个矿工即使用了ASIC芯片，挖矿从平均收益上看是有利可图的，但是收入是非常不稳定的。比特币系统中平均每10分钟出一个区块，这是说比特币系统中所有的矿工做一个整体来看平均10min会产生一个区块。但如果具体到某一个矿工来说，他可能要挖很长时间，如果他用一个矿机可能要挖一两年。这样子就好像是买彩票，挖到了就是中了一个大奖。单矿工还有其他问题，他除了挖矿之外还要承担全节点的其他责任(就是这节课最开始介绍的那些)。</p><p>所以要引入矿池，所谓的矿池，就是把这些矿工组织起来，作为一个整体，矿池的架构一般是一个全节点会驱动很多矿机，一个矿池有一个矿主，叫pool manager。下面连了很多矿工，这些矿工只负责计算哈希值，全节点的其他职责都由矿主来承担。他负责监听网上的交易，把这些交易组织打包成区块，同时要看一看有没有其他的节点抢先发布区块，如果有的话看怎样进行调整…..</p><p>ASIC芯片只能负责计算哈希值，它不能干全节点的其他功能。<strong>矿池的出现还为了解决另一个问题:收入不稳定。单个矿工的收入是不稳定的，所以大家一起干，有了收益再进行分配。</strong></p><p>那么收益该如何分配?矿池一般有两种组织形式，一种是像大型数据中心那样，有的互联网公司，有成千上万个服务器，大的矿池里面也有成千上万的矿机，这些矿机如果是属于同一个机构的话，那么收入怎么分配就不重要了。</p><p>但也有矿机是来自不同机构的，即第二种组织方式:分布式的。矿工和矿主不在同一个地方，可能分散在世界各地，那么矿工要加入一个矿池，就是按照矿池规定的通讯协议跟矿主进行联系。矿主把计算哈希值的任务分配给他，矿工计算完之后，把结果反馈给矿主，将来获得出块奖励时一起分配。</p><p>如果矿工是来自五湖四海的，不是属于同一个机构的，那么利益该怎么分配?平均分配行不行?比如每个矿工挖到一个区块，得到了出块奖励，然后平分给其他矿工，这样行吗?不行，因为会有矿工偷懒。因此要按矿工的贡献大小进行分配，也就是这里同样需要工作量证明。那该<strong>怎么证明每个矿工做了多少工作呢</strong>？</p><p>为什么矿工的收入不稳定，因为挖矿太难了，如果把挖矿的难度降低之后，挖矿就会变得稳定了。怎么降低难度呢?<strong>以前的要求是，矿工要找到一个nonce，用nonce计算block header 的哈希值，前面至少有70个0才是合法的区块。降低挖矿难度之后，比如说前面只要有60个0就行了，这样挖到的叫作一个share，这个share叫做almost valid block</strong>。矿工挖到share或almost valid block之后，把它提交给矿主。矿主拿到这个区块有什么用呢？用来证明矿工所做的工作量，而没有其他用途。矿主无法得到区块奖励以及任何好处。所以矿主就统计每个矿工提交了多少这样的share，将来等到某个矿工真正挖到了合法的区块之后，再将出块奖励按照每个矿工所做的工作量，提交的share数目进行分配。</p><p>这样做为什么是可行的?每个矿工挖到矿的概率取决于他尝试的nonce数目，尝试的nonce越多，能找到的share就越多。</p><p>有没有可能一个矿工挖到一个合法的区块之后，不把它提交给矿主，而是自己偷偷摸摸发布出去，得到出块奖励?即平时挖到的share提交，但挖到了合法区块就不提交?不可能，因为每个矿工的任务是由矿主分配的，矿主负责组装好一个区块，然后交给矿工去尝试各种nonce，而且挖矿仅仅调nonce是不够的，还需要调整coinbase parameter。所以矿主会把不同的coinbase parameter所对应的nonce值的范围交给不同的矿工去尝试。那么这个区块里包含什么?<strong>coinbase transaction里面有收款人的地址，这个地址填的是矿主的地址</strong>，即pool manager的地址，所以矿工挖到区块之后，如果他不提交给矿主自己发不出去是没有用的。里面的收款地址是矿主的，他取不出钱来。所以<strong>只要是当初按矿主给分配的任务进行挖矿的，就不可能偷区块奖励</strong>。</p><p>如果他一开始就不管矿主的任务，自己组装一个区块，偷偷把收款地址改成自己地址，会怎样?那样他提交share给矿主的话，矿主是不认的，因为里面交易列表被改过了，coinbase transaction里面的内容发生了变化，算出的merkle tree 的根哈希值也是不一样的。这种情况下矿主是不会给他工作量证明的。那就相当于矿工一开始就单干，跟矿池是没关系的。</p><p>虽然不可能偷区块奖励，但会不会有人捣乱，比如平时挖到一个share，提交给矿主，作为工作量证明。等他挖到一个真正合法的区块之后，把它扔掉。这是有可能的，虽然没有经济好处，但有可能是别的矿池派来的卧底，不想让这个矿池得到区块奖励。这些矿工还是会分红，分的是别的矿工挖出来的区块奖励。</p><p>如图(第八节视频  第38分处 )是矿池在各个国家的分布比例，中国矿池占世界81%，远远超过其他国家，所以按矿池比例来看的话，中国的总算力是有绝对优势的。</p><p>如图(第八节视频 第38分第24秒)如果按照单个矿池来看，在2014年，曾经有叫GHash.IO的矿池，这个矿池的算力，占到了全球算力的一半以上。在当时曾引起一些恐慌，这一个矿石的算力就已经足以发动51%的攻击了。这个事情公布之后，该矿池主动把算力占比大幅度的减少，以免动摇大家对比特币的信心。</p><p>如图(第八节视频  第38分第56秒)是2018年的各矿池的算力分布，看上去没有那么集中了，GHash.IO矿池早已停止运营。当然，挖矿集中化的程度仍然是比较大的，几个大型矿池占了相当大的比重，但没有矿池占50%以上。这样看算比较安全了，但可能只是一个表面现象。假如一个机构有一半以上的算力，他不一定要把算力集中在一个矿池里，而可以把算力分散隐藏在很多矿池里，真正需要发动攻击的时候再集中起来发动攻击。</p><p>矿工转换矿池是很容易的，加入一个矿池就是按照这个矿池的协议跟这个矿主联系，矿池把组装好的区块信息发给矿工，矿工来尝试各种nonce值就可以了。</p><p>所以<strong>这就是矿池带来的危害</strong>，如果没有矿池，想要发动51%的攻击，攻击者要投入大量的成本来购买到足够的矿机，能够达到系统中半数以上的算力。<strong>有了矿池之后，他可能只占很小一部分比例的算力，只要能够吸引到足够多的矿工，足够多的不明真相的群众加入到他的矿池里来就行了</strong>。</p><p>一般来说，矿池的矿主要收取一定比例的出块奖励作为管理费。矿主也要按照比例收取管理费，有的是按照出块奖励的比例，也有的是抽取交易费。有的一些有恶意的矿池在发动攻击之前，可能故意把管理费降得特别低，甚至是赔本赚吆喝，吸引足够多的矿工加入之后就可以发动攻击了。这是大型矿池的一个弊端，使得51%的攻击更加容易了。</p><p><strong>假如某个矿池占到了半数以上的算力，他具体能够发动哪些攻击呢</strong>?<strong>一个最常见的就是分叉攻击</strong>。假如一个区块链，其中一个区块包含了一个大笔的交易，又等了几个确认区块之后，自认为已经安全了。然后这时就可能有人在该交易前面的区块发动分叉攻击。</p><p>看上去好像追赶的道路是很漫长的，但如果拥有51%的算力，最终还是可以成功攻击。另外，不要把51%当成绝对的门槛，有可能不到51%就可以。算力都是估计的，而且算力还在不断变化。</p><p>攻击者还能做什么坏事?<strong>还可以做boycott(封锁境域)</strong>。比如说攻击者不喜欢某个账户，怀疑某个账户参与非法交易，想把这个账户封锁掉，所有跟这个账户相关的交易都不让上链。假如A把某个交易A→B发布到区块链上，攻击者就会马上进行分叉，产生一个不包含这个交易的区块，所有跟A有关的交易也都不包含进去。</p><p>这种攻击跟分叉攻击区别是什么?他没必要等后面几个确认区块。这时候如果攻击者等待确认区块，是为了让B放心，B以为后面有六个确认区块，已经没事了，然后攻击者再发动分叉攻击。而如果目的是为了boycott的话，就没有必要等后面区块生成。A→B交易一上链马上进行分叉，越早越好，因为攻击者是希望别人沿着他的链往下挖的。</p><p>前面讲过，有些有恶意的节点故意不把某些交易写入区块里，是可以的。但没有关系，后面的区块还是会包含的。但是<strong>如果这个坏人拥有51%的算力的话，他可能仗着自己算力强，公开抵制他想抵制的交易</strong>。这样别的矿工也不敢随便把交易打包进去了。</p><p>那么攻击者有没有可能掌握51%的算力后，把别人账上的钱转走。这是不可能的。因为他没有别人账户的私钥，没有办法伪造签名。如果他仗着算力强，强行把一个没有合法签名的交易发布到区块链上，会有什么样的结果?会造成分叉。因为诚实的矿工会沿着另外一个分叉去挖，不会沿着他发布的区块往下挖。所以盗币是不可能的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>矿池的出现减轻了矿工的负担，矿工只需要挖矿，计算哈希值就行了，别的事情都由矿主来完成。矿工的收入分配也更加稳定。但矿池的出现也有危害，发动51%的攻击变得容易了。他不一定自己有这么强的算力，只要动员召集这些算力就可以了。</p><p>这有点类似于云计算中的on demand computing。平时不需要维护很大的计算机群，需要用的时候可以随时召回来。而矿池的情况，是on demand mining。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-03</title>
    <link href="https://zronghui.github.io/blockchain/blockchain-03.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain-03.html</id>
    <published>2020-04-30T02:41:30.000Z</published>
    <updated>2020-05-12T14:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://www.bilibili.com/video/av37065233">北京大学肖臻老师《区块链技术与应用》公开课_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><a id="more"></a><h2 id="P2-02-BTC-密码学原理"><a href="#P2-02-BTC-密码学原理" class="headerlink" title="P2. 02-BTC-密码学原理"></a>P2. 02-BTC-密码学原理</h2><p>比特币被称为加密货币crypto-currency<br>区块链上内容都是公开的，包括区块的地址，转账的金额。</p><p><strong>比特币主要用到了密码学中的两个功能:1.哈希2.签名</strong></p><h3 id="哈希的性质"><a href="#哈希的性质" class="headerlink" title="哈希的性质"></a>哈希的性质</h3><p>1.密码学中用到的哈希函数被称为cryptographic hash function:    它有<strong>两个重要的性质</strong>:<br>①<strong>collision(这里指哈希碰撞) resistance</strong>  :例如x≠y H(x)=H(y) 两个不同的输入，输出却是相等的，这就称哈希碰撞。它是不可避免的，因为输入空间总大于输出空间。给出x，很难找到y，除非蛮力求解(brute-force)。<br>该性质的作用:对一个message求digest<br>比如message取m m的哈希值是H(m)=digest 如果有人想篡改m值而H(m)不变，则无法做到。<br>哈希碰撞无法人为制造，无法验证，是根据实践经验得来的。<br>②<strong>hiding</strong> 哈希函数的计算过程是单向的，不可逆的。(从H(x)无法推导出x) </p><p>hiding性质前提是输入空间足够大，分布比较均匀。如果不是足够大，一般在x后面拼接一个随机数，如H(x||nonce)。<br>该性质的作用:和collision resistance 结合在一起，用来实现digital commitment(又称为digital equivalent of a sealed envelope)<br>把预测结果作为输入x，算出一个哈希值，讲哈希值公布，hiding让人们知道哈希值而不知道预测值，最后再将x公布，因为有collision resistance的性质，预测结果是不可篡改的。</p><p>除了密码学中要求的这两个性质外，比特币中用到的哈希函数还有第三个性质:<br>③<strong>puzzle friendly</strong> 指哈希值的预算事先是不可预测的。假如哈希值是00…0XX…X，一样事先无法知道哪个值更容易算出这个结果，还是要一个一个带入。</p><p>比特币挖矿的过程中实际就是找一个nonce，nonce跟区块的块头里的其他信息合一起作为输入，得出的哈希值要小于等于某个指定的目标预值。H(block header)≤target。block header 指块头，块头里有很多域，其中一个域是我们可以设置的随机数nonce，挖矿的过程是不停的试随机数，使得block header取哈希后落在指定的范围之内。</p><p><strong>puzzle friendly是指挖矿过程中没有捷径，为了使输出值落在指定范围，只能一个一个去试。所以这个过程还可以作为工作量证明(proof of work)。</strong><br>挖矿很难，验证很容易。(difficult to solve ,but easy to verify)</p><p>比特币中用的哈希函数叫作SHA-256(secure hash algorithm )以上三个性质它都是满足的。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>2.<br>在比特币系统中开账户:<br>在本地创立一个公私钥匙对(public key ,private key)，这就是一个账户。公私钥匙对是来自于非对称的加密技术(asymmetric encryption algorithm)。</p><p>两人之间信息的交流可以利用密钥(encryption key)，A将信息加密后发给B，B收到后用密钥解密，因为加密和解密用的是同一个密钥，所以叫对称加密。前提是有渠道可以安全地把密钥分发给通讯的双方。因此<strong>对称加密的缺点就是密钥的分发不方便</strong>，因为在网络上很容易被窃听。非对称密钥是用一对密钥而不是一个，<strong>加密用公钥，解密用私钥</strong>，<strong>加密和解密用的都是接收方的公钥和私钥</strong>。公钥是不用保密的，私钥要保密但是私钥只要保存在本地就行，不用传给对方。公钥相当于银行账号，别人转账只要知道公钥就行，私钥相当于账户密码，知道私钥可以把账户上钱转走。<strong>公钥和私钥是用来签名</strong>。</p><p>假如A想向B转10个比特币，A把交易放在区块链上，别人怎么知道这笔交易是A发起的呢?这就需要A要用自己的私钥给交易签名，其他人收到这笔交易后，要用A的公钥去验证签名。<strong>签名用私钥，验证用公钥</strong>，用的仍然是同一个人的。创建账户产生相同公私钥的可能性微乎其微，所以大量创建账户来窃取其他人账户是不可行的。</p><p>我们假设产生公私钥时有一个好的随机源(a good source of randomness)，产生公私钥是随机的，如果随机源不好，就有可能产生相同的公私钥。比特币中用的签名算法，不仅是生成公私钥的时候要有好的随机源，之后每一次签名时也要有好的随机源。只要有一次签名用的随机源不好的话，就有可能泄露私钥。</p><h2 id="P3-03-BTC-数据结构"><a href="#P3-03-BTC-数据结构" class="headerlink" title="P3. 03-BTC-数据结构"></a>P3. 03-BTC-数据结构</h2><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>普通指针存储的是某个结构体在内存中的地址。假如P是指向一结构体的指针，那么P里面存放的就是该结构体在内存中的起始位置。而<strong>哈希指针除了要存地址之外，还要保存该结构体的哈希值H()</strong>。好处是:从哈希值这个哈希指针，不仅可以找到该结构体的位置，同时还能够检测出该结构体的内容有没有被篡改，因为我们保存了它的哈希值。</p><p>比特币中最基本的结构就是区块链，区块链就是一个一个区块组成的链表。区块链和普通的链表相比有什么区别:<br>①用哈希指针代替了普通指针(B block chain is a linked list using hash pointers)</p><p>区块链第一个区块叫作创世纪块(genesis block) 最后一个区块 是最近产生的区块(most recent block) 每一个区块都包含指向前一个区块的哈希指针<br><strong>一个区块的哈希指针</strong>怎么算:是<strong>把前面整个区块的内容，包括里面的hash pointer ，合在一起取哈希值</strong>。通过这种结构，可以实现tamper-evident log。如果有人改变了一个区块的内容，后面一个区块的哈希指针就对不上，因为后一个区块哈希指针是根据前一个区块的内容算出来的，所以后一个哈希指针也得改，以此类推，我们保留的是最后一个哈希值也会变化。</p><p>②普通链表可以改变任意一个元素，对链表中其他元素是没有影响的。而区块链是牵一发而动全身，因为只需要保存最后一个哈希值，就可以判断区块链有没有改变，在哪里改变了。<br>因此<strong>比特币没有必要保存所有区块的内容，可以只保留最近的几千个区块</strong>。如果要用到以前的区块，可以向系统中其他节点要这个区块。有些节点是有恶意的，怎么判断?这里要用到哈希值一个性质，如下:<br>其他节点给你一个区块，如何判断它是正确的?算出它的哈希值，与保留的区块的哈希值对比，即可。</p><p><img src="https://i.loli.net/2020/04/30/NleqyYaMCPGwkQi.png" alt="NleqyYaMCPGwkQi"></p><h3 id="Merkle-tree"><a href="#Merkle-tree" class="headerlink" title="Merkle tree"></a>Merkle tree</h3><p><img src="https://i.loli.net/2020/04/30/N7cPSxBIbafMOer.png" alt="N7cPSxBIbafMOer"></p><p>比特币中的另外一个结构是:Merkle tree。(其中最下面一层是数据块(data blocks)，上面三层内部节点都是哈希指针(hash pointers)，第一层是根节点，根节点的区块也可以取个哈希，叫根哈希(root hash))<br>另外一个概念:binary tree。</p><p>这种结构的好处:<strong>只要记住根哈希值，就能检测出对树中任何部位的修改</strong>。<br>它们的区别:①用哈希指针代替了普通指针。</p><p>比特币当中各区块之间用哈希指针连接在一起，每个区块所包含的交易组织成一个merkle tree的形式，最下面一行data blocks每个区块实际上是一个交易，每个区块分为两部分，分别是块头和块身(block header ,block body)。块头里面有根哈希值，每个区块所包含的所有交易组成的merkle tree的根哈希值存在于区块的块头里面，但是，块头里没有交易的具体内容，只有一个根哈希值，块身里面是有交易的列表的。</p><p>merkle tree 的作用:</p><p>①提供merkle proof<br>比特币中的节点分为两类:全节点(保存整个区块的内容，即块头块身都有，有交易的具体信息)和轻节点(例如手机上的比特币钱包)(只有块头)</p><p>这时存在一个问题:<strong>如何向一个轻节点证明某个交易是写入区块链</strong>的?<br>这时需要用到merkle proof :找到交易所在的位置(最底行的其中一个区块)，这时该区块一直往上到根节点的路径就叫merkle proof。</p><p><img src="https://i.loli.net/2020/04/30/3ZtyJeNPQXLDgOm.png" alt="3ZtyJeNPQXLDgOm"></p><p>最上面一行是小型的区块链，该图展现的是一个区块的merkle tree，最下面一行是包含的交易。假设某个轻节点想知道图中黄色的交易，是否包含在了merkle tree里面。该轻节点没有包含交易列表，没有这颗merkle tree的具体内容，只有一个根哈希值。这时轻节点向一个全节点发出请求，请求证明黄色的交易被包含在这颗merkle tree里面的merkle proof。全节点收到这个请求之后，只需要将图中标为红色的这三个哈希值发给轻节点即可。有了这些哈希值之后，轻节点可以在本地计算出图中标为绿色三个哈希值。首先算出黄色交易的哈希值，即它正上方的那个绿的哈希值，然后跟旁边红色的哈希值拼接起来，可以算出上层节点绿色的哈希值。然后再拼接，再算出上层绿色哈希值，再拼接，就可以算出整棵树的根哈希值。轻节点把这个根哈希值和block header里的根哈希值比较一下，就能知道黄色的交易是否在这颗merkle tree里。</p><p>全节点在merkle proof里提供的这几个哈希值，就是从黄色的交易所在的节点的位置到树根的路径上用到的这些哈希值。轻节点收到这样一个merkle proof之后，只要从下往上验证，沿途的哈希值都是正确的即可。(验证时只能验证该路径的哈希值，其他路径是验证不了的，即该图中红色的哈希值是验证不了的)</p><p>这样是否不安全呢?假如黄色交易被篡改，它的哈希值发生了变化，那能不能调整旁边红色的哈希值，使得它们拼接起来的哈希值是不变的呢?不行，根据collision resistance，这是不可行的。</p><p>merkle proof可以证明merkle tree里面包含了某个交易，所以这种证明又叫proof of membership或 proof of inclusion。<br>对于一个轻节点来说，<strong>验证一个merkle proof 复杂度</strong>是多少?假设最底层有n个交易，则merkle proof 复杂程度是<strong>θ(log(n))</strong></p><p><strong>如何证明merkle tree里面没有包含某个交易</strong>?即proof of non-membership。可以把整棵树传给轻节点，轻节点收到后验证树的构造都是对的，每一层用到的哈希值都是正确的，说明树里只有这些叶节点，要找的交易不在里面，就证明了proof of non-membership。问题在于，它的复杂度是线性的θ(n)，是比较笨的方法。</p><p>如果对叶节点的排列顺序做一些要求，比如<strong>按照交易的哈希值排序</strong>。每一个叶节点都是一次交易，对交易的内容取一次哈希，按照哈希值从小到大排列。要查的交易先算出一个哈希值，看看如果它在里面该是哪个位置。比如说在第三个第四个之间，这时提供的proof是第三个第四个叶节点都要往上到根节点。如果其中哈希值都是正确的，最后根节点算出的哈希值也是没有被改过的，说明第三、四个节点在原来的merkle tree里面，确实是相邻的点。要找的交易如果存在的话，应该在这两个节点中间。但是它没有出现，所以就不存在。其复杂度也是log形式，代价是要排序。排好序的叫作sorted merkle tree。<strong>比特币中没有用到这种排好序的merkle tree，因为比特币中不需要做不存在证明</strong>。</p><p>这节讲了比特币中两种最基本的结构:区块链和merkle tree，都是用哈希指针来构造的。除了这两种之外，哈希指针还能用另一个方面。</p><p>只要一个数据结构是无环的(非循环链表)，都能用哈希指针代替普通指针。有环的话存在一个问题，他们的哈希值没法计算</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av37065233&quot;&gt;北京大学肖臻老师《区块链技术与应用》公开课_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
</feed>
