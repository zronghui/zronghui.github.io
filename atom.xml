<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-08-20T12:58:17.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>栈</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%88.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%88.html</id>
    <published>2020-08-19T12:14:51.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://leetcode-cn.com/tag/stack/">栈 - 力扣（LeetCode）</a></p><a id="more"></a><p><a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/submissions/">1019. 链表中的下一个更大节点 - 力扣（LeetCode）</a></p><p><a href="https://leetcode-cn.com/problems/next-greater-node-in-linked-list/solution/dan-diao-zhan-by-yi-wen-statistics-2/">单调栈 - 链表中的下一个更大节点 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/stack/&quot;&gt;栈 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>牛客 sql</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%89%9B%E5%AE%A2-sql.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%89%9B%E5%AE%A2-sql.html</id>
    <published>2020-08-17T09:10:44.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.nowcoder.com/practice/218ae58dfdcd4af195fff264e062138f?tpId=82&&tqId=29753&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找最晚入职员工的所有信息_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">order by hire_date desc</span><br><span class="line">limit 1  -- 或者 limit 0, 1</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/ec1ca44c62c14ceb990c3c40def1ec6c?tpId=82&tqId=29753&rp=1&ru=%2Fta%2Fsql&qru=%2Fta%2Fsql%2Fquestion-ranking">查找入职员工时间排名倒数第三的员工所有信息_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">order by hire_date desc</span><br><span class="line">limit 2, 1</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/6d35b1cd593545ab985a68cd86f28671?tpId=82&&tqId=29756&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找所有已经分配部门的员工的last_name和first_name以及dept_no_牛客网</a></p><p>三种等效的操作 , == join == inner join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name, e.first_name, d.dept_no</span><br><span class="line">FROM employees AS e, dept_emp AS d</span><br><span class="line">WHERE e.emp_no &#x3D; d.emp_no;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name, e.first_name, d.dept_no</span><br><span class="line">FROM employees AS e JOIN dept_emp AS d</span><br><span class="line">ON e.emp_no&#x3D;d.emp_no;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name, e.first_name, d.dept_no</span><br><span class="line">FROM employees AS e INNER JOIN dept_emp AS d</span><br><span class="line">ON e.emp_no&#x3D;d.emp_no;</span><br></pre></td></tr></table></figure><p>左连接：</p><p>left join 和 left outer join 是一样的，就是字面上有区别，执行结果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select last_name, first_name, dept_no</span><br><span class="line">from employees as e left join dept_emp as d</span><br><span class="line">on d.emp_no &#x3D; e.emp_no</span><br><span class="line">where d.dept_no not null;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c63c5b54d86e4c6d880e4834bfd70c3b?tpId=82&&tqId=29755&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找当前薪水详情以及部门编号dept_no_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select s.*,d.dept_no</span><br><span class="line">from salaries as s inner join dept_manager as d</span><br><span class="line">on s.emp_no&#x3D;d.emp_no</span><br><span class="line">where d.to_date&#x3D;&#39;9999-01-01&#39; and s.to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">order by s.emp_no</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/23142e7a23e4480781a3b978b5e0f33a?tpId=82&&tqId=29758&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找所有员工入职时候的薪水情况_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- group by  + having min(salary)</span><br><span class="line">select emp_no, salary</span><br><span class="line">from salaries</span><br><span class="line">group by emp_no</span><br><span class="line">having min(salary)</span><br><span class="line">order by emp_no desc</span><br><span class="line"></span><br><span class="line">-- e.hire_date&#x3D;s.from_date</span><br><span class="line">-- 注意，加上 s. e. </span><br><span class="line">select s.emp_no, s.salary</span><br><span class="line">from employees as e inner join salaries as s</span><br><span class="line">on e.emp_no&#x3D;s.emp_no and e.hire_date&#x3D;s.from_date</span><br><span class="line">order by s.emp_no desc</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/6d4a4cff1d58495182f536c548fee1ae?tpId=82&&tqId=29759&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找薪水变动超过15次的员工号emp_no以及其对应的变动次数t_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select emp_no, count(salary) as t</span><br><span class="line">from salaries</span><br><span class="line">group by emp_no</span><br><span class="line">having count(salary)&gt;15</span><br><span class="line"></span><br><span class="line">-- 补充：如果考虑严格意义上的涨幅，应该写：</span><br><span class="line">select a.emp_no, count() t</span><br><span class="line">from salaries a inner join salaries b</span><br><span class="line">on a.emp_no&#x3D;b.emp_no and a.to_date&#x3D;b.from_date</span><br><span class="line">where a.salary &lt; b.salary</span><br><span class="line">group by a.emp_no</span><br><span class="line">having t&gt;15</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/ae51e6d057c94f6d891735a48d1c2397?tpId=82&&tqId=29760&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">找出所有员工当前薪水salary情况_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select distinct salary</span><br><span class="line">from salaries</span><br><span class="line">where to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">order by salary desc</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/4c8b4a10ca5b44189e411107e1d8bec1?tpId=82&&tqId=29761&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select d.dept_no, d.emp_no, s.salary</span><br><span class="line">from dept_manager as d inner join salaries as s</span><br><span class="line">on d.emp_no&#x3D;s.emp_no </span><br><span class="line">   and d.to_date&#x3D;&#39;9999-01-01&#39; </span><br><span class="line">   and s.to_date&#x3D;&#39;9999-01-01&#39;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/32c53d06443346f4a2f2ca733c19660c?tpId=82&&tqId=29762&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取所有非manager的员工emp_no_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select emp_no</span><br><span class="line">from employees</span><br><span class="line">where emp_no not in (</span><br><span class="line">    select emp_no</span><br><span class="line">    from dept_manager</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/e50d92b8673a440ebdf3a517b5b37d62?tpId=82&&tqId=29763&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取所有员工当前的manager_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select e.emp_no, m.emp_no</span><br><span class="line">from dept_emp as e inner join dept_manager as m</span><br><span class="line">on e.dept_no&#x3D;m.dept_no</span><br><span class="line">where e.to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">      and m.to_date&#x3D;&#39;9999-01-01&#39; </span><br><span class="line">      and e.emp_no&lt;&gt;m.emp_no</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/4a052e3e1df5435880d4353eb18a91c6?tpId=82&&tqId=29764&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取每个部门中当前员工薪水最高的相关信息_牛客网</a></p><p>用子查询，子查询内部可以在 where等地方 连接外部的表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select d.dept_no, d.emp_no, s.salary</span><br><span class="line">from dept_emp as d inner join salaries as s</span><br><span class="line">on d.emp_no&#x3D;s.emp_no and d.to_date&#x3D;&#39;9999-01-01&#39; and s.to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">where s.salary&#x3D;(</span><br><span class="line">  select max(s1.salary)</span><br><span class="line">  from dept_emp as d1 inner join salaries as s1</span><br><span class="line">  on d1.emp_no&#x3D;s1.emp_no and d1.to_date&#x3D;&#39;9999-01-01&#39; and s1.to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">  where d1.dept_no&#x3D;d.dept_no</span><br><span class="line">  group by d1.dept_no</span><br><span class="line">)</span><br><span class="line">order by d.dept_no asc</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/72ca694734294dc78f513e147da7821e?tpId=82&&tqId=29765&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">从titles表获取按照title进行分组_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select title, count() as t</span><br><span class="line">from titles</span><br><span class="line">group by title</span><br><span class="line">having t&gt;1</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c59b452f420c47f48d9c86d69efdff20?tpId=82&&tqId=29766&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">从titles表获取按照title进行分组，注意对于重复的emp_no进行忽略。_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select title, count() as t</span><br><span class="line">from (</span><br><span class="line">    select distinct emp_no, title</span><br><span class="line">    from titles</span><br><span class="line">)</span><br><span class="line">group by title</span><br><span class="line">having t&gt;1</span><br></pre></td></tr></table></figure><p>补充：当DISTINCT应用到多个字段时，其应用范围是其后面的所有字段，而不是紧挨它的一个字段<br>注意：DISTINCT只能放在所有字段前面，所以上面的DISTINCT emp_no和title不可以交换</p><p>distinct 还能在 count 里面用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select title, count(distinct emp_no) as t</span><br><span class="line">from titles</span><br><span class="line">group by title</span><br><span class="line">having t&gt;1</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/a32669eb1d1740e785f105fa22741d5c?tpId=82&&tqId=29767&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找employees表_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where last_name!&#x3D;&#39;Mary&#39;</span><br><span class="line">and emp_no%2&#x3D;1</span><br><span class="line">order by hire_date desc</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c8652e9e5a354b879e2a244200f1eaae?tpId=82&&tqId=29768&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">统计出当前各个title类型对应的员工当前薪水对应的平均工资_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select title, avg(salary)</span><br><span class="line">from titles as t inner join salaries as s</span><br><span class="line">on t.emp_no&#x3D;s.emp_no</span><br><span class="line">where t.to_date&#x3D;&#39;9999-01-01&#39; and s.to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">group by title</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/8d2c290cc4e24403b98ca82ce45d04db?tpId=82&&tqId=29769&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取当前薪水第二多的员工的emp_no以及其对应的薪水salary_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select emp_no, salary</span><br><span class="line">from salaries</span><br><span class="line">where to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1, 1</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c1472daba75d4635b7f8540b837cc719?tpId=82&&tqId=29770&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">获取当前薪水第二多的员工的emp_no以及其对应的薪水salary_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 小于薪水最大的最大薪水</span><br><span class="line">select e.emp_no, max(salary), last_name, first_name</span><br><span class="line">from employees as e inner join salaries as s</span><br><span class="line">on e.emp_no&#x3D;s.emp_no</span><br><span class="line">where to_date&#x3D;&#39;9999-01-01&#39; and salary&lt;(</span><br><span class="line">    select max(salary)</span><br><span class="line">    from salaries</span><br><span class="line">    where to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/5a7975fabe1146329cee4f670c27ad55?tpId=82&&tqId=29771&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找所有员工的last_name和first_name以及对应的dept_name_牛客网</a></p><p>好像不能直接三个表 join ，比如 a left join b on xx join c on xxx ，这是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select e.last_name, e.first_name, t.dept_name</span><br><span class="line">from employees as e left join (</span><br><span class="line">    select emp_no, dept_name</span><br><span class="line">    from dept_emp as de inner join departments as d</span><br><span class="line">    on d.dept_no&#x3D;de.dept_no</span><br><span class="line">) as t</span><br><span class="line">on e.emp_no&#x3D;t.emp_no</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c727647886004942a89848e2b5130dc2?tpId=82&&tqId=29772&rp=1&ru=/ta/sql&qru=/ta/sql/question-ranking">查找员工编号emp_no为10001其自入职以来的薪水salary涨幅(总共涨了多少)growth_牛客网</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain/区块链共识算法的发展现状与展望-阅读笔记</title>
    <link href="https://zronghui.github.io/blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6%E4%B8%8E%E5%B1%95%E6%9C%9B-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%91%E5%B1%95%E7%8E%B0%E7%8A%B6%E4%B8%8E%E5%B1%95%E6%9C%9B-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-08-14T00:38:15.000Z</published>
    <updated>2020-08-14T02:21:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链共识算法的发展现状与展望"><a href="#区块链共识算法的发展现状与展望" class="headerlink" title="区块链共识算法的发展现状与展望"></a><a href="https://kns.cnki.net/kcms/detail/detail.aspx?filename=MOTO201811009&dbcode=CJFD&dbname=CJFD2018&v=">区块链共识算法的发展现状与展望</a></h1><p>系统性地梳理和讨论了区块链发展过程中的32种重要共识算法</p><h2 id="主流共识算法"><a href="#主流共识算法" class="headerlink" title="主流共识算法"></a>主流共识算法</h2><h4 id="pow-工作量证明"><a href="#pow-工作量证明" class="headerlink" title="pow: 工作量证明"></a>pow: 工作量证明</h4><h4 id="PoS-权益证明"><a href="#PoS-权益证明" class="headerlink" title="PoS: 权益证明"></a>PoS: 权益证明</h4><p>由系统中具有最高权益而非最高算力的节点获得记账权, 其中权益体现为节点对特定数量货币的所有权, 称为币龄或币天数 (Coin days) .Po S一定程度上解决了PoW算力浪费的问题, 并能够缩短达成共识的时间, 因而比特币之后的许多竞争币都采用PoS共识算法.</p><p>PPC将PoW和PoS两种共识算法结合起来, 初期采用PoW挖矿方式以使得Token相对公平地分配给矿工, 后期随着挖矿难度增加, 系统将主要由PoS共识算法维护</p><h4 id="瑞波协议共识算法-RPCA"><a href="#瑞波协议共识算法-RPCA" class="headerlink" title="瑞波协议共识算法 ( RPCA)"></a>瑞波协议共识算法 ( RPCA)</h4><p>该共识算法解决了异步网络节点通讯时的高延迟问题, 通过使用集体信任的子网络 (Collectively-trusted subnetworks) , 在只需最小化信任和最小连通性的网络环境中实现了低延迟、高鲁棒性的拜占庭容错共识算法</p><h4 id="授权股份证明算法-DPoS"><a href="#授权股份证明算法-DPoS" class="headerlink" title="授权股份证明算法 (DPoS)"></a>授权股份证明算法 (DPoS)</h4><p>DPoS共识的基本思路类似于“董事会决策”, 即系统中每个节点可以将其持有的股份权益作为选票授予一个代表, 获得票数最多且愿意成为代表的前N个节点将进入“董事会”, 按照既定的时间表轮流对交易进行打包结算、并且签署 (即生产) 新区块</p><h4 id="Raft共识算法"><a href="#Raft共识算法" class="headerlink" title="Raft共识算法"></a>Raft共识算法</h4><h2 id="共识算法的模型与分类"><a href="#共识算法的模型与分类" class="headerlink" title="共识算法的模型与分类"></a>共识算法的模型与分类</h2><p>共识过程的核心是“选主”和“记账”两部分, 在具体操作过程中每一轮可以分为选主 (Leader election) 、造块 (Block generation) 、验证 (Data validation) 和上链 (Chain updation, 即记账) 4个阶段.4个阶段循环往复执行, 每执行一轮将会生成一个新区块</p><p>区块链共识算法可以根据其容错类型、部署方式和一致性程度等多个维度加以分类.</p><p>根据选主策略 (即函数f的具体实现方式) 将区块链共识算法分为选举类、证明类、随机类、联盟类和混合类共5种类型</p><p><strong>选举类共识</strong>:即矿工节点在每一轮共识过程中通过“投票选举”的方式选出当前轮次的记账节点, 首先获得半数以上选票的矿工节点将会获得记账权;多见于传统分布式一致性算法, 例如Paxos和Raft等.</p><p><strong>证明类共识</strong>:也可称为“Proof of X”类共识, 即矿工节点在每一轮共识过程中必须证明自己具有某种特定的能力, 证明方式通常是竞争性地完成某项难以解决但易于验证的任务, 在竞争中胜出的矿工节点将获得记账权;例如PoW和PoS等共识算法是基于矿工的算力或者权益来完成随机数搜索任务, 以此竞争记账权.</p><p><strong>随机类共识</strong>:即矿工节点根据某种随机方式直接确定每一轮的记账节点, 例如下文将要提到的Algorand和PoET共识算法等.</p><p><strong>联盟类共识</strong>:即矿工节点基于某种特定方式首先选举出一组代表节点, 而后由代表节点以轮流或者选举的方式依次取得记账权.这是一种以“代议制”为特点的共识算法, 例如DPoS等.</p><p><strong>混合类共识</strong>:即矿工节点采取多种共识算法的混合体来选择记账节点, 例如PoW+PoS混合共识、DPo S+BFT共识等.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区块链共识算法的发展现状与展望&quot;&gt;&lt;a href=&quot;#区块链共识算法的发展现状与展望&quot; class=&quot;headerlink&quot; title=&quot;区块链共识算法的发展现状与展望&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kns.cnki.net/kcms/detail
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pca 主成分分析</title>
    <link href="https://zronghui.github.io/python/pca-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90.html"/>
    <id>https://zronghui.github.io/python/pca-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90.html</id>
    <published>2020-08-11T13:07:26.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use scikit-learn and perform PCA with k</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> decomposition</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pca1 = decomposition.PCA(n_components=<span class="number">1</span>)</span><br><span class="line">pc1 = pca1.fit_transform(X1)</span><br><span class="line">df1 = pd.DataFrame(&#123;<span class="string">'var'</span>:pca1.explained_variance_ratio_, <span class="string">'PC'</span>:[<span class="string">'PC1'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pca2 = decomposition.PCA(n_components=<span class="number">2</span>)</span><br><span class="line">pc2 = pca2.fit_transform(X2)</span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">'var'</span>:pca2.explained_variance_ratio_, <span class="string">'PC'</span>:[<span class="string">'PC1'</span>,<span class="string">'PC2'</span>]&#125;)</span><br><span class="line"></span><br><span class="line">pca3 = decomposition.PCA(n_components=<span class="number">3</span>)</span><br><span class="line">pc3 = pca3.fit_transform(X3)</span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">'var'</span>:pca3.explained_variance_ratio_, <span class="string">'PC'</span>:[<span class="string">'PC1'</span>,<span class="string">'PC2'</span>,<span class="string">'PC3'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make a Scree plot</span></span><br><span class="line">print(<span class="string">'pca1.explained_variance_ratio_'</span>, pca1.explained_variance_ratio_)</span><br><span class="line">sns.barplot(x=<span class="string">'PC'</span>,y=<span class="string">"var"</span>, </span><br><span class="line">           data=df1, color=<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># make a Scree plot</span></span><br><span class="line">print(<span class="string">'pca2.explained_variance_ratio_'</span>, pca3.explained_variance_ratio_)</span><br><span class="line">sns.barplot(x=<span class="string">'PC'</span>,y=<span class="string">"var"</span>, </span><br><span class="line">           data=df2, color=<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># make a Scree plot</span></span><br><span class="line">print(<span class="string">'pca3.explained_variance_ratio_'</span>, pca3.explained_variance_ratio_)</span><br><span class="line">sns.barplot(x=<span class="string">'PC'</span>,y=<span class="string">"var"</span>, </span><br><span class="line">           data=df3, color=<span class="string">"c"</span>);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/CPotnis/PCA_on_Breast_Cancer_Wisconsin_Data/blob/master/PCA_on_Breast_Cancer_Wisconsin.ipynb">PCA_on_Breast_Cancer_Wisconsin_Data/PCA_on_Breast_Cancer_Wisconsin.ipynb at master · CPotnis/PCA_on_Breast_Cancer_Wisconsin_Data</a><br><a href="https://cmdlinetips.com/2018/03/pca-example-in-python-with-scikit-learn/">PCA Example in Python with scikit-learn - Python and R Tips</a><br><a href="https://datascienceplus.com/principal-component-analysis-pca-with-python/">Principal Component Analysis (PCA) with Python | DataScience+</a><br><a href="https://medium.com/@skp2707/pca-on-cancer-dataset-4d7a97f5fdb8">PCA on Cancer dataset. Dimensionality reduction for… | by shekhar pandey | Medium</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>kmeans</title>
    <link href="https://zronghui.github.io/python/kmeans.html"/>
    <id>https://zronghui.github.io/python/kmeans.html</id>
    <published>2020-08-11T09:25:11.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://i.loli.net/2020/08/11/2p6PvxcKr1YhboQ.png" alt="image-20200811173514307"></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the random seed for repeatability</span></span><br><span class="line">np.random.seed(<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># set our constants for the dataset</span></span><br><span class="line">d = <span class="number">2</span>    <span class="comment"># dimensions</span></span><br><span class="line">m = <span class="number">100</span>  <span class="comment"># samples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate m randomly-distributed d-dimensional samples</span></span><br><span class="line">X = np.random.random((m, d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the centers</span></span><br><span class="line">center_1 = [ <span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">center_2 = [<span class="number">-1</span>,<span class="number">2</span>]</span><br><span class="line">center_3 = [ <span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate 3 clusters each with m normally-distributed, 2-dimensional samples</span></span><br><span class="line">X1 = np.random.multivariate_normal(center_1, [[<span class="number">1</span>,  <span class="number">0.8</span>], [<span class="number">0.8</span>,  <span class="number">1</span>]],   size=m)</span><br><span class="line">X2 = np.random.multivariate_normal(center_2, [[<span class="number">0.3</span>,<span class="number">0.2</span>], [<span class="number">0.2</span>,<span class="number">0.3</span>]], size=m)</span><br><span class="line">X3 = np.random.multivariate_normal(center_3, [[<span class="number">1</span>,  <span class="number">0</span>],   [<span class="number">0</span>,  <span class="number">0.5</span>]], size=m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate the dataset matrix (3*m rows, d columns)</span></span><br><span class="line">X = np.append(X1, X2, axis=<span class="number">0</span>)</span><br><span class="line">X = np.append(X,  X3, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="scikit-learn"><a href="#scikit-learn" class="headerlink" title="scikit-learn"></a>scikit-learn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import the scikit-learn model and pyplot</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### CODE HERE</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate and fit the model to the dataset using k clusters (your choice on how many -- I encourage you to do several and explore the performance)</span></span><br><span class="line">km = KMeans(n_clusters=<span class="number">3</span>, random_state=<span class="number">2</span>).fit_predict(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the cluster centers and training examples using different colors for each cluster</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax.set_title(<span class="string">'K-Means'</span>)</span><br><span class="line">ax.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>], c=km)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">km 是每个点分配的 label id 内容:</span><br><span class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], dtype=int32)</span><br></pre></td></tr></table></figure><p>结果：</p><img src="https://i.loli.net/2020/08/11/xzhR95BHVrFAIZb.png" alt="image-20200811173025348" style="zoom:25%;" /><p>random_state 的含义，为了设置 random.seed(random_state) 这样每次运行的结果就一致了</p><h2 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write your implementation of k-means clustering</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyKMeans</span><span class="params">(data, n_clusters=<span class="number">3</span>, max_iter=<span class="number">100</span>, random_state=<span class="number">2</span>)</span>:</span></span><br><span class="line">    random.seed(random_state)</span><br><span class="line">    <span class="comment"># 1. Randomly initialize the cluster centers</span></span><br><span class="line">    centers = random.choices(data, k=n_clusters)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestToCenter</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="comment"># return which center is (x, y) closest to</span></span><br><span class="line">        <span class="keyword">return</span> min(range(n_clusters), key=<span class="keyword">lambda</span> i: (x-centers[i][<span class="number">0</span>])**<span class="number">2</span>+(y-centers[i][<span class="number">1</span>])**<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. Repeat for `max_iter` iterations:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="comment"># 3. Assign training examples to the nearest cluster center</span></span><br><span class="line">        clusters = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n_clusters)]</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> data:</span><br><span class="line">            clusters[closestToCenter(x, y)].append([x, y])</span><br><span class="line">        <span class="comment"># 4. Update the cluster centers by computing the mean of the cluster's assigned training examples</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_clusters):</span><br><span class="line">            <span class="keyword">if</span> len(clusters[i])!=<span class="number">0</span>:</span><br><span class="line">                centers[i][<span class="number">0</span>] = sum(x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> clusters[i])/len(clusters[i])</span><br><span class="line">                centers[i][<span class="number">1</span>] = sum(x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> clusters[i])/len(clusters[i])</span><br><span class="line">    <span class="keyword">return</span> [closestToCenter(x, y) <span class="keyword">for</span> x, y <span class="keyword">in</span> data]</span><br><span class="line"><span class="comment"># generate and fit the model to the dataset using k clusters (your choice on how many -- I encourage you to do several and explore the performance)</span></span><br><span class="line">mykm = MyKMeans(data=X, n_clusters=<span class="number">3</span>, max_iter=<span class="number">100</span>, random_state=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the cluster centers and training examples using different colors for each cluster</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.set_xlabel(<span class="string">'x'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y'</span>)</span><br><span class="line">ax.set_title(<span class="string">'My-K-Means'</span>)</span><br><span class="line">ax.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>], c=mykm)</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/08/11/vWutSNkz3JixjHG.png" alt="image-20200811172705457" style="zoom:25%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib</title>
    <link href="https://zronghui.github.io/python/matplotlib.html"/>
    <id>https://zronghui.github.io/python/matplotlib.html</id>
    <published>2020-08-11T06:28:08.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="设置-xlabel-ylabel-title-显示网格线"><a href="#设置-xlabel-ylabel-title-显示网格线" class="headerlink" title="设置 xlabel ylabel title 显示网格线"></a>设置 xlabel ylabel title 显示网格线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>)) <span class="comment">#</span></span><br><span class="line">ax = plt.gca() <span class="comment"># get current axes</span></span><br><span class="line">ax.set_xlabel(<span class="string">'theta'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'omega'</span>)</span><br><span class="line">ax.set_title(<span class="string">'theta_0=1/2, omega_0=0, n_end=200'</span>)</span><br><span class="line">ax.scatter(t1, t2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle = <span class="string">"-."</span>, color = <span class="string">"r"</span>, linewidth = <span class="string">"3"</span>)</span><br></pre></td></tr></table></figure><h3 id="设置-x-y-轴范围"><a href="#设置-x-y-轴范围" class="headerlink" title="设置 x y 轴范围"></a>设置 x y 轴范围</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br><span class="line">plt.ylim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br></pre></td></tr></table></figure><h3 id="画点、画线"><a href="#画点、画线" class="headerlink" title="画点、画线"></a>画点、画线</h3><h4 id="画线："><a href="#画线：" class="headerlink" title="画线："></a>画线：</h4><p>ax.plot(lx, ly, ‘r-‘) # 画红色实线</p><h4 id="画点"><a href="#画点" class="headerlink" title="画点:"></a>画点:</h4><p>ax.plot(x, y, marker=’.’, markersize=40, markerfacecolor=’red’)</p><p>更多 marker：</p><p><a href="https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.plot.html">matplotlib.axes.Axes.plot — Matplotlib 3.1.2 documentation</a></p><p><strong>Markers</strong></p><table><thead><tr><th>character</th><th>description</th></tr></thead><tbody><tr><td><code>&#39;.&#39;</code></td><td>point marker</td></tr><tr><td><code>&#39;,&#39;</code></td><td>pixel marker</td></tr><tr><td><code>&#39;o&#39;</code></td><td>circle marker</td></tr><tr><td><code>&#39;v&#39;</code></td><td>triangle_down marker</td></tr><tr><td><code>&#39;^&#39;</code></td><td>triangle_up marker</td></tr><tr><td><code>&#39;&lt;&#39;</code></td><td>triangle_left marker</td></tr><tr><td><code>&#39;&gt;&#39;</code></td><td>triangle_right marker</td></tr><tr><td><code>&#39;1&#39;</code></td><td>tri_down marker</td></tr><tr><td><code>&#39;2&#39;</code></td><td>tri_up marker</td></tr><tr><td><code>&#39;3&#39;</code></td><td>tri_left marker</td></tr><tr><td><code>&#39;4&#39;</code></td><td>tri_right marker</td></tr><tr><td><code>&#39;s&#39;</code></td><td>square marker</td></tr><tr><td><code>&#39;p&#39;</code></td><td>pentagon marker</td></tr><tr><td><code>&#39;*&#39;</code></td><td>star marker</td></tr><tr><td><code>&#39;h&#39;</code></td><td>hexagon1 marker</td></tr><tr><td><code>&#39;H&#39;</code></td><td>hexagon2 marker</td></tr><tr><td><code>&#39;+&#39;</code></td><td>plus marker</td></tr><tr><td><code>&#39;x&#39;</code></td><td>x marker</td></tr><tr><td><code>&#39;D&#39;</code></td><td>diamond marker</td></tr><tr><td><code>&#39;d&#39;</code></td><td>thin_diamond marker</td></tr><tr><td>`’</td><td>‘`</td></tr><tr><td><code>&#39;_&#39;</code></td><td>hline marker</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t1, t2 = run_pendulum(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">xs = list(map(<span class="keyword">lambda</span> i: -sin(i), t1))</span><br><span class="line">ys = list(map(<span class="keyword">lambda</span> i: cos(i), t1))</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>)) <span class="comment">#</span></span><br><span class="line">ax = plt.gca() <span class="comment"># get current axes</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]:</span><br><span class="line">    x, y = xs[i], ys[i]</span><br><span class="line">    <span class="comment"># 画线 前一个列表是 x 后一个列表是 y </span></span><br><span class="line">    ax.plot([<span class="number">0</span>,x], [<span class="number">0</span>, y], <span class="string">"k"</span>) <span class="comment"># plot the black line</span></span><br><span class="line">    <span class="comment"># 画一个圆点，颜色是红，大小 40, 坐标 (x, y)</span></span><br><span class="line">    ax.plot(x, y, marker=<span class="string">'.'</span>, markersize=<span class="number">40</span>, markerfacecolor=<span class="string">'red'</span>) <span class="comment"># plot the red square</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the limits</span></span><br><span class="line">plt.xlim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br><span class="line">plt.ylim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br></pre></td></tr></table></figure><p><strong>Line Styles</strong></p><table><thead><tr><th>character</th><th>description</th></tr></thead><tbody><tr><td><code>&#39;-&#39;</code></td><td>solid line style</td></tr><tr><td><code>&#39;--&#39;</code></td><td>dashed line style</td></tr><tr><td><code>&#39;-.&#39;</code></td><td>dash-dot line style</td></tr><tr><td><code>&#39;:&#39;</code></td><td>dotted line style</td></tr></tbody></table><p>Example format strings:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39;b&#39;    # blue markers with default shape</span><br><span class="line">&#39;or&#39;   # red circles</span><br><span class="line">&#39;-g&#39;   # green solid line</span><br><span class="line">&#39;--&#39;   # dashed line with default color</span><br><span class="line">&#39;^k:&#39;  # black triangle_up markers connected by a dotted line</span><br></pre></td></tr></table></figure><p><strong>Colors</strong></p><p>The supported color abbreviations are the single letter codes</p><table><thead><tr><th>character</th><th>color</th></tr></thead><tbody><tr><td><code>&#39;b&#39;</code></td><td>blue</td></tr><tr><td><code>&#39;g&#39;</code></td><td>green</td></tr><tr><td><code>&#39;r&#39;</code></td><td>red</td></tr><tr><td><code>&#39;c&#39;</code></td><td>cyan</td></tr><tr><td><code>&#39;m&#39;</code></td><td>magenta</td></tr><tr><td><code>&#39;y&#39;</code></td><td>yellow</td></tr><tr><td><code>&#39;k&#39;</code></td><td>black</td></tr><tr><td><code>&#39;w&#39;</code></td><td>white</td></tr></tbody></table><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>如果只有一个 plot 需要更新，直接返回就好</p><p>否则， updateALL 函数返回 plot 列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">t1, t2 = run_pendulum(<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">200</span>)</span><br><span class="line">xs = list(map(<span class="keyword">lambda</span> i: -sin(i), t1))</span><br><span class="line">ys = list(map(<span class="keyword">lambda</span> i: cos(i), t1))</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">6</span>)) <span class="comment">#</span></span><br><span class="line">ax = plt.gca() <span class="comment"># get current axes</span></span><br><span class="line">plot0, = ax.plot([<span class="number">0</span>,xs[<span class="number">0</span>]], [<span class="number">0</span>, ys[<span class="number">0</span>]], <span class="string">"k"</span>) <span class="comment"># plot the black line</span></span><br><span class="line">plot1, = ax.plot(xs[<span class="number">0</span>], ys[<span class="number">0</span>], marker=<span class="string">'.'</span>, markersize=<span class="number">40</span>, markerfacecolor=<span class="string">'red'</span>) <span class="comment"># plot the red square</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the limits</span></span><br><span class="line">plt.xlim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br><span class="line">plt.ylim((<span class="number">-1.1</span>, <span class="number">1.1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> HTML</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateALL</span><span class="params">(i)</span>:</span></span><br><span class="line">    plot1.set_xdata(xs[i])</span><br><span class="line">    plot1.set_ydata(ys[i])</span><br><span class="line">    plot0.set_xdata([<span class="number">0</span>, xs[i]])</span><br><span class="line">    plot0.set_ydata([<span class="number">0</span>, ys[i]])</span><br><span class="line">    <span class="keyword">return</span> [plot0, plot1]</span><br><span class="line">    </span><br><span class="line">anim = FuncAnimation(fig, updateALL, frames=range(<span class="number">0</span>, <span class="number">200</span>), interval=<span class="number">100</span>, repeat=<span class="literal">True</span>)</span><br><span class="line">HTML(anim.to_html5_video())</span><br></pre></td></tr></table></figure><h3 id="subplot-子图"><a href="#subplot-子图" class="headerlink" title="subplot 子图"></a>subplot 子图</h3><p><img src="https://i.loli.net/2020/08/11/ehdNzQDfJ96CF7s.png" alt="image-20200811162558483"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">121</span>, title=<span class="string">'"Neat" K-Means'</span>)</span><br><span class="line">plt.scatter(x_neat[:,<span class="number">0</span>], x_neat[:,<span class="number">1</span>], c=km_neat)</span><br><span class="line">plt.subplot(<span class="number">122</span>, title=<span class="string">'"Messy" K-Means'</span>)</span><br><span class="line">plt.scatter(x_messy[:,<span class="number">0</span>], x_messy[:,<span class="number">1</span>], c=km_messy)</span><br></pre></td></tr></table></figure><h3 id="设置-legend"><a href="#设置-legend" class="headerlink" title="设置 legend"></a>设置 legend</h3><p>legend 是啥：</p><p><a href="https://zhuanlan.zhihu.com/p/41781440">Matplotlib 系列之「Legend 图例」 - 知乎</a></p><img src="https://i.loli.net/2020/08/11/xRawbpZmgPCt7UT.jpg" alt="img" style="zoom:50%;" /><p>可以同时设置多条线的 legend </p><p>plt.legend(handles=[s1],labels=[‘theta_0=1/2, omega_0=0, n_end=200’],loc=’best’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>, <span class="number">6</span>)) <span class="comment">#</span></span><br><span class="line">ax = plt.gca() <span class="comment"># get current axes</span></span><br><span class="line">ax.set_xlabel(<span class="string">'theta'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'omega'</span>)</span><br><span class="line"><span class="comment"># ax.set_title('theta_0=1/2, omega_0=0, n_end=200')</span></span><br><span class="line">s1 = ax.scatter(t1, t2)</span><br><span class="line">plt.legend(handles=[s1],labels=[<span class="string">'theta_0=1/2, omega_0=0, n_end=200'</span>],loc=<span class="string">'best'</span>)</span><br><span class="line">ax</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>石子游戏</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F.html</id>
    <published>2020-08-09T12:44:09.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="877-石子游戏-力扣（LeetCode）"><a href="#877-石子游戏-力扣（LeetCode）" class="headerlink" title="877. 石子游戏 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/stone-game/">877. 石子游戏 - 力扣（LeetCode）</a></h3><p>一把过，可以的。dp 初始化 0 是因为 gap 0时 dp 为 piles 的值，gap&gt;0时用的是 gap-1 的值，所以 dp 初始化成什么都无所谓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stoneGame</span><span class="params">(self, piles: List[int])</span> -&gt; bool:</span></span><br><span class="line">        n = len(piles)</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="comment"># dp[i][j] = max(piles[i]-dp[i+1][j], piles[j]-dp[i][j-1])# i&lt;j</span></span><br><span class="line">        <span class="comment"># 遍历顺序: 由短到长 dp[0][0] -&gt; dp[0][n-1] gap: 0~n-1</span></span><br><span class="line">        <span class="keyword">for</span> gap <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n-gap):</span><br><span class="line">                j = i+gap</span><br><span class="line">                <span class="keyword">if</span> gap==<span class="number">0</span>: dp[i][j] = piles[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(piles[i]-dp[i+<span class="number">1</span>][j], piles[j]-dp[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># for i in dp: print(i)</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>]&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="1140-石子游戏-II-力扣（LeetCode）"><a href="#1140-石子游戏-II-力扣（LeetCode）" class="headerlink" title="1140. 石子游戏 II - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/stone-game-ii/">1140. 石子游戏 II - 力扣（LeetCode）</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stoneGameII</span><span class="params">(self, piles: List[int])</span> -&gt; int:</span></span><br><span class="line">        piles.reverse() <span class="comment"># 从后往前拿石子, 方便遍历</span></span><br><span class="line">        n = len(piles)</span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 4 4 9 7 2</span></span><br><span class="line">        <span class="comment"># dp[i][m]: 前 i 个石子，M=m 时赢的石子数目 m&gt;=1</span></span><br><span class="line">        <span class="comment"># dp[i][m] = max(sum(piles[i+1-x:i+1])-dp[i-x][max(m, x)] for x in range(1, 2*m+1))</span></span><br><span class="line">        <span class="comment"># 推导公式解释：拿 x(1~2m) 个石子 newM = max(m, x)</span></span><br><span class="line">        <span class="comment"># 遍历顺序: i: 0-&gt;n-1  m:1-&gt;i+1</span></span><br><span class="line">        <span class="comment"># return dp[-1][1]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            _sum = sum(piles[:i+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> <span class="number">2</span>*m&gt;=i+<span class="number">1</span>:</span><br><span class="line">                    dp[i][m] = _sum</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dp[i][m] = max(sum(piles[i+<span class="number">1</span>-x:i+<span class="number">1</span>])-dp[i-x][max([m, x])] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>*m+<span class="number">1</span>))</span><br><span class="line">        <span class="comment"># x+x+a = sum (x+a 比 x 多拿 a 个)</span></span><br><span class="line">        <span class="comment"># x+a = (sum+a)/2</span></span><br><span class="line">        <span class="keyword">return</span> (sum(piles)+dp[<span class="number">-2</span>][<span class="number">1</span>])//<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="1406-石子游戏-III-力扣（LeetCode）"><a href="#1406-石子游戏-III-力扣（LeetCode）" class="headerlink" title="1406. 石子游戏 III - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/stone-game-iii/">1406. 石子游戏 III - 力扣（LeetCode）</a></h3><p>最近写的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stoneGameIII</span><span class="params">(self, stones: List[int])</span> -&gt; str:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(x)</span>:</span></span><br><span class="line">            print(x)</span><br><span class="line">            <span class="keyword">if</span> x&gt;<span class="number">0</span>: <span class="keyword">return</span> <span class="string">'Alice'</span></span><br><span class="line">            <span class="keyword">if</span> x&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="string">'Bob'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Tie'</span></span><br><span class="line"></span><br><span class="line">        n = len(stones)</span><br><span class="line">        nums = stones[::<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># dp[i]: alice 在 i 位置赢得石子数量</span></span><br><span class="line">        <span class="comment"># dp[i] = max(sum(nums[i-j:i+1])-dp[i-j] for j in range(3))</span></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            dp[i+<span class="number">1</span>] = max(sum(nums[i-j:i+<span class="number">1</span>])-dp[i-j] <span class="keyword">for</span> j <span class="keyword">in</span> range(min(n<span class="number">-1</span>, <span class="number">3</span>)))</span><br><span class="line">        <span class="keyword">return</span> score(dp[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>4 月前写的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stoneGameIII</span><span class="params">(self, l: List[int])</span> -&gt; str:</span></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l))]</span><br><span class="line">        dp[<span class="number">-1</span>] = l[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> len(l)&gt;<span class="number">1</span>:</span><br><span class="line">            dp[<span class="number">-2</span>] = max(l[<span class="number">-2</span>]-dp[<span class="number">-1</span>], sum(l[<span class="number">-2</span>:]))</span><br><span class="line">        <span class="keyword">if</span> len(l)&gt;<span class="number">2</span>:</span><br><span class="line">            dp[<span class="number">-3</span>] = max(l[<span class="number">-3</span>]-dp[<span class="number">-2</span>], l[<span class="number">-3</span>]+l[<span class="number">-2</span>]-dp[<span class="number">-1</span>], sum(l[<span class="number">-3</span>:]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)<span class="number">-4</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            dp[i] = max(l[i]-dp[i+<span class="number">1</span>], l[i]+l[i+<span class="number">1</span>]-dp[i+<span class="number">2</span>], l[i]+l[i+<span class="number">1</span>]+l[i+<span class="number">2</span>]-dp[i+<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Alice'</span> <span class="keyword">if</span> dp[<span class="number">0</span>]&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">'Bob'</span> <span class="keyword">if</span> dp[<span class="number">0</span>]&lt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">'Tie'</span></span><br></pre></td></tr></table></figure><p>感觉都有点不好读</p><h3 id="1510-石子游戏-IV-力扣（LeetCode）"><a href="#1510-石子游戏-IV-力扣（LeetCode）" class="headerlink" title="1510. 石子游戏 IV - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/stone-game-iv/">1510. 石子游戏 IV - 力扣（LeetCode）</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">winnerSquareGame</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">        dp = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            j = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j*j&lt;=i:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> dp[i-j*j]:</span><br><span class="line">                    dp[i] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-201</title>
    <link href="https://zronghui.github.io/weekly-contest-201.html"/>
    <id>https://zronghui.github.io/weekly-contest-201.html</id>
    <published>2020-08-09T08:13:35.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/make-the-string-great/">整理字符串</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-kth-bit-in-nth-binary-string/">找出第 N 个二进制字符串中的第 K 位</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/">和为目标值的最大数目不重叠非空子数组数目</a><strong>6</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/minimum-cost-to-cut-a-stick/">切棍子的最小成本</a><strong>7</strong></li></ul><p>公开处刑</p><p><img src="https://i.loli.net/2020/08/09/X9RbtwhnNxVi86q.png" alt="image-20200809191851010"></p><a id="more"></a><p><a href="https://www.bilibili.com/video/av754126490">[LeetCode] Weekly Contest 201 (rank 50)[1544,1545,1546,1547][OTTFF]_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>解释的很好</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeGood</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        stack = []</span><br><span class="line">        t = abs(ord(<span class="string">'a'</span>)-ord(<span class="string">'A'</span>))</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> abs(ord(c)-ord(stack[<span class="number">-1</span>]))==t: stack.pop()</span><br><span class="line">            <span class="keyword">else</span>: stack.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(stack)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.d = &#123;<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">21</span>):</span><br><span class="line">            self.d[i] = self.d[i<span class="number">-1</span>]*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthBit</span><span class="params">(self, n: int, k: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> n==k==<span class="number">1</span>: <span class="keyword">return</span> <span class="string">'0'</span></span><br><span class="line">        a = self.d[n]//<span class="number">2</span> <span class="comment"># length = 2a+1</span></span><br><span class="line">        <span class="keyword">if</span> k==a+<span class="number">1</span>: <span class="keyword">return</span> <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">if</span> k&gt;a: <span class="keyword">return</span> <span class="string">'10'</span>[int(self.findKthBit(n<span class="number">-1</span>, <span class="number">2</span>*a-k+<span class="number">2</span>))]</span><br><span class="line">        <span class="keyword">if</span> k&lt;=a: <span class="keyword">return</span> self.findKthBit(n<span class="number">-1</span>, k)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNonOverlapping</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># -1 3 5 1 4 2 -9</span></span><br><span class="line">        <span class="comment"># -1 2 7 8 12 14 5</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">2</span>)] <span class="comment"># 前 i 个数最多有多少个符合条件的</span></span><br><span class="line">        presum = &#123;<span class="number">0</span>: <span class="number">-2</span>&#125; <span class="comment"># presum: i  0~i 的和为 presum ，i 保留较大的</span></span><br><span class="line">        s = <span class="number">0</span>        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            s += nums[i<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> s-target <span class="keyword">in</span> presum:</span><br><span class="line">                p = presum[s-target]</span><br><span class="line">                dp[i] = max(dp[i<span class="number">-1</span>], dp[p+<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>]</span><br><span class="line">            presum[s] = i<span class="number">-1</span></span><br><span class="line">        <span class="comment"># print(presum, dp)</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCost</span><span class="params">(self, n: int, cuts: List[int])</span> -&gt; int:</span></span><br><span class="line">        cuts.extend([<span class="number">0</span>, n])</span><br><span class="line">        cuts.sort()</span><br><span class="line">        m = len(cuts)</span><br><span class="line">        <span class="comment"># dp[i][j] cut[i]~cut[j] 间最低成本</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i][k]+dp[k][j]+(cuts[j]-cuts[i]))  i&lt;k&lt;j</span></span><br><span class="line">        <span class="comment"># 要求 dp[i][j] 需要 dp[i][k] dp[k][j] 特点： 长度比 j-i 短</span></span><br><span class="line">        <span class="comment"># 所以遍历顺序 从短到长 j-i&lt;2 时 dp 为 0  如 0 1 2 3 中 dp[1][1]=dp[1][2]=0</span></span><br><span class="line">        dp = [[sys.maxsize]*m <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            dp[i][i] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i&gt;<span class="number">0</span>: dp[i][i<span class="number">-1</span>] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i&lt;m<span class="number">-1</span>: dp[i][i+<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> gap <span class="keyword">in</span> range(<span class="number">2</span>, m):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(m-gap):</span><br><span class="line">                j = i+gap</span><br><span class="line">                lenij = cuts[j]-cuts[i]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(i+<span class="number">1</span>, j):</span><br><span class="line">                    dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j]+lenij)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][m<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/make-the-string-great/&quot;&gt;整理字符串&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-kth-bit-in-nth-binary-string/&quot;&gt;找出第 N 个二进制字符串中的第 K 位&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/&quot;&gt;和为目标值的最大数目不重叠非空子数组数目&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/minimum-cost-to-cut-a-stick/&quot;&gt;切棍子的最小成本&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公开处刑&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/09/X9RbtwhnNxVi86q.png&quot; alt=&quot;image-20200809191851010&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-32</title>
    <link href="https://zronghui.github.io/biweekly-contest-32.html"/>
    <id>https://zronghui.github.io/biweekly-contest-32.html</id>
    <published>2020-08-09T00:48:03.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/kth-missing-positive-number/">第 k 个缺失的正整数</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/can-convert-string-in-k-moves/">K 次操作转变字符串</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string/">平衡括号字符串的最少插入次数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-longest-awesome-substring/">找出最长的超赞子字符串</a><strong>6</strong></li></ul><p>菜！</p><p><img src="https://i.loli.net/2020/08/09/Bf1OwNyg4ojLp9z.png" alt="image-20200809084943831"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthPositive</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        s = set(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3000</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt==k: <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canConvertString</span><span class="params">(self, s: str, t: str, k: int)</span> -&gt; bool:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        <span class="keyword">if</span> n!=len(t): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        d = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            diffn = (ord(t[i])-ord(s[i]))%<span class="number">26</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> diffn: <span class="keyword">continue</span></span><br><span class="line">            d[diffn] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (d[diffn]<span class="number">-1</span>)*<span class="number">26</span>+diffn&gt;k: </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/kth-missing-positive-number/&quot;&gt;第 k 个缺失的正整数&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/can-convert-string-in-k-moves/&quot;&gt;K 次操作转变字符串&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string/&quot;&gt;平衡括号字符串的最少插入次数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-longest-awesome-substring/&quot;&gt;找出最长的超赞子字符串&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;菜！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/09/Bf1OwNyg4ojLp9z.png&quot; alt=&quot;image-20200809084943831&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SQL</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/SQL.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/SQL.html</id>
    <published>2020-08-08T10:45:31.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="176-第二高的薪水-力扣（LeetCode）"><a href="#176-第二高的薪水-力扣（LeetCode）" class="headerlink" title="176. 第二高的薪水 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/second-highest-salary/">176. 第二高的薪水 - 力扣（LeetCode）</a></h3><p>ifnull(x，y)，若x不为空则返回x，否则返回y，这道题y=null<br>limit x，y </p><p>limit x offset y == limit x, y</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span></span><br><span class="line">    ((<span class="keyword">select</span> <span class="keyword">distinct</span> salary</span><br><span class="line">     <span class="keyword">from</span> Employee</span><br><span class="line">     <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">     <span class="keyword">limit</span> <span class="number">1</span>, <span class="number">1</span>), <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">as</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>递增序列</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html</id>
    <published>2020-08-08T06:23:40.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="300-最长上升子序列-力扣（LeetCode）"><a href="#300-最长上升子序列-力扣（LeetCode）" class="headerlink" title="300. 最长上升子序列 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">300. 最长上升子序列 - 力扣（LeetCode）</a></h3><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-er-fen-cha-zhao-tan-xin-suan-fa-p/">动态规划 、优化（以贪心和二分作为子过程） - 最长上升子序列 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">        dp = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j]&lt;nums[i]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j]+<span class="number">1</span>)</span><br><span class="line">                    res = max(res, dp[i])</span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-er-fen-cha-zhao-tan-xin-suan-fa-p/">动态规划 、优化（以贪心和二分作为子过程） - 最长上升子序列 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-she-ji-fang-fa-zhi-pai-you-xi-jia/">动态规划设计方法&amp;&amp;纸牌游戏讲解二分解法 - 最长上升子序列 - 力扣（LeetCode）</a></p><p>看到 2 种优化思路，虽然都是二分，但是感觉第一种好理解一些，第二种太扯了</p><p><strong><code>tail[i]</code> 表示长度为 <code>i+1</code> 的</strong>所有<strong>上升子序列的结尾的最小值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left, insort</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">        tails = [nums[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            idx = bisect_left(tails, nums[i])</span><br><span class="line">            <span class="keyword">if</span> idx==len(tails): tails.append(nums[i])</span><br><span class="line">            <span class="keyword">else</span>: tails[idx] = min(tails[idx], nums[i])</span><br><span class="line">        <span class="comment"># print(tails)</span></span><br><span class="line">        <span class="keyword">return</span> len(tails)</span><br></pre></td></tr></table></figure><h3 id="673-最长递增子序列的个数-力扣（LeetCode）"><a href="#673-最长递增子序列的个数-力扣（LeetCode）" class="headerlink" title="673. 最长递增子序列的个数 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/">673. 最长递增子序列的个数 - 力扣（LeetCode）</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNumberOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">        dp = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 以 i 结尾的最长序列的长度</span></span><br><span class="line">        count = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># i 位置最长序列个数</span></span><br><span class="line">        m = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j]&lt;nums[i]:</span><br><span class="line">                    m = max(m, dp[j]+<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> dp[j]+<span class="number">1</span>&gt;dp[i]:</span><br><span class="line">                        dp[i] = dp[j]+<span class="number">1</span></span><br><span class="line">                        count[i] = count[j]</span><br><span class="line">                    <span class="keyword">elif</span> dp[j]+<span class="number">1</span>==dp[i]:</span><br><span class="line">                        count[i] += count[j]</span><br><span class="line">        <span class="comment"># print(nums)</span></span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="comment"># print(count)</span></span><br><span class="line">        <span class="keyword">return</span> sum(count[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n) <span class="keyword">if</span> dp[i]==m)</span><br></pre></td></tr></table></figure><h3 id="354-俄罗斯套娃信封问题-力扣（LeetCode）"><a href="#354-俄罗斯套娃信封问题-力扣（LeetCode）" class="headerlink" title="354. 俄罗斯套娃信封问题 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/submissions/">354. 俄罗斯套娃信封问题 - 力扣（LeetCode）</a></h3><p><a href="https://leetcode-cn.com/problems/russian-doll-envelopes/solution/zui-chang-di-zeng-zi-xu-lie-kuo-zhan-dao-er-wei-er/">最长递增子序列扩展到二维而已 - 俄罗斯套娃信封问题 - 力扣（LeetCode）</a></p><p>宽度 w 升序排序，如果遇到 w 相同的情况，则按照高度 h 降序排序.之后把所有的 h 作为一个数组，在这个数组上计算 LIS 的长度就是答案</p><img src="https://i.loli.net/2020/08/08/gDHSBoWCQi1ntqf.png" alt="image-20200808150728950" style="zoom:33%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect_left</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxEnvelopes</span><span class="params">(self, envelopes: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 宽度 w 升序排序，如果遇到 w 相同的情况，则按照高度 h 降序排序</span></span><br><span class="line">        <span class="comment"># 之后把所有的 h 作为一个数组，在这个数组上计算 LIS 的长度就是答案</span></span><br><span class="line">        envelopes.sort(key=<span class="keyword">lambda</span> i: (i[<span class="number">0</span>], -i[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># print(envelopes)</span></span><br><span class="line">        <span class="keyword">return</span> self.lengthOfLIS([i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> envelopes])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">        tails = [nums[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            idx = bisect_left(tails, num)</span><br><span class="line">            <span class="keyword">if</span> idx==len(tails): tails.append(num)</span><br><span class="line">            <span class="keyword">else</span>: tails[idx] = min(tails[idx], num)</span><br><span class="line">        <span class="comment"># print(tails)</span></span><br><span class="line">        <span class="keyword">return</span> len(tails)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>统计矩形</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%BB%9F%E8%AE%A1%E7%9F%A9%E5%BD%A2.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E7%BB%9F%E8%AE%A1%E7%9F%A9%E5%BD%A2.html</id>
    <published>2020-08-08T02:29:27.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="221-最大正方形-力扣（LeetCode）"><a href="#221-最大正方形-力扣（LeetCode）" class="headerlink" title="221. 最大正方形 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/maximal-square/">221. 最大正方形 - 力扣（LeetCode）</a></h3><p><a href="https://leetcode-cn.com/problems/maximal-square/solution/li-jie-san-zhe-qu-zui-xiao-1-by-lzhlyle/">理解 三者取最小+1 - 最大正方形 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span><span class="params">(self, matrix: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])+1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n, m = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> matrix[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="string">'0'</span>:</span><br><span class="line">                    dp[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])+<span class="number">1</span></span><br><span class="line">                    res = max(res, dp[i][j])</span><br><span class="line">        <span class="comment"># for i in dp: print(i)</span></span><br><span class="line">        <span class="keyword">return</span> res*res</span><br></pre></td></tr></table></figure><h3 id="1277-统计全为-1-的正方形子矩阵-力扣（LeetCode）"><a href="#1277-统计全为-1-的正方形子矩阵-力扣（LeetCode）" class="headerlink" title="1277. 统计全为 1 的正方形子矩阵 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/">1277. 统计全为 1 的正方形子矩阵 - 力扣（LeetCode）</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSquares</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp[i][j]: 以 i,j 位置为右下角的最大正方形边长</span></span><br><span class="line">        <span class="comment"># dp[i][j] 同时也是以 i,j 位置为右下角的正方形个数</span></span><br><span class="line">        <span class="comment"># dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])+1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n, m = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> matrix[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])+<span class="number">1</span></span><br><span class="line">                    res += dp[i][j]</span><br><span class="line">        <span class="comment"># for i in dp: print(i)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="1504-统计全-1-子矩形-力扣（LeetCode）"><a href="#1504-统计全-1-子矩形-力扣（LeetCode）" class="headerlink" title="1504. 统计全 1 子矩形 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/count-submatrices-with-all-ones/">1504. 统计全 1 子矩形 - 力扣（LeetCode）</a></h3><p><a href="https://leetcode-cn.com/problems/count-submatrices-with-all-ones/solution/5454-tong-ji-quan-1-zi-ju-xing-by-lin-miao-miao/">5454. 统计全 1 子矩形 - 统计全 1 子矩形 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSubmat</span><span class="params">(self, mat: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> mat <span class="keyword">or</span> <span class="keyword">not</span> mat[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># left[i][j]: (i.j)统计他这行左边到他这个位置最多有几个连续的1</span></span><br><span class="line">        <span class="comment"># 对于每个点(i.j)，我们固定子矩形的右下角为(i.j)，利用left从该行i向上寻找子矩阵左上角为第k行的矩阵个数。每次将子矩阵个数加到答案中即可</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        n, m = len(mat), len(mat[<span class="number">0</span>])</span><br><span class="line">        left = [[<span class="number">0</span>]*(m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> mat[i<span class="number">-1</span>][j<span class="number">-1</span>]==<span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">                left[i][j] = left[i][j<span class="number">-1</span>]+<span class="number">1</span></span><br><span class="line">                _min = left[i][j]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> reversed(range(i+<span class="number">1</span>)):</span><br><span class="line">                    _min = min(_min, left[k][j])</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> _min: <span class="keyword">break</span></span><br><span class="line">                    res += _min</span><br><span class="line">        <span class="comment"># for i in mat: print(i)</span></span><br><span class="line">        <span class="comment"># for i in left: print(i)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="1139-最大的以-1-为边界的正方形-力扣（LeetCode）"><a href="#1139-最大的以-1-为边界的正方形-力扣（LeetCode）" class="headerlink" title="1139. 最大的以 1 为边界的正方形 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/largest-1-bordered-square/">1139. 最大的以 1 为边界的正方形 - 力扣（LeetCode）</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largest1BorderedSquare</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 记录 i,j 位置 向左、向上 有多少连续的 1</span></span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        l = [[[<span class="number">0</span>, <span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> grid[i<span class="number">-1</span>][j<span class="number">-1</span>]: <span class="keyword">continue</span></span><br><span class="line">                l[i][j][<span class="number">0</span>] += l[i][j<span class="number">-1</span>][<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">                l[i][j][<span class="number">1</span>] += l[i<span class="number">-1</span>][j][<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> reversed(range(min(l[i][j]))):</span><br><span class="line">                    <span class="keyword">if</span> min(l[i-k][j][<span class="number">0</span>], l[i][j-k][<span class="number">1</span>])&gt;=k+<span class="number">1</span>:</span><br><span class="line">                        res = max(res, k+<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># for i in grid: print(i)</span></span><br><span class="line">        <span class="comment"># for i in l: print(i)</span></span><br><span class="line">        <span class="keyword">return</span> res*res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 778. Swim in Rising Water</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-778-Swim-in-Rising-Water.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-778-Swim-in-Rising-Water.html</id>
    <published>2020-08-06T11:27:31.000Z</published>
    <updated>2020-08-07T14:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/swim-in-rising-water/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/swim-in-rising-water/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>On an N x N <code>grid</code>, each square <code>grid[i][j]</code> represents the elevation at that<br>point <code>(i,j)</code>.</p><p>Now rain starts to fall. At time <code>t</code>, the depth of the water everywhere is<br><code>t</code>. You can swim from a square to another 4-directionally adjacent square if<br>and only if the elevation of both squares individually are at most <code>t</code>. You<br>can swim infinite distance in zero time. Of course, you must stay within the<br>boundaries of the grid during your swim.</p><p>You start at the top left square <code>(0, 0)</code>. What is the least time until you<br>can reach the bottom right square <code>(N-1, N-1)</code>?</p><p><strong>Example 1:</strong></p><pre><code>Input: [[0,2],[1,3]]Output: 3Explanation:At time 0, you are in grid location (0, 0).You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.You cannot reach point (1, 1) until time 3.When the depth of water is 3, we can swim anywhere inside the grid.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]Output: 16Explanation:**0  1  2  3  4**24 23 22 21  **5****12 13 14 15 16****11** 17 18 19 20**10  9  8  7  6**The final route is marked in bold.We need to wait until time 16 so that (0, 0) and (4, 4) are connected.</code></pre><p><strong>Note:</strong></p><ol><li><code>2 &lt;= N &lt;= 50</code>.</li><li>grid[i][j] is a permutation of [0, …, N*N - 1].</li></ol><p><strong>Tags:</strong> Binary Search, Heap, Depth-first Search, Union Find</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/swim-in-rising-water/solution/you-xian-dui-lie-fa-yi-ji-wei-he-hui-xiang-dao-you/">优先队列法，以及为何会想到优先队列法 - 水位上升的泳池中游泳 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> insort</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swimInWater</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        l = deque() <span class="comment"># (value, i, j), ,</span></span><br><span class="line">        l.append((grid[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        n = len(grid)</span><br><span class="line">        visited = [[<span class="literal">False</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">while</span> l:</span><br><span class="line">            v, i, j = l.popleft()</span><br><span class="line">            visited[i][j] = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># print(v)</span></span><br><span class="line">            res = max(v, res)</span><br><span class="line">            <span class="keyword">if</span> i==j==n<span class="number">-1</span>: <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">for</span> di, dj <span class="keyword">in</span> [[<span class="number">0</span>, <span class="number">1</span>],[<span class="number">0</span>, <span class="number">-1</span>],[<span class="number">1</span>, <span class="number">0</span>],[<span class="number">-1</span>, <span class="number">0</span>]]:</span><br><span class="line">                ii, jj = i+di, j+dj</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;=ii&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=jj&lt;n <span class="keyword">and</span> <span class="keyword">not</span> visited[ii][jj]:</span><br><span class="line">                    insort(l, [grid[ii][jj], ii, jj])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/swim-in-rising-water/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/swim-in-rising-water/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;On an N x N &lt;code&gt;grid&lt;/code&gt;, each square &lt;code&gt;grid[i][j]&lt;/code&gt; represents the elevation at that&lt;br&gt;point &lt;code&gt;(i,j)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now rain starts to fall. At time &lt;code&gt;t&lt;/code&gt;, the depth of the water everywhere is&lt;br&gt;&lt;code&gt;t&lt;/code&gt;. You can swim from a square to another 4-directionally adjacent square if&lt;br&gt;and only if the elevation of both squares individually are at most &lt;code&gt;t&lt;/code&gt;. You&lt;br&gt;can swim infinite distance in zero time. Of course, you must stay within the&lt;br&gt;boundaries of the grid during your swim.&lt;/p&gt;
&lt;p&gt;You start at the top left square &lt;code&gt;(0, 0)&lt;/code&gt;. What is the least time until you&lt;br&gt;can reach the bottom right square &lt;code&gt;(N-1, N-1)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.

You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation:
**0  1  2  3  4**
24 23 22 21  **5**
**12 13 14 15 16**
**11** 17 18 19 20
**10  9  8  7  6**

The final route is marked in bold.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= N &amp;lt;= 50&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;grid[i][j] is a permutation of [0, …, N*N - 1].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Binary Search, Heap, Depth-first Search, Union Find&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Depth-first Search" scheme="https://zronghui.github.io/tags/Depth-first-Search/"/>
    
      <category term="Union Find" scheme="https://zronghui.github.io/tags/Union-Find/"/>
    
      <category term="Binary Search" scheme="https://zronghui.github.io/tags/Binary-Search/"/>
    
      <category term="Heap" scheme="https://zronghui.github.io/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%B9%B6%E6%9F%A5%E9%9B%86.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%B9%B6%E6%9F%A5%E9%9B%86.html</id>
    <published>2020-08-05T09:08:28.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="721-账户合并-力扣（LeetCode）"><a href="#721-账户合并-力扣（LeetCode）" class="headerlink" title="721. 账户合并 - 力扣（LeetCode）"></a>721. 账户合并 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/accounts-merge/submissions/">721. 账户合并 - 力扣（LeetCode）</a><br><a href="https://leetcode.com/articles/accounts-merge/">Accounts Merge - LeetCode Articles</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = list(range(<span class="number">10001</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]: x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x)==self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accountsMerge</span><span class="params">(self, accounts: List[List[str]])</span> -&gt; List[List[str]]:</span></span><br><span class="line">        <span class="comment"># 并查集</span></span><br><span class="line">        dsu = DSU()</span><br><span class="line">        email_id, email_name = &#123;&#125;, &#123;&#125;</span><br><span class="line">        <span class="comment"># account 里都在一个集合里</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> accounts:</span><br><span class="line">            name = l[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> email <span class="keyword">in</span> l[<span class="number">1</span>:]:</span><br><span class="line">                email_name[email] = name</span><br><span class="line">                <span class="keyword">if</span> email <span class="keyword">not</span> <span class="keyword">in</span> email_id:</span><br><span class="line">                    email_id[email] = i</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                dsu.union(email_id[l[<span class="number">1</span>]], email_id[email])</span><br><span class="line">        ans = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> email_name:</span><br><span class="line">            ans[dsu.find(email_id[email])].append(email)</span><br><span class="line">        <span class="keyword">return</span> [[email_name[i[<span class="number">0</span>]], *sorted(i)] <span class="keyword">for</span> i <span class="keyword">in</span> ans.values()]</span><br></pre></td></tr></table></figure><h3 id="684-冗余连接-力扣（LeetCode）"><a href="#684-冗余连接-力扣（LeetCode）" class="headerlink" title="684. 冗余连接 - 力扣（LeetCode）"></a>684. 冗余连接 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/redundant-connection/comments/">684. 冗余连接 - 力扣（LeetCode）</a></p><p><a href="https://leetcode-cn.com/problems/redundant-connection/solution/tong-su-jiang-jie-bing-cha-ji-bang-zhu-xiao-bai-ku/">通俗讲解并查集，帮助小白快速理解 - 冗余连接 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""并查集"""</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    记录1到N的每个数的根，因为如果有环，导致环相连的[u, v]一定有相同的root，</span></span><br><span class="line"><span class="string">    我们可以理解为是一个节点的两个分支，通过[u,v]被连起来了，既然他们是一个节点的两个分支，那么他们一定有相同的root，所以直接移除[u,v]就好啦。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRedundantConnection</span><span class="params">(self, edges: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        root = list(range(len(edges)+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> i!=root[i]:</span><br><span class="line">                i = root[i]</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> edges:</span><br><span class="line">            uroot, vroot = map(find, [u, v])</span><br><span class="line">            <span class="keyword">if</span> uroot!=vroot:</span><br><span class="line">                root[uroot] = vroot</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> [u, v]</span><br></pre></td></tr></table></figure><h3 id="399-除法求值-力扣（LeetCode）"><a href="#399-除法求值-力扣（LeetCode）" class="headerlink" title="399. 除法求值 - 力扣（LeetCode）"></a>399. 除法求值 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/evaluate-division/">399. 除法求值 - 力扣（LeetCode）</a></p><h4 id="flyod"><a href="#flyod" class="headerlink" title="flyod"></a>flyod</h4><p>不是用索引表示的 edges</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcEquation</span><span class="params">(self, equations: List[List[str]], values: List[float], queries: List[List[str]])</span> -&gt; List[float]:</span></span><br><span class="line">        <span class="comment"># flyod</span></span><br><span class="line">        edges = collections.defaultdict(dict)</span><br><span class="line">        verts = set()</span><br><span class="line">        <span class="keyword">for</span> (a, b), c <span class="keyword">in</span> zip(equations, values):</span><br><span class="line">            edges[a][b] = c</span><br><span class="line">            edges[b][a] = <span class="number">1</span>/c</span><br><span class="line">            verts.add(a)</span><br><span class="line">            verts.add(b)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> verts:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> verts:</span><br><span class="line">                <span class="keyword">if</span> i==k: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> verts:</span><br><span class="line">                    <span class="comment"># 若存在 edges[i][j] 不用再计算一遍</span></span><br><span class="line">                    <span class="keyword">if</span> j <span class="keyword">in</span> [i, k] <span class="keyword">or</span> j <span class="keyword">in</span> edges[i]: <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># 同时存在 edges[i][k] edges[k][j] 时更新</span></span><br><span class="line">                    <span class="keyword">if</span> k <span class="keyword">in</span> edges[i] <span class="keyword">and</span> j <span class="keyword">in</span> edges[k]:</span><br><span class="line">                        edges[i][j] = edges[i][k]*edges[k][j]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> queries:</span><br><span class="line">            <span class="keyword">if</span> a==b <span class="keyword">and</span> a <span class="keyword">in</span> verts <span class="keyword">and</span> b <span class="keyword">in</span> verts: res.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> a <span class="keyword">in</span> edges <span class="keyword">and</span> b <span class="keyword">in</span> edges[a]: res.append(edges[a][b])</span><br><span class="line">            <span class="keyword">else</span>: res.append(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcEquation</span><span class="params">(self, equations: List[List[str]], values: List[float], queries: List[List[str]])</span> -&gt; List[float]:</span></span><br><span class="line">        <span class="comment"># dfs</span></span><br><span class="line">        edges = collections.defaultdict(dict)</span><br><span class="line">        verts = set()</span><br><span class="line">        <span class="keyword">for</span> (a, b), c <span class="keyword">in</span> zip(equations, values):</span><br><span class="line">            edges[a][b] = c</span><br><span class="line">            edges[b][a] = <span class="number">1</span>/c</span><br><span class="line">            verts.add(a)</span><br><span class="line">            verts.add(b)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(s, t)</span>:</span></span><br><span class="line">            visited.add(s)</span><br><span class="line">            <span class="keyword">if</span> t <span class="keyword">in</span> edges[s]: <span class="keyword">return</span> edges[s][t]</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> edges[s]:</span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    temp = dfs(node, t)</span><br><span class="line">                    <span class="keyword">if</span> temp!=<span class="number">-1</span>:</span><br><span class="line">                        edges[s][t] = edges[s][node]*temp</span><br><span class="line">                        <span class="keyword">return</span> edges[s][t]</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> queries:</span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">in</span> verts <span class="keyword">and</span> b <span class="keyword">in</span> verts:</span><br><span class="line">                <span class="keyword">if</span> a==b:res.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    visited = set()</span><br><span class="line">                    res.append(dfs(a, b))</span><br><span class="line">            <span class="keyword">else</span>: res.append(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="785-判断二分图-力扣（LeetCode）"><a href="#785-判断二分图-力扣（LeetCode）" class="headerlink" title="785. 判断二分图 - 力扣（LeetCode）"></a>785. 判断二分图 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/">785. 判断二分图 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/is-graph-bipartite/solution/bfs-dfs-bing-cha-ji-san-chong-fang-fa-pan-duan-er-/">BFS + DFS + 并查集，三种方法判断二分图 - 判断二分图 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBipartite</span><span class="params">(self, graph: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 染色+xfs 或 并查集</span></span><br><span class="line">        <span class="comment"># 图中每个顶点的所有邻接点都应该属于同一集合，且不与顶点处于同一集合</span></span><br><span class="line">        n = len(graph)</span><br><span class="line">        l = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 0 没访问，1 -1 表示2种颜色</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="comment"># 染过色了，跳过</span></span><br><span class="line">            <span class="keyword">if</span> l[i]: <span class="keyword">continue</span></span><br><span class="line">            l[i] = <span class="number">1</span> <span class="comment"># 随便染个 1</span></span><br><span class="line">            <span class="comment"># i 染色后，把相关的所有节点都染上色</span></span><br><span class="line">            queue.append(i)</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                v = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> w <span class="keyword">in</span> graph[v]:</span><br><span class="line">                    <span class="keyword">if</span> l[w]==<span class="number">0</span>:</span><br><span class="line">                        l[w] = -l[v]</span><br><span class="line">                        queue.append(w)</span><br><span class="line">                    <span class="keyword">elif</span> l[w]==l[v]: <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 已经染的色不对劲</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>学会后，并查集还是很好写的，毕竟一半都是模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = list(range(<span class="number">101</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBipartite</span><span class="params">(self, graph: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 并查集</span></span><br><span class="line">        dsu = DSU()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(graph)):</span><br><span class="line">            <span class="keyword">if</span> len(graph[i])==<span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># graph[i] 是 i 顶点的所有邻接点，他们属于同一个集合</span></span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> graph[i]:</span><br><span class="line">                dsu.union(graph[i][<span class="number">0</span>], node)</span><br><span class="line">            <span class="comment"># 但是 i 与他们不是一个集合</span></span><br><span class="line">            <span class="keyword">if</span> dsu.same(i, graph[i][<span class="number">0</span>]): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>相似的一道题</p><h3 id="886-可能的二分法-力扣（LeetCode）"><a href="#886-可能的二分法-力扣（LeetCode）" class="headerlink" title="886. 可能的二分法 - 力扣（LeetCode）"></a><a href="https://leetcode-cn.com/problems/possible-bipartition/">886. 可能的二分法 - 力扣（LeetCode）</a></h3><p>染色还是快很多的</p><p><img src="https://i.loli.net/2020/08/11/LseqQhjKOCMWawt.png" alt="image-20200811105513575"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        u, v = self.find(x), self.find(y)</span><br><span class="line">        <span class="keyword">if</span> v!=u:</span><br><span class="line">            self.n -= <span class="number">1</span></span><br><span class="line">            self.p[u] = v</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">possibleBipartition</span><span class="params">(self, N: int, dislikes: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> N==<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> dislikes: <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># 有意思吗？说好的分成 2 组的</span></span><br><span class="line">        dsu = DSU(N+<span class="number">1</span>)</span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> dislikes:</span><br><span class="line">            d[a].append(b)</span><br><span class="line">            d[b].append(a)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">            h = d[i][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> d[i][<span class="number">1</span>:]:</span><br><span class="line">                dsu.union(h, j)</span><br><span class="line">            <span class="keyword">if</span> dsu.same(i, h): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> dsu.n&gt;=<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">possibleBipartition</span><span class="params">(self, N: int, dislikes: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> N==<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">not</span> dislikes: <span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># 有意思吗？说好的分成 2 组的</span></span><br><span class="line">        l = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> dislikes:</span><br><span class="line">            d[a].append(b)</span><br><span class="line">            d[b].append(a)</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> l[i]: <span class="keyword">continue</span></span><br><span class="line">            l[i] = <span class="number">1</span></span><br><span class="line">            queue.append(i)</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                cur = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> d[cur]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> l[j]:</span><br><span class="line">                        l[j] = -l[cur]</span><br><span class="line">                        queue.append(j)</span><br><span class="line">                    <span class="keyword">elif</span> l[j]==l[cur]: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="959-由斜杠划分区域-力扣（LeetCode）"><a href="#959-由斜杠划分区域-力扣（LeetCode）" class="headerlink" title="959. 由斜杠划分区域 - 力扣（LeetCode）"></a>959. 由斜杠划分区域 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/regions-cut-by-slashes/submissions/">959. 由斜杠划分区域 - 力扣（LeetCode）</a></p><p>‘\\‘ \ 有转义的作用，需要写 2 个(md 里为了写 2 个\ 需要写 4 个\)</p><h4 id="并查集-1"><a href="#并查集-1" class="headerlink" title="并查集"></a>并查集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = list(range(<span class="number">30</span>*<span class="number">30</span>*<span class="number">4</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x)==self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">regionsBySlashes</span><span class="params">(self, grid: List[str])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 并查集</span></span><br><span class="line">        <span class="comment"># 1格 划分为 0123 4个小区间:</span></span><br><span class="line">        <span class="comment"># \ 0 /</span></span><br><span class="line">        <span class="comment"># 1 x 3 </span></span><br><span class="line">        <span class="comment"># / 2 \</span></span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        dsu = DSU()</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">idx</span><span class="params">(i, j, t)</span>:</span></span><br><span class="line">            <span class="comment"># 返回 i, j 位置的区块在 t(0-3) 的索引</span></span><br><span class="line">            <span class="comment"># 前面有 i 行，左边有 j 大格</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>*(m*i+j)+t</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="comment"># 当前格的0和上一行的格的2一定相连</span></span><br><span class="line">                <span class="keyword">if</span> i&gt;<span class="number">0</span>: dsu.union(idx(i, j, <span class="number">0</span>), idx(i<span class="number">-1</span>, j, <span class="number">2</span>))</span><br><span class="line">                <span class="comment"># 当前格的1和上一列的格的3一定相连</span></span><br><span class="line">                <span class="keyword">if</span> j&gt;<span class="number">0</span>: dsu.union(idx(i, j, <span class="number">1</span>), idx(i, j<span class="number">-1</span>, <span class="number">3</span>))</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">'/'</span>:</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">0</span>), idx(i, j, <span class="number">1</span>))</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">2</span>), idx(i, j, <span class="number">3</span>))</span><br><span class="line">                <span class="keyword">elif</span> grid[i][j]==<span class="string">'\\'</span>:</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">0</span>), idx(i, j, <span class="number">3</span>))</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">1</span>), idx(i, j, <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">elif</span> grid[i][j]==<span class="string">' '</span>:</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">0</span>), idx(i, j, <span class="number">1</span>))</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">2</span>), idx(i, j, <span class="number">3</span>))</span><br><span class="line">                    dsu.union(idx(i, j, <span class="number">0</span>), idx(i, j, <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> len(set(dsu.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n*m*<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h4 id="问题转化"><a href="#问题转化" class="headerlink" title="问题转化"></a>问题转化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGrid</span><span class="params">(grid)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> grid:</span><br><span class="line">        print(l)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">regionsBySlashes</span><span class="params">(self, grid: List[str])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 并查集没学过，有点难</span></span><br><span class="line">        <span class="comment"># 取巧的办法</span></span><br><span class="line">        <span class="comment"># / 转换成  \ 转换成</span></span><br><span class="line">        <span class="comment"># 0 0 1   1 0 0</span></span><br><span class="line">        <span class="comment"># 0 1 0   0 1 0</span></span><br><span class="line">        <span class="comment"># 1 0 0   0 0 1</span></span><br><span class="line">        <span class="comment"># 再查找 0 组成的岛屿</span></span><br><span class="line">        <span class="comment"># 思路是不难了，但是解题过程也挺复杂</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">islandNum</span><span class="params">(grid)</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i, j)</span>:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span>&lt;=i&lt;n <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span>&lt;=j&lt;n <span class="keyword">or</span> grid[i][j]==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                grid[i][j] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> di, dj <span class="keyword">in</span> [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">0</span>]]:</span><br><span class="line">                    dfs(i+di, j+dj)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            n = len(grid)</span><br><span class="line">            <span class="keyword">return</span> sum(dfs(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> range(n) <span class="keyword">for</span> j <span class="keyword">in</span> range(n))</span><br><span class="line"></span><br><span class="line">        n = len(grid)</span><br><span class="line">        grid3 = [[<span class="number">0</span>]*(<span class="number">3</span>*n) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>*n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">'/'</span>:</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                        grid3[<span class="number">3</span>*i+k][<span class="number">3</span>*j+<span class="number">2</span>-k] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> grid[i][j]==<span class="string">'\\'</span>:</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                        grid3[<span class="number">3</span>*i+k][<span class="number">3</span>*j+k] = <span class="number">1</span></span><br><span class="line">        printGrid(grid3)</span><br><span class="line">        <span class="keyword">return</span> islandNum(grid3)</span><br></pre></td></tr></table></figure><h3 id="947-移除最多的同行或同列石头-力扣（LeetCode）"><a href="#947-移除最多的同行或同列石头-力扣（LeetCode）" class="headerlink" title="947. 移除最多的同行或同列石头 - 力扣（LeetCode）"></a>947. 移除最多的同行或同列石头 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/submissions/">947. 移除最多的同行或同列石头 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = list(range(<span class="number">1000</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeStones</span><span class="params">(self, stones: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 并查集的题目都这么难懂吗, 题意理解，见↓</span></span><br><span class="line">        <span class="comment"># [Python，DFS解法，用时仅为68ms，大量注释 - 移除最多的同行或同列石头 - 力扣（LeetCode）]</span></span><br><span class="line">        <span class="comment"># (https://leetcode-cn.com/problems/most-stones-removed-with-same-row-or-column/solution/pythondfsjie-fa-yong-shi-jin-wei-68msda-liang-zhu-/)</span></span><br><span class="line">        <span class="comment"># 横坐标 或 纵坐标 相等即为连通</span></span><br><span class="line">        <span class="comment"># 对于任何容量为n 的一个连通分量，最后剩下 1 个石头，即可以移除的石头数都为n-1</span></span><br><span class="line">        <span class="comment"># 可以移走的石头数 = 总石头数 - 剩余石头数 = stones列表长度 - 连通分量个数</span></span><br><span class="line">        di, dj = &#123;&#125;, &#123;&#125; <span class="comment"># 同 i 或 同 j 的点, 记录一个就好</span></span><br><span class="line">        <span class="comment"># d = defaultdict(dict) # d[i][j] = idx # ij -&gt; dsu 的索引</span></span><br><span class="line">        dsu = DSU()</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> stones:</span><br><span class="line">            <span class="comment"># i 行已经有元素的话，与那个元素合并</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> di: dsu.union(idx, di[i])</span><br><span class="line">            <span class="keyword">else</span>: di[i] = idx</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> dj: dsu.union(idx, dj[j])</span><br><span class="line">            <span class="keyword">else</span>: dj[j] = idx</span><br><span class="line"></span><br><span class="line">            <span class="comment"># d[i][j] = idx</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> len(stones)-len(set(dsu.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(idx)))</span><br></pre></td></tr></table></figure><h3 id="990-等式方程的可满足性-力扣（LeetCode）"><a href="#990-等式方程的可满足性-力扣（LeetCode）" class="headerlink" title="990. 等式方程的可满足性 - 力扣（LeetCode）"></a>990. 等式方程的可满足性 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/submissions/">990. 等式方程的可满足性 - 力扣（LeetCode）</a></p><p>不知为什么，我的并查集一直挺慢的</p><p>看其他解答里有个路径压缩，不知道是什么意思</p><p><img src="https://i.loli.net/2020/08/05/nEkIJP5tsApYUBG.png" alt="image-20200805172512601"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = list(range(<span class="number">26</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">equationsPossible</span><span class="params">(self, equations: List[str])</span> -&gt; bool:</span></span><br><span class="line">        dsu = DSU()</span><br><span class="line">        <span class="comment"># 先遍历一遍，处理 ==</span></span><br><span class="line">        <span class="keyword">for</span> a, t, _, b <span class="keyword">in</span> equations:</span><br><span class="line">            a, b = ord(a)-ord(<span class="string">'a'</span>), ord(b)-ord(<span class="string">'a'</span>)</span><br><span class="line">            <span class="keyword">if</span> t==<span class="string">'!'</span>:</span><br><span class="line">                <span class="keyword">if</span> dsu.find(a)==dsu.find(b): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dsu.union(a, b)</span><br><span class="line">        <span class="keyword">for</span> a, t, _, b <span class="keyword">in</span> equations:</span><br><span class="line">            <span class="keyword">if</span> t==<span class="string">'='</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> dsu.find(ord(a)-ord(<span class="string">'a'</span>))==dsu.find(ord(b)-ord(<span class="string">'a'</span>)): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.p[self.p[x]] <span class="comment"># 隔代路径压缩</span></span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="1319-连通网络的操作次数-力扣（LeetCode）"><a href="#1319-连通网络的操作次数-力扣（LeetCode）" class="headerlink" title="1319. 连通网络的操作次数 - 力扣（LeetCode）"></a>1319. 连通网络的操作次数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/submissions/">1319. 连通网络的操作次数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeConnected</span><span class="params">(self, n: int, connections: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 最少 n-1 根线</span></span><br><span class="line">        <span class="keyword">if</span> len(connections)&lt;n<span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># return x-1  x:x个集群</span></span><br><span class="line">        dsu = DSU(n)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> connections:</span><br><span class="line">            dsu.union(a, b)</span><br><span class="line">        <span class="keyword">return</span> len(set(dsu.find(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)))<span class="number">-1</span></span><br></pre></td></tr></table></figure><p>改进，在 dsu 里面维护连通分量的个数 n, 合并一个n就减一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">        self.n = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        px, py = map(self.find, (x, y))</span><br><span class="line">        <span class="keyword">if</span> px!=py:</span><br><span class="line">            self.p[px] = py</span><br><span class="line">            self.n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeConnected</span><span class="params">(self, n: int, connections: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 最少 n-1 根线</span></span><br><span class="line">        <span class="keyword">if</span> len(connections)&lt;n<span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># return x-1  x:x个连通分量</span></span><br><span class="line">        dsu = DSU(n)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> connections:</span><br><span class="line">            dsu.union(a, b)</span><br><span class="line">        <span class="comment"># return len(set(dsu.find(i) for i in range(n)))-1</span></span><br><span class="line">        <span class="keyword">return</span> dsu.n<span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="1202-交换字符串中的元素-力扣（LeetCode）"><a href="#1202-交换字符串中的元素-力扣（LeetCode）" class="headerlink" title="1202. 交换字符串中的元素 - 力扣（LeetCode）"></a>1202. 交换字符串中的元素 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/smallest-string-with-swaps/submissions/">1202. 交换字符串中的元素 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestStringWithSwaps</span><span class="params">(self, s: str, pairs: List[List[int]])</span> -&gt; str:</span></span><br><span class="line">        <span class="comment"># 连通分量内字母排序</span></span><br><span class="line">        dsu = DSU(len(s))</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pairs:</span><br><span class="line">            dsu.union(a, b)</span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            d[dsu.find(i)].append(s[i])</span><br><span class="line">        <span class="keyword">for</span> root <span class="keyword">in</span> d:</span><br><span class="line">            d[root].sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            res.append(d[dsu.find(i)].pop())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br></pre></td></tr></table></figure><h3 id="面试题-17-07-婴儿名字-力扣（LeetCode）"><a href="#面试题-17-07-婴儿名字-力扣（LeetCode）" class="headerlink" title="面试题 17.07. 婴儿名字 - 力扣（LeetCode）"></a>面试题 17.07. 婴儿名字 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/baby-names-lcci/submissions/">面试题 17.07. 婴儿名字 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">        self.n = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trulyMostPopular</span><span class="params">(self, names: List[str], synonyms: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        l = [] <span class="comment"># idx -&gt; name</span></span><br><span class="line">        name_idx = &#123;&#125; <span class="comment"># name -&gt; idx</span></span><br><span class="line">        dsu = DSU(len(synonyms)*<span class="number">2</span>)</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> synonyms:</span><br><span class="line">            i = i.strip(<span class="string">'()'</span>).split(<span class="string">','</span>)</span><br><span class="line">            idxs = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> name_idx:</span><br><span class="line">                    name_idx[j] = idx</span><br><span class="line">                    idxs.append(idx)</span><br><span class="line">                    l.append(j)</span><br><span class="line">                    idx += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: idxs.append(name_idx[j])</span><br><span class="line">            dsu.union(*idxs)</span><br><span class="line">        d = collections.defaultdict(list) <span class="comment"># root -&gt; [names]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</span><br><span class="line">            d[dsu.find(i)].append(l[i])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">            d[i] = [min(d[i])]</span><br><span class="line">        <span class="comment"># d: root-&gt; [min(names)]</span></span><br><span class="line">        <span class="comment"># d1: root-&gt; num</span></span><br><span class="line">        d1 = collections.defaultdict(int)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> names:</span><br><span class="line">            name, n = s.strip(<span class="string">')'</span>).split(<span class="string">'('</span>)</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> name_idx:</span><br><span class="line">                res.append(s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d1[dsu.find(name_idx[name])] += int(n)</span><br><span class="line">        <span class="keyword">for</span> root <span class="keyword">in</span> d1:</span><br><span class="line">            name = d[root][<span class="number">0</span>]</span><br><span class="line">            n = d1[root]</span><br><span class="line">            res.append(<span class="string">f'<span class="subst">&#123;name&#125;</span>(<span class="subst">&#123;n&#125;</span>)'</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="130-被围绕的区域-力扣（LeetCode）"><a href="#130-被围绕的区域-力扣（LeetCode）" class="headerlink" title="130. 被围绕的区域 - 力扣（LeetCode）"></a>130. 被围绕的区域 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/surrounded-regions/submissions/">130. 被围绕的区域 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.p = list(range(n))</span><br><span class="line">        self.n = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.p[self.find(x)] = self.find(y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x)==self.find(y)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 连接相通的元素，并记录边缘的元素</span></span><br><span class="line">        <span class="comment"># 排除与 边缘的元素 同 root 的元素（dsu 长度可以额外多一个，作为需要移除的集合）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board <span class="keyword">or</span> <span class="keyword">not</span> board[<span class="number">0</span>]: <span class="keyword">return</span> board</span><br><span class="line">        n, m = len(board), len(board[<span class="number">0</span>])</span><br><span class="line">        dsu = DSU(n*m+<span class="number">1</span>)</span><br><span class="line">        exclude_idx = n*m</span><br><span class="line">        oidx = [] <span class="comment"># 是 O 的idx</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">border</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> i <span class="keyword">in</span> [<span class="number">0</span>, n<span class="number">-1</span>] <span class="keyword">or</span> j <span class="keyword">in</span> [<span class="number">0</span>, m<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> board[i][j]==<span class="string">'X'</span>: <span class="keyword">continue</span></span><br><span class="line">                curidx = i*m+j</span><br><span class="line">                oidx.append(curidx)</span><br><span class="line">                <span class="keyword">if</span> border(i, j): dsu.union(curidx, exclude_idx)</span><br><span class="line">                <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> board[i<span class="number">-1</span>][j]==<span class="string">'O'</span>: dsu.union(curidx, curidx-m)</span><br><span class="line">                <span class="keyword">if</span> j&gt;<span class="number">0</span> <span class="keyword">and</span> board[i][j<span class="number">-1</span>]==<span class="string">'O'</span>: dsu.union(curidx, curidx<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> oidx:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> dsu.same(idx, exclude_idx):</span><br><span class="line">                i, j = divmod(idx, m)</span><br><span class="line">                board[i][j] = <span class="string">'X'</span></span><br></pre></td></tr></table></figure><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>从这里学到的</p><p><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/solution/shi-yong-bing-cha-ji-chu-li-bu-xiang-jiao-ji-he-we/">使用并查集处理不相交集合问题（Java、Python） - 等式方程的可满足性 - 力扣（LeetCode）</a></p><img src="https://i.loli.net/2020/08/05/P7AFpdojx1XRETK.png" alt="image-20200805173254139" style="zoom:50%;" /><p>一道题目路径压缩后的性能:</p><img src="https://i.loli.net/2020/08/05/8PAOY956GUrMZh4.png" alt="image-20200805173217140" style="zoom:50%;" /><h3 id="python-版的路径压缩"><a href="#python-版的路径压缩" class="headerlink" title="python 版的路径压缩"></a>python 版的路径压缩</h3><h3 id="隔代路径压缩"><a href="#隔代路径压缩" class="headerlink" title="隔代路径压缩"></a>隔代路径压缩</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.p[self.p[x]]</span><br><span class="line">            x = self.p[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="完全路径压缩"><a href="#完全路径压缩" class="headerlink" title="完全路径压缩"></a>完全路径压缩</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x!=self.p[x]:</span><br><span class="line">            self.p[x] = self.find(self.p[x])</span><br><span class="line">        <span class="keyword">return</span> self.p[x]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>打家劫舍</title>
    <link href="https://zronghui.github.io/leetcode/%E5%85%B6%E4%BB%96/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%85%B6%E4%BB%96/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html</id>
    <published>2020-08-05T07:48:59.000Z</published>
    <updated>2020-08-05T14:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>打家劫舍 三连击</p><p><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/house-robber-ii/">213. 打家劫舍 II - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/house-robber-iii/">337. 打家劫舍 III - 力扣（LeetCode）</a></p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#   1 2 3 1</span></span><br><span class="line">        <span class="comment"># 0 1 2 4 4</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        a, b = <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            t = max(b, a+i)</span><br><span class="line">            a, b = b, t</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> max(self.rob1(nums[<span class="number">1</span>:]), self.rob1(nums[:<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob1</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#   1 2 3 1</span></span><br><span class="line">        <span class="comment"># 0 1 2 4 4</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        a, b = <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            t = max(b, a+i)</span><br><span class="line">            a, b = b, t</span><br><span class="line">        <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><a href="https://leetcode-cn.com/problems/house-robber-iii/solution/di-gui-chu-li-fan-hui-tou-yu-bu-tou-liang-chong-ji/">递归处理-返回偷与不偷两种结果（Python3） - 打家劫舍 III - 力扣（LeetCode）</a></p><p>递归处理，返回当前节点偷与不偷的两个结果，取其中最大的一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="comment"># [偷, 不偷]</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            left, right = map(helper, [node.left, node.right])</span><br><span class="line">            <span class="keyword">return</span> [left[<span class="number">1</span>]+right[<span class="number">1</span>], left[<span class="number">0</span>]+right[<span class="number">0</span>]+node.val]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max(helper(root))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="其他" scheme="https://zronghui.github.io/categories/leetcode/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode模板 by 负雪明烛</title>
    <link href="https://zronghui.github.io/leetcode/leetcode%E6%A8%A1%E6%9D%BF-by-%E8%B4%9F%E9%9B%AA%E6%98%8E%E7%83%9B.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode%E6%A8%A1%E6%9D%BF-by-%E8%B4%9F%E9%9B%AA%E6%98%8E%E7%83%9B.html</id>
    <published>2020-08-02T06:35:28.000Z</published>
    <updated>2020-08-05T14:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><blockquote><p>本文由 <a href="http://ksria.com/simpread/">简悦 SimpRead</a> 转码， 原文地址 <a href="https://blog.csdn.net/fuxuemingzhu/article/details/101900729">blog.csdn.net</a></p></blockquote><p>本文的目的是收集一些典型的题目，记住其写法，理解其思想，即可做到一通百通。欢迎大家提出宝贵意见！</p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>最明显的题目就是 <a href="https://blog.csdn.net/fuxuemingzhu/article/details/83273084">34. Find First and Last Position of Element in Sorted Array</a></p><p>花花酱的二分查找专题视频：<a href="https://www.youtube.com/watch?v=v57lNF2mb_s">https://www.youtube.com/watch?v=v57lNF2mb_s</a></p><p>模板：</p><p>区间定义：<code>[l, r) 左闭右开</code></p><p>其中 f(m) 函数代表找到了满足条件的情况，有这个条件的判断就返回对应的位置，如果没有这个条件的判断就是 lowwer_bound 和 higher_bound.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(l, r)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        m = l + (r - l) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> f(m):    <span class="comment"># 判断找了没有，optional</span></span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        <span class="keyword">if</span> g(m):</span><br><span class="line">            r = m   <span class="comment"># new range [l, m)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = m + <span class="number">1</span> <span class="comment"># new range [m+1, r)</span></span><br><span class="line">    <span class="keyword">return</span> l    <span class="comment"># or not found</span></span><br></pre></td></tr></table></figure><p><strong>lower bound</strong>: find index of i, such that <code>A[i] &gt;= x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowwer_bound</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">    <span class="comment"># find in range [left, right)</span></span><br><span class="line">    left, right = <span class="number">0</span>, len(nums)</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p><strong>upper bound</strong>: find index of i, such that <code>A[i] &gt; x</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">higher_bound</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">    <span class="comment"># find in range [left, right)</span></span><br><span class="line">    left, right = <span class="number">0</span>, len(nums)</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt;= target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><p>比如，题目 <a href="https://blog.csdn.net/fuxuemingzhu/article/details/79254648">69. Sqrt(x)</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        left, right = <span class="number">0</span>, x + <span class="number">1</span></span><br><span class="line">        <span class="comment"># [left, right)</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> mid ** <span class="number">2</span> == x:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">if</span> mid ** <span class="number">2</span> &lt; x:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">return</span> left - <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="排序的写法"><a href="#排序的写法" class="headerlink" title="排序的写法"></a>排序的写法</h1><p>C++ 的排序方法，使用 sort 并且重写 comparator，如果需要使用外部变量，需要在中括号中放入 &amp;。</p><p>题目 451. Sort Characters By Frequency。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string frequencySort(string s) &#123;</span><br><span class="line">        unordered_map&lt;char, int&gt; m;</span><br><span class="line">        for (char c : s) ++m[c];</span><br><span class="line">        sort(s.begin(), s.end(), [&amp;](char&amp; a, char&amp; b)&#123;</span><br><span class="line">            return m[a] &gt; m[b] || (m[a] &#x3D;&#x3D; m[b] &amp;&amp; a &lt; b);</span><br><span class="line">        &#125;);</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="BFS-的写法"><a href="#BFS-的写法" class="headerlink" title="BFS 的写法"></a>BFS 的写法</h1><p>下面的这个写法是在一个邻接矩阵中找出离某一个点距离是 k 的点。</p><p>来自文章：<a href="https://blog.csdn.net/fuxuemingzhu/article/details/82709619">【LeetCode】863. All Nodes Distance K in Binary Tree 解题报告（Python）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS</span></span><br><span class="line">bfs = [target.val]</span><br><span class="line">visited = set([target.val])</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(K):</span><br><span class="line">    bfs = [y <span class="keyword">for</span> x <span class="keyword">in</span> bfs <span class="keyword">for</span> y <span class="keyword">in</span> conn[x] <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> visited]</span><br><span class="line">    visited |= set(bfs)</span><br><span class="line"><span class="keyword">return</span> bfs</span><br></pre></td></tr></table></figure><ol start="127"><li>Word Ladder</li></ol><p>在 BFS 中保存已走过的步，并把已经走的合法路径删除掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ladderLength</span><span class="params">(self, beginWord, endWord, wordList)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type beginWord: str</span></span><br><span class="line"><span class="string">        :type endWord: str</span></span><br><span class="line"><span class="string">        :type wordList: List[str]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        wordset = set(wordList)</span><br><span class="line">        bfs = collections.deque()</span><br><span class="line">        bfs.append((beginWord, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">while</span> bfs:</span><br><span class="line">            word, length = bfs.popleft()</span><br><span class="line">            <span class="keyword">if</span> word == endWord:</span><br><span class="line">                <span class="keyword">return</span> length</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>:</span><br><span class="line">                    newWord = word[:i] + c + word[i + <span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">if</span> newWord <span class="keyword">in</span> wordset <span class="keyword">and</span> newWord != word:</span><br><span class="line">                        wordset.remove(newWord)</span><br><span class="line">                        bfs.append((newWord, length + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82926674">778. Swim in Rising Water</a></p><p>使用优先级队列来优先走比较矮的路，最后保存最高的那个格子的高度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swimInWater</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        visited, pq = set((<span class="number">0</span>, <span class="number">0</span>)), [(grid[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            T, i, j = heapq.heappop(pq)</span><br><span class="line">            res = max(res, T)</span><br><span class="line">            directions = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">            <span class="keyword">if</span> i == j == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> dir <span class="keyword">in</span> directions:</span><br><span class="line">                x, y = i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= n <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n <span class="keyword">or</span> (x, y) <span class="keyword">in</span> visited:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                heapq.heappush(pq, (grid[x][y], x, y))</span><br><span class="line">                visited.add((x, y))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82939203">847. Shortest Path Visiting All Nodes</a></p><p>需要找出某顶点到其他顶点的最短路径。出发顶点不是确定的，每个顶点有可能访问多次。使用 N 位 bit 代表访问过的顶点的状态。如果到达了最终状态，那么现在步数就是所求。这个题把所有的节点都放入了起始队列中，相当于每次都是所有的顶点向前走一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestPathLength</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type graph: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        N = len(graph)</span><br><span class="line">        que = collections.deque()</span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        goal = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span></span><br><span class="line">        visited = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span> &lt;&lt; N)] <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            que.append((i, <span class="number">1</span> &lt;&lt; i))</span><br><span class="line">        <span class="keyword">while</span> que:</span><br><span class="line">            s = len(que)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(s):</span><br><span class="line">                node, state = que.popleft()</span><br><span class="line">                <span class="keyword">if</span> state == goal:</span><br><span class="line">                    <span class="keyword">return</span> step</span><br><span class="line">                <span class="keyword">if</span> visited[node][state]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                visited[node][state] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> nextNode <span class="keyword">in</span> graph[node]:</span><br><span class="line">                    que.append((nextNode, state | (<span class="number">1</span> &lt;&lt; nextNode)))</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/81022170">429. N-ary Tree Level Order Traversal</a> 多叉树的层次遍历，这个 BFS 写法我觉得很经典。适合记忆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node(object):</span></span><br><span class="line"><span class="string">    def __init__(self, val, children):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: Node</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        que = collections.deque()</span><br><span class="line">        que.append(root)</span><br><span class="line">        <span class="keyword">while</span> que:</span><br><span class="line">            level = []</span><br><span class="line">            size = len(que)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(size):</span><br><span class="line">                node = que.popleft()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                level.append(node.val)</span><br><span class="line">                <span class="keyword">for</span> child <span class="keyword">in</span> node.children:</span><br><span class="line">                    que.append(child)</span><br><span class="line">            <span class="keyword">if</span> level:</span><br><span class="line">                res.append(level)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="DFS-的写法"><a href="#DFS-的写法" class="headerlink" title="DFS 的写法"></a>DFS 的写法</h1><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82917210">329. Longest Increasing Path in a Matrix</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82917037">417. Pacific Atlantic Water Flow</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82926674">778. Swim in Rising Water</a></p><p>二分查找 + DFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swimInWater</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        left, right = <span class="number">0</span>, n * n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.dfs([[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)], grid, mid, n, <span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, visited, grid, mid, n, i, j)</span>:</span></span><br><span class="line">        visited[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> i == n - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        directions = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> dir <span class="keyword">in</span> directions:</span><br><span class="line">            x, y = i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= n <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n <span class="keyword">or</span> visited[x][y] <span class="keyword">or</span> max(mid, grid[i][j]) != max(mid, grid[x][y]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> self.dfs(visited, grid, mid, n, x, y):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><p>下面这个题使用了回溯法，但是写的不够简单干练，遇到更好的解法的时候，要把这个题进行更新。</p><p>这个回溯思想，先去添加一个新的状态，看在这个状态的基础上，能不能找结果，如果找不到结果的话，那么就回退，即把这个结果和访问的记录给去掉。这个题使用了 return True 的方法让我们知道已经找出了结果，所以不用再递归了。</p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82945477">753. Cracking the Safe</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crackSafe</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = [<span class="string">"0"</span>] * n</span><br><span class="line">        size = k ** n</span><br><span class="line">        visited = set()</span><br><span class="line">        visited.add(<span class="string">""</span>.join(res))</span><br><span class="line">        <span class="keyword">if</span> self.dfs(res, visited, size, n, k):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>.join(res)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, res, visited, size, n, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(visited) == size:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        node = <span class="string">""</span>.join(res[len(res) - n + <span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            node = node + str(i)</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                res.append(str(i))</span><br><span class="line">                visited.add(node)</span><br><span class="line">                <span class="keyword">if</span> self.dfs(res, visited, size, n, k):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                res.pop()</span><br><span class="line">                visited.remove(node)</span><br><span class="line">            node = node[:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82928879">312. Burst Balloons</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution(object):</span><br><span class="line">    def maxCoins(self, nums):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :type nums: List[int]</span><br><span class="line">        :rtype: int</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        n &#x3D; len(nums)</span><br><span class="line">        nums.insert(0, 1)</span><br><span class="line">        nums.append(1)</span><br><span class="line">        c &#x3D; [[0] * (n + 2) for _ in range(n + 2)]</span><br><span class="line">        return self.dfs(nums, c, 1, n)</span><br><span class="line">        </span><br><span class="line">    def dfs(self, nums, c, i, j):</span><br><span class="line">        if i &gt; j: return 0</span><br><span class="line">        if c[i][j] &gt; 0: return c[i][j]</span><br><span class="line">        if i &#x3D;&#x3D; j: return nums[i - 1] * nums[i] * nums[i + 1]</span><br><span class="line">        res &#x3D; 0</span><br><span class="line">        for k in range(i, j + 1):</span><br><span class="line">            res &#x3D; max(res, self.dfs(nums, c, i, k - 1) + nums[i - 1] * nums[k] * nums[j + 1] + self.dfs(nums, c, k + 1, j))</span><br><span class="line">        c[i][j] &#x3D; res</span><br><span class="line">        return c[i][j]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int countArrangement(int N) &#123;</span><br><span class="line">        int res &#x3D; 0;</span><br><span class="line">        vector&lt;int&gt; visited(N + 1, 0);</span><br><span class="line">        helper(N, visited, 1, res);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    void helper(int N, vector&lt;int&gt;&amp; visited, int pos, int&amp; res) &#123;</span><br><span class="line">        if (pos &gt; N) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; N; i++) &#123;</span><br><span class="line">            if (visited[i] &#x3D;&#x3D; 0 &amp;&amp; (i % pos &#x3D;&#x3D; 0 || pos % i &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">                visited[i] &#x3D; 1;</span><br><span class="line">                helper(N, visited, pos + 1, res);</span><br><span class="line">                visited[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果需要保存路径的回溯法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        const int N &#x3D; nums.size();</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        vector&lt;int&gt; path;</span><br><span class="line">        vector&lt;int&gt; visited(N, 0);</span><br><span class="line">        dfs(nums, 0, visited, res, path);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    void dfs(vector&lt;int&gt;&amp; nums, int pos, vector&lt;int&gt;&amp; visited, vector&lt;vector&lt;int&gt;&gt;&amp; res, vector&lt;int&gt;&amp; path) &#123;</span><br><span class="line">        const int N &#x3D; nums.size();</span><br><span class="line">        if (pos &#x3D;&#x3D; N) &#123;</span><br><span class="line">            res.push_back(path);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; N; i++) &#123;</span><br><span class="line">            if (!visited[i]) &#123;</span><br><span class="line">                visited[i] &#x3D; 1;</span><br><span class="line">                path.push_back(nums[i]);</span><br><span class="line">                dfs(nums, pos + 1, visited, res, path);</span><br><span class="line">                path.pop_back();</span><br><span class="line">                visited[i] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79052953">617. Merge Two Binary Trees</a> 把两个树重叠，重叠部分求和，不重叠部分是两个树不空的节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1, t2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">            <span class="keyword">return</span> t1</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line">        newT = TreeNode(t1.val + t2.val)</span><br><span class="line">        newT.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">        newT.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">        <span class="keyword">return</span> newT</span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/51284488">226. Invert Binary Tree</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        stack.append(root)</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            node.left, node.right = node.right, node.left</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/72575422">144. Binary Tree Preorder Traversal</a></p><p>迭代写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        stack.append(root)</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            res.append(node.val)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">            stack.append(node.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79294461">94. Binary Tree Inorder Traversal</a></p><p>迭代写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                <span class="keyword">return</span> answer</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            answer.append(root.val)</span><br><span class="line">            root = root.right</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/101079767">145. Binary Tree Postorder Traversal</a></p><p>迭代写法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        if (!root) return res;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        st.push(root);</span><br><span class="line">        while (!st.empty()) &#123;</span><br><span class="line">            TreeNode* node &#x3D; st.top(); st.pop();</span><br><span class="line">            if (!node) continue;</span><br><span class="line">            res.push_back(node-&gt;val);</span><br><span class="line">            st.push(node-&gt;left);</span><br><span class="line">            st.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="构建完全二叉树"><a href="#构建完全二叉树" class="headerlink" title="构建完全二叉树"></a>构建完全二叉树</h1><p>完全二叉树是每一层都满的，因此找出要插入节点的父亲节点是很简单的。如果用数组 tree 保存着所有节点的层次遍历，那么新节点的父亲节点就是 tree[(N -1)/2]，N 是未插入该节点前的树的元素个数。<br>构建树的时候使用层次遍历，也就是 BFS 把所有的节点放入到 tree 里。插入的时候直接计算出新节点的父亲节点。获取 root 就是数组中的第 0 个节点。</p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82958284">919. Complete Binary Tree Inserter</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBTInserter</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.tree = list()</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.popleft()</span><br><span class="line">            self.tree.append(node)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, v)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type v: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        _len = len(self.tree)</span><br><span class="line">        father = self.tree[(_len - <span class="number">1</span>) / <span class="number">2</span>]</span><br><span class="line">        node = TreeNode(v)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> father.left:</span><br><span class="line">            father.left = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            father.right = node</span><br><span class="line">        self.tree.append(node)</span><br><span class="line">        <span class="keyword">return</span> father.val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_root</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your CBTInserter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = CBTInserter(root)</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(v)</span></span><br><span class="line"><span class="comment"># param_2 = obj.get_root()</span></span><br></pre></td></tr></table></figure><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>不包含 rank 的话，代码很简短，应该背会。</p><ol start="721"><li><p>Accounts Merge  </p><p><a href="https://leetcode.com/articles/accounts-merge/">https://leetcode.com/articles/accounts-merge/</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.par = range(<span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> x != self.par[x]:</span><br><span class="line">            self.par[x] = self.find(self.par[x])</span><br><span class="line">        <span class="keyword">return</span> self.par[x]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.par[self.find(x)] = self.find(y)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(x) == self.find(y)</span><br></pre></td></tr></table></figure><p>C++ 版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; map_; &#x2F;&#x2F;i的parent，默认是i</span><br><span class="line">int f(int a) &#123;</span><br><span class="line">    if (map_[a] &#x3D;&#x3D; a)</span><br><span class="line">        return a;</span><br><span class="line">    return f(map_[a]);</span><br><span class="line">&#125;</span><br><span class="line">void u(int a, int b) &#123;</span><br><span class="line">    int pa &#x3D; f(a);</span><br><span class="line">    int pb &#x3D; f(b);</span><br><span class="line">    if (pa &#x3D;&#x3D; pb)</span><br><span class="line">        return;</span><br><span class="line">    map_[pa] &#x3D; pb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含 rank 的，这里的 rank 表示树的高度：</p><p><a href="https://leetcode.com/articles/redundant-connection/">684. Redundant Connection</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.par = range(<span class="number">1001</span>)</span><br><span class="line">        self.rnk = [<span class="number">0</span>] * <span class="number">1001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.par[x] != x:</span><br><span class="line">            self.par[x] = self.find(self.par[x])</span><br><span class="line">        <span class="keyword">return</span> self.par[x]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        xr, yr = self.find(x), self.find(y)</span><br><span class="line">        <span class="keyword">if</span> xr == yr:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> self.rnk[xr] &lt; self.rnk[yr]:</span><br><span class="line">            self.par[xr] = yr</span><br><span class="line">        <span class="keyword">elif</span> self.rnk[xr] &gt; self.rnk[yr]:</span><br><span class="line">            self.par[yr] = xr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.par[yr] = xr</span><br><span class="line">            self.rnk[xr] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>另外一种 rank 方法是，保存树中节点的个数。</p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/70258103">547. Friend Circles</a>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span><span class="params">(self, M)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type M: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dsu = DSU()</span><br><span class="line">        N = len(M)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, N):</span><br><span class="line">                <span class="keyword">if</span> M[i][j]:</span><br><span class="line">                    dsu.u(i, j)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> dsu.f(i) == i:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.d = range(<span class="number">201</span>)</span><br><span class="line">        self.r = [<span class="number">0</span>] * <span class="number">201</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a <span class="keyword">if</span> a == self.d[a] <span class="keyword">else</span> self.f(self.d[a])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">u</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        pa = self.f(a)</span><br><span class="line">        pb = self.f(b)</span><br><span class="line">        <span class="keyword">if</span> (pa == pb):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.r[pa] &lt; self.r[pb]:</span><br><span class="line">            self.d[pa] = pb</span><br><span class="line">            self.r[pb] += self.r[pa]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.d[pb] = pa</span><br><span class="line">            self.r[pa] += self.r[pb]</span><br></pre></td></tr></table></figure><h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><p>前缀树的题目可以使用字典解决，代码还是需要背一下的，C++ 版本的前缀树如下：</p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79388432">208. Implement Trie (Prefix Tree)</a> 这个题是纯考 Trie 的。参考代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class TrieNode &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;TrieNode*&gt; child;</span><br><span class="line">    bool isWord;</span><br><span class="line">    TrieNode() : isWord(false), child(26, nullptr) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ~TrieNode() &#123;</span><br><span class="line">        for (auto&amp; c : child)</span><br><span class="line">            delete c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Trie &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;** Initialize your data structure here. *&#x2F;</span><br><span class="line">    Trie() &#123;</span><br><span class="line">        root &#x3D; new TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Inserts a word into the trie. *&#x2F;</span><br><span class="line">    void insert(string word) &#123;</span><br><span class="line">        TrieNode* p &#x3D; root;</span><br><span class="line">        for (char a : word) &#123;</span><br><span class="line">            int i &#x3D; a - &#39;a&#39;;</span><br><span class="line">            if (!p-&gt;child[i])</span><br><span class="line">                p-&gt;child[i] &#x3D; new TrieNode();</span><br><span class="line">            p &#x3D; p-&gt;child[i];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;isWord &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Returns if the word is in the trie. *&#x2F;</span><br><span class="line">    bool search(string word) &#123;</span><br><span class="line">        TrieNode* p &#x3D; root;</span><br><span class="line">        for (char a : word) &#123;</span><br><span class="line">            int i &#x3D; a - &#39;a&#39;;</span><br><span class="line">            if (!p-&gt;child[i])</span><br><span class="line">                return false;</span><br><span class="line">            p &#x3D; p-&gt;child[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return p-&gt;isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Returns if there is any word in the trie that starts with the given prefix. *&#x2F;</span><br><span class="line">    bool startsWith(string prefix) &#123;</span><br><span class="line">        TrieNode* p &#x3D; root;</span><br><span class="line">        for (char a : prefix) &#123;</span><br><span class="line">            int i &#x3D; a - &#39;a&#39;;</span><br><span class="line">            if (!p-&gt;child[i])</span><br><span class="line">                return false;</span><br><span class="line">            p &#x3D; p-&gt;child[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    TrieNode* root;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Your Trie object will be instantiated and called as such:</span><br><span class="line"> * Trie obj &#x3D; new Trie();</span><br><span class="line"> * obj.insert(word);</span><br><span class="line"> * bool param_2 &#x3D; obj.search(word);</span><br><span class="line"> * bool param_3 &#x3D; obj.startsWith(prefix);</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79436619">677. Map Sum Pairs</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class MapSum &#123;</span><br><span class="line">public:</span><br><span class="line">    &#x2F;** Initialize your data structure here. *&#x2F;</span><br><span class="line">    MapSum() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    void insert(string key, int val) &#123;</span><br><span class="line">        int inc &#x3D; val - vals_[key];</span><br><span class="line">        Trie* p &#x3D; &amp;root;</span><br><span class="line">        for (const char c : key) &#123;</span><br><span class="line">            if (!p-&gt;children[c])</span><br><span class="line">                p-&gt;children[c] &#x3D; new Trie();</span><br><span class="line">            p-&gt;children[c]-&gt;sum +&#x3D; inc;</span><br><span class="line">            p &#x3D; p-&gt;children[c];</span><br><span class="line">        &#125;</span><br><span class="line">        vals_[key] &#x3D; val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int sum(string prefix) &#123;</span><br><span class="line">        Trie* p &#x3D; &amp;root;</span><br><span class="line">        for (const char c : prefix) &#123;</span><br><span class="line">            if (!p-&gt;children[c])</span><br><span class="line">                return 0;</span><br><span class="line">            p &#x3D; p-&gt;children[c];</span><br><span class="line">        &#125;</span><br><span class="line">        return p-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    struct Trie &#123;</span><br><span class="line">        Trie():children(128, nullptr), sum(0)&#123;&#125;</span><br><span class="line">        ~Trie()&#123;</span><br><span class="line">            for (auto child : children)</span><br><span class="line">                if (child) delete child;</span><br><span class="line">            children.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;Trie*&gt; children;</span><br><span class="line">        int sum;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Trie root;</span><br><span class="line">    unordered_map&lt;string, int&gt; vals_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="图遍历"><a href="#图遍历" class="headerlink" title="图遍历"></a>图遍历</h1><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82862769">743. Network Delay Time</a> 这个题很详细。</p><h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>时间复杂度是 O(N ^ 2 + E)，空间复杂度是 O(N+E).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span><span class="params">(self, times, N, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type times: List[List[int]]</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        K -= <span class="number">1</span></span><br><span class="line">        nodes = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> u, v, w <span class="keyword">in</span> times:</span><br><span class="line">            nodes[u - <span class="number">1</span>].append((v - <span class="number">1</span>, w))</span><br><span class="line">        dist = [float(<span class="string">'inf'</span>)] * N</span><br><span class="line">        dist[K] = <span class="number">0</span></span><br><span class="line">        done = set()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">            smallest = min((d, i) <span class="keyword">for</span> (i, d) <span class="keyword">in</span> enumerate(dist) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> done)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> v, w <span class="keyword">in</span> nodes[smallest]:</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> done <span class="keyword">and</span> dist[smallest] + w &lt; dist[v]:</span><br><span class="line">                    dist[v] = dist[smallest] + w</span><br><span class="line">            done.add(smallest)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> float(<span class="string">'inf'</span>) <span class="keyword">in</span> dist <span class="keyword">else</span> max(dist)</span><br></pre></td></tr></table></figure><h2 id="Floyd-Warshall-算法"><a href="#Floyd-Warshall-算法" class="headerlink" title="Floyd-Warshall 算法"></a>Floyd-Warshall 算法</h2><p>时间复杂度 O(n^3)， 空间复杂度 O(n^2)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span><span class="params">(self, times, N, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type times: List[List[int]]</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = [[float(<span class="string">'inf'</span>)] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> times:</span><br><span class="line">            u, v, w = time[<span class="number">0</span>] - <span class="number">1</span>, time[<span class="number">1</span>] - <span class="number">1</span>, time[<span class="number">2</span>]</span><br><span class="line">            d[u][v] = w</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            d[i][i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    d[i][j] = min(d[i][j], d[i][k] + d[k][j])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> float(<span class="string">'inf'</span>) <span class="keyword">in</span> d[K - <span class="number">1</span>] <span class="keyword">else</span> max(d[K - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford 算法"></a>Bellman-Ford 算法</h2><p>时间复杂度 O(ne)， 空间复杂度 O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span><span class="params">(self, times, N, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type times: List[List[int]]</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dist = [float(<span class="string">'inf'</span>)] * N</span><br><span class="line">        dist[K - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">for</span> time <span class="keyword">in</span> times:</span><br><span class="line">                u = time[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">                v = time[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">                w = time[<span class="number">2</span>]</span><br><span class="line">                dist[v] = min(dist[v], dist[u] + w)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span> <span class="keyword">if</span> float(<span class="string">'inf'</span>) <span class="keyword">in</span> dist <span class="keyword">else</span> max(dist)</span><br></pre></td></tr></table></figure><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/101214765">1135. Connecting Cities With Minimum Cost</a></p><h2 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    static bool cmp(vector&lt;int&gt; &amp; a,vector&lt;int&gt; &amp; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &lt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int find(vector&lt;int&gt; &amp; f,int x)&#123;</span><br><span class="line">        <span class="keyword">while</span>(x != f[x])&#123;</span><br><span class="line">            x = f[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool uni(vector&lt;int&gt; &amp; f,int x,int y)&#123;</span><br><span class="line">        int x1 = find(f,x);</span><br><span class="line">        int y1 = find(f,y);</span><br><span class="line">        f[x1] = y1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int minimumCost(int N, vector&lt;vector&lt;int&gt;&gt;&amp; conections) &#123;</span><br><span class="line">        int ans = <span class="number">0</span>;</span><br><span class="line">        int count = <span class="number">0</span>;</span><br><span class="line">        vector&lt;int&gt; father(N+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        sort(conections.begin(),conections.end(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i &lt;= N; ++i)&#123;</span><br><span class="line">            father[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(auto conect : conections)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find(father,conect[<span class="number">0</span>]) != find(father,conect[<span class="number">1</span>]))&#123;</span><br><span class="line">                count++;</span><br><span class="line">                ans += conect[<span class="number">2</span>];</span><br><span class="line">                uni(father,conect[<span class="number">0</span>],conect[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(count == N<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">struct cmp &#123;</span><br><span class="line">    bool operator () (const vector&lt;int&gt; &amp;a, const vector&lt;int&gt; &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>] &gt; b[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:    </span><br><span class="line">    int minimumCost(int N, vector&lt;vector&lt;int&gt;&gt;&amp; conections) &#123;</span><br><span class="line">        int ans = <span class="number">0</span>;</span><br><span class="line">        int selected = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt; edgs(N+<span class="number">1</span>,vector&lt;pair&lt;int,int&gt;&gt;());</span><br><span class="line">        priority_queue&lt;vector&lt;int&gt;,vector&lt;vector&lt;int&gt;&gt;,cmp&gt; pq;</span><br><span class="line">        vector&lt;bool&gt; visit(N+<span class="number">1</span>,false);</span><br><span class="line">        </span><br><span class="line">        /*initial*/</span><br><span class="line">        <span class="keyword">for</span>(auto re : conections)&#123;</span><br><span class="line">            edgs[re[<span class="number">0</span>]].push_back(make_pair(re[<span class="number">1</span>],re[<span class="number">2</span>]));</span><br><span class="line">            edgs[re[<span class="number">1</span>]].push_back(make_pair(re[<span class="number">0</span>],re[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(edgs[<span class="number">1</span>].size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /*kruskal*/</span><br><span class="line">        selected = <span class="number">1</span>;</span><br><span class="line">        visit[<span class="number">1</span>] = true;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i &lt; edgs[<span class="number">1</span>].size(); ++i)&#123;</span><br><span class="line">            pq.push(vector&lt;int&gt;(&#123;<span class="number">1</span>,edgs[<span class="number">1</span>][i].first,edgs[<span class="number">1</span>][i].second&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!pq.empty())&#123;</span><br><span class="line">            vector&lt;int&gt; curr = pq.top();</span><br><span class="line">            pq.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!visit[curr[<span class="number">1</span>]])&#123;</span><br><span class="line">                visit[curr[<span class="number">1</span>]] = true;</span><br><span class="line">                ans += curr[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">for</span>(auto e : edgs[curr[<span class="number">1</span>]])&#123;</span><br><span class="line">                    pq.push(vector&lt;int&gt;(&#123;curr[<span class="number">1</span>],e.first,e.second&#125;));</span><br><span class="line">                &#125;</span><br><span class="line">                selected++;</span><br><span class="line">                <span class="keyword">if</span>(selected == N)&#123;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>BFS 方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, N, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N,: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        graph = collections.defaultdict(list)</span><br><span class="line">        indegrees = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> prerequisites:</span><br><span class="line">            graph[v].append(u)</span><br><span class="line">            indegrees[u] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            zeroDegree = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> indegrees[j] == <span class="number">0</span>:</span><br><span class="line">                    zeroDegree = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> zeroDegree: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            indegrees[j] = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> graph[j]:</span><br><span class="line">                indegrees[node] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>DFS 方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, N, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N,: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        graph = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> prerequisites:</span><br><span class="line">            graph[u].append(v)</span><br><span class="line">        <span class="comment"># 0 = Unknown, 1 = visiting, 2 = visited</span></span><br><span class="line">        visited = [<span class="number">0</span>] * N</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dfs(graph, visited, i):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Can we add node i to visited successfully?</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, graph, visited, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        visited[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> graph[i]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dfs(graph, visited, j):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        visited[i] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>如果需要保存拓扑排序的路径：</p><p>BFS 方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, numCourses, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type numCourses: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        graph = collections.defaultdict(list)</span><br><span class="line">        indegrees = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> prerequisites:</span><br><span class="line">            graph[v].append(u)</span><br><span class="line">            indegrees[u] += <span class="number">1</span></span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            zeroDegree = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(numCourses):</span><br><span class="line">                <span class="keyword">if</span> indegrees[j] == <span class="number">0</span>:</span><br><span class="line">                    zeroDegree = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> zeroDegree:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            indegrees[j] -= <span class="number">1</span></span><br><span class="line">            path.append(j)</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> graph[j]:</span><br><span class="line">                indegrees[node] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><p>DFS 方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, numCourses, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type numCourses: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        graph = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> u, v <span class="keyword">in</span> prerequisites:</span><br><span class="line">            graph[u].append(v)</span><br><span class="line">        <span class="comment"># 0 = Unknown, 1 = visiting, 2 = visited</span></span><br><span class="line">        visited = [<span class="number">0</span>] * numCourses</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dfs(graph, visited, i, path):</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, graph, visited, i, path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> visited[i] == <span class="number">2</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        visited[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> graph[i]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dfs(graph, visited, j, path):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        visited[i] = <span class="number">2</span></span><br><span class="line">        path.append(i)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82951771">207. Course Schedule</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/83302328">210. Course Schedule II</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/83548874">310. Minimum Height Trees</a></p><h1 id="查找子字符串，双指针模板"><a href="#查找子字符串，双指针模板" class="headerlink" title="查找子字符串，双指针模板"></a>查找子字符串，双指针模板</h1><p>这是一个[模板](<a href="https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-&#39;">https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-&#39;</a> rel=)，里面的 map 如果是双指针范围内的字符串字频的话，增加和减少的方式如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int findSubstring(string s)&#123;</span><br><span class="line">        vector&lt;int&gt; map(<span class="number">128</span>,<span class="number">0</span>);</span><br><span class="line">        int counter; // check whether the substring <span class="keyword">is</span> valid</span><br><span class="line">        int begin=<span class="number">0</span>, end=<span class="number">0</span>; //two pointers, one point to tail <span class="keyword">and</span> one  head</span><br><span class="line">        int d; //the length of substring</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>() &#123; /* initialize the hash map here */ &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(end&lt;s.size())&#123;</span><br><span class="line"></span><br><span class="line">            if(map[s[end++]]++ ?)&#123;  /* modify counter here */ &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(/* counter condition */)&#123; </span><br><span class="line">                 </span><br><span class="line">                 /* update d here <span class="keyword">if</span> finding minimum*/</span><br><span class="line"></span><br><span class="line">                //increase begin to make it invalid/valid again</span><br><span class="line">                </span><br><span class="line">                if(map[s[begin++]]-- ?)&#123; /*modify counter here*/ &#125;</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            /* update d here <span class="keyword">if</span> finding maximum*/</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82931106">76. Minimum Window Substring</a></p><p>这个题的 map 是 t 的字频，所以使用 map 更方式和上是相反的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="string">""</span></span><br><span class="line">        left, cnt, minLen = <span class="number">0</span>, <span class="number">0</span>, float(<span class="string">'inf'</span>)</span><br><span class="line">        count = collections.Counter(t)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            count[c] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count[c] &gt;= <span class="number">0</span>:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> cnt == len(t):</span><br><span class="line">                <span class="keyword">if</span> minLen &gt; i - left + <span class="number">1</span>:</span><br><span class="line">                    minLen = i - left + <span class="number">1</span></span><br><span class="line">                    res = s[left : i + <span class="number">1</span>]</span><br><span class="line">                count[s[left]] += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> count[s[left]] &gt; <span class="number">0</span>:</span><br><span class="line">                    cnt -= <span class="number">1</span></span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="状态搜索"><a href="#状态搜索" class="headerlink" title="状态搜索"></a>状态搜索</h2><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/82747623">688. Knight Probability in Chessboard</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79337352">62. Unique Paths</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/83154114">63. Unique Paths II</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/83350880">913. Cat and Mouse</a></p><p><a href="https://blog.csdn.net/fuxuemingzhu/article/details/83447155">576. Out of Boundary Paths</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPaths</span><span class="params">(self, m, n, N, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> range(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">            curStatus = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(n):</span><br><span class="line">                    v1 = <span class="number">1</span> <span class="keyword">if</span> x == <span class="number">0</span> <span class="keyword">else</span> dp[x - <span class="number">1</span>][y]</span><br><span class="line">                    v2 = <span class="number">1</span> <span class="keyword">if</span> x == m - <span class="number">1</span> <span class="keyword">else</span> dp[x + <span class="number">1</span>][y]</span><br><span class="line">                    v3 = <span class="number">1</span> <span class="keyword">if</span> y == <span class="number">0</span> <span class="keyword">else</span> dp[x][y - <span class="number">1</span>]</span><br><span class="line">                    v4 = <span class="number">1</span> <span class="keyword">if</span> y == n - <span class="number">1</span> <span class="keyword">else</span> dp[x][y + <span class="number">1</span>]</span><br><span class="line">                    curStatus[x][y] = (v1 + v2 + v3 + v4) % (<span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span>)</span><br><span class="line">            dp = curStatus</span><br><span class="line">        <span class="keyword">return</span> dp[i][j]</span><br></pre></td></tr></table></figure><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来最好的选择。也就是说，不从整体最优上加以考虑，他所作出的是在某种意义上的局部最优解。贪心算法和动态规划算法都是由局部最优导出全局最优，这里不得不比较下二者的区别</p><p>贪心算法：  </p><ol><li>贪心算法中，作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留。  </li><li>由（1）中的介绍，可以知道贪心法正确的条件是：每一步的最优解一定包含上一步的最优解</li></ol><p>动态规划算法：  </p><ol><li>全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解  </li><li>动态规划的关键是状态转移方程，即如何由以求出的局部最优解来推导全局最优解  </li><li>边界条件：即最简单的，可以直接得出的局部最优解</li></ol><p>贪心是个思想，没有统一的模板。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-200</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-200.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-200.html</id>
    <published>2020-08-02T02:14:24.000Z</published>
    <updated>2020-08-07T14:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/count-good-triplets/">统计好三元组</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/find-the-winner-of-an-array-game/">找出数组游戏的赢家</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/minimum-swaps-to-arrange-a-binary-grid/">排布二进制网格的最少交换次数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/get-the-maximum-score/">最大得分</a><strong>6</strong></li></ul><p>误触 command + enter 2 次，淦！</p><p>前 10% 都没弄上</p><p><img src="https://i.loli.net/2020/08/02/VpT8KPrOoAkqc2E.png" alt="image-20200802132822189"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countGoodTriplets</span><span class="params">(self, arr: List[int], a: int, b: int, c: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">satisfy</span><span class="params">(i, j, k)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> abs(arr[i] - arr[j])&gt;a: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> abs(arr[j] - arr[k])&gt;b: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> abs(arr[i] - arr[k])&gt;c: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        <span class="keyword">return</span> sum(satisfy(i, j, k) <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n<span class="number">-1</span>) <span class="keyword">for</span> k <span class="keyword">in</span> range(j+<span class="number">1</span>, n))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getWinner</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        <span class="comment"># 比较 n 次后，arr 结构: max, n1, n2..... </span></span><br><span class="line">        <span class="comment"># 但是不用真实模拟移动过程，只需要记录下标即可</span></span><br><span class="line">        <span class="keyword">if</span> len(arr)==<span class="number">2</span>: <span class="keyword">return</span> max(arr)</span><br><span class="line">        m = collections.defaultdict(int)</span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> arr[i]&gt;arr[cur]:</span><br><span class="line">                m[i] += <span class="number">1</span></span><br><span class="line">                cur = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m[cur] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> m[cur]==k: <span class="keyword">return</span> arr[cur]</span><br><span class="line">        <span class="keyword">return</span> arr[cur]</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSwaps</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 记录每一行后面 0 的个数</span></span><br><span class="line">        <span class="comment"># 分配每一行应该贡献的 0 的个数</span></span><br><span class="line">        <span class="comment"># 如 0 2 2 实际算作 0 2 1</span></span><br><span class="line">        <span class="comment">#   0 2 2 4 4 5 算作 0 2 1 4 3 5</span></span><br><span class="line">        <span class="comment"># 就是说 遇到相同的数字，减一，加进去</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tailZeroNum</span><span class="params">(grid)</span>:</span></span><br><span class="line">            s = set()</span><br><span class="line">            l = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                cur = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> reversed(range(n)):</span><br><span class="line">                    <span class="keyword">if</span> grid[i][j]==<span class="number">0</span>: cur += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                cur = min(n<span class="number">-1</span>, cur)</span><br><span class="line">                <span class="keyword">while</span> cur <span class="keyword">in</span> s:</span><br><span class="line">                    cur -= <span class="number">1</span></span><br><span class="line">                s.add(cur)</span><br><span class="line">                l.append(cur)</span><br><span class="line">            <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">        l = tailZeroNum(grid)</span><br><span class="line">        <span class="comment"># print(l)</span></span><br><span class="line">        <span class="keyword">if</span> set(range(n))!=set(l): <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(l)):</span><br><span class="line">                <span class="keyword">if</span> l[idx]==i: <span class="keyword">break</span></span><br><span class="line">            res += len(l)<span class="number">-1</span>-idx</span><br><span class="line">            l.remove(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>没看清题，理解错了题意，实际上不算太难<a href="https://leetcode-cn.com/problems/get-the-maximum-score/solution/cshuang-zhi-zhen-fen-duan-tong-ji-zui-da-he-xiang-/">C++双指针 分段统计最大和 相加即可 - 最大得分 - 力扣（LeetCode）</a></p><img src="https://i.loli.net/2020/08/02/TpVlkxoeftSFW6P.png" alt="image-20200802135845039" style="zoom:50%;" /><p>借鉴排行榜的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSum</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; int:</span></span><br><span class="line">        s1, s2 = map(set, (nums1, nums2))</span><br><span class="line">        a1 = a2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sorted(list(s1|s2)):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> s1 <span class="keyword">and</span> i <span class="keyword">in</span> s2: a1 = a2 = max(a1, a2)+i</span><br><span class="line">            <span class="keyword">elif</span> i <span class="keyword">in</span> s1: a1 += i</span><br><span class="line">            <span class="keyword">else</span>: a2 += i</span><br><span class="line">        <span class="keyword">return</span> max(a1, a2)%int(<span class="number">1e9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/count-good-triplets/&quot;&gt;统计好三元组&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/find-the-winner-of-an-array-game/&quot;&gt;找出数组游戏的赢家&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/minimum-swaps-to-arrange-a-binary-grid/&quot;&gt;排布二进制网格的最少交换次数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/get-the-maximum-score/&quot;&gt;最大得分&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;误触 command + enter 2 次，淦！&lt;/p&gt;
&lt;p&gt;前 10% 都没弄上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/08/02/VpT8KPrOoAkqc2E.png&quot; alt=&quot;image-20200802132822189&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 148. Sort List</title>
    <link href="https://zronghui.github.io/leetcode-148-Sort-List.html"/>
    <id>https://zronghui.github.io/leetcode-148-Sort-List.html</id>
    <published>2020-08-01T13:26:55.000Z</published>
    <updated>2020-08-03T13:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-list/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/sort-list/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Sort a linked list in <em>O</em> ( <em>n</em> log <em>n</em> ) time using constant space<br>complexity.</p><p><strong>Example 1:</strong></p><pre><code>Input: 4-&gt;2-&gt;1-&gt;3Output: 1-&gt;2-&gt;3-&gt;4</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: -1-&gt;5-&gt;3-&gt;4-&gt;0Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><p><strong>Tags:</strong> Linked List, Sort</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><h3 id="超时写法"><a href="#超时写法" class="headerlink" title="超时写法"></a>超时写法</h3><p>根据<a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表 - 力扣（LeetCode）</a>的 partition 写的</p><p>86题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy1, dummy2 = ListNode(<span class="number">0</span>), ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># dummy1 存 小于 x 的值; dummy &gt;=</span></span><br><span class="line">        cur1, cur2 = dummy1, dummy2</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                cur1.next = head</span><br><span class="line">                cur1 = cur1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur2.next = head</span><br><span class="line">                cur2 = cur2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        cur2.next = <span class="literal">None</span></span><br><span class="line">        cur1.next = dummy2.next</span><br><span class="line">        <span class="keyword">return</span> dummy1.next</span><br></pre></td></tr></table></figure><p>一开始写的死板解法，但是遇到一个 testcase 全是  1，2，3 的链表，超时了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 快速排序</span></span><br><span class="line">        <span class="comment"># return head tail</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(head)</span>:</span></span><br><span class="line">            <span class="comment"># return head1,tail1,head2,tail2</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(head, x)</span>:</span></span><br><span class="line">                dummy1, dummy2 = ListNode(<span class="number">0</span>), ListNode(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># cur 指向那条链最后一个非 None 节点</span></span><br><span class="line">                cur1, cur2 = dummy1, dummy2</span><br><span class="line">                <span class="keyword">while</span> head:</span><br><span class="line">                    <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                        cur1.next = head</span><br><span class="line">                        cur1 = cur1.next</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        cur2.next = head</span><br><span class="line">                        cur2 = cur2.next</span><br><span class="line">                    head = head.next</span><br><span class="line">                cur1.next = cur2.next = <span class="literal">None</span></span><br><span class="line">                <span class="comment"># head1, head2 可能为 None, tail1, tail2 一定非 None </span></span><br><span class="line">                <span class="keyword">return</span> dummy1.next, cur1, dummy2.next, cur2</span><br><span class="line">            </span><br><span class="line">            tail = head</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head, tail</span><br><span class="line">            head1, tail1, head2, tail2 = partition(head.next, head.val)</span><br><span class="line">            head.next = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(head1, tail1, head2, tail2)</span></span><br><span class="line">            <span class="keyword">if</span> head1:</span><br><span class="line">                head1, tail1 = quickSort(head1)</span><br><span class="line">                tail1.next = head</span><br><span class="line">            <span class="keyword">if</span> head2:</span><br><span class="line">                head2, tail2 = quickSort(head2)</span><br><span class="line">                head.next = head2</span><br><span class="line">            <span class="keyword">return</span> head1 <span class="keyword">if</span> head1 <span class="keyword">else</span> head , tail2 <span class="keyword">if</span> head2 <span class="keyword">else</span> head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quickSort(head)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="优化后的快排"><a href="#优化后的快排" class="headerlink" title="优化后的快排"></a>优化后的快排</h3><p>划分为 small equal large 3个链表，对 small large 递归, 再合并 3 个链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 快速排序</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># small equal large 的缩写</span></span><br><span class="line">        <span class="comment"># 都指向相应链表的 head</span></span><br><span class="line">        s = e = l = <span class="literal">None</span></span><br><span class="line">        target = head.val</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            nxt = head.next</span><br><span class="line">            <span class="keyword">if</span> head.val&gt;target:</span><br><span class="line">                head.next = l</span><br><span class="line">                l = head</span><br><span class="line">            <span class="keyword">elif</span> head.val==target:</span><br><span class="line">                head.next = e</span><br><span class="line">                e = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head.next = s</span><br><span class="line">                s = head</span><br><span class="line">            head = nxt</span><br><span class="line">        </span><br><span class="line">        s = self.sortList(s)</span><br><span class="line">        l = self.sortList(l)</span><br><span class="line">        <span class="comment"># 合并 3 个链表</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy <span class="comment"># cur: 非 None 的尾节点</span></span><br><span class="line">        <span class="comment"># p: 下一个需要连接的节点</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> [s, e, l]:</span><br><span class="line">            <span class="keyword">while</span> p:</span><br><span class="line">                cur.next = p</span><br><span class="line">                p = p.next</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>写归并排序是主流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 归并排序</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(h)</span>:</span></span><br><span class="line">            slow = h</span><br><span class="line">            fast = h.next</span><br><span class="line">            <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">                fast = fast.next.next</span><br><span class="line">                slow = slow.next</span><br><span class="line">            t = slow.next</span><br><span class="line">            slow.next = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(h, t)</span></span><br><span class="line">            <span class="keyword">return</span> h, t</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(h1, h2)</span>:</span></span><br><span class="line">            dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">            cur = dummy</span><br><span class="line">            <span class="keyword">while</span> h1 <span class="keyword">or</span> h2:</span><br><span class="line">                v1 = h1.val <span class="keyword">if</span> h1 <span class="keyword">else</span> float(<span class="string">'inf'</span>)</span><br><span class="line">                v2 = h2.val <span class="keyword">if</span> h2 <span class="keyword">else</span> float(<span class="string">'inf'</span>)</span><br><span class="line">                <span class="keyword">if</span> v1&lt;=v2:</span><br><span class="line">                    cur.next = h1</span><br><span class="line">                    cur = cur.next</span><br><span class="line">                    h1 = h1.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur.next = h2</span><br><span class="line">                    cur = cur.next</span><br><span class="line">                    h2 = h2.next</span><br><span class="line">            <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 把链划分 2 半，递归排序</span></span><br><span class="line">        h1, h2 = map(self.sortList, split(head))</span><br><span class="line">        <span class="comment"># merge 2 条链</span></span><br><span class="line">        <span class="keyword">return</span> merge(h1, h2)</span><br></pre></td></tr></table></figure><p>优化合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 归并排序</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(h)</span>:</span></span><br><span class="line">            slow = h</span><br><span class="line">            fast = h.next</span><br><span class="line">            <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">                fast = fast.next.next</span><br><span class="line">                slow = slow.next</span><br><span class="line">            t = slow.next</span><br><span class="line">            slow.next = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(h, t)</span></span><br><span class="line">            <span class="keyword">return</span> h, t</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(h1, h2)</span>:</span></span><br><span class="line">            dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">            cur = dummy</span><br><span class="line">            <span class="keyword">while</span> h1 <span class="keyword">and</span> h2:</span><br><span class="line">                <span class="keyword">if</span> h1.val&lt;h2.val:</span><br><span class="line">                    cur.next = h1</span><br><span class="line">                    cur = cur.next</span><br><span class="line">                    h1 = h1.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cur.next = h2</span><br><span class="line">                    cur = cur.next</span><br><span class="line">                    h2 = h2.next</span><br><span class="line">            <span class="keyword">if</span> h1: cur.next = h1</span><br><span class="line">            <span class="keyword">if</span> h2: cur.next = h2</span><br><span class="line">            <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 把链划分 2 半，递归排序</span></span><br><span class="line">        h1, h2 = map(self.sortList, split(head))</span><br><span class="line">        <span class="comment"># merge 2 条链</span></span><br><span class="line">        <span class="keyword">return</span> merge(h1, h2)</span><br></pre></td></tr></table></figure><h2 id="速度对比"><a href="#速度对比" class="headerlink" title="速度对比"></a>速度对比</h2><p>归并慢些</p><p><img src="https://i.loli.net/2020/08/02/jsFn69BiDbMo87c.png" alt="image-20200802095356739"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-list/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/sort-list/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Sort a linked list in &lt;em&gt;O&lt;/em&gt; ( &lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt; ) time using constant space&lt;br&gt;complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3
Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: -1-&amp;gt;5-&amp;gt;3-&amp;gt;4-&amp;gt;0
Output: -1-&amp;gt;0-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Linked List, Sort&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
    
      <category term="Linked List" scheme="https://zronghui.github.io/tags/Linked-List/"/>
    
      <category term="Sort" scheme="https://zronghui.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%9B%BE.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%9B%BE.html</id>
    <published>2020-08-01T04:03:59.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="有向图-floyd-算法"><a href="#有向图-floyd-算法" class="headerlink" title="有向图 floyd 算法"></a>有向图 floyd 算法</h2><p>经验：</p><p>若求的是 2 个节点之间，往往用 xfs 或 并查集，因为用 Floyd 的复杂度过高，如<a href="https://leetcode-cn.com/problems/route-between-nodes-lcci/">面试题 04.01. 节点间通路 - 力扣（LeetCode）</a></p><p>若求的是 queries (要查询多个节点对)，这时候用 flyod 好一点，如<a href="https://leetcode-cn.com/problems/course-schedule-iv/">1462. 课程安排 IV - 力扣（LeetCode）</a></p><h3 id="1462-课程安排-IV-力扣（LeetCode）"><a href="#1462-课程安排-IV-力扣（LeetCode）" class="headerlink" title="1462. 课程安排 IV - 力扣（LeetCode）"></a>1462. 课程安排 IV - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/">1462. 课程安排 IV - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres: dp[a][b] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> [dp[a][b] <span class="keyword">for</span> a, b <span class="keyword">in</span> qs]</span><br></pre></td></tr></table></figure><h3 id="743-网络延迟时间-力扣（LeetCode）"><a href="#743-网络延迟时间-力扣（LeetCode）" class="headerlink" title="743. 网络延迟时间 - 力扣（LeetCode）"></a>743. 网络延迟时间 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/network-delay-time/submissions/">743. 网络延迟时间 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span><span class="params">(self, times: List[List[int]], N: int, S: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [[<span class="number">-1</span>]*(N+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> u, v, w <span class="keyword">in</span> times:</span><br><span class="line">            dp[u][v] = w</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">-1</span> <span class="keyword">not</span> <span class="keyword">in</span> (dp[i][k], dp[k][j]):</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">-1</span>==dp[i][j] <span class="keyword">or</span> dp[i][j]&gt;dp[i][k]+dp[k][j]:</span><br><span class="line">                            dp[i][j] = dp[i][k]+dp[k][j]</span><br><span class="line">        res = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i==S: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">-1</span>==dp[S][i]: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            res = max(res, dp[S][i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="1334-阈值距离内邻居最少的城市-力扣（LeetCode）"><a href="#1334-阈值距离内邻居最少的城市-力扣（LeetCode）" class="headerlink" title="1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）"></a>1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/submissions/">1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTheCity</span><span class="params">(self, n: int, edges: List[List[int]], distanceThreshold: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [[float(<span class="string">'inf'</span>)]*n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i, j, w <span class="keyword">in</span> edges:</span><br><span class="line">            dp[i][j]=  w</span><br><span class="line">            dp[j][i]=  w</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># if i==k: continue</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="comment"># if j in [k, j]: continue</span></span><br><span class="line">                    dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j])</span><br><span class="line">        l = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="comment"># 连通城市个数</span></span><br><span class="line">        mi = <span class="number">-1</span></span><br><span class="line">        m = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> j!=i <span class="keyword">and</span> dp[i][j]&lt;=distanceThreshold:</span><br><span class="line">                    l[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l[i]&lt;=m:</span><br><span class="line">                mi = i</span><br><span class="line">                m = l[i]</span><br><span class="line">        <span class="keyword">return</span> mi</span><br></pre></td></tr></table></figure><h2 id="无向图-dijkstra-算法"><a href="#无向图-dijkstra-算法" class="headerlink" title="无向图 dijkstra 算法"></a>无向图 dijkstra 算法</h2><h3 id="1514-概率最大的路径-力扣（LeetCode）"><a href="#1514-概率最大的路径-力扣（LeetCode）" class="headerlink" title="1514. 概率最大的路径 - 力扣（LeetCode）"></a>1514. 概率最大的路径 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/path-with-maximum-probability/">1514. 概率最大的路径 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProbability</span><span class="params">(self, n: int, e: List[List[int]], succProb: List[float], start: int, end: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># defaultdict 构造 graph</span></span><br><span class="line">        graph = collections.defaultdict(dict)</span><br><span class="line">        <span class="comment"># 因为这个题目比较特殊，权重是乘性的并且0-1之间，所以可以用一个dic记录从start开始到每个节点的最大权重。 然后每次你只需要判断pop出的节点的权重就可以。如果比曾经记录的dic中的权重小那就没必要继续（这里面包含了环，回头），如果比曾经记录的权重大，那么继续进行。</span></span><br><span class="line">        d = collections.defaultdict(float)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">            p1, p2 = e[i]</span><br><span class="line">            graph[p1][p2] = succProb[i]</span><br><span class="line">            graph[p2][p1] = succProb[i]</span><br><span class="line">        stack = collections.deque()</span><br><span class="line">        stack.append([start, <span class="number">1</span>]) <span class="comment"># start 到 当前点 的 概率</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            cur, prob = stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur==end:</span><br><span class="line">                ans = max(ans, prob)</span><br><span class="line">            <span class="keyword">elif</span> prob&gt;ans:</span><br><span class="line">                <span class="keyword">for</span> point, _prob <span class="keyword">in</span> graph[cur].items():</span><br><span class="line">                    <span class="keyword">if</span> _prob*prob&gt;ans <span class="keyword">and</span> _prob*prob&gt;d.get(point, <span class="number">0</span>):</span><br><span class="line">                        d[point] = _prob*prob</span><br><span class="line">                        stack.append([point, _prob*prob])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="207-课程表-力扣（LeetCode）"><a href="#207-课程表-力扣（LeetCode）" class="headerlink" title="207. 课程表 - 力扣（LeetCode）"></a>207. 课程表 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/course-schedule/">207. 课程表 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/course-schedule/solution/course-schedule-tuo-bu-pai-xu-bfsdfsliang-chong-fa/">课程表（拓扑排序：入度表BFS法 / DFS法，清晰图解） - 课程表 - 力扣（LeetCode）</a><br><a href="https://www.bilibili.com/video/av17399461">拓扑排序_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, n: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        indegrees, adjacency = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)], [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> prerequisites:</span><br><span class="line">            indegrees[b] += <span class="number">1</span></span><br><span class="line">            adjacency[a].append(b)</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> indegrees[i]: queue.append(i)</span><br><span class="line">        <span class="comment"># path = []</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            path.append(cur)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> adjacency[cur]:</span><br><span class="line">                indegrees[i] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> indegrees[i]: queue.append(i)</span><br><span class="line">        <span class="comment"># print(path)</span></span><br><span class="line">        <span class="keyword">return</span> count==n</span><br></pre></td></tr></table></figure><h3 id="210-课程表-II-力扣（LeetCode）"><a href="#210-课程表-II-力扣（LeetCode）" class="headerlink" title="210. 课程表 II - 力扣（LeetCode）"></a>210. 课程表 II - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/course-schedule-ii/submissions/">210. 课程表 II - 力扣（LeetCode）</a></p><p>依赖关系反过来了，而且需要记录 pop 的节点顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, n: int, prerequisites: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        indegrees, adjacency = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)], [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> b, a <span class="keyword">in</span> prerequisites:</span><br><span class="line">            indegrees[b] += <span class="number">1</span></span><br><span class="line">            adjacency[a].append(b)</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> indegrees[i]: queue.append(i)</span><br><span class="line">        path = []</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            path.append(cur)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> adjacency[cur]:</span><br><span class="line">                indegrees[i] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> indegrees[i]: queue.append(i)</span><br><span class="line">        <span class="comment"># print(path)</span></span><br><span class="line">        <span class="keyword">return</span> path <span class="keyword">if</span> count==n <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure><h3 id="802-找到最终的安全状态-力扣（LeetCode）"><a href="#802-找到最终的安全状态-力扣（LeetCode）" class="headerlink" title="802 找到最终的安全状态 - 力扣（LeetCode）"></a>802 找到最终的安全状态 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-eventual-safe-states/submissions/">802. 找到最终的安全状态 - 力扣（LeetCode）</a></p><p><a href="https://leetcode-cn.com/problems/find-eventual-safe-states/solution/tuo-bu-pai-xu-cong-chu-du-wei-0de-hu-wei-fan-xiang/">拓扑排序：从出度为0的弧尾反向拓扑到弧头（muyi） - 找到最终的安全状态 - 力扣（LeetCode）</a></p><p>定义安全的点：路径终点，也就是出度为0的点</p><p>定义最终安全的点：从起始节点开始，可以沿某个路径到达终点，那么起始节点就是最终安全的点。</p><p>找到出度为0的顶点，这些点是安全的点<br>逆向删除以出度为0的顶点为弧头的边，弧尾的出度减一<br>重复上面两步，直到不存在出度为0的顶点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eventualSafeNodes</span><span class="params">(self, graph: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(graph)</span><br><span class="line">        outdegrees, adjacency = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)], [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> graph[a]:</span><br><span class="line">                outdegrees[a] += <span class="number">1</span></span><br><span class="line">                adjacency[b].append(a)</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> outdegrees[i]: queue.append(i)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="comment"># count = 0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            path.append(cur)</span><br><span class="line">            <span class="comment"># count += 1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> adjacency[cur]:</span><br><span class="line">                outdegrees[i] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> outdegrees[i]: queue.append(i)</span><br><span class="line">        <span class="comment"># print(path)</span></span><br><span class="line">        <span class="keyword">return</span> sorted(path)</span><br></pre></td></tr></table></figure><h3 id="310-最小高度树-力扣（LeetCode）"><a href="#310-最小高度树-力扣（LeetCode）" class="headerlink" title="310. 最小高度树 - 力扣（LeetCode）"></a>310. 最小高度树 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/minimum-height-trees/submissions/">310. 最小高度树 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinHeightTrees</span><span class="params">(self, n: int, edges: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">3</span>: <span class="keyword">return</span> list(range(n))</span><br><span class="line">        <span class="comment"># 每次移除所有的叶子节点，直到为空，返回最后一次非空的列表</span></span><br><span class="line">        <span class="comment"># 最后一次非空时，节点一定不大于 2 (等于 3 时， 一定有非叶子节点的节点)</span></span><br><span class="line">        degrees = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="comment"># 入度或出度</span></span><br><span class="line">        adjacency = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> edges:</span><br><span class="line">            adjacency[i].append(j)</span><br><span class="line">            adjacency[j].append(i)</span><br><span class="line">            degrees[i] += <span class="number">1</span></span><br><span class="line">            degrees[j] += <span class="number">1</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        s = set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> degrees[i]==<span class="number">1</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> n-len(s)&lt;<span class="number">3</span>: <span class="keyword">return</span> list(set(range(n))-s)</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">                i = queue.popleft()</span><br><span class="line">                degrees[i] -= <span class="number">1</span></span><br><span class="line">                s.add(i)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> adjacency[i]:</span><br><span class="line">                    <span class="keyword">if</span> j <span class="keyword">in</span> s: <span class="keyword">continue</span></span><br><span class="line">                    degrees[j] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> degrees[j]==<span class="number">1</span>:</span><br><span class="line">                        queue.append(j)</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1042-不邻接植花-力扣（LeetCode）"><a href="#1042-不邻接植花-力扣（LeetCode）" class="headerlink" title="1042. 不邻接植花 - 力扣（LeetCode）"></a>1042. 不邻接植花 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/flower-planting-with-no-adjacent/">1042. 不邻接植花 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gardenNoAdj</span><span class="params">(self, N: int, paths: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">chooseone</span><span class="params">(exclude)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> exclude: <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">        m = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> paths:</span><br><span class="line">            m[a].append(b)</span><br><span class="line">            m[b].append(a)</span><br><span class="line">        res = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">            res[i<span class="number">-1</span>] = chooseone(exclude=[res[j<span class="number">-1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> m[i]])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res[i]: res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>简洁写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gardenNoAdj</span><span class="params">(self, N: int, paths: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        m = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> paths:</span><br><span class="line">            m[a<span class="number">-1</span>].append(b<span class="number">-1</span>)</span><br><span class="line">            m[b<span class="number">-1</span>].append(a<span class="number">-1</span>)</span><br><span class="line">        res = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            res[i] = (&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;-&#123;res[j] <span class="keyword">for</span> j <span class="keyword">in</span> m[i]&#125;).pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="997-找到小镇的法官-力扣（LeetCode）"><a href="#997-找到小镇的法官-力扣（LeetCode）" class="headerlink" title="997. 找到小镇的法官 - 力扣（LeetCode）"></a>997. 找到小镇的法官 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-the-town-judge/comments/">997. 找到小镇的法官 - 力扣（LeetCode）</a></p><p>晦涩的解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N: int, trust: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trust: </span><br><span class="line">            <span class="keyword">if</span> N==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># judge 不在 a 中</span></span><br><span class="line">        <span class="comment"># judge 出现 N-1 次</span></span><br><span class="line">        s = set(range(<span class="number">1</span>, N+<span class="number">1</span>))</span><br><span class="line">        m = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> trust:</span><br><span class="line">            m[b] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">in</span> s: s.remove(a)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> len(s)&gt;<span class="number">1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        res = s.pop()</span><br><span class="line">        <span class="keyword">if</span> m[res]==N<span class="number">-1</span>: <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/find-the-town-judge/solution/yi-ge-shu-zu-gao-ding-tong-su-yi-dong-997-zhao-dao/">【一个数组搞定】通俗易懂（997. 找到小镇的法官） - 找到小镇的法官 - 力扣（LeetCode）</a></p><p>法官👩‍⚖️ 实际上就是出度为0，入度为 N - 1的节点。这固然没错，然而我们仍然可以换个角度来思考，法官👩‍⚖️ 同样是 入度 - 出度 == N - 1 的点，并且不是法官的人不可能是。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N: int, trust: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        l = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> trust:</span><br><span class="line">            l[a<span class="number">-1</span>] -= <span class="number">1</span></span><br><span class="line">            l[b<span class="number">-1</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> l[i]==N<span class="number">-1</span>: <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="841-钥匙和房间-力扣（LeetCode）"><a href="#841-钥匙和房间-力扣（LeetCode）" class="headerlink" title="841. 钥匙和房间 - 力扣（LeetCode）"></a>841. 钥匙和房间 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/keys-and-rooms/submissions/">841. 钥匙和房间 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canVisitAllRooms</span><span class="params">(self, rooms: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 从 0 是否全部连通其他点</span></span><br><span class="line">        visited, queue = set(), [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.pop()</span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            visited.add(cur)</span><br><span class="line">            queue.extend(rooms[cur])</span><br><span class="line">        <span class="keyword">return</span> set(range(len(rooms)))==visited</span><br></pre></td></tr></table></figure><h3 id="1267-统计参与通信的服务器-力扣（LeetCode）"><a href="#1267-统计参与通信的服务器-力扣（LeetCode）" class="headerlink" title="1267. 统计参与通信的服务器 - 力扣（LeetCode）"></a>1267. 统计参与通信的服务器 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/count-servers-that-communicate/submissions/">1267. 统计参与通信的服务器 - 力扣（LeetCode）</a></p><p>暴力</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countServers</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        rows, cols = defaultdict(int), defaultdict(int)</span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]:</span><br><span class="line">                    rows[i] += <span class="number">1</span></span><br><span class="line">                    cols[j] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]:</span><br><span class="line">                    <span class="keyword">if</span> max(rows[i], cols[j])&gt;<span class="number">1</span>:</span><br><span class="line">                        res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="133-克隆图-力扣（LeetCode）"><a href="#133-克隆图-力扣（LeetCode）" class="headerlink" title="133. 克隆图 - 力扣（LeetCode）"></a>133. 克隆图 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/clone-graph/submissions/">133. 克隆图 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/clone-graph/solution/dfs-he-bfs-by-powcai/">DFS 和 BFS - 克隆图 - 力扣（LeetCode）</a></p><p>dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val = 0, neighbors = []):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.neighbors = neighbors</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cloneGraph</span><span class="params">(self, node: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">in</span> d: <span class="keyword">return</span> d[node]</span><br><span class="line">            clone = Node(node.val)</span><br><span class="line">            d[node] = clone</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                clone.neighbors.append(dfs(neighbor))</span><br><span class="line">            <span class="comment"># d[node] = clone 放这里    ↑ dfs 不断递归调用</span></span><br><span class="line">            <span class="keyword">return</span> clone</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfs(node) <span class="keyword">if</span> node <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="1306-跳跃游戏-III-力扣（LeetCode）"><a href="#1306-跳跃游戏-III-力扣（LeetCode）" class="headerlink" title="1306. 跳跃游戏 III - 力扣（LeetCode）"></a>1306. 跳跃游戏 III - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/jump-game-iii/">1306. 跳跃游戏 III - 力扣（LeetCode）</a></p><p>floyd 超时 用 bfs 解决</p><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canReach</span><span class="params">(self, arr: List[int], start: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> arr[start]==<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 有向图 判断 start 到 0 处是否可达</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        i0 = [] <span class="comment"># 0 的 index</span></span><br><span class="line">        dp = [[<span class="literal">False</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> arr[i]==<span class="number">0</span>:</span><br><span class="line">                i0.append(i)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i+arr[i]&lt;n:</span><br><span class="line">                dp[i][i+arr[i]] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i-arr[i]&gt;=<span class="number">0</span>:</span><br><span class="line">                dp[i][i-arr[i]] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> i0:</span><br><span class="line">            <span class="keyword">if</span> dp[start][i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canReach</span><span class="params">(self, arr: List[int], start: int)</span> -&gt; bool:</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        visited = set()</span><br><span class="line">        deque = [start]</span><br><span class="line">        <span class="keyword">while</span> deque:</span><br><span class="line">            cur = deque.pop()</span><br><span class="line">            <span class="keyword">if</span> arr[cur]==<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            visited.add(cur)</span><br><span class="line">            <span class="keyword">for</span> nxt <span class="keyword">in</span> [cur+arr[cur], cur-arr[cur]]:</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;=nxt&lt;n <span class="keyword">and</span> nxt <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    deque.append(nxt)</span><br><span class="line">            <span class="comment"># print(visited, deque)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="面试题-04-01-节点间通路-力扣（LeetCode）"><a href="#面试题-04-01-节点间通路-力扣（LeetCode）" class="headerlink" title="面试题 04.01. 节点间通路 - 力扣（LeetCode）"></a>面试题 04.01. 节点间通路 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/route-between-nodes-lcci/">面试题 04.01. 节点间通路 - 力扣（LeetCode）</a></p><p>flyod 超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWhetherExistsPath</span><span class="params">(self, n: int, graph: List[List[int]], start: int, target: int)</span> -&gt; bool:</span></span><br><span class="line">        dp = [[<span class="literal">False</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> graph:</span><br><span class="line">            dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> dp[start][target]</span><br></pre></td></tr></table></figure><p><del>xfs</del> dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWhetherExistsPath</span><span class="params">(self, n: int, graph: List[List[int]], start: int, target: int)</span> -&gt; bool:</span></span><br><span class="line">        visited = set()</span><br><span class="line">        m = collections.defaultdict(set)</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> graph:</span><br><span class="line">            m[i].add(j)</span><br><span class="line">        queue = [start]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.pop()</span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> visited: <span class="keyword">continue</span></span><br><span class="line">            visited.add(cur)</span><br><span class="line">            <span class="keyword">if</span> cur==target: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> m[cur]:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    queue.append(i)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="1361-验证二叉树-力扣（LeetCode）"><a href="#1361-验证二叉树-力扣（LeetCode）" class="headerlink" title="1361. 验证二叉树 - 力扣（LeetCode）"></a>1361. 验证二叉树 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/validate-binary-tree-nodes/submissions/">1361. 验证二叉树 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validateBinaryTreeNodes</span><span class="params">(self, n: int, leftChild: List[int], rightChild: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 所有节点入度为 1， 除了 1 个节点没有入度（root）</span></span><br><span class="line">        <span class="comment"># 然后从 root 开始遍历，若能无环地遍历所有节点，则满足条件</span></span><br><span class="line">        indegrees = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            left, right = leftChild[i], rightChild[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="number">-1</span>!=left: indegrees[left] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">-1</span>!=right: indegrees[right] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> max(indegrees[left], indegrees[right])&gt;<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        root = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> indegrees[i]==<span class="number">0</span>: </span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                root = i</span><br><span class="line">                <span class="keyword">if</span> cnt&gt;<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> cnt==<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        s = set()</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> s: <span class="keyword">return</span> <span class="literal">False</span> <span class="comment"># 已经遍历过，说明有环</span></span><br><span class="line">            s.add(cur)</span><br><span class="line">            <span class="keyword">if</span> leftChild[cur]!=<span class="number">-1</span>: queue.append(leftChild[cur])</span><br><span class="line">            <span class="keyword">if</span> rightChild[cur]!=<span class="number">-1</span>: queue.append(rightChild[cur])</span><br><span class="line">        <span class="keyword">return</span> len(s)==n</span><br></pre></td></tr></table></figure><h3 id="1162-地图分析-力扣（LeetCode）"><a href="#1162-地图分析-力扣（LeetCode）" class="headerlink" title="1162. 地图分析 - 力扣（LeetCode）"></a>1162. 地图分析 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/submissions/">1162. 地图分析 - 力扣（LeetCode）</a></p><p>bfs</p><p>python 无法跳出指定的外层 loop，可以用函数 return 实现同样的效果，且代码更清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDistance</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">-1</span></span><br><span class="line">        n = len(grid)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">valid</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>&lt;=i&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=j&lt;n <span class="keyword">and</span> grid[i][j]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">maxDis</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> dis <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">2</span>*n):</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> range(dis+<span class="number">1</span>):</span><br><span class="line">                    y = dis-x</span><br><span class="line">                    <span class="keyword">if</span> any([valid(i+x, j+y), valid(i+x, j-y), valid(i-x, j+y), valid(i-x, j-y)]):</span><br><span class="line">                        <span class="keyword">return</span> dis</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]: <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># cur = -1</span></span><br><span class="line">                res = max(res, maxDis(i, j))</span><br><span class="line">                <span class="comment"># print(i, j, maxDis(i, j))</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-08</title>
    <link href="https://zronghui.github.io/tricks-2020-08.html"/>
    <id>https://zronghui.github.io/tricks-2020-08.html</id>
    <published>2020-08-01T04:03:43.000Z</published>
    <updated>2020-08-20T12:58:17.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0c9c0dd3ca6833daa1e30cee95f7f4e8db2fe63a2db743726d7a1e1ae38e72b6"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
  </entry>
  
</feed>
