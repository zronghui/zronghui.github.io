<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-04-20T02:25:56.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斐讯K2路由刷机</title>
    <link href="https://zronghui.github.io/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7%E6%9C%BA.html"/>
    <id>https://zronghui.github.io/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7%E6%9C%BA.html</id>
    <published>2020-04-20T00:03:32.000Z</published>
    <updated>2020-04-20T02:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ol><li>手机上连接无线网，查看无线网详情，可以看到路由器配置地址</li><li>手动更新 刷V22.6.526.199官方固件</li><li>刷入Breed</li><li>刷入第三方固件 </li></ol><p><a href="http://www.upantool.com/gujian/phicomm/14035.html">斐讯K2 V22.6.526.199官方固件-刷机备用下载-斐讯固件-U盘量产网</a></p><p><a href="https://tbvv.net/posts/0101-breed.html">斐讯K1、K2、K2P 刷机、刷入Breed 辅助工具 | tb</a></p><p><a href="https://github.com/moonjoin/k2-firmware">moonjoin/k2-firmware: 斐讯K2刷机，固件，breed</a></p><img src="https://i.loli.net/2020/04/20/bTgrHKL3CG8sZjy.png" alt="bTgrHKL3CG8sZjy" style="zoom:50%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-24</title>
    <link href="https://zronghui.github.io/biweekly-contest-24.html"/>
    <id>https://zronghui.github.io/biweekly-contest-24.html</id>
    <published>2020-04-19T01:56:34.000Z</published>
    <updated>2020-04-20T02:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 64. Minimum Path Sum</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-64-Minimum-Path-Sum.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-64-Minimum-Path-Sum.html</id>
    <published>2020-04-18T10:29:46.000Z</published>
    <updated>2020-04-20T02:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-path-sum/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/minimum-path-sum/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top<br>left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p><p><strong>Note:</strong> You can only move either down or right at any point in time.</p><p><strong>Example:</strong></p><pre><code>Input:[  [1,3,1],  [1,5,1],  [4,2,1]]Output: 7Explanation: Because the path 1-&gt;3-&gt;1-&gt;1-&gt;1 minimizes the sum.</code></pre><p><strong>Tags:</strong> Array, Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 3. dp</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        m = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">and</span> j==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> i==<span class="number">0</span>:</span><br><span class="line">                    grid[i][j] += grid[i][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> j==<span class="number">0</span>:</span><br><span class="line">                    grid[i][j] += grid[i<span class="number">-1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    grid[i][j] += min(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line">    <span class="comment">#  1. 简单的递归</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum1</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(grid, n, m, i, j)</span>:</span></span><br><span class="line">            res = grid[i][j]</span><br><span class="line">            <span class="keyword">if</span> i==n<span class="number">-1</span> <span class="keyword">and</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> i==n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res + helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res + helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">            <span class="keyword">return</span> res + min(helper(grid, n, m, i, j+<span class="number">1</span>), helper(grid, n, m, i+<span class="number">1</span>, j))</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> helper(grid, len(grid), len(grid[<span class="number">0</span>]), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 递归 + 存储 递归过程值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum2</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        m = len(grid[<span class="number">0</span>])</span><br><span class="line">        cache = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]<span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(grid, n, m, i, j)</span>:</span></span><br><span class="line">            res = grid[i][j]</span><br><span class="line">            <span class="keyword">if</span> i==n<span class="number">-1</span> <span class="keyword">and</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> i==n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> cache[i][j+<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> res+cache[i][j+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    t = helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">                    cache[i][j+<span class="number">1</span>] = t</span><br><span class="line">                    <span class="keyword">return</span> res + t</span><br><span class="line">            <span class="keyword">elif</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> cache[i+<span class="number">1</span>][j]:</span><br><span class="line">                    <span class="keyword">return</span> res+cache[i+<span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    t = helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">                    cache[i+<span class="number">1</span>][j] = t</span><br><span class="line">                    <span class="keyword">return</span> res + t</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> cache[i][j+<span class="number">1</span>]:</span><br><span class="line">                t1 = cache[i][j+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t1 = helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">                cache[i][j+<span class="number">1</span>] = t1</span><br><span class="line">            <span class="keyword">if</span> cache[i+<span class="number">1</span>][j]:</span><br><span class="line">                t2 = cache[i+<span class="number">1</span>][j] </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t2 = helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">                cache[i+<span class="number">1</span>][j] = t2</span><br><span class="line">            <span class="keyword">return</span> res + min(t1, t2)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> helper(grid, n, m, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/minimum-path-sum/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; grid filled with non-negative numbers, find a path from top&lt;br&gt;left to bottom right which &lt;em&gt;minimizes&lt;/em&gt; the sum of all numbers along its path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can only move either down or right at any point in time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1-&amp;gt;3-&amp;gt;1-&amp;gt;1-&amp;gt;1 minimizes the sum.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 200. Number of Islands</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-200-Number-of-Islands.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-200-Number-of-Islands.html</id>
    <published>2020-04-17T11:04:26.000Z</published>
    <updated>2020-04-17T11:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-islands/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/number-of-islands/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of<br>islands. An island is surrounded by water and is formed by connecting adjacent<br>lands horizontally or vertically. You may assume all four edges of the grid<br>are all surrounded by water.</p><p><strong>Example 1:</strong></p><pre><code>Input:11110110101100000000Output:  1</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:11000110000010000011Output: 3</code></pre><p><strong>Tags:</strong> Depth-first Search, Breadth-first Search, Union Find</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeIsland</span><span class="params">(self, grid, i, j, n, m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=n <span class="keyword">or</span> j&gt;=m <span class="keyword">or</span> grid[i][j]==<span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        grid[i][j] = <span class="string">'0'</span></span><br><span class="line">        self.removeIsland(grid, i<span class="number">-1</span>, j, n, m)</span><br><span class="line">        self.removeIsland(grid, i+<span class="number">1</span>, j, n, m)</span><br><span class="line">        self.removeIsland(grid, i, j<span class="number">-1</span>, n, m)</span><br><span class="line">        self.removeIsland(grid, i, j+<span class="number">1</span>, n, m)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, i, j, n, m)</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/number-of-islands/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a 2d grid map of &lt;code&gt;&amp;#39;1&amp;#39;&lt;/code&gt;s (land) and &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt;s (water), count the number of&lt;br&gt;islands. An island is surrounded by water and is formed by connecting adjacent&lt;br&gt;lands horizontally or vertically. You may assume all four edges of the grid&lt;br&gt;are all surrounded by water.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
11110
11010
11000
00000

Output:  1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
11000
11000
00100
00011

Output: 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Depth-first Search, Breadth-first Search, Union Find&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Breadth-first Search" scheme="https://zronghui.github.io/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="https://zronghui.github.io/tags/Depth-first-Search/"/>
    
      <category term="Union Find" scheme="https://zronghui.github.io/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 844. Backspace String Compare</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-8**/leetcode-844-Backspace-String-Compare.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-8**/leetcode-844-Backspace-String-Compare.html</id>
    <published>2020-04-17T09:39:09.000Z</published>
    <updated>2020-04-17T11:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/backspace-string-compare/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/backspace-string-compare/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two strings <code>S</code> and <code>T</code>, return if they are equal when both are typed<br>into empty text editors. <code>#</code> means a backspace character.</p><p><strong>Example 1:</strong></p><pre><code>Input: S = &quot;ab#c&quot;, T = &quot;ad#c&quot;Output: true**Explanation** : Both S and T become &quot;ac&quot;.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: S = &quot;ab</code></pre><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/backspace-string-compare/solution/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode/">比较含退格的字符串 - 比较含退格的字符串 - 力扣（LeetCode）</a></p><p>虽然第二种看起来厉害点，space O(1), 但是time memory 都不如第一种，不知为何</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">backspace</span><span class="params">(self, S)</span>:</span></span><br><span class="line"><span class="function">        res </span>= <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i in S:</span><br><span class="line">            <span class="keyword">if</span> i!=<span class="string">'#'</span>:</span><br><span class="line">                res += i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = res[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function">def <span class="title">backspaceCompare1</span><span class="params">(self, S: str, T: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        s </span>= self.backspace(S)</span><br><span class="line">        t = self.backspace(T)</span><br><span class="line">        <span class="keyword">return</span> s==t</span><br><span class="line">    </span><br><span class="line">    <span class="function">def <span class="title">backspaceCompare</span><span class="params">(self, S: str, T: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        def <span class="title">skip</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="function">            skip </span>= <span class="number">0</span></span><br><span class="line">            <span class="function"><span class="keyword">for</span> i in <span class="title">reversed</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="function">                <span class="keyword">if</span> i</span>==<span class="string">'#'</span>:</span><br><span class="line">                    skip += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> skip:</span><br><span class="line">                        skip -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        yield i</span><br><span class="line">        <span class="keyword">return</span> all(x==y <span class="keyword">for</span> x, y in itertools.zip_longest(skip(S), skip(T)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/backspace-string-compare/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/backspace-string-compare/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two strings &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt;, return if they are equal when both are typed&lt;br&gt;into empty text editors. &lt;code&gt;#&lt;/code&gt; means a backspace character.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: S = &amp;quot;ab#c&amp;quot;, T = &amp;quot;ad#c&amp;quot;
Output: true
**Explanation** : Both S and T become &amp;quot;ac&amp;quot;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: S = &amp;quot;ab&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-8**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-8/"/>
    
    
      <category term="Stack" scheme="https://zronghui.github.io/tags/Stack/"/>
    
      <category term="Two Pointers" scheme="https://zronghui.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 55. Jump Game</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-55-Jump-Game.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-55-Jump-Game.html</id>
    <published>2020-04-17T04:40:04.000Z</published>
    <updated>2020-04-17T11:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/jump-game/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/jump-game/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array of non-negative integers, you are initially positioned at the<br>first index of the array.</p><p>Each element in the array represents your maximum jump length at that<br>position.</p><p>Determine if you are able to reach the last index.</p><p><strong>Example 1:</strong></p><pre><code>Input: [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [3,2,1,0,4]Output: falseExplanation: You will always arrive at index 3 no matter what. Its maximum             jump length is 0, which makes it impossible to reach the last index.</code></pre><p><strong>Tags:</strong> Array, Greedy</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/">跳跃游戏 - 跳跃游戏 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump1</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 12:29-12:34  5min</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [<span class="number">0</span>]*n</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> dp[i]:</span><br><span class="line">                <span class="comment"># 0-&gt;3 1 2 3</span></span><br><span class="line">                dp[i+<span class="number">1</span>:min(n, i+<span class="number">1</span>+nums[i])] = [<span class="number">1</span>] * nums[i]</span><br><span class="line">                <span class="keyword">if</span> dp[<span class="number">-1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> bool(dp[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 贪心</span></span><br><span class="line">        <span class="comment"># 12:37-12:39.5   2.5min</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i&gt;m:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            m = max(m, i+nums[i])</span><br><span class="line">            <span class="keyword">if</span> m&gt;=n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> m&gt;=n<span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/jump-game/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the&lt;br&gt;first index of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your maximum jump length at that&lt;br&gt;position.&lt;/p&gt;
&lt;p&gt;Determine if you are able to reach the last index.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Greedy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Greedy" scheme="https://zronghui.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 72. Edit Distance</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-72-Edit-Distance.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-72-Edit-Distance.html</id>
    <published>2020-04-16T14:38:56.000Z</published>
    <updated>2020-04-17T01:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/edit-distance/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/edit-distance/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two words <em>word1</em> and <em>word2</em> , find the minimum number of operations<br>required to convert <em>word1</em> to <em>word2</em>.</p><p>You have the following 3 operations permitted on a word:</p><ol><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ol><p><strong>Example 1:</strong></p><pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;Output: 3Explanation: horse -&gt; rorse (replace &apos;h&apos; with &apos;r&apos;)rorse -&gt; rose (remove &apos;r&apos;)rose -&gt; ros (remove &apos;e&apos;)</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;Output: 5Explanation: intention -&gt; inention (remove &apos;t&apos;)inention -&gt; enention (replace &apos;i&apos; with &apos;e&apos;)enention -&gt; exention (replace &apos;n&apos; with &apos;x&apos;)exention -&gt; exection (replace &apos;n&apos; with &apos;c&apos;)exection -&gt; execution (insert &apos;u&apos;)</code></pre><p><strong>Tags:</strong> String, Dynamic Programming</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/edit-distance/solution/xiong-mao-shua-ti-python3-dong-tai-gui-hua-yi-dong/">(2) 【🐼熊猫刷题Python3】用视频讲DP, 一听就懂 - 编辑距离 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, w1: str, w2: str)</span> -&gt; int:</span></span><br><span class="line">        n, m = len(w1), len(w2)</span><br><span class="line">        <span class="keyword">if</span>  min(n, m)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> max(n, m)</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]<span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 边界值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = j</span><br><span class="line">        <span class="comment"># 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> w1[i<span class="number">-1</span>]==w2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/edit-distance/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two words &lt;em&gt;word1&lt;/em&gt; and &lt;em&gt;word2&lt;/em&gt; , find the minimum number of operations&lt;br&gt;required to convert &lt;em&gt;word1&lt;/em&gt; to &lt;em&gt;word2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You have the following 3 operations permitted on a word:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insert a character&lt;/li&gt;
&lt;li&gt;Delete a character&lt;/li&gt;
&lt;li&gt;Replace a character&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: word1 = &amp;quot;horse&amp;quot;, word2 = &amp;quot;ros&amp;quot;
Output: 3
Explanation: 
horse -&amp;gt; rorse (replace &amp;apos;h&amp;apos; with &amp;apos;r&amp;apos;)
rorse -&amp;gt; rose (remove &amp;apos;r&amp;apos;)
rose -&amp;gt; ros (remove &amp;apos;e&amp;apos;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: word1 = &amp;quot;intention&amp;quot;, word2 = &amp;quot;execution&amp;quot;
Output: 5
Explanation: 
intention -&amp;gt; inention (remove &amp;apos;t&amp;apos;)
inention -&amp;gt; enention (replace &amp;apos;i&amp;apos; with &amp;apos;e&amp;apos;)
enention -&amp;gt; exention (replace &amp;apos;n&amp;apos; with &amp;apos;x&amp;apos;)
exention -&amp;gt; exection (replace &amp;apos;n&amp;apos; with &amp;apos;c&amp;apos;)
exection -&amp;gt; execution (insert &amp;apos;u&amp;apos;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 678. Valid Parenthesis String</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-678-Valid-Parenthesis-String.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-678-Valid-Parenthesis-String.html</id>
    <published>2020-04-16T11:17:33.000Z</published>
    <updated>2020-04-17T01:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-parenthesis-string/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/valid-parenthesis-string/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’,<br>write a function to check whether this string is valid. We define the validity<br>of a string by these rules:</p><ol><li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li><li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li><li>An empty string is also valid.</li></ol><p><strong>Example 1:</strong>  </p><pre><code>Input: &quot;()&quot;Output: True</code></pre><p><strong>Example 2:</strong>  </p><pre><code>Input: &quot;(*)&quot;Output: True</code></pre><p><strong>Example 3:</strong>  </p><pre><code>Input: &quot;(*))&quot;Output: True</code></pre><p><strong>Note:</strong>  </p><ol><li>The string size will be in the range [1, 100].</li></ol><p><strong>Tags:</strong> String</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/solution/you-xiao-de-gua-hao-zi-fu-chuan-by-leetcode/">有效的括号字符串 - 有效的括号字符串 - 力扣（LeetCode）</a></p><img src="https://i.loli.net/2020/04/16/cftrJKkDhgmVRal.png" alt="cftrJKkDhgmVRal" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">checkValidString</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        lo </span>= hi = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i in s:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'('</span>:</span><br><span class="line">                lo += <span class="number">1</span></span><br><span class="line">                hi += <span class="number">1</span></span><br><span class="line">            elif i==<span class="string">')'</span>:</span><br><span class="line">                lo = max(<span class="number">0</span>, lo-<span class="number">1</span>)</span><br><span class="line">                hi -= <span class="number">1</span></span><br><span class="line">            elif i==<span class="string">'*'</span>:</span><br><span class="line">                lo = max(<span class="number">0</span>, lo-<span class="number">1</span>)</span><br><span class="line">                hi += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> hi&lt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> False</span><br><span class="line">        print(lo, hi)</span><br><span class="line">        <span class="keyword">return</span> lo==<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parenthesis-string/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/valid-parenthesis-string/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’,&lt;br&gt;write a function to check whether this string is valid. We define the validity&lt;br&gt;of a string by these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; must have a corresponding right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt; must have a corresponding left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; must go before the corresponding right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt; could be treated as a single right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt; or a single left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; or an empty string.&lt;/li&gt;
&lt;li&gt;An empty string is also valid.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;()&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(*)&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(*))&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The string size will be in the range [1, 100].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 238. Product of Array Except Self</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-238-Product-of-Array-Except-Self%20(copy).html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-238-Product-of-Array-Except-Self%20(copy).html</id>
    <published>2020-04-16T05:14:28.000Z</published>
    <updated>2020-04-17T01:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/product-of-array-except-self/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/product-of-array-except-self/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code><br>such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code><br>except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><pre><code>Input:  [1,2,3,4]Output: [24,12,8,6]</code></pre><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O( <em>n</em> ).</p><p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does<br>not</strong> count as extra space for the purpose of space complexity analysis.)</p><p><strong>Tags:</strong> Array</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode/">除自身以外数组的乘积 - 除自身以外数组的乘积 - 力扣（LeetCode）</a></p><p>方法一：左右乘积列表<br>我们不必将所有数字的乘积除以给定索引处的数字得到相应的答案，而是可以利用索引处左侧的所有数字乘积和右侧所有数字的乘积相乘得到答案。</p><p>对于给定索引 ii，我们将使用它左边所有数字的乘积乘以右边所有数字的乘积。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        productBefore = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">        productAfter = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            productBefore[i] = productBefore[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            productAfter[i] = productAfter[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>]</span><br><span class="line">        print(productBefore, productAfter)</span><br><span class="line">        <span class="keyword">return</span> list(i*j <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(productBefore, productAfter))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        L, R, answer = [<span class="number">0</span>]*length, [<span class="number">0</span>]*length, [<span class="number">0</span>]*length</span><br><span class="line">        L[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">            L[i] = nums[i - <span class="number">1</span>] * L[i - <span class="number">1</span>]</span><br><span class="line">        R[length - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(length - <span class="number">1</span>)):</span><br><span class="line">            R[i] = nums[i + <span class="number">1</span>] * R[i + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>方法二：空间复杂度 O(1) 的方法<br>尽管上面的方法已经能够很好的解决这个问题，但是不是常数的空间复杂度。</p><p><strong>由于输出数组不算在空间复杂度内，那么我们可以将 L 或 R 数组在用输出数组来计算，然后再动态构造另一个</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        res = [<span class="number">1</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            res[i] = res[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]</span><br><span class="line">        R = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(n<span class="number">-1</span>)):</span><br><span class="line">            R *= nums[i+<span class="number">1</span>]</span><br><span class="line">            res[i] *= R</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/product-of-array-except-self/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/product-of-array-except-self/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers where &lt;em&gt;n&lt;/em&gt; &amp;gt; 1,  return an array &lt;code&gt;output&lt;/code&gt;&lt;br&gt;such that &lt;code&gt;output[i]&lt;/code&gt; is equal to the product of all the elements of &lt;code&gt;nums&lt;/code&gt;&lt;br&gt;except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:  [1,2,3,4]
Output: [24,12,8,6]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please solve it &lt;strong&gt;without division&lt;/strong&gt; and in O( &lt;em&gt;n&lt;/em&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you solve it with constant space complexity? (The output array &lt;strong&gt;does&lt;br&gt;not&lt;/strong&gt; count as extra space for the purpose of space complexity analysis.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-180</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-180.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-180.html</id>
    <published>2020-04-15T03:32:33.000Z</published>
    <updated>2020-04-16T01:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix">Lucky Numbers in a Matrix</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/design-a-stack-with-increment-operation">Design a Stack With Increment Operation</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/balance-a-binary-search-tree">Balance a Binary Search Tree</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team">Maximum Performance of a Team</a><strong>6</strong></li></ul><a id="more"></a><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTo</span><span class="params">(self, d, i, m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> d:</span><br><span class="line">            d[i].append(m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d[i] = [m]</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">luckyNumbers</span> <span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> matrix:</span><br><span class="line">            m = min(l)</span><br><span class="line">            <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(l):</span><br><span class="line">                <span class="keyword">if</span> v==m:</span><br><span class="line">                    self.addTo(d, i, m)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">            m = max(i[k] <span class="keyword">for</span> i <span class="keyword">in</span> matrix)</span><br><span class="line">            result.extend(i <span class="keyword">for</span> i <span class="keyword">in</span> v <span class="keyword">if</span> i==m)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxSize: int)</span>:</span></span><br><span class="line">        self.left = maxSize</span><br><span class="line">        self.l = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.left&gt;<span class="number">0</span>:</span><br><span class="line">            self.l.append(x)</span><br><span class="line">            self.left -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.l:</span><br><span class="line">            self.left += <span class="number">1</span></span><br><span class="line">            result = self.l[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">del</span> self.l[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(self, k: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(k, len(self.l))):</span><br><span class="line">            self.l[i] +=  val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your CustomStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = CustomStack(maxSize)</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># obj.increment(k,val)</span></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><a href="https://www.acwing.com/solution/LeetCode/content/10001/">LeetCode 1382. Balance a Binary Search Tree - AcWing</a></p><img src="https://i.loli.net/2020/04/15/OHumJwqtc6CyTNa.png" alt="OHumJwqtc6CyTNa" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNums</span><span class="params">(self, root, l)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.getNums(root.left, l)</span><br><span class="line">        l.append(root.val)</span><br><span class="line">        self.getNums(root.right, l)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, l)</span>:</span></span><br><span class="line">        n = len(l)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = int(n/<span class="number">2</span>)</span><br><span class="line">        root = TreeNode(l[mid])</span><br><span class="line">        root.left = self.build(l[:mid])</span><br><span class="line">        root.right = self.build(l[mid+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balanceBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        l = []</span><br><span class="line">        self.getNums(root, l)</span><br><span class="line">        <span class="keyword">if</span> len(l)&lt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> self.build(l)</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p><a href="https://leetcode-cn.com/problems/maximum-performance-of-a-team/solution/pai-xu-dui-python-by-elmer/">排序+堆(Python) - 最大的团队表现值 - 力扣（LeetCode）</a></p><p>思路：</p><p>按efficiency进行降序排列，<br>遍历排序后的speed和efficiency，在遍历过程中进行以下操作：<br>(1)将speed放入最小堆中，<br>(2)保持堆的大小为k，<br>(3)记录堆中speed之和，<br>(4)寻找最大团队表现值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush <span class="keyword">as</span> push</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop <span class="keyword">as</span> pop</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mod = <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPerformance</span><span class="params">(self, n: int, speed: List[int], efficiency: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        l = sorted(zip(speed, efficiency), key=<span class="keyword">lambda</span> i: -i[<span class="number">1</span>])</span><br><span class="line">        speed_sum = <span class="number">0</span></span><br><span class="line">        speedl = []</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s, e <span class="keyword">in</span> l:</span><br><span class="line">            push(speedl, s)</span><br><span class="line">            speed_sum += s</span><br><span class="line">            <span class="keyword">if</span> len(speedl)&gt;k:</span><br><span class="line">                speed_sum -= pop(speedl)</span><br><span class="line">            res = max(res, speed_sum*e)</span><br><span class="line">        <span class="keyword">return</span> res%self.mod</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix&quot;&gt;Lucky Numbers in a Matrix&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/design-a-stack-with-increment-operation&quot;&gt;Design a Stack With Increment Operation&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/balance-a-binary-search-tree&quot;&gt;Balance a Binary Search Tree&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team&quot;&gt;Maximum Performance of a Team&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>信息系统实训-0415作业</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-0415%E4%BD%9C%E4%B8%9A.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-0415%E4%BD%9C%E4%B8%9A.html</id>
    <published>2020-04-15T02:01:07.000Z</published>
    <updated>2020-04-16T01:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><img src="https://i.loli.net/2020/04/15/JHFlfZjV6CtcXMR.png" alt="JHFlfZjV6CtcXMR" style="zoom:33%;" /><img src="https://i.loli.net/2020/04/15/EvcptA14NG6Yw5M.png" alt="EvcptA14NG6Yw5M" style="zoom:50%;" /><h2 id="插入数据代码"><a href="#插入数据代码" class="headerlink" title="插入数据代码"></a>插入数据代码</h2><img src="https://i.loli.net/2020/04/15/6l4dbpaKAR1BImz.png" alt="6l4dbpaKAR1BImz" style="zoom:50%;" /><h2 id="查询代码"><a href="#查询代码" class="headerlink" title="查询代码"></a>查询代码</h2><img src="https://i.loli.net/2020/04/15/ZTB4PLGXE3kFDHJ.png" alt="ZTB4PLGXE3kFDHJ" style="zoom:50%;" /><h2 id="搜索输出结果"><a href="#搜索输出结果" class="headerlink" title="搜索输出结果"></a>搜索输出结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">python es.py                                        </span><br><span class="line">&#123;'_shards': &#123;'failed': 0, 'skipped': 0, 'successful': 5, 'total': 5&#125;,</span><br><span class="line"> 'hits': &#123;'hits': [&#123;'_id': 'dzytX3EBBdNqBssliOYU',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '乔舒亚·克拉克《无器械健身》（女性版）epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/140592.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['乔舒亚·克拉克《无器械&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;》（女性版）epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'jDytX3EBBdNqBssleDAQ',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《无器械健身》 mobi格式下载',</span><br><span class="line">                                'book_url': 'https://pan.shudan.vip/5751.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《无器械&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;》 '</span><br><span class="line">                                                '&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;格式下载']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'JDytX3EBBdNqBsslhtSD',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《硬派健身·减肥篇》知乎盐系列/知乎斌卡自选集/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/135932.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《硬派&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;·减肥篇》知乎盐系列/知乎斌卡自选集/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': '2DytX3EBBdNqBsslhtjt',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《再见，健身房》高宇/徒手与器械体能训练天然强壮/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/137126.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《再见，&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;房》高宇/徒手与器械体能训练天然强壮/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'tTytX3EBBdNqBsslh956',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《健康脑》丹尼尔·亚蒙/常减肥健身失败原因/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/138629.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《健康脑》丹尼尔·亚蒙/常减肥&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;失败原因/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'yzytX3EBBdNqBssliOcU',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '蒂莫西·费里斯《每周健身4小时》实验成果epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/140928.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['蒂莫西·费里斯《每周&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;4小时》实验成果epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'hz2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《整个巴黎属于我》布鲁姆/细看野生天才的黄金时代/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161569.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《整个巴黎属于我》布鲁姆/细看野生天才的黄金时代/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'jD2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《自指引擎》圆城塔/每个故事的缝隙都隐藏着无数故事/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161574.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《自指引擎》圆城塔/每个故事的缝隙都隐藏着无数故事/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'kj2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《黑暗物质：精灵守护神》菲利普·普尔曼/奇幻经典/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161580.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《黑暗物质：精灵守护神》菲利普·普尔曼/奇幻经典/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'lD2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《营销革命3.0》[轻携版]菲利普·科特勒/深度的关联/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161582.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《营销革命3.0》[轻携版]菲利普·科特勒/深度的关联/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;],</span><br><span class="line">          'max_score': 2.0,</span><br><span class="line">          'total': 18902&#125;,</span><br><span class="line"> 'timed_out': False,</span><br><span class="line"> 'took': 127&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="信息系统实训" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/"/>
    
      <category term="提交作业" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 155. Min Stack</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-155-Min-Stack.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-155-Min-Stack.html</id>
    <published>2020-04-15T01:58:44.000Z</published>
    <updated>2020-04-17T11:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/min-stack/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/min-stack/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum<br>element in constant time.</p><ul><li>push(x) – Push element x onto stack.</li><li>pop() – Removes the element on top of the stack.</li><li>top() – Get the top element.</li><li>getMin() – Retrieve the minimum element in the stack.</li></ul><p><strong>Example:</strong></p><pre><code>MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin();   --&gt; Returns -3.minStack.pop();minStack.top();      --&gt; Returns 0.minStack.getMin();   --&gt; Returns -2.</code></pre><p><strong>Tags:</strong> Stack, Design</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">class MinStack:</span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="function">        """</span></span><br><span class="line"><span class="function">        initialize your data structure here.</span></span><br><span class="line"><span class="function">        """</span></span><br><span class="line"><span class="function">        self.m </span>= sys.maxsize</span><br><span class="line">        self.minl = []</span><br><span class="line">        self.l = []</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">push</span><span class="params">(self, x: <span class="keyword">int</span>)</span> -&gt; None:</span></span><br><span class="line"><span class="function">        self.l.<span class="title">append</span><span class="params">(x)</span></span></span><br><span class="line"><span class="function">        self.m </span>= min(x, self.m)</span><br><span class="line">        self.minl.append(self.m)</span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">pop</span><span class="params">(self)</span> -&gt; None:</span></span><br><span class="line"><span class="function">        self.l.<span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        self.minl.<span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">if</span> self.minl:</span></span><br><span class="line"><span class="function">            self.m </span>= self.minl[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.m = sys.maxsize</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">top</span><span class="params">(self)</span> -&gt; <span class="keyword">int</span>:</span></span><br><span class="line"><span class="function">        return self.l[-1]</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    def <span class="title">getMin</span><span class="params">(self)</span> -&gt; <span class="keyword">int</span>:</span></span><br><span class="line"><span class="function">        return self.minl[-1]</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="function"># obj </span>= MinStack()</span><br><span class="line"># obj.push(x)</span><br><span class="line"># obj.pop()</span><br><span class="line"># param_3 = obj.top()</span><br><span class="line"># param_4 = obj.getMin()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/min-stack/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/min-stack/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Design a stack that supports push, pop, top, and retrieving the minimum&lt;br&gt;element in constant time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – Push element x onto stack.&lt;/li&gt;
&lt;li&gt;pop() – Removes the element on top of the stack.&lt;/li&gt;
&lt;li&gt;top() – Get the top element.&lt;/li&gt;
&lt;li&gt;getMin() – Retrieve the minimum element in the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --&amp;gt; Returns -3.
minStack.pop();
minStack.top();      --&amp;gt; Returns 0.
minStack.getMin();   --&amp;gt; Returns -2.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Stack, Design&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Stack" scheme="https://zronghui.github.io/tags/Stack/"/>
    
      <category term="Design" scheme="https://zronghui.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 543. Diameter of Binary Tree</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-543-Diameter-of-Binary-Tree.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-543-Diameter-of-Binary-Tree.html</id>
    <published>2020-04-14T05:30:49.000Z</published>
    <updated>2020-04-17T01:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/diameter-of-binary-tree/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/diameter-of-binary-tree/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a binary tree, you need to compute the length of the diameter of the<br>tree. The diameter of a binary tree is the length of the <strong>longest</strong> path<br>between any two nodes in a tree. This path may or may not pass through the<br>root.</p><p><strong>Example:</strong><br>Given a binary tree  </p><pre><code>    1   / \  2   3 / \     4   5    </code></pre><p>Return <strong>3</strong> , which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of<br>edges between them.</p><p><strong>Tags:</strong> Tree</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>思路：</p><p>任意一条路径均可以被看作由某个节点为起点，从其左儿子和右儿子向下遍历的路径拼接得到。</p><p>心得：</p><p>在递归函数的开头判断是否为 None，而不用分别判断 左 右和 root</p><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    dia = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.depth(root.left)</span><br><span class="line">        right = self.depth(root.right)</span><br><span class="line">        </span><br><span class="line">        depth = max(left, right)+<span class="number">1</span></span><br><span class="line">        self.dia = max(self.dia, left+right)</span><br><span class="line">        <span class="keyword">return</span> depth</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        self.depth(root)</span><br><span class="line">        <span class="keyword">return</span> self.dia</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/diameter-of-binary-tree/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/diameter-of-binary-tree/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a binary tree, you need to compute the length of the diameter of the&lt;br&gt;tree. The diameter of a binary tree is the length of the &lt;strong&gt;longest&lt;/strong&gt; path&lt;br&gt;between any two nodes in a tree. This path may or may not pass through the&lt;br&gt;root.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;Given a binary tree  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1
   / \
  2   3
 / \     
4   5    &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Return &lt;strong&gt;3&lt;/strong&gt; , which is the length of the path [4,2,1,3] or [5,2,1,3].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The length of path between two nodes is represented by the number of&lt;br&gt;edges between them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Tree&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;任意一条路径均可以被看作由某个节点为起点，从其左儿子和右儿子向下遍历的路径拼接得到。&lt;/p&gt;
&lt;p&gt;心得：&lt;/p&gt;
&lt;p&gt;在递归函数的开头判断是否为 None，而不用分别判断 左 右和 root&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Tree" scheme="https://zronghui.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 525. Contiguous Array</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-525-Contiguous-Array.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-525-Contiguous-Array.html</id>
    <published>2020-04-13T09:34:46.000Z</published>
    <updated>2020-04-17T01:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/contiguous-array/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/contiguous-array/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a binary array, find the maximum length of a contiguous subarray with<br>equal number of 0 and 1.</p><p><strong>Example 1:</strong>  </p><pre><code>Input: [0,1]Output: 2Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</code></pre><p><strong>Example 2:</strong>  </p><pre><code>Input: [0,1,0]Output: 2Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</code></pre><p><strong>Note:</strong> The length of the given binary array will not exceed 50,000.</p><p><strong>Tags:</strong> Hash Table</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxLength</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        m = &#123;<span class="number">0</span>: <span class="number">-1</span>&#125;</span><br><span class="line">        <span class="comment"># 遇到 1 的时候， count 变量加 1 ，遇到 0 的时候 count 变量减 1</span></span><br><span class="line">        <span class="comment"># 如果我们在遍历数组的过程汇中遇到了相同的 count 2 次，这意味着这两个位置之间 0 和 1 的数目一样多</span></span><br><span class="line">        <span class="comment"># 因此我们只需要使用一个 HashMap来保存所有的 (index, count)对。对于一个 count ，我们只记录它第一次出现的位置，后面遇到相同的 count我们都用这个第一次记录的 index 来计算子数组的长度</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> v:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count <span class="keyword">in</span> m:</span><br><span class="line">                res = max(res, i-m[count])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m[count] = i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/contiguous-array/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/contiguous-array/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a binary array, find the maximum length of a contiguous subarray with&lt;br&gt;equal number of 0 and 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The length of the given binary array will not exceed 50,000.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Hash Table&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Hash Table" scheme="https://zronghui.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>biweekly-contest-22</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-22.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-22.html</id>
    <published>2020-04-13T05:17:54.000Z</published>
    <updated>2020-04-14T05:36:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/biweekly-contest-22/problems/find-the-distance-value-between-two-arrays">Find the Distance Value Between Two Arrays</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/biweekly-contest-22/problems/cinema-seat-allocation">Cinema Seat Allocation</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/biweekly-contest-22/problems/sort-integers-by-the-power-value">Sort Integers by The Power Value</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/biweekly-contest-22/problems/pizza-with-3n-slices">Pizza With 3n Slices</a><strong>7</strong></li></ul><a id="more"></a><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">satisfy</span><span class="params">(self, arr2, i, d)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> arr2:</span><br><span class="line">            <span class="keyword">if</span> abs(j-i)&lt;=d:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTheDistanceValue</span><span class="params">(self, arr1: List[int], arr2: List[int], d: int)</span> -&gt; int:</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr1:</span><br><span class="line">            <span class="keyword">if</span> self.satisfy(arr2, i, d):</span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumberOfFamiliesCurrentRow</span><span class="params">(self, l)</span>:</span></span><br><span class="line">        a1 = <span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> l <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> l</span><br><span class="line">        a2 = <span class="number">4</span> <span class="keyword">not</span> <span class="keyword">in</span> l <span class="keyword">and</span> <span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> l</span><br><span class="line">        a3 = <span class="number">6</span> <span class="keyword">not</span> <span class="keyword">in</span> l <span class="keyword">and</span> <span class="number">7</span> <span class="keyword">not</span> <span class="keyword">in</span> l</span><br><span class="line">        a4 = <span class="number">8</span> <span class="keyword">not</span> <span class="keyword">in</span> l <span class="keyword">and</span> <span class="number">9</span> <span class="keyword">not</span> <span class="keyword">in</span> l</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> a1:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a2:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a3:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a4:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (a1 <span class="keyword">and</span> a2) <span class="keyword">or</span> (a2 <span class="keyword">and</span> a3) <span class="keyword">or</span> (a3 <span class="keyword">and</span> a4):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumberOfFamilies1</span><span class="params">(self, n: int, reservedSeats: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 超时</span></span><br><span class="line">        d = &#123;i:[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>)&#125;</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> reservedSeats:</span><br><span class="line">            d[i].append(j)</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d.values():</span><br><span class="line">            n += self.maxNumberOfFamiliesCurrentRow(i)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumberOfFamilies</span><span class="params">(self, n: int, reservedSeats: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> reservedSeats:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">                d[i] = [j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[i].append(j)</span><br><span class="line">        n = <span class="number">2</span>*(n-len(d))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> d.values():</span><br><span class="line">            n += self.maxNumberOfFamiliesCurrentRow(i)</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPower</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                n /= <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = n*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getKth</span><span class="params">(self, lo: int, hi: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(lo, hi+<span class="number">1</span>):</span><br><span class="line">            d[i] = self.getPower(i)</span><br><span class="line">        l = list(d.items())</span><br><span class="line">        l.sort(key=<span class="keyword">lambda</span> i: i[<span class="number">1</span>])</span><br><span class="line">        <span class="comment">#print(l)</span></span><br><span class="line">        <span class="keyword">return</span> l[k<span class="number">-1</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p><a href="https://www.acwing.com/solution/LeetCode/content/10196/">LeetCode 1388. Pizza With 3n Slices - AcWing</a></p><img src="https://i.loli.net/2020/04/13/5StfrDRZJ7W3mE2.png" alt="5StfrDRZJ7W3mE2" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, slices, n)</span>:</span></span><br><span class="line">        m = len(slices)</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = slices[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = max(slices[<span class="number">0</span>], slices[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], slices[i])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-2</span>][j<span class="number">-1</span>]+slices[i])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSizeSlices</span><span class="params">(self, slices: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = int(len(slices)/<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> max(self.helper(slices[<span class="number">1</span>:], n), self.helper(slices[:<span class="number">-1</span>], n))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/biweekly-contest-22/problems/find-the-distance-value-between-two-arrays&quot;&gt;Find the Distance Value Between Two Arrays&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/biweekly-contest-22/problems/cinema-seat-allocation&quot;&gt;Cinema Seat Allocation&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/biweekly-contest-22/problems/sort-integers-by-the-power-value&quot;&gt;Sort Integers by The Power Value&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/biweekly-contest-22/problems/pizza-with-3n-slices&quot;&gt;Pizza With 3n Slices&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>todo</title>
    <link href="https://zronghui.github.io/todo/todo.html"/>
    <id>https://zronghui.github.io/todo/todo.html</id>
    <published>2020-04-12T08:18:15.000Z</published>
    <updated>2020-04-14T05:36:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ul><li><input disabled="" type="checkbox"> 自建 RSS 服务器 （RSS2.0 RSS1.0 ATOM1.0 的区别？ ）</li><li><input disabled="" type="checkbox"> Cli 将 md 的图片调整统一的缩放比例</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="todo" scheme="https://zronghui.github.io/categories/todo/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-184</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-184.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-184.html</id>
    <published>2020-04-12T06:32:41.000Z</published>
    <updated>2020-04-12T13:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-184/problems/string-matching-in-an-array">String Matching in an Array</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-184/problems/queries-on-a-permutation-with-key">Queries on a Permutation With Key</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-184/problems/html-entity-parser">HTML Entity Parser</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-184/problems/number-of-ways-to-paint-n-3-grid">Number of Ways to Paint N × 3 Grid</a><strong>7</strong></li></ul><a id="more"></a><p><img src="https://i.loli.net/2020/04/12/8socHYSt76UrE9D.png" alt="8socHYSt76UrE9D"></p><p>值得纪念，第一次写完了，体验到一把做完题目的爽快感，虽然排名依旧很落后</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>本来打算按照长度排个序，却卡住了</p><p>`a.sort(key=lambda i: len(i))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stringMatching</span><span class="params">(self, words: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> words:</span><br><span class="line">            <span class="comment"># 判断 i 是否为 j 的子串</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> words:</span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> res <span class="keyword">or</span> i==j <span class="keyword">or</span> len(i)&gt;=len(j):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> j <span class="keyword">and</span> i <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                    res.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>逆序 range(index, 0, -1)</p><p> p[1:index+1] = p[:index]  灵机一动，试了一下，还真可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processQueries</span><span class="params">(self, queries: List[int], m: int)</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(queries)</span><br><span class="line">        p = list(range(<span class="number">1</span>, m+<span class="number">1</span>))</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> queries:</span><br><span class="line">            index = p.index(i)</span><br><span class="line">            res.append(index)</span><br><span class="line">            p[<span class="number">1</span>:index+<span class="number">1</span>] = p[:index]</span><br><span class="line">            <span class="comment">#for j in range(1, index+1):</span></span><br><span class="line">            <span class="comment">#    p[j] = p[j-1]</span></span><br><span class="line">            p[<span class="number">0</span>] = i</span><br><span class="line">            <span class="comment"># print(p)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">entityParser</span><span class="params">(self, text: str)</span> -&gt; str:</span></span><br><span class="line">        m = &#123;</span><br><span class="line">            <span class="string">'&amp;quot;'</span>: <span class="string">'"'</span>,</span><br><span class="line">            <span class="string">'&amp;apos;'</span>: <span class="string">"'"</span>,</span><br><span class="line">            <span class="string">'&amp;amp;'</span>: <span class="string">"&amp;"</span>,</span><br><span class="line">            <span class="string">'&amp;gt;'</span>: <span class="string">"&gt;"</span>,</span><br><span class="line">            <span class="string">'&amp;lt;'</span>: <span class="string">"&lt;"</span>,</span><br><span class="line">            <span class="string">'&amp;frasl;'</span>: <span class="string">"/"</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> m.items():</span><br><span class="line">            text = text.replace(key, value)</span><br><span class="line">        <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>一开始没想通，弄歪门邪道，拟合：</p><p><a href="http://www.qinms.com/webapp/curvefit/cf.aspx">在线曲线拟合神器_村美小站</a></p><p>拟合效果还挺好</p><img src="https://i.loli.net/2020/04/12/wUWsE6FYxhBa9Sc.png" alt="wUWsE6FYxhBa9Sc" style="zoom:50%;" /><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>主要 2 种情况，1. 形如 1 2 3  2. 形如 1 2 1</p><p>设以上两种情况各 x y 个</p><p>1个 1 2 3 可衍生出 2 个 x，2 个 y</p><p>1个 1 2 1 可衍生出 2 个 x，3 个 y</p><p>因此<strong>推导式</strong>：</p><p>x’ = 2x+2y</p><p>y’ = 2x+3y</p><p><strong>起始状态</strong>：</p><p>n = 1 时，x =  y = 6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numOfWays</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">12</span></span><br><span class="line">        x = y = <span class="number">6</span></span><br><span class="line">        <span class="comment"># 执行 n-1 次循环</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            tx, ty = x, y</span><br><span class="line">            x = (<span class="number">2</span>*tx+<span class="number">2</span>*ty)%(<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br><span class="line">            y = (<span class="number">2</span>*tx+<span class="number">3</span>*ty)%(<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br><span class="line">        <span class="keyword">return</span> (x+y)%(<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>卡住了换一种思路，时间最重要，赛后再想</p><p>测试的时候可以 print，提交的时候一定要注释掉</p><p>不要想着走捷径，没有意义</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-184/problems/string-matching-in-an-array&quot;&gt;String Matching in an Array&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-184/problems/queries-on-a-permutation-with-key&quot;&gt;Queries on a Permutation With Key&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-184/problems/html-entity-parser&quot;&gt;HTML Entity Parser&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-184/problems/number-of-ways-to-paint-n-3-grid&quot;&gt;Number of Ways to Paint N × 3 Grid&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-181</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-181.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-181.html</id>
    <published>2020-04-11T13:14:52.000Z</published>
    <updated>2020-04-12T13:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-181/problems/create-target-array-in-the-given-order">Create Target Array in the Given Order</a><strong>3</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-181/problems/four-divisors">Four Divisors</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-181/problems/check-if-there-is-a-valid-path-in-a-grid">Check if There is a Valid Path in a Grid</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-181/problems/longest-happy-prefix">Longest Happy Prefix</a> <strong>6</strong></li></ul><a id="more"></a><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createTargetArray</span><span class="params">(self, nums: List[int], index: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> num, index <span class="keyword">in</span> zip(nums, index):</span><br><span class="line">            result.insert(index, num)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>为什么我就不会暴力呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFourDivisors</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># return 0 or sum of four divisors of n</span></span><br><span class="line">        cnt = <span class="number">2</span> <span class="comment"># 1 以及 自身</span></span><br><span class="line">        res = <span class="number">1</span>+n</span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> i*i&gt;n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i*i==n:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> n%i:</span><br><span class="line">                cnt += <span class="number">2</span></span><br><span class="line">                res += i + n/i</span><br><span class="line">            <span class="keyword">if</span> cnt&gt;<span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt==<span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> int(res)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumFourDivisors</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> sum(self.isFourDivisors(i) <span class="keyword">for</span> i <span class="keyword">in</span> nums)</span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>这题很恶心，也没说清楚，得自己试，浪费了很多时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># direction 表示上一个格子到当前格子的流动方向</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextij</span><span class="params">(self, grid, i, j, direction)</span>:</span></span><br><span class="line">        num = grid[i][j]</span><br><span class="line">        <span class="comment"># print([num, direction])</span></span><br><span class="line">        <span class="keyword">if</span> [num, direction] <span class="keyword">in</span> [[<span class="number">1</span>, <span class="string">'right'</span>], [<span class="number">4</span>, <span class="string">'up'</span>], [<span class="number">6</span>, <span class="string">'down'</span>]]:</span><br><span class="line">            <span class="keyword">return</span> i, j+<span class="number">1</span>, <span class="string">'right'</span></span><br><span class="line">        <span class="keyword">if</span> [num, direction] <span class="keyword">in</span> [[<span class="number">1</span>, <span class="string">'left'</span>], [<span class="number">3</span>, <span class="string">'up'</span>], [<span class="number">5</span>, <span class="string">'down'</span>]]:</span><br><span class="line">            <span class="keyword">return</span> i, j<span class="number">-1</span>, <span class="string">'left'</span></span><br><span class="line">        <span class="keyword">if</span> [num, direction] <span class="keyword">in</span> [[<span class="number">2</span>, <span class="string">'up'</span>], [<span class="number">5</span>, <span class="string">'right'</span>], [<span class="number">6</span>, <span class="string">'left'</span>]]:</span><br><span class="line">            <span class="keyword">return</span> i<span class="number">-1</span>, j, <span class="string">'up'</span></span><br><span class="line">        <span class="keyword">if</span> [num, direction] <span class="keyword">in</span> [[<span class="number">2</span>, <span class="string">'down'</span>], [<span class="number">3</span>, <span class="string">'right'</span>], [<span class="number">4</span>, <span class="string">'left'</span>]]:</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>, j, <span class="string">'down'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasValidPath</span><span class="params">(self, grid: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        m = len(grid)</span><br><span class="line">        n = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> m==n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> grid[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="number">5</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> grid[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>]:</span><br><span class="line">            direction = <span class="string">'right'</span></span><br><span class="line">            <span class="keyword">return</span> self.helper(grid, m, n, i, j, direction)</span><br><span class="line">        <span class="keyword">elif</span> grid[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">6</span>]:</span><br><span class="line">            direction = <span class="string">'down'</span></span><br><span class="line">            <span class="keyword">return</span> self.helper(grid, m, n, i, j, direction)</span><br><span class="line">        <span class="keyword">elif</span> grid[<span class="number">0</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="number">4</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.helper(grid, m, n, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'right'</span>) <span class="keyword">or</span> self.helper(grid, m, n, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'down'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, grid, m, n, i, j, direction)</span>:</span></span><br><span class="line">        walked = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            nextijResult = self.nextij(grid, i, j, direction)</span><br><span class="line">            <span class="comment"># print('nextijResult', nextijResult)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nextijResult:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            nexti, nextj, direction = nextijResult</span><br><span class="line">            <span class="comment"># print(nexti, nextj, direction)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span>&lt;=nexti&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=nextj&lt;n):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> walked[nexti][nextj]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> nexti==m<span class="number">-1</span> <span class="keyword">and</span> nextj==n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> bool(self.nextij(grid, nexti, nextj, direction))</span><br><span class="line">            walked[i][j] = <span class="number">1</span></span><br><span class="line">            i, j = nexti, nextj</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>kmp pi函数或者说 next fail 函数的性质题，输出匹配到最后位置的最长前缀即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPrefix</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        nxt = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># i 前缀</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="comment"># j 后缀</span></span><br><span class="line">        j = nxt[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;n):</span><br><span class="line">            <span class="keyword">while</span>(j!=<span class="number">-1</span> <span class="keyword">and</span> s[i]!=s[j]):</span><br><span class="line">                j = nxt[j]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            nxt[i] = j</span><br><span class="line">        <span class="comment"># print(nxt)</span></span><br><span class="line">        <span class="keyword">return</span> s[:nxt[<span class="number">-1</span>]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-181/problems/create-target-array-in-the-given-order&quot;&gt;Create Target Array in the Given Order&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-181/problems/four-divisors&quot;&gt;Four Divisors&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-181/problems/check-if-there-is-a-valid-path-in-a-grid&quot;&gt;Check if There is a Valid Path in a Grid&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-181/problems/longest-happy-prefix&quot;&gt;Longest Happy Prefix&lt;/a&gt; &lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain</title>
    <link href="https://zronghui.github.io/blockchain/blockchain.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain.html</id>
    <published>2020-04-10T04:11:01.000Z</published>
    <updated>2020-04-17T11:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://www.bilibili.com/video/BV1oJ411E7Lg">【回形针PaperClip】区块链到底是什么？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><h3 id="区块链技术在政府数据治理中的应用：优势、挑战与对策"><a href="#区块链技术在政府数据治理中的应用：优势、挑战与对策" class="headerlink" title="区块链技术在政府数据治理中的应用：优势、挑战与对策"></a>区块链技术在政府数据治理中的应用：优势、挑战与对策</h3><p><a href="https://www.sohu.com/a/272144896_224692">区块链技术在政府数据治理中的应用：优势、挑战与对策</a></p><p><strong>二、政府数据治理面临的主要问题</strong></p><p>（一）政府数据质量管理差</p><p>数据质量管理差主要表现在3个方面：数据的真实性不够、数据的一致性不高、数据的时效性不强</p><p>（二）政府数据安全管控弱</p><p>数据安全管控弱主要体现在网络安全保障不力和个人隐私保护不够两个方面</p><p>（三）政府数据开放共享难</p><p>政府数据开放共享包括两层含义，一是通过信息公开的方式将政府数据传播给市场和社会，使其在“数据—决策—效益”的过程挖掘数据的价值；二是通过数据库、云端等平台实现政府数据在层级间、区域间、部门间的开放共享，让政府在政务服务中提升质量和效率。</p><p><strong>三、区块链技术在政府数据治理中的应用优势</strong></p><p>与问题对应</p><p>（一）可追溯的分布式数据系统有助于提高数据质量</p><p>各主体通过访问数据系统，将各项社会活动录入区块链或确认交易，使得有关社会事务的事件、信息能在大范围、短时间内实现快速的全网广播、匹配、核查和认定。需要强调的是，任何治理活动的信息与数据只有通过全网广播获得其他主体的核实与认可后，才能被完整地写入区块链；如果数据不实或不被认可，系统将自动拒绝写入，这有助于保证数据系统的真实性与完整性。</p><p>（二）非对称加密技术与哈希算法有助于保障数据安全</p><p>另外，区块链的数据存储在分布式的链式结构中，确保<strong>数据的多重备份</strong>，提高数据库的容错性和安全性</p><p>（三）点对点技术与智能合约有助于实现数据共享</p><p><strong>四、区块链技术应用于政府数据治理的挑战</strong></p><p>（一）理念变革：去中心化带来管理权威挑战</p><p>政府在治理体系中不再占据核心的支配地位，而与其他主体处于相对平等的地位</p><p>（二）机制变革：去信任化带来安全监管挑战</p><p>如果个人的私钥泄露，将会出现参与者的个人信息全部在网络上公布的问题，严重影响用户的个人隐私。如果个人的私钥丢失，那么个人无法再次访问区块链中的存储数据，无法获取个人的证明信息，从而影响用户的有形资产的归属情况</p><p>（三）制度变革：技术创新带来法律秩序挑战</p><p>区块链的运用与现行法律存在一定的冲突</p><h3 id="一种基于区块链的数据防篡改系统及其方法"><a href="#一种基于区块链的数据防篡改系统及其方法" class="headerlink" title="一种基于区块链的数据防篡改系统及其方法"></a>一种基于区块链的数据防篡改系统及其方法</h3><p><a href="https://www.ixueshu.com/document/57827a485ac3460c504572619bc20e72318947a18e7f9386.html">一种基于区块链的数据防篡改系统及其方法_爱学术</a></p><img src="https://i.loli.net/2020/04/17/vwF6XaQf9WNnRUz.png" alt="vwF6XaQf9WNnRUz" style="zoom:50%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>shop</title>
    <link href="https://zronghui.github.io/%E4%B9%B0%E4%B9%B0%E4%B9%B0/shop.html"/>
    <id>https://zronghui.github.io/%E4%B9%B0%E4%B9%B0%E4%B9%B0/shop.html</id>
    <published>2020-04-10T02:42:00.000Z</published>
    <updated>2020-04-12T13:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="阿米洛-VDbox-键盘宝"><a href="#阿米洛-VDbox-键盘宝" class="headerlink" title="阿米洛 VDbox 键盘宝"></a>阿米洛 VDbox 键盘宝</h2><p>我最近在家办公的时候经常拿 iPad 来当副屏幕，但我的机械键盘没有无线功能，所以每次需要切换打字的时候都很麻烦。我希望找·一个给机械键盘增加蓝牙无线功能的方法，在进行了一阵研究后，我最终找到了「阿米洛 VDbox 键盘宝」。 </p><p><img src="https://cdn.sspai.com/2020/04/09/a6ad36bd1e1c90848faa0b3baf3361ca.png" alt="img"></p><p>这个小工具的原理很简单，其实就是一个蓝牙发射接收器。把你的机械键盘连接到它上面，然后再把电脑和键盘宝连接好就可以使用了。它可以最多配对 3 个设备，每个数字按键和设备一一对应。我平时使用 LINE 接口和台式机连接，需要切换到 iPad 打字的时候，按下对应的设备键，然后它就会自动进行连接，于是就可以用我的机械键盘在 iPad 上输入了。 </p><p><img src="https://cdn.sspai.com/2020/04/09/c7fdde0ccbb5014fd3ce37ed96930cde.png" alt="img"></p><p>我还测试了一下其他的设备，比如 Android 系统的电视和手机，发现它都可以正常使用。如果你的机械键盘没有蓝牙功能，又不希望额外再买一把的话，不妨试试这款小工具。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="买买买" scheme="https://zronghui.github.io/categories/%E4%B9%B0%E4%B9%B0%E4%B9%B0/"/>
    
    
  </entry>
  
</feed>
