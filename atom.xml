<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-03-03T03:13:40.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cocktail</title>
    <link href="https://zronghui.github.io/Mac/04-cocktail.html"/>
    <id>https://zronghui.github.io/Mac/04-cocktail.html</id>
    <published>2020-03-03T00:32:38.000Z</published>
    <updated>2020-03-03T03:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fa3e9338a8c4f91a211dee85739253b02a3d10bcb4bf835fc3be6420f0619405">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d4c0a1094e142f657914a6f9634a33dc368707d770b4eb504761cf93bc04ff1a50dd0a86887d3d4806268fec2b13c366f1e4127e135f5cab575223f75ffcf8b177f03867efd6ba4847cdbe4300fa6efd45f762869944323bb1749ff216ef2d64e194e6d9aac0c407b4282fedad85721f978efb333659caa8e3fd73cff5aae5ed3b64fea7cc562a087da9e0d0d2c836d41242568030645a74fbdab30496375c16bea9426b6f74c908da9b388558a3a0efd598d7d775c11b6f5922c6cfa9dc02d3190c4d37e148d9d6dcae1569efe149f66ffc170be6098a32bdc938370c8e2597353ad253b0705e6344b6c945c323a50091b5a5153f8eb739206729583495b175e811f4cc7ca7476d1c0775c543d14b8772151b9b6147842a892dbc5f8373b393ccda5f91c0aa578dcbf6c16b69ffdd342f0f25bb523ecd2dda79df7420a2875f611a0b959b24091c599804bddab0fbd97cfb1703016289208a98f2b6105305612663d92e9d9514b5e52d43d0eda4724cdb78dee3dd3b790c43c8a637e71bbbbcf263ad487240afe3b724ce346cce7c608e55e03972e38391b9cbde2778d2123c5e2d1676f3009c8ed13dc9651eb4238c7732eebae58d387f9f7d8cbe0381ed556391d2d98c1879fab70ccf09b1645a41c2e063eb84c125e650ca1e405a3fb3d23dd4d3478389961193fb2119c9c252ef3e120d7f4621f929b793e73f241868e01d9ac36c20c0d77cad3ac8de0d41d4b07033acfaf5db32904e7045de96bd0b0e1e6b63c818470da4165621bd20b431439401ed83304518c6a0b35734034078ae7b1a943fc79f41873ef126e02a62b66105ab26f424b1b37d73812660a5298cbf998191f6d0c42a3b651058e45b4efddb8592d850ceb18bc69133b6adfdcfa785d52ec869e3f4f4f9921b22a85ab866f889ef13d36deb23db650c6fd9af45843598c2ee1b58d7861b43ace0ef05398d4d8bd44611871abb59e3d1ec667adcd301a8807fc44ece35c97ce7bd9edf4a08c4a55bdcfd1ad9d3d83330c2615f4b64baffced87b82333d6f0058c12428251e0aeccc5624510076dc3b840c7198fa6cbb1ff84f0eeb79d95aac4cd93459be5ba809ba40bcd1662520f5d05d2dfbdd6281fd0fbb09949347834e19da38869cf606a2edae592066e9c2525b4f2882ebe37392da5a2cdcc0d42648e47a33d52faf9663f7210c3cdf3cd0471add77e2d78fbf172afb837efc0406b8a598ef0bcfbc06d0d46fbb2d43ae5b332f72ae122fb06d5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>power manager</title>
    <link href="https://zronghui.github.io/Mac/power-manager.html"/>
    <id>https://zronghui.github.io/Mac/power-manager.html</id>
    <published>2020-03-02T23:37:05.000Z</published>
    <updated>2020-03-03T03:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="bad397fce65c8601bad1ffa555efd887e1f4a1965bb6d0959eaa8fe2f222e30e">d4ddde657b62ae9d724a3e00dfabc05a7953c0b36119623139d9c93a4955aaed</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>信息和网络安全</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html</id>
    <published>2020-03-02T14:46:07.000Z</published>
    <updated>2020-03-03T03:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="59649d13f7cee92b03de0aa11e268d3b9366946a57e48fad01be52cc9254a02e">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d08db779553b4221e5c021694fc5a68dee81f20e76340ca9f8390d3e4000ddf1344ca54a3c314b5e007b8f9b709d0fa2244ec376c308318ef9182c21f9f9fab6ea251656824b954f9c863e262a5903120701e724e5fbf75b1c2189a929af0121d84918f054c39ac5cc7cf47b6b6af4344</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>信息系统实训</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD.html</id>
    <published>2020-03-02T14:31:51.000Z</published>
    <updated>2020-03-03T03:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="56dd50d15538f0c2d55707f62035f0f6ed9e431663d26f347ee70133aeb9d7a5">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d2eac917590e9e525fab1549e278e55a259a39d6c51058d3c45bfdde1521efd810fa37c61f11be294067f21b4a2f7a5a9d8d0bc166c72c84fa010948a7bcac5e64888d70502c7000ecac9722e174fb4e9abacb63bf7e3a6af8afb692bde94d27ee3e41f793e2abfd5046c5aafd1d017aee54b82486355359e3c282be823bc8b6c183ba045b1399a3e35a4e71b2cb3ce3e3377f2baccda1fc06091ca2001784f33dd7f92be501e0358c667876bb0f2cd005893aca51415617895d7b1014540926f66b660c1ef29e314e2b41e770d268f6b8e29194e7d6ee4851191b2a14687573ea3d8922e27d089677db2eaaf2ec634c2b3d19651189928e241a24eb7f708ef1efc4ff7ab0d29146eb6f770229ac0b3cda5bc886b8d91d17a5cb4b9ebd3e98b52ad23e09ddb7e8cecba9f4856d00d74dbb0fd55632e8ce7f36c6be366070bc42744a43c8a82edca5f4bf0cebe1d84143bf722028493314a9fef2a36325d7f3ab52b79c580bc0a318811c62ba356dc08ce4152403fe2b565e80a5a5f4239ffe5f19cee54429cb6aed2c16aebe4acf4ab3d35140bd1a96a843290f0280c261a96f0662ef7fc6d659470f916024ade4b8398d360fc45380531c361dadc24e35508134f06d5f1cc180a34e9c24dafe6ef0cdb3c03650071cff2dfcd04e20451ddc612a847eb126728489130ee3b2979f8997b6496e2c0c3969cc305280d35427946269c87b84c1f9c5e8f523fa6ca751abc750b608ad026d3e5e8c9201c058583119f1e0a6e03f93bbac5b8f719078f9fd37580674a897edd82b2f552e61771cf23a3357acbf3fa98a4231747c3d85f0c7aff670cbd729978d92b91ef82ec27c3ab6f7b63dee5e1a103f7615ac87647068ee3258c5f8e76cb6496f55facac3c3d6780d9c3070e7a582c977b33a268eb4ded3220a9df083af85c90b8fb2785a8807486ee41b415b67ca1068672cdc1e95c7fd58bd85013aedb861dc29bd5da947c796bfd881938f0fe395dbe29ac6e42a90761f2ebd86032548ee89706ca6fbbde15aace7a0a393d35f00a4f3b352e936b28ef9c20f2d7c8969cd5b938fd4e636ffe27d298b39629ec3c62d2cd51412f5e3423825529dd69fde169ef49fa46c9b06d53a394a941fd4271a34d16fd7e2d47fbba005974ee2fc2288fc933b974f391cc46467210cb6842af3c3d9335f03ab87785b15f2e96cf8be6be02bdd47c41bd8fca3e2f1da944261c67a067813457b66beef09de1cb5fe2bfee9f9a862b7d093878c88ad8d2053d980ce5edc86a4deed6eaa72a4899ad4583438689f182af386a84910391363976808794798022d4260f9b2242a19d042fd6b911864fc489a7185d5a9dd307988d392062997a0d497dc7ea3e1d8ab2de415c03788c662a941edfa48ac10560576ec0cf76835115d756757e2ed9ed9ee02cc084151681b308543cc9d6807a41e224c836e34debac50a5886dd2ee93b212bac4f530aab9abb0968bf5531179a0c3cefe67090aedb78be4ea3dbe054ddba938170ca14c3f17e504b0a38d91c1db200e4f5f66170d4b6f734478b63e93213a16db78726a24868ec865532b8faa173e750b0a777584ea9a7effc0bdf3e374be3be57ee6a74e1d83023933b8a7a239a137e0b89536ab0ae6f0f3da33aba4c2994800092537b92e0cbfa85c21884531dd6c7320685ac27da7efa95b29eb5703d3472250f57de8b87546fd212df5c3dd6fe627b0069d2cca84b977f8134004b1b4d710704d28468a6574640625320a75ab4d451a821f814d86fadec35b2271c72bb967ac152213d59d36f75a43a2b1897b3f7ccfe7a11a144905dd4ae2b9baddadcd644ced191d36449ee1120c2f2d30aeaa0a50787cf9f98975eb6bb8946169863e8ee69c8f4c45773bdce825c6c3bd8e8f4ad920879e4d86279b820b4786a4d257e7600e85d3777e4ecc8b7bb9f5e287ae79cd3180fb965af03be8951e01f4a213675aa18082a5c5565a39a1e9c7fedb6586f750fba48a686656f1842530757e2189c3f2b93e801b759210ac2a5a83b9b3795695175056ae327ea4da95af2bb9a3cc2529ede6d856c49d8e68cbeef799728ef8ed58e261343cefba3fc55caaa5e429cd6c9d11160d87a8e41c203b2d75a4277b82871d80b51bd30176982ffb5bd0f184d4a64693e3277580</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-03</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-03.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-03.html</id>
    <published>2020-03-02T11:59:51.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p><strong>Autojump 插件</strong></p><p><code>j</code>快速切换，用<code>jo</code>快递在finder里打开文件夹</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>mac tricks</title>
    <link href="https://zronghui.github.io/Mac/mac-tricks.html"/>
    <id>https://zronghui.github.io/Mac/mac-tricks.html</id>
    <published>2020-03-02T08:11:45.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5252976b2d8566b47fc907fbead2846b558545d253edb249cdae721693678cbb">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d08db779553b4221e5c021694fc5a68dee81f20e76340ca9f8390d3e4000ddf135d5e8d033e2d692e97ea9ed12453ab9e2e66611ae1c5d35d3bf42a7ca2ab71a7e14e083276368426862050f80b090666626504a9d4a599a97ed97a829d74bce3256053cb12cdd7d3935fda50a23125e5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>有意思的Mac软件</title>
    <link href="https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html</id>
    <published>2020-03-02T03:28:36.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="eb68c0475bf49a99a8d7b3fabc37ea3d2f960f4b02596695aa2466c32f2c17c7">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d4c0a1094e142f657914a6f9634a33dc368707d770b4eb504761cf93bc04ff1a5d95cdb2417506f1191c91135138c00c93423e8e0ea938977f13db4448834053a6d0cf6317f4217b801a3a5c206479e676ab6f227fe55dae5f900eba9c9173f640ad58bbd6a1d47324bed0decb18128bf9d3990d356b9afc0283b1e4431f122719cdd4cb357b6b7e314d16cadad485c9452bc82648486c3d86637a85315d6f4aa9ea4fb4a44c48d9430f5c90b2343b002b869534c11d1aa5e559f48a51ef9c46a440e59a9d7fa08f8db895c8d5fdb4575e4be20e223a613e978853e4f09aa28eb96bf02768127e83017a4b58398e87fb4d48da30b6eb142f4e237db6fbb8c521c4f81f9c0dabd447b1f3fcadc48f5601b2c37983c470f5618eeac7cbf40f78346</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh config editor</title>
    <link href="https://zronghui.github.io/Mac/03-ssh-config-editor.html"/>
    <id>https://zronghui.github.io/Mac/03-ssh-config-editor.html</id>
    <published>2020-03-02T03:07:19.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="720ea76b8eef78e17c5526378e4b88a9a68f4d9942e466f2ffaf1483e64b1a1c">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d9a45bacecaba7ac1e6748ab25d1f452f33e33d3e242e63df8cc1598d5d1ee8b31d9615b6d2d2d992d157638983a7a73838abecb596271bfca4862ad3c8144d5b8d95befa869896f929c944cd822ad007533ecf1266d0cda0f251e1d7685db130f37e66f8ec86357509d458c003df5d58c0927aa8b47e6218918e5bba0d96a773abbf502f9630d9f51f8648fd60e459cdbe087ade3f7a99b6ece6b04a1e685795607568dcea6572ad4b332c79ffd9ca99f06dde82d5ed167baacb379f0d2d2792b9997041048885d1b926cdc90a2e89463fa3ac67721ba604dbfd970146ed6d4d9197940d63822cd76d2cee4a125871b8e422a5b78c91daf06473590d8a81104a30eab917da2e61ce2c88584ced1b937f2915b42b0ba6b9debf0bec60f993a88449fe7dec3456d9ebec7b485e1ac210c6b4c071346f7bc44aef2f67bb5e35bfe8532b3a2d41d576c2dceaa2ae68510ff92661a0ee7ad00898c9e0aebecda0ab0afabe60102632b1db820599e6c7f065a5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云</title>
    <link href="https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html"/>
    <id>https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html</id>
    <published>2020-03-02T00:11:19.000Z</published>
    <updated>2020-03-03T03:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="951800e7cd23fadbaf67c7db7ab4ae397c4ae4d18db822236559fbaff6b0aaa3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="阿里云" scheme="https://zronghui.github.io/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
  </entry>
  
  <entry>
    <title>aria2</title>
    <link href="https://zronghui.github.io/Mac/02-aria2.html"/>
    <id>https://zronghui.github.io/Mac/02-aria2.html</id>
    <published>2020-03-01T15:37:02.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要用 aria2 gui</p><p>dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/</p><p><a href="https://medium.com/@Justin___Smith/aria2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B-mac%E5%92%8Cwindows-b31d0f64bd4e">Aria2配置教程（Mac和Windows） - Justin Smith - Medium</a></p><h3 id="Aria2-配置"><a href="#Aria2-配置" class="headerlink" title="Aria2 配置"></a>Aria2 配置</h3><p><a href="http://aria2c.com/usage.html">Aria2 &amp; YAAW 使用说明</a><br><a href="https://aria2.github.io/manual/en/html/aria2c.html">aria2c(1) — aria2 1.35.0 documentation</a></p><h3 id="win-mac-aria2下载"><a href="#win-mac-aria2下载" class="headerlink" title="win mac aria2下载"></a>win mac aria2下载</h3><p><a href="https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&parentPath=%2Fsharelink2668081893-566048232074527">https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&amp;parentPath=%2Fsharelink2668081893-566048232074527</a></p><h2 id="网页端管理软件"><a href="#网页端管理软件" class="headerlink" title="网页端管理软件"></a>网页端管理软件</h2><p><a href="https://ziahamza.github.io/webui-aria2/">active: 7 - waiting: 0 - stopped: 0 — Aria2 WebUI</a><br><a href="http://binux.github.io/yaaw/demo/">↓214 KB - Yet Another Aria2 Web Frontend</a></p><p>查看 aria2 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep aria2c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/Applications/Aria2GUI.app/Contents/Resources/aria2c --dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/ --conf-path=/Applications/Aria2GUI.app/Contents/Resources/aria2.conf --input-file=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --save-session=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --max-concurrent-downloads=10 --max-connection-per-server=16 --min-split-size=1024K --split=16 --max-overall-download-limit=0K --max-overall-upload-limit=0K --max-download-limit=0K --max-upload-limit=0K --continue=true --auto-file-renaming=true --allow-overwrite=true --disk-cache=0M --max-tries=0 --retry-wait=5 -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取 SP 图片</title>
    <link href="https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html"/>
    <id>https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html</id>
    <published>2020-03-01T06:09:16.000Z</published>
    <updated>2020-03-01T07:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>爬取网站下的所有卡片</p><p><a href="https://southparkphonedestroyer.fandom.com/wiki/Characters">https://southparkphonedestroyer.fandom.com/wiki/Characters</a></p><h2 id="用-siteSucker-爬取网页内容"><a href="#用-siteSucker-爬取网页内容" class="headerlink" title="用 siteSucker 爬取网页内容"></a>用 siteSucker 爬取网页内容</h2><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -o --nocolor --nofilename --nonumbers "https://vignette.wikia.nocookie.net/southparkphonedestroyer/images.*png" | sort | uniq | grep -v '"' | grep -v ' ' | pbcopy</span><br><span class="line">cd 图片保存目录</span><br><span class="line">pbpaste | xargs wget</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>Grep 是 ag 的alias</p><p>wget 是 axel 的 alias</p><p>ag 默认支持正则，注意需要用引号包裹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-o --only-matching      Prints only the matching part of the lines</span><br><span class="line">--[no]numbers</span><br></pre></td></tr></table></figure><p>grep -v 反选</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>命令行还挺好用的，熟悉的话比 Python 脚本高效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>烦人的网页编码问题</title>
    <link href="https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html"/>
    <id>https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html</id>
    <published>2020-03-01T02:31:44.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>请求网址乱码：</p><p>一开始以为是压缩问题：</p><h2 id="content-encoding-和-accept-encoding"><a href="#content-encoding-和-accept-encoding" class="headerlink" title="content-encoding 和 accept-encoding"></a>content-encoding 和 accept-encoding</h2><ul><li>response headers中的content-encoding</li><li>request headers 中的accept-encoding</li></ul><p>content-encoding是指网页使用了哪种压缩方式传输数据给你，accept-encoding表示你发送请求时告诉服务器，我可以解压这些格式的数据。</p><p>二者的关系是，对方网页会根据你发送的accept-encoding来决定用什么格式(content-encoding)传给你。</p><p>Python 中，若不添加 accept-encoding, requests 默认添加 r.request.headers[‘Accept-Encoding’] 为 ‘gzip, deflate’</p><p>若 ‘Accept-Encoding’: ‘’，则 response 应该没有压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://zhuanlan.zhihu.com/python-programming'</span>, headers = headers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers[<span class="string">'Content-Encoding'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Program Files\Anaconda3\lib\site-packages\requests\structures.py"</span>, line <span class="number">54</span>, <span class="keyword">in</span> __getitem__</span><br><span class="line">    <span class="keyword">return</span> self._store[key.lower()][<span class="number">1</span>]</span><br><span class="line">KeyError: <span class="string">'content-encoding'</span></span><br></pre></td></tr></table></figure><h2 id="获取网页正确编码"><a href="#获取网页正确编码" class="headerlink" title="获取网页正确编码"></a>获取网页正确编码</h2><p>requests会从服务器返回的响应头的 Content-Type 去获取字符集编码，如果content-type有charset字段那么requests才能正确识别编码，否则就使用默认的 ISO-8859-1</p><p>所以 requests 的 response.text 有可能是乱码的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ic(doc.headers, chardet.detect(doc.content), doc.apparent_encoding, doc.encoding)</span><br><span class="line"><span class="comment"># ic| doc.headers: &#123;'Content-Type': 'text/html', 'Last-Modified': 'Sun, 01 Mar 2020 00:49:50 GMT', 'Vary': 'Accept-Encoding', 'ETag': 'W/"5e5b06ae-1da6a"', 'Expires': 'Sun, 01 Mar 2020 02:44:33 GMT', 'Cache-Control': 'max-age=300', 'P3P': 'CP=CAO PSA OUR', 'Content-Encoding': 'gzip', 'Content-Length': '25940', 'Accept-Ranges': 'bytes', 'Date': 'Sun, 01 Mar 2020 02:44:01 GMT', 'Age': '267', 'Connection': 'keep-alive', 'X-Hits': '4'&#125;</span></span><br><span class="line"><span class="comment">#     chardet.detect(doc.content): &#123;'confidence': 0.99, 'encoding': 'GB2312', 'language': 'Chinese'&#125;</span></span><br><span class="line"><span class="comment">#     doc.apparent_encoding: 'GB2312'</span></span><br><span class="line"><span class="comment">#     doc.encoding: 'ISO-8859-1'</span></span><br></pre></td></tr></table></figure><h2 id="查看网页正确编码的方法"><a href="#查看网页正确编码的方法" class="headerlink" title="查看网页正确编码的方法"></a>查看网页正确编码的方法</h2><p>response.apparent_encoding 或者 chardet.detect(response.content)</p><p>requests的返回结果对象里有个apparent_encoding函数, apparent_encoding通过调用chardet.detect()来识别文本编码. 但是需要注意的是，这有些消耗计算资源.</p><p>正确的编码还可能存在于 meta 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gbk"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>python requests的utils.py里已经有个完善的从html中获取meta charset的函数. 说白了还是一对的正则表达式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: requests.utils.get_encodings_from_content(r.content)</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="string">'gbk'</span>]</span><br></pre></td></tr></table></figure><p>总之，网页乱码的情况下，可以用 response.apparent_encoding 获取正确编码xx，再用 response.encoding = ‘xx’ , 然后就能调用 response.text</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/35643926">Headers设置之Accept-Encoding - 知乎</a><br><a href="http://xiaorui.cc/archives/2786">代码分析Python requests库中文编码问题 – 峰云就她了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 屏保</title>
    <link href="https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html"/>
    <id>https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html</id>
    <published>2020-02-29T04:45:00.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>好多屏保不支持 10.14+</p><h2 id="Fractal-Clock-Screen-Saver"><a href="#Fractal-Clock-Screen-Saver" class="headerlink" title="*Fractal Clock Screen Saver"></a>*Fractal Clock Screen Saver</h2><p><img src="http://www.dqd.com/~mayoff/programs/FractalClock/shot-1.png" alt="这些年我在 Mac 上用过的 39 款精品屏保程序插图(27)"></p><p><a href="http://www.dqd.com/~mayoff/programs/FractalClock/">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;好多屏保不支持 10.14+&lt;/p&gt;
&lt;h2 id=&quot;Fractal-Clock-Screen-Saver&quot;&gt;&lt;a href=&quot;#Fractal-Clock-Screen-Saver&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>chrome 插件</title>
    <link href="https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html</id>
    <published>2020-02-28T11:50:49.000Z</published>
    <updated>2020-02-28T16:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BlockTube-Chrome-网上应用店"><a href="#BlockTube-Chrome-网上应用店" class="headerlink" title="BlockTube - Chrome 网上应用店"></a><a href="https://chrome.google.com/webstore/detail/blocktube/bbeaicapbccfllodepmimpkgecanonai">BlockTube - Chrome 网上应用店</a></h2><p>用很多规则屏蔽某些视频</p><h2 id="recent-history"><a href="#recent-history" class="headerlink" title="recent history"></a>recent history</h2><img src="https://i.loli.net/2020/02/28/MHvKZ7JEBD8xsNR.png" alt="MHvKZ7JEBD8xsNR" style="zoom:33%;" /><h2 id="JSON-Viewer-Awesome-Chrome-网上应用店"><a href="#JSON-Viewer-Awesome-Chrome-网上应用店" class="headerlink" title="JSON Viewer Awesome - Chrome 网上应用店"></a>JSON Viewer Awesome - Chrome 网上应用店</h2><h2 id="Linkclump-鼠标多选打开、复制标签页"><a href="#Linkclump-鼠标多选打开、复制标签页" class="headerlink" title="Linkclump-鼠标多选打开、复制标签页"></a>Linkclump-鼠标多选打开、复制标签页</h2><p>设置按住 z, 同时拖拽鼠标新标签页打开</p><p>c, 复制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BlockTube-Chrome-网上应用店&quot;&gt;&lt;a href=&quot;#BlockTube-Chrome-网上应用店&quot; class=&quot;headerlink&quot; title=&quot;BlockTube - Chrome 网上应用店&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://c
      
    
    </summary>
    
    
      <category term="Chrome" scheme="https://zronghui.github.io/categories/Chrome/"/>
    
    
  </entry>
  
  <entry>
    <title>第3讲：Kubernetes 核心概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:25.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】"><a href="#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】" class="headerlink" title="初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】"></a>初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre">木环</a> 2019-11-07 876浏览量</p><p><strong>简介：</strong> 本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。这个案例要在 Kubernetes 集群上部署一个名叫 guestbook 的 CURD 应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><h2 id="课后实践：Kubernetes-核心概念"><a href="#课后实践：Kubernetes-核心概念" class="headerlink" title="课后实践：Kubernetes 核心概念"></a>课后实践：Kubernetes 核心概念</h2><h3 id="1-目标概述"><a href="#1-目标概述" class="headerlink" title="1. 目标概述"></a>1. 目标概述</h3><p>本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。</p><ol><li>巩固 Kubernetes 的基本概念</li><li>学会使用 Kubernetes 部署一个标准的“多层（multi-tier）”应用</li><li>了解 Kubernetes 里如何通过 Pod，Deployment，Service 等 API 原语描述“应用”</li></ol><h3 id="2-实验概览"><a href="#2-实验概览" class="headerlink" title="2. 实验概览"></a>2. 实验概览</h3><p>完成此实验后，可以掌握的能力有：</p><p>本实验主要在 Kubernetes 集群上部署一个名叫 guestbook 留言簿的 CURD (增查改删)应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><p>实验分以下几个步骤：</p><ol><li>创建 Redis 主节点</li><li>创建 Redis 从节点集群</li><li>创建 guestbook 应用</li><li>将 guestbook 应用通过 Service 暴露出来并进行访问</li><li>水平扩展 guestbook 应用</li></ol><h3 id="3-所需资源："><a href="#3-所需资源：" class="headerlink" title="3. 所需资源："></a>3. 所需资源：</h3><p>一个完备的 Kubernetes 集群。您可以选择<a href="https://www.aliyun.com/product/kubernetes">阿里云容器服务Kubernetes（ACK）</a>进行上手操作。</p><p>可以用 Minikube 快速启动一个单节点集群（国内建议使用<a href="https://github.com/AliyunContainerService/minikube">Minikube 中国版</a>），也可以用云上的 Kubernetes 集群。本次实验演示将使用阿里云容器服务提供的 Kubernetes 集群，版本为 1.12。</p><p>你可以使用使用 <code>kubectl version</code> 查看你的集群版本同实验版本一致。</p><h3 id="4-实验详情"><a href="#4-实验详情" class="headerlink" title="4. 实验详情"></a>4. 实验详情</h3><h3 id="4-1-创建-Redis-主节点"><a href="#4-1-创建-Redis-主节点" class="headerlink" title="4.1 创建 Redis 主节点"></a>4.1 创建 Redis 主节点</h3><p>在这里，我们使用一个叫做 Deployment 的 API 对象，来描述单实例的Redis 主节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: master</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: master</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: master</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;redis</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>我们需要把这个上述内容保存为本地 YAML文件，名叫：<code>redis-master-deployment.yaml</code>。这个文件主要定义了两个东西：第一，Pod 里的容器的镜像是 <code>redis</code>；第二，这个 Deployment 的实例数（replicas）是 1，即指启动一个 Pod。</p><p>然后，我们使用 Kubernetes 的客户端，执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f  redis-master-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>这一步完成后，Kubernetes 就会按照这个 YAML 文件里的描述为你创建对应的 Pod。这种使用方式就是声明式 API 的典型特征。</p><p>接下来，我们可以查看到这个 Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running   0          49s</span><br></pre></td></tr></table></figure><p>可以看到，Pod 已经进入了 Running 状态，表示一切正常。这时，我们就可以查看这个 Pod 里的 Redis 的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f redis-master-68979f4ddd-pg9cv</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Redis version&#x3D;5.0.4, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server &#x2F;path&#x2F;to&#x2F;redis.conf</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Running mode&#x3D;standalone, port&#x3D;6379.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # Server initialized</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Ready to accept connections</span><br></pre></td></tr></table></figure><h4 id="4-2-为-Redis-主节点创建-Service"><a href="#4-2-为-Redis-主节点创建-Service" class="headerlink" title="4.2 为 Redis 主节点创建 Service"></a>4.2 为 Redis 主节点创建 Service</h4><p>Kubernetes 里要访问 Pod 最好通过 Service 的方式，这样客户端就不需要记录 Pod 的 IP 地址了。我们的 guestbook 网站需要访问 Redis 主节点的 Pod，所以也要通过 Service 来做。这个 Service API 对象的定义如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>这个 Service 名叫 <code>redis-master</code>，它声明用自己的 6379 端口代理 Pod 的 6379端口。</p><p>我们还是把上述内容保存成文件然后让 Kubernetes 为我们创建它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f redis-master-service.yaml</span><br><span class="line">service&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>然后我们可以查看一下这个 Service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   9s</span><br></pre></td></tr></table></figure><p>这时候，你就可以通过 <code>10.107.220.208:6379</code> 访问到这个 Redis 主节点。</p><h4 id="4-3-创建-Redis-从节点集群"><a href="#4-3-创建-Redis-从节点集群" class="headerlink" title="4.3 创建 Redis 从节点集群"></a>4.3 创建 Redis 从节点集群</h4><p>我们这个示例中，有多个 Redis 从节点来共同响应读请求。同样的，我们还是通过 Deployment 来描述”一个服务由多个相同的 Pod 实例副本组成”这种语义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: slave</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: slave</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: slave</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-redisslave:v1</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>在这个 Deployment 中，我们指定了 <code>replicas: 2</code>，即这个 Deployment 会启动两个相同 Pod（Redis 从节点）。</p><p>此外，<code>gb-redisslave:v1</code> 这个镜像，会自动读取 <code>REDIS_MASTER_SERVICE_HOST</code> 这个环境变量的值，也就是 Redis 主节点的 Service 地址，然后用它来组建集群。这个环境变量是Kubernetes 自动根据 redis-master 这个 Service 名字，自动注入到集群的每一个 Pod 当中的。</p><p>然后，我们创建 Redis 从节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-slave created</span><br></pre></td></tr></table></figure><p>这时候，我们就可以查看这些从节点的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS              RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running             0          17m</span><br><span class="line">redis-slave-78b464f5cd-2kn7w    0&#x2F;1     ContainerCreating   0          37s</span><br><span class="line">redis-slave-78b464f5cd-582bk    0&#x2F;1     ContainerCreating   0          37s</span><br></pre></td></tr></table></figure><h4 id="4-4-为-Redis-从节点创建-Service"><a href="#4-4-为-Redis-从节点创建-Service" class="headerlink" title="4.4 为 Redis 从节点创建 Service"></a>4.4 为 Redis 从节点创建 Service</h4><p>类似的，为了让 guestbook 应用访问上述 Redis 从节点，我们还需要为它们创建一个 Service。在Kubernetes 里，Service 可以通过 selector 选择代理多个 Pod，并且负责负载均衡。这个Service 内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>创建和查看 Service（ 注意：这里 6379 端口使用了简化写法，就不需要写明 targetPort了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-svc.yaml</span><br><span class="line">service&#x2F;redis-slave created</span><br><span class="line"></span><br><span class="line">$ kubectl get services</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   16m</span><br><span class="line">redis-slave    ClusterIP   10.101.244.239   &lt;none&gt;        6379&#x2F;TCP   57s</span><br></pre></td></tr></table></figure><p>这样，你就可以通过 <code>10.10.101.244:6379</code> 访问到任何一个 Redis 从节点了。</p><h4 id="4-5-创建-guestbook-应用"><a href="#4-5-创建-guestbook-应用" class="headerlink" title="4.5 创建 guestbook 应用"></a>4.5 创建 guestbook 应用</h4><p>guestbook 应用本身，依然通过一个 Deployment 来描述，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: guestbook</span><br><span class="line">      tier: frontend</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: guestbook</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: php-redis</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-frontend:v4</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>这个 YAML 定义了一个 3 副本的 Deployment，即 guestbook 应用会启动 3 个 Pod。</p><p>我们还是通过同样的步骤创建这个 Deployment：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend.yaml</span><br><span class="line">deployment.apps&#x2F;frontend created</span><br></pre></td></tr></table></figure><p>查看 Pod 的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          3m4s</span><br></pre></td></tr></table></figure><h4 id="4-6-为-guestbook-应用创建-Service"><a href="#4-6-为-guestbook-应用创建-Service" class="headerlink" title="4.6 为 guestbook 应用创建 Service"></a>4.6 为 guestbook 应用创建 Service</h4><p>为了能够让用户访问到 guestbook，我们也需要为 guestbook 来创建一个 Service，从而把这个应用以服务的形式暴露出来给用户使用。</p><p>而为了能够让 Kubernetes 集群以外的用户，这个 Service 就必须是一个外部可访问的 Service。这个在 Kubernetes 里有几种做法。在云上最常见的，是 LoadBalancer 模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  # 自建集群只能使用 NodePort 模式</span><br><span class="line">  # type: NodePort </span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br></pre></td></tr></table></figure><p>由于我的集群由阿里云容器服务提供，所以像上面这样直接用 LoadBalancer 模式即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend-service.yaml</span><br><span class="line">$ kubectl get service frontend</span><br><span class="line">NAME       TYPE        CLUSTER-IP      EXTERNAL-IP        PORT(S)        AGE</span><br><span class="line">frontend   ClusterIP   172.19.10.209   101.37.192.20     80:32372&#x2F;TCP   1m</span><br></pre></td></tr></table></figure><p>现在，你只要用浏览器打开 <code>EXTERNAL-IP</code> 对应的地址： <a href="http://101.37.192.20:31323/">http://101.37.192.20:31323</a> ，就可以访问到这个部署好的 guestbook 应用了。</p><p>而如果你是自建集群，那就只能用 NodePort 模式来实验（上面 YAML 的注释已经给出了使用方法）。需要注意的是 NodePort 由于安全性问题，不建议在生产环境中使用。</p><h4 id="4-7-水平扩展-guestbook-应用"><a href="#4-7-水平扩展-guestbook-应用" class="headerlink" title="4.7 水平扩展 guestbook 应用"></a>4.7 水平扩展 guestbook 应用</h4><p>要通过 Kubernetes 来水平扩展你的应用以响应更多的请求非常简单，只需要如下一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale deployment frontend --replicas&#x3D;5</span><br><span class="line">deployment.extensions&#x2F;frontend scaled</span><br></pre></td></tr></table></figure><p>你就会立刻看到你的 guestbook 应用的实例从 3 个变成了 5 个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-chxwd   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-jrvfx   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          14m</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot;&gt;&lt;a href=&quot;#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>第2讲：容器基本概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:12.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero"><a href="#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero" class="headerlink" title="你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]"></a>你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre?spm=a2c6h.12873639.0.0.16051fcfeERjS6">木环</a> 2019-11-07 106浏览量</p><p><strong>简介：</strong> 再也不要当容器小白了！Build ship and run！</p><h3 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h3><p>因为虚拟机（vm）存在一定不足，容器技术的诞生后才如此受欢迎。以传统的Java应用架构而言，将一个应用程序生成一个war包，放到一个tomcat容器当中并在一台虚拟机（VM）中启动运行，然后配置nginx的负载均衡策略，将来自用户的请求转发到某个tomcat应用上，这种基于主机或虚拟机部署的应用会存在以下问题：可移植性差、可维护性差、可扩展性差、无法资源隔离。扩展阅读</p><p>而容器是什么呢？它就是一个视图隔离、资源可限制、独立文件系统的进程集合。所谓“视图隔离”就是能够看到部分进程以及具有独立的主机名等；控制资源使用率则是可以对于内存大小以及 CPU 使用个数等进行限制。容器就是一个进程集合，它将系统的其他资源隔离开来，具有自己独立的资源视图。</p><p>容器具有一个独立的文件系统，因为使用的是系统的资源，所以在独立的文件系统内不需要具备内核相关的代码或者工具，我们只需要提供容器所需的二进制文件、配置文件以及依赖即可。只要容器运行时所需的文件集合都能够具备，那么这个容器就能够运行起来。<a href="https://developer.aliyun.com/article/718433">扩展阅读《详解 K8s 容器基本概念》</a></p><h3 id="什么是容器镜像？"><a href="#什么是容器镜像？" class="headerlink" title="什么是容器镜像？"></a>什么是容器镜像？</h3><p>从一个比较具体的角度去看，镜像就是一个多层存储的文件，相较于普通的ISO系统镜像来说，分层存储会带来两个优点：</p><ul><li>一个是<strong>分层存储的镜像比较容易扩展</strong>，比如我们可以基于一个Ubuntu镜像去构建我们的Nginx镜像，这样我们只需要在Ubuntu镜像的基础上面做一些Nginx的安装配置工作。一个Nginx镜像工作就算制作完成了，我们不需要从头开始去制作各种镜像。</li><li>另一点是可以<strong>优化镜像存储空间</strong>，假如我们有两个镜像，Tag1.0镜像和 Tag2.0镜像，我们如果以传统方式去传这两个镜像，每个镜像大概130多兆，但如果我们以分层的方式去存储两个镜像，我们通过下面两个紫色的才能共享，可以节约大量的空间，两个镜像加起来只需要140多兆的空间就可以存下来。这样一是节省了存储空间，二是可以减少网络上的开销，比如我们已经把下面镜像下载了，我们要去下载上面镜像的时候，我们只需要去下10M的部分。</li></ul><p>如果从抽象的角度去看，<strong>Docker镜像其实是Docker提供的一种标准化的交付手段</strong>，<strong>传统应用在交付的时候其实是交付一个可执行文j件</strong>。问题在于传统方式的这个可执行文件不包括它的运行环境，我们可能会因为32位系统或64位系统，或者开发测试使用1.0软件，结果交付时候发现用户的环境是2.0等各种各样的问题，导致我们要去花时间去排查；但是，如果我们以Docker镜像的标准化形式去交付，我们就会避免掉这些问题。</p><p>扩展阅读《<a href="https://yq.aliyun.com/articles/219139">Docker 镜像优化与最佳实践</a>》</p><p>*<em>好了，闲话少叙。下面开始实验时间。<br>*</em></p><h3 id="1-实验概述"><a href="#1-实验概述" class="headerlink" title="1. 实验概述"></a>1. 实验概述</h3><p>本实验会使用 Dockerfile 将下面 golang 代码构建成镜像，并通过阿里云镜像服务将镜像分发到阿里云虚拟机，运行该镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实验目标"><a href="#2-实验目标" class="headerlink" title="2. 实验目标"></a>2. 实验目标</h3><p>完成此实验后，可以掌握的能力有：</p><ol><li>Dockerfile 编写和使用</li><li>使用阿里云镜像服务来分发镜像。</li></ol><blockquote><p>NOTE: 学前建议: 了解 docker 的基本操作命令 以及 如何使用 ECS 实例。</p></blockquote><h3 id="3-实验详情"><a href="#3-实验详情" class="headerlink" title="3. 实验详情"></a>3. 实验详情</h3><h4 id="3-1-准备应用代码和-Dockerfile"><a href="#3-1-准备应用代码和-Dockerfile" class="headerlink" title="3.1 准备应用代码和 Dockerfile"></a>3.1 准备应用代码和 Dockerfile</h4><p>首先在本地生成一个文件夹 <code>demo</code>，并将 golang 代码拷贝到 <code>demo</code> 文件夹下的 <code>main.go</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">main.go</span><br><span class="line"></span><br><span class="line">$ cat main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前 <code>demo</code> 目录下编写 Dockerfile ，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM golang:1.12-alpine</span><br><span class="line"></span><br><span class="line"># change current working dir</span><br><span class="line">WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line"></span><br><span class="line"># copy main.go into &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># go build and install the app</span><br><span class="line">RUN go install -v .&#x2F;...</span><br><span class="line"></span><br><span class="line"># run the app by default</span><br><span class="line">CMD [&quot;app&quot;]</span><br></pre></td></tr></table></figure><h4 id="3-2-构建镜像"><a href="#3-2-构建镜像" class="headerlink" title="3.2 构建镜像"></a>3.2 构建镜像</h4><p>通常情况下，使用以下命令即可构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line"># demo:v1 表示镜像名字demo和标签v1</span><br><span class="line">$ docker build . -t demo:v1</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1&#x2F;5 : FROM golang:1.12-alpine</span><br><span class="line"> ---&gt; 8ff3fd35cf82</span><br><span class="line">Step 2&#x2F;5 : WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">Removing intermediate container ffd88a948413</span><br><span class="line"> ---&gt; 1056ea513b89</span><br><span class="line">Step 3&#x2F;5 : COPY . .</span><br><span class="line"> ---&gt; 9fc4655c973a</span><br><span class="line">Step 4&#x2F;5 : RUN go install -v .&#x2F;...</span><br><span class="line"> ---&gt; Running in 928fc776a6e1</span><br><span class="line">app</span><br><span class="line">Removing intermediate container 928fc776a6e1</span><br><span class="line"> ---&gt; a93f17a3a726</span><br><span class="line">Step 5&#x2F;5 : CMD [&quot;app&quot;]</span><br><span class="line"> ---&gt; Running in 9e3463aa81f6</span><br><span class="line">Removing intermediate container 9e3463aa81f6</span><br><span class="line"> ---&gt; 8697c7279c74</span><br><span class="line">Successfully built 8697c7279c74</span><br><span class="line">Successfully tagged demo:v1</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:</p><p>在国内访问 Docker Hub 速度比较慢，可以在Docker引擎中设置镜像加速器加速对Docker Hub的访问。</p><p>更新 <code>/etc/docker/daemon.json</code>，添加如下参数，并重启Docker引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建完毕之后，可以在本地运行验证下是否符合预期</span><br></pre></td></tr></table></figure><h1 id="映射容器内-80-端到宿主机上的-8000-端口"><a href="#映射容器内-80-端到宿主机上的-8000-端口" class="headerlink" title="映射容器内 80 端到宿主机上的 8000 端口"></a>映射容器内 80 端到宿主机上的 8000 端口</h1><p>$ docker run -d -p 8000:80 demo:v1</p><h1 id="curl-一下查看结果"><a href="#curl-一下查看结果" class="headerlink" title="curl 一下查看结果"></a>curl 一下查看结果</h1><p>$ curl localhost:8000<br>Hello! World</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">如果看到 &#96;Hello! World&#96; 字样，我们就可以进入下一个环节了。</span><br><span class="line"></span><br><span class="line">#### 3.3 推送镜像至阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">在推送之前，需要注册阿里云账号和开通阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">&gt; 阿里云注册链接： [注册阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;register&#x2F;register.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云登录链接： [登录阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;login&#x2F;login.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云容器镜像服务页面： [访问阿里云容器镜像服务](https:&#x2F;&#x2F;cr.console.aliyun.com) </span><br><span class="line">&gt; </span><br><span class="line">&gt; 容器镜像服务（Container Registry）提供安全的应用镜像托管能力，精确的镜像安全扫描功能，稳定的国内外镜像构建服务，便捷的镜像授权功能，方便用户进行镜像全生命周期管理。</span><br><span class="line"></span><br><span class="line">当我们拥有阿里云容器镜像服务账号之后呢，可以使用 docker 客户端来登陆服务。</span><br></pre></td></tr></table></figure><p>$ docker login -username=**** registry.cn-hangzhou.aliyuncs.com<br>Password:<br>Login Succeeded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在推送到镜像之前，需要将本地镜像修改为对应的镜像仓库地址：</span><br></pre></td></tr></table></figure><h1 id="mydemo-可以替换成自己的命名空间"><a href="#mydemo-可以替换成自己的命名空间" class="headerlink" title="mydemo 可以替换成自己的命名空间"></a>mydemo 可以替换成自己的命名空间</h1><p>$ docker tag demo:v1 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><p>$ docker push registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.4 登陆阿里云 ECS 机器来下载 demo:v1 镜像</span><br><span class="line"></span><br><span class="line">登陆 ECS 实例，通过 docker pull 来下载镜像</span><br></pre></td></tr></table></figure><h1 id="mydemo-请替换成-3-3-步骤中指定的命令空间"><a href="#mydemo-请替换成-3-3-步骤中指定的命令空间" class="headerlink" title="mydemo 请替换成 3.3 步骤中指定的命令空间"></a>mydemo 请替换成 3.3 步骤中指定的命令空间</h1><p>$ docker pull registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载完毕之后，我们就可以直接运行该镜像</span><br></pre></td></tr></table></figure><p>$ docker run -d -p 8000:80 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">并查看 ECS 机器的 &#96;8000&#96; 端口</span><br></pre></td></tr></table></figure><p>$ curl localhost:8000</p><p>另外，可以移步 <a href="https://edu.aliyun.com/lab/courses/a5519593714148358845ab3ce19ef996/detail">《课后实践：应用容器构建与部署》</a><br>直接在阿里云大学沙箱实验环境中尝试哦！！</p><p><strong>本文由阿里云容器云平台团队撰写，如有问题或希望转载还请与我们沟通，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot;&gt;&lt;a href=&quot;#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot; class=&quot;headerlink&quot; title=&quot;你的第一个容器镜像，构建
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>CNCF × Alibaba云原生技术公开课</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC%201%202%E8%AE%B2.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC%201%202%E8%AE%B2.html</id>
    <published>2020-02-28T07:58:36.000Z</published>
    <updated>2020-02-28T09:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://edu.aliyun.com/roadmap/cloudnative?spm=5176.8764728.631162.112.6c6b20beHfpsFO">CNCF x Alibaba 云原生技术公开课 - 云原生教程 - 阿里云大学</a></p><h2 id="第1讲-“云原生”课"><a href="#第1讲-“云原生”课" class="headerlink" title="第1讲: “云原生”课"></a>第1讲: “云原生”课</h2><h3 id="知识点自测（一）："><a href="#知识点自测（一）：" class="headerlink" title="知识点自测（一）："></a>知识点自测（一）：</h3><p>1.Kubernetes 并不支持为应用固定 IP，于是我自己通过编写网络插件把应用 IP 管理在了 etcd 里，然后上线。请问这破坏了云原生的理念了吗？*</p><p><strong>A. 否</strong></p><p>5.我编写的容器化应用，会将日志文件写在某路径写死的目录里。请问这破坏了云原生理念了吗？*</p><p><strong>B. 是</strong></p><p><em>6.以下哪些能力不是标准 Kubernetes 项目提供的？</em></p><p>A. 容器编排与调度</p><p><strong>B. PaaS</strong></p><p>C. 资源管理</p><p>D. 服务注册与发现</p><p>PaaS是（Platform as a Service）的缩写，是指<a href="https://baike.baidu.com/item/平台即服务/4329761">平台即服务</a>。 把<a href="https://baike.baidu.com/item/服务器/100571">服务器</a>平台作为一种服务提供的商业模式，通过网络进行程序提供的服务称之为SaaS(Software as a Service)，</p><p>单选 <em>7.容器启动后，我会时常 SSH 进入到容器里然后写很多文件。请问这破坏了云原生理念了吗？</em></p><p>A. 否</p><p><strong>B. 是</strong></p><p>单选 <em>9.以下哪些项目跟 Kubernetes 项目功能重合度最高？</em></p><p>A. Mesos</p><p>B. Docker Swarm</p><p><strong>C. Docker Swarm 模式（SwarmKit）</strong></p><p>D. Cloud Foundry</p><p>正确答案： C</p><p><em>多选</em> <em>10.以下哪些标准，可以用来考察一个应用的架构是不是云原生的？</em></p><p><strong>A. 应用实例能否快速水平扩展</strong></p><p><strong>B. 应用是否使用镜像机制打包来保证环境一致性</strong></p><p><strong>C. 应用数据是否都写在容器数据卷中</strong></p><p>D. 应用是否有状态</p><h2 id="第2讲：容器基本概念"><a href="#第2讲：容器基本概念" class="headerlink" title="第2讲：容器基本概念"></a>第2讲：容器基本概念</h2><img src="https://i.loli.net/2020/02/28/XSxHu6CgFrGpzKm.png" alt="XSxHu6CgFrGpzKm" style="zoom:50%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]    </span><br><span class="line">02.  </span><br><span class="line">03.  -d, --detach=false         指定容器运行于前台还是后台，默认为false     </span><br><span class="line">04.  -i, --interactive=false   打开STDIN，用于控制台交互    </span><br><span class="line">05.  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false    </span><br><span class="line">06.  -u, --user=""              指定容器的用户    </span><br><span class="line">07.  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  </span><br><span class="line">08.  -w, --workdir=""           指定容器的工作目录   </span><br><span class="line">09.  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用    </span><br><span class="line">10.  -e, --env=[]               指定环境变量，容器中可以使用该环境变量    </span><br><span class="line">11.  -m, --memory=""            指定容器的内存上限    </span><br><span class="line">12.  -P, --publish-all=false    指定容器暴露的端口    </span><br><span class="line">13.  -p, --publish=[]           指定容器暴露的端口   </span><br><span class="line">14.  -h, --hostname=""          指定容器的主机名    </span><br><span class="line">15.  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录    </span><br><span class="line">16.  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  </span><br><span class="line">17.  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities    </span><br><span class="line">18.  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities    </span><br><span class="line">19.  --cidfile=""               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    </span><br><span class="line">20.  --cpuset=""                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    </span><br><span class="line">21.  --device=[]                添加主机设备给容器，相当于设备直通    </span><br><span class="line">22.  --dns=[]                   指定容器的dns服务器    </span><br><span class="line">23.  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    </span><br><span class="line">24.  --entrypoint=""            覆盖image的入口点    </span><br><span class="line">25.  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量    </span><br><span class="line">26.  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口    </span><br><span class="line">27.  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息    </span><br><span class="line">28.  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    </span><br><span class="line">29.  --name=""                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    </span><br><span class="line">30.  --net="bridge"             容器网络设置:  </span><br><span class="line">31.                                bridge 使用docker daemon指定的网桥       </span><br><span class="line">32.                                host    //容器使用主机的网络    </span><br><span class="line">33.                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源    </span><br><span class="line">34.                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置   </span><br><span class="line">35.  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities    </span><br><span class="line">36.  --restart="no"             指定容器停止后的重启策略:  </span><br><span class="line">37.                                no：容器退出时不重启    </span><br><span class="line">38.                                on-failure：容器故障退出（返回值非零）时重启   </span><br><span class="line">39.                                always：容器退出时总是重启    </span><br><span class="line">40.  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)    </span><br><span class="line">41.  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure><h3 id="知识点自测（二）：容器基本概念"><a href="#知识点自测（二）：容器基本概念" class="headerlink" title="知识点自测（二）：容器基本概念"></a>知识点自测（二）：容器基本概念</h3><p>单选 <em>2.已运行 docker run -d -t —name demo ubuntu top 命令, 在 demo 这个容器内看到 top 命令的 PID 是什么？</em></p><p>A. 随机数字</p><p><strong>B. 1</strong></p><p>单选 <em>3.已运行 docker run -d -t —name demo ubuntu top 命令，以下哪个 docker 命令创建出的容器能看见 demo 容器进程？</em></p><p>A. docker run –name demo-x –net container:demo ubuntu ps</p><p><strong>B. docker run –name demo-x –pid container:demo ubuntu ps</strong></p><p>C. docker run –name demo-x –ipc container:demo ubuntu ps</p><p><em>4.已运行 docker run -d -t —name demo ubuntu top 和 docker run –name demo-x –pid container:demo ubuntu ps 命令，是否可以在 demo-x 容器内部停止容器？</em></p><p><strong>A. 是</strong></p><p><em>5.已运行 docker run -d -t —name demo ubuntu top 命令, 是否可以在 demo 这个容器内部停止容器？</em></p><p>A. 是</p><p><strong>B. 否</strong>     ？？</p><p><em>6.已运行 docker run -d —name demo busybox:1.25 top 命令，如何使用 docker 命令来获取容器 demo 的 Init 进程 PID？</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两种方法</span></span><br><span class="line">docker container top &lt;container&gt;</span><br><span class="line">docker inspect -f '&#123;&#123;.State.Pid&#125;&#125;' &lt;container&gt; # 题目给的选项</span><br></pre></td></tr></table></figure><p>单选 <em>7.以下哪个 docker 命令可以用来创建一个使用宿主机主机名的容器？</em></p><p><strong>A. docker run –uts=host ubuntu hostname</strong></p><p>B. docker run ubuntu hostname</p><p>C. docker run –ipc host ubuntu ps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--uts  ??</span><br><span class="line">--ipc  ??</span><br></pre></td></tr></table></figure><p>单选 <em>8.已运行 docker run -d -t —name demo ubuntu top 和 docker run –name demo-x –pid container:demo ubuntu ps 命令，如果 demo 容器退出了，正在运行的 demo-x 容器是否会退出？</em></p><p><strong>A. 是</strong></p><p><em>9.以下哪个 docker 命令创建出来的容器可以自动重启？</em></p><p>A. docker run -d busybox top</p><p>B. docker run –restart always busybox top</p><p><strong>C. docker run -d –restart always busybox top</strong></p><h3 id="课后实践：应用容器构建与部署"><a href="#课后实践：应用容器构建与部署" class="headerlink" title="课后实践：应用容器构建与部署"></a>课后实践：应用容器构建与部署</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://edu.aliyun.com/roadmap/cloudnative?spm=5176.8764728.631162.112.6c6b20beHfpsFO&quot;&gt;CNCF x Alibaba 云原生技术公开课 - 云原生教程 - 阿里云大学&lt;/
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>bitbar</title>
    <link href="https://zronghui.github.io/Mac/01-bitbar.html"/>
    <id>https://zronghui.github.io/Mac/01-bitbar.html</id>
    <published>2020-02-28T05:20:11.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="37486e5274905fb7866c9ad6d04cb79352b4741fc53c95e8f03b94485060121b">9ec28ecf2c643e162dad2fda697938046a45fb2cbe7c8c6c04a044efd2ce918a2b5d3a1007cdb485c68e9214cd58cc419c5e7292cbbff5da3258e97f7a6ce86ff3c08fa12936eaed5d13277072a3e2ddcb595484118f2b0b886471cb717a47e785cca033802fb7f55eb30ee2f5b8519e6666c7c14889fcf909f4f4e89b5c1cd68d2dd8f2bf005a1955803cc4f16c54b6154ac87950c6ff381cb2af43986f532acf5bfe7252182f6f2c7cf8e74b6a8cc0644ff39d12e78e914e02a4ccfb2ca0d483816b72f3ae992a5c2dc81a744c3e731b056b329bf256aa40e496daad744270fae8ac3c615937320f32fe9b00c56777ca64af699e798a70737c6dc518a1fd2b4a2d641838d93f6e851b68801f58c67f062f83a3d2217f4ad981eabdf67b35901ad5987e28e1806a942f0951254197691f46fd54d589e9f280500ad429ffc2e4e52ea13380ffe65873fd42d97dcb623f51bca7a3826a1f8068213b350969b247a65ee36eaae3b97e6370667c20e2678e4e920a4780a5dc262e4b1ce4fc4cc787dda884b705d59acfd37b05c03102218053c34b9fa346f634f0bcf3bfd02eb066a783836efa8f92d7c9fe499685bd8f660b1c609e07103da78c493de3947e07d94d157491d740950fd0a2e5705ea867863d879a5349423cad46835f55cb11201487bf85f17f1fe571cbd78fbd8678981b19fdc4318b68343b9df8cc9ccdabbc2d453e927e1cf2b67026edfbbca14cd3ecd89a88d62aa07517e8687472e68b24aec8e9a040fd4b82a7516e2d50a1cfc5a39900b14d17b7aa98544999031232cf98a838ff4e63eeda47fa514906c2cfd41b990933ee619abf449b7e1ea74ef3c4528b15850155c91ae3d4c1678280f0980296759e995ddd24ff71e744b4a599dc61c90827e37946bc6293e9e553b507e7abaac6cb08a837eba0d25d4496c737d52691b5fbe9d0235eb7a65425544ccb7cb5d9e1fbb53789cdfc0000cfc196f2944545e6cdc87dc485fd248e17b1dc31283658cddf1452a9b641576cca80a92414d3b7a9fc6a1431cbb0626e0530d5213203fc33f6d01c7fa996c8dd5bc6bc369d70750464bd22805022ae8098fb2f580973ced65e392f27ff14c283e11868dadaa2317298a6e0dfa2f518464504913e399f1c5b995ff405f10cba634d1609c2cb862c56b7f1f4ad7a15999fedcfd7e244ead8cdd8ba930f7706c9743f3eac439f3deee6824f181e462c07ef2f4aee849688e11b787725f8f6357d96511d1b2a2c59931bc28646d19b82a35d0f0b149b3114bd487a418b12feecd52336d5a36784cfd93938676f73009ffebe88c8c5774044c57e67561e0a9758c19aeca175dcabcc76ba7ba8b76d13e58c9a2f7a9a83b50a5259308576d89d36a1134a247b61b09000e8b028856a823187739c6fd4f1593572cf4271436fa729d7e4b57c2a04e9102d4fefc4f01a4089357dedd155ef08f35fc49e534d8b9a78e75114cc4334d2a07f48250b387e86a5cf09150a1a9fb5f4e31a90a8e0b7010a6b39dfaa3c6455efce593699c06967ccd0873f8d1ad8912798d850dc81cdbee81afb6f80edcea65b4adedfdd5fd425d2f95cb8940c38da1e466fafb72860c8a971f2fed6c67d9993a8c4257a095fe067a2d31a5ab4f11a94e3369890faf150442fa33a1a884e146504bd8c51426705ea168680b78400b25befd6d0e9f6a005dc155c504a03101c43f946d1cee6bc56adbddd6e84d091a0932b9d1190653cf83c64b129152f41ceafd4275a698fb43638aea2b52bfe653def811de70079f9e56c28cd062774d9e71ac04910dc14c43ac59e3ccdcde8e5929320b9c0f865cdad87b09b3d03be24b616eb6447cd4437c76b62c643715d3f4f2b2710d052a09358213e7838176f6a25b21497c4afd9f6b1683f9615c8f9fd002e3005b0d897eedd214b560ee7318bab1b6ef31d470acde854af1c4060ab87577c8a1c8d8d456a73e5399b2dad7ff0ffb9f46560fe48312a943a4fd4ad56e15f8ca9c0133bbf4543f8553f86ccdfac1d8bc87c3842e763a8e87ce3ae7c7cce4c2ea81c8257231addec2efa317ba79691f30b228bb9093e33a5378a13cc1f8aee0e0a203c9db570702e027be28cd53b5fe5f48c30c9dbc2d70878f6b99ff2755c1935652983c1fb01f9699cf511508aa9931432577e29e063851f728f35e0eb9dd50f155181aaeeadc16cf7d6a76a59f5fc059ddc3c5d6a0dd6ef85e62f70ea9f8095f2b60e9263930a6303ff92816a6965247176bb80ac2c6d23b5e63a8c8dd8d20b6dca2578fd8eed5287213616c89636ff5e4bd90ba9cc6a809745e72b5e70d885993822b590bd7fa8967acc6227593cf87ee370767a36226ffb10a4979636a79e76d427a41e14f834bba73c06174bd80ca93161160c44579b59fc4a7c66442b24f3315596f816bd279800a28bf81d100a537c188552111111bbc7f3ad5661155c6510179a3e7fe6a2221f347da06150888c200765fa1d387e65d34d2d4b7fbaa72874e654b3511c9767cde840eec9cb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://zronghui.github.io/test.html"/>
    <id>https://zronghui.github.io/test.html</id>
    <published>2020-02-27T03:03:17.000Z</published>
    <updated>2020-02-27T03:03:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机操作系统 CS-Notes</title>
    <link href="https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-CS-Notes.html"/>
    <id>https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-CS-Notes.html</id>
    <published>2020-02-26T01:46:45.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>]]></content>
    
    <summary type="html">
    
      计算机操作系统 CS-Notes
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="操作系统" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
</feed>
