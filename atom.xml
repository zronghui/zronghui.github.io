<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-11-29T02:25:05.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书笔记/《Redis 设计与实现》</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ARedis%20%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ARedis%20%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B.html</id>
    <published>2020-11-29T02:24:47.000Z</published>
    <updated>2020-11-29T02:25:05.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-40</title>
    <link href="https://zronghui.github.io/biweekly-contest-40.html"/>
    <id>https://zronghui.github.io/biweekly-contest-40.html</id>
    <published>2020-11-28T16:01:12.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/">最大重复子字符串</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/">合并两个链表</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/">设计前中后队列</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-40/problems/minimum-number-of-removals-to-make-mountain-array/">得到山形数组的最少删除次数</a><strong>6</strong></li></ul><p>前三题半小时，第四题做了一小时，一开始没有思路。最后 23:59:47 做完，很极限了</p><p><img src="https://i.loli.net/2020/11/29/i3vGcAyVq4Ob8Co.png" alt="image-20201129000232986"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxRepeating</span><span class="params">(String s, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), m = word.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)!=word.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i+j)!=word.charAt(j%m))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, j/m);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// System.out.println(j+"|"+m);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeInBetween</span><span class="params">(ListNode list1, <span class="keyword">int</span> a, <span class="keyword">int</span> b, ListNode list2)</span> </span>&#123;</span><br><span class="line">        ListNode a1=list1, b1=list1, tail2=list1;<span class="comment">// a-1, b+1, list2 tail</span></span><br><span class="line">        ListNode cur=list1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=b+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i-(a-<span class="number">1</span>)==<span class="number">0</span>) a1 = cur;</span><br><span class="line">            <span class="keyword">if</span>(i-(b+<span class="number">1</span>)==<span class="number">0</span>) b1 = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = list2;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="keyword">null</span>) cur = cur.next;</span><br><span class="line">        tail2 = cur;</span><br><span class="line">        a1.next = list2;</span><br><span class="line">        tail2.next = b1;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 个 deque</span></span><br><span class="line"><span class="comment">// [a,b,c] [d,e,f]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrontMiddleBackQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Integer&gt; d1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Integer&gt; d2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontMiddleBackQueue</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushFront</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        d1.offerFirst(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        d2.offerLast(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!d1.isEmpty()) <span class="keyword">return</span> d1.pollFirst();</span><br><span class="line">        <span class="keyword">return</span> d2.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!d2.isEmpty()) <span class="keyword">return</span> d2.pollLast();</span><br><span class="line">        <span class="keyword">return</span> d1.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMiddle</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(d1.size()&gt;d2.size())</span><br><span class="line">            d2.offerFirst(d1.pollLast());</span><br><span class="line">        <span class="keyword">while</span>(d2.size()&gt;d1.size()+<span class="number">1</span>)</span><br><span class="line">            d1.offerLast(d2.pollFirst());</span><br><span class="line">        d1.offerLast(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popMiddle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(d1.isEmpty() &amp;&amp; d2.isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(d1.size()&gt;d2.size()+<span class="number">1</span>)</span><br><span class="line">            d2.offerFirst(d1.pollLast());</span><br><span class="line">        <span class="keyword">while</span>(d2.size()&gt;d1.size())</span><br><span class="line">            d1.offerLast(d2.pollFirst());</span><br><span class="line">        <span class="keyword">return</span> d1.pollLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最长递增子序列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumMountainRemovals</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE, n=nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] dp2 = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(dp1, <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(dp2, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;=nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">                dp1[i] = Math.max(dp1[i], dp1[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">2</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;=nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">                dp2[i] = Math.max(dp2[i], dp2[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i: dp1) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="comment">// for(int i: dp2) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            res = Math.max(res, dp1[i]+dp2[i]-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/maximum-repeating-substring/&quot;&gt;最大重复子字符串&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/merge-in-between-linked-lists/&quot;&gt;合并两个链表&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/design-front-middle-back-queue/&quot;&gt;设计前中后队列&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-40/problems/minimum-number-of-removals-to-make-mountain-array/&quot;&gt;得到山形数组的最少删除次数&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前三题半小时，第四题做了一小时，一开始没有思路。最后 23:59:47 做完，很极限了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/29/i3vGcAyVq4Ob8Co.png&quot; alt=&quot;image-20201129000232986&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>读书笔记/《Linux Shell 脚本攻略》阅读笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ALinux%20Shell%20%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ALinux%20Shell%20%E8%84%9A%E6%9C%AC%E6%94%BB%E7%95%A5%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-11-27T12:28:34.000Z</published>
    <updated>2020-11-28T09:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第-1-章-小试牛刀"><a href="#第-1-章-小试牛刀" class="headerlink" title="第 1 章 小试牛刀"></a>第 1 章 小试牛刀</h2><h3 id="1-2-终端打印"><a href="#1-2-终端打印" class="headerlink" title="1.2 终端打印"></a>1.2 终端打印</h3><p>echo 双引号 中需要转移 单引号不用</p><p>printf 不会自己添加换行</p><p>printf “%-5s %-10s %-4s\n” No Name Mark</p><p>-5: 左对齐占 5 的长度</p><p>%s %c %n %f</p><p>echo -e “1\t2\t3” 用-e 不输出默认的换行</p><p>echo 还能输出彩色文本</p><h3 id="1-3-玩转变量和环境变量"><a href="#1-3-玩转变量和环境变量" class="headerlink" title="1.3 玩转变量和环境变量"></a>1.3 玩转变量和环境变量</h3><p>env 输出当前 shell 中全部的环境变量</p><p><strong>怎么查看其它进程的环境变量？</strong></p><p>1.通过 pgrep 获取 gedit 进程的 ID</p><p>pgrep gedit</p><p>2.cat /proc/$PID/environ</p><h3 id="使用函数添加环境变量"><a href="#使用函数添加环境变量" class="headerlink" title="使用函数添加环境变量"></a>使用函数添加环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prepend() &#123; [ -d "$2" ] &amp;&amp; eval $1=\"$2':'\$$1\" &amp;&amp; export $1; &#125;</span><br><span class="line">prepend PATH /opt/myapp/bin</span><br></pre></td></tr></table></figure><p>先检查第二个参数的目录是否存在，eval 表达式将第一个参数的变量值设置为 第二个参数加上 : ，再加上第一个参数的原始值</p><p>如果$1 为空，会多一个： , 书中还改进了，太复杂了，当场去世</p><h3 id="1-4-通过-shell-进行数学运算"><a href="#1-4-通过-shell-进行数学运算" class="headerlink" title="1.4 通过 shell 进行数学运算"></a>1.4 通过 shell 进行数学运算</h3><h4 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h4><p>let result=no1+no2</p><p>使用 let 不需要变量前添加 $</p><p>let no1++</p><p>let no1–</p><p>let no+=6</p><p>[] 的用法和 let 一样</p><p>result=$[ no1 + no2 ]</p><h4 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result=`echo "$no * 1.5" | bc`</span><br></pre></td></tr></table></figure><p>bc 还能设置浮点数的精度，支持进度转换</p><h3 id="1-5-玩转文件描述符和重定向"><a href="#1-5-玩转文件描述符和重定向" class="headerlink" title="**1.5 玩转文件描述符和重定向"></a>**1.5 玩转文件描述符和重定向</h3><p>文件描述符 0 1 2 </p><p>0： 输入 stdin</p><p>1： 输出 stdout</p><p>2： 错误 stderr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &gt; 等价于 1&gt;</span></span><br><span class="line">ls 1&gt;stdout.txt 2&gt;stderr.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 stderr 转换成 stdout</span></span><br><span class="line">ls &gt; out.txt 2&gt;&amp;1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或</span></span><br><span class="line">ls &amp;&gt; out.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以追加到 /dev/null, 它会丢弃接收到的任何任何数据，null 也被称为黑洞</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若既想输出到文件，又想再次使用输出，可以使用 tee</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tee 默认覆盖文件， tee -a 追加</span></span><br><span class="line">cat a* | tee -a out.txt | cat -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tee - 可以将输出输出 2 次给 stdout 如:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我测试了下，并不行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> aaa | tee -</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &lt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件重定向到命令</span></span><br><span class="line">cmd &lt; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在脚本中，可以将多行文本输入到 log.txt 中</span></span><br><span class="line">cat&lt;&lt;EOF&gt;log.txt</span><br><span class="line">sfsadfasdfas</span><br><span class="line">asdfasd</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般是追加 &gt;&gt;</span></span><br><span class="line">cat&lt;&lt;EOF&gt;&gt;log.txt</span><br></pre></td></tr></table></figure><h3 id="1-6-数组和关联数组"><a href="#1-6-数组和关联数组" class="headerlink" title="1.6 数组和关联数组"></a>1.6 数组和关联数组</h3><p>1.6.1 预备知识<br>1.6.2 实战演练<br>1.6.3 补充内容</p><h3 id="1-7-使用别名"><a href="#1-7-使用别名" class="headerlink" title="1.7 使用别名"></a>1.7 使用别名</h3><p>alias 输出所有的别名</p><h3 id="1-8-获取终端信息"><a href="#1-8-获取终端信息" class="headerlink" title="1.8 获取终端信息"></a>1.8 获取终端信息</h3><p>1.8.1 预备知识<br>1.8.2 实战演练</p><h3 id="1-9-获取、设置日期和延时"><a href="#1-9-获取、设置日期和延时" class="headerlink" title="1.9 获取、设置日期和延时"></a>1.9 获取、设置日期和延时</h3><p>1.9.1 预备知识<br>1.9.2 实战演练<br>1.9.3 补充内容</p><h3 id="1-10-调试脚本"><a href="#1-10-调试脚本" class="headerlink" title="1.10 调试脚本"></a>1.10 调试脚本</h3><p>1.10.1 预备知识<br>1.10.2 实战演练<br>1.10.3 补充内容</p><h3 id="1-11-函数和参数"><a href="#1-11-函数和参数" class="headerlink" title="1.11 函数和参数"></a>1.11 函数和参数</h3><p>1.11.1 实战演练<br>1.11.2 补充内容</p><h3 id="1-12-读取命令序列输出"><a href="#1-12-读取命令序列输出" class="headerlink" title="1.12 读取命令序列输出"></a>1.12 读取命令序列输出</h3><p>1.12.1 预备知识<br>1.12.2 实战演练<br>1.12.3 补充内容</p><h3 id="1-13-以不按回车键的方式读取字符"><a href="#1-13-以不按回车键的方式读取字符" class="headerlink" title="1.13 以不按回车键的方式读取字符"></a>1.13 以不按回车键的方式读取字符</h3><p>1.13.1 预备知识<br>1.13.2 实战演练</p><h3 id="1-14-字段分隔符和迭代器"><a href="#1-14-字段分隔符和迭代器" class="headerlink" title="1.14 字段分隔符和迭代器"></a>1.14 字段分隔符和迭代器</h3><p>1.14.1 预备知识<br>1.14.2 实战演练</p><h3 id="1-15-比较与测试"><a href="#1-15-比较与测试" class="headerlink" title="1.15 比较与测试"></a>1.15 比较与测试</h3><p>1.15.1 预备知识<br>1.15.2 实战演练</p><h2 id="第-2-章-命令之乐"><a href="#第-2-章-命令之乐" class="headerlink" title="第 2 章 命令之乐"></a>第 2 章 命令之乐</h2><p>2.1 简介<br>2.2 用 cat 进行拼接<br>2.2.1 预备知识<br>2.2.2 实战演练<br>2.2.3 工作原理<br>2.2.4 补充内容<br>2.3 录制与回放终端会话<br>2.3.1 预备知识<br>2.3.2 实战演练<br>2.3.3 工作原理<br>2.4 文件查找与文件列表<br>2.4.1 预备知识<br>2.4.2 实战演练<br>2.4.3 补充内容<br>2.5 玩转 xargs<br>2.5.1 预备知识<br>2.5.2 实战演练<br>2.5.3 工作原理<br>2.5.4 补充内容<br>2.6 用 tr 进行转换<br>2.6.1 预备知识<br>2.6.2 实战演练<br>2.6.3 工作原理<br>2.6.4 补充内容<br>2.7 校验和与核实<br>2.7.1 预备知识<br>2.7.2 实战演练<br>2.7.3 工作原理<br>2.7.4 补充内容<br>2.8 排序、单一与重复<br>2.8.1 预备知识<br>2.8.2 实战演练<br>2.8.3 工作原理<br>2.8.4 补充内容<br>2.9 临时文件命名与随机数<br>2.9.1 实战演练<br>2.9.2 工作原理<br>2.10 分割文件和数据<br>2.10.1 工作原理<br>2.10.2 补充内容<br>2.11 根据扩展名切分文件名<br>2.11.1 实战演练<br>2.11.2 工作原理<br>2.12 批量重命名和移动<br>2.12.1 预备知识<br>2.12.2 实战演练<br>2.12.3 工作原理<br>2.13 拼写检查与词典操作<br>2.13.1 实战演练<br>2.13.2 工作原理<br>2.14 交互输入自动化<br>2.14.1 预备知识<br>2.14.2 实战演练<br>2.14.3 工作原理<br>2.14.4 补充内容</p><h2 id="第-3-章-以文件之名"><a href="#第-3-章-以文件之名" class="headerlink" title="第 3 章 以文件之名"></a>第 3 章 以文件之名</h2><p>3.1 简介<br>3.2 生成任意大小的文件<br>3.3 文本文件的交集与差集<br>3.3.1 预备知识<br>3.3.2 实战演练<br>3.4 查找并删除重复文件<br>3.4.1 预备知识<br>3.4.2 实战演练<br>3.4.3 工作原理<br>3.4.4 参考<br>3.5 创建长路径目录<br>3.5.1 预备知识<br>3.5.2 实战演练<br>3.6 文件权限、所有权和粘滞位<br>3.6.1 预备知识<br>3.6.2 实战演练<br>3.6.3 补充内容<br>3.7 创建不可修改文件<br>3.7.1 预备知识<br>3.7.2 实战演练<br>3.8 批量生成空白文件<br>3.8.1 预备知识<br>3.8.2 实战演练<br>3.9 查找符号链接及其指向目标<br>3.9.1 预备知识<br>3.9.2 实战演练<br>3.10 列举文件类型统计信息<br>3.10.1 预备知识<br>3.10.2 实战演练<br>3.10.3 工作原理<br>3.11 环回文件与挂载<br>3.11.1 预备知识<br>3.11.2 实战演练<br>3.11.3 补充内容<br>3.12 生成 ISO 文件及混合 ISO<br>3.12.1 预备知识<br>3.12.2 实战演练<br>3.12.3 补充内容<br>3.13 查找文件差异并进行修补<br>3.13.1 实战演练<br>3.13.2 补充内容<br>3.14 head 与 tail—— 打印文件的前 10 行和后 10 行<br>3.15 只列出目录的其他方法<br>3.15.1 预备知识<br>3.15.2 实战演练<br>3.16 在命令行中用 pushd 和 popd 快速定位<br>3.16.1 预备知识<br>3.16.2 实战演练<br>3.16.3 补充内容<br>3.17 统计文件的行数、单词数和字符数<br>3.17.1 预备知识<br>3.17.2 实战演练<br>3.17.3 补充知识<br>3.18 打印目录树<br>3.18.1 预备知识<br>3.18.2 实战演练<br>3.18.3 补充内容</p><h2 id="第-4-章-让文本飞"><a href="#第-4-章-让文本飞" class="headerlink" title="第 4 章 让文本飞"></a>第 4 章 让文本飞</h2><p>4.1 简介<br>4.2 正则表达式入门<br>4.2.1 预备知识<br>4.2.2 实战演练<br>4.2.3 工作原理<br>4.2.4 补充内容<br>4.3 用 grep 在文件中搜索文本<br>4.3.1 预备知识<br>4.3.2 实战演练<br>4.3.3 补充内容<br>4.4 用 cut 按列切分文件<br>4.4.1 预备知识<br>4.4.2 实战演练<br>4.4.3 补充内容<br>4.5 统计特定文件中的词频<br>4.5.1 预备知识<br>4.5.2 实战演练<br>4.5.3 工作原理<br>4.5.4 参考<br>4.6 sed 入门<br>4.6.1 实战演练<br>4.6.2 补充内容<br>4.7 awk 入门<br>4.7.1 实战演练<br>4.7.2 工作原理<br>4.7.3 补充内容<br>4.8 替换文本或文件中的字符串<br>4.8.1 预备知识<br>4.8.2 实战演练<br>4.8.3 补充内容<br>4.8.4 参考<br>4.9 压缩或解压缩 JavaScript<br>4.9.1 预备知识<br>4.9.2 工作原理<br>4.9.3 工作原理<br>4.9.4 参考<br>4.10 对文件中的行、单词和字符进行迭代<br>4.10.1 预备知识<br>4.10.2 实战演练<br>4.10.3 工作原理<br>4.10.4 参考<br>4.11 按列合并文件<br>4.11.1 工作原理<br>4.11.2 参考<br>4.12 打印文件或行中的第 n 个单词或列<br>4.12.1 预备知识<br>4.12.2 实战演练<br>4.12.3 参考<br>4.13 打印不同行或样式之间的文本<br>4.13.1 预备知识<br>4.13.2 实战演练<br>4.13.3 参考<br>4.14 用脚本检验回文字符串<br>4.14.1 预备知识<br>4.14.2 工作原理<br>4.14.3 工作原理<br>4.14.4 补充内容<br>4.14.5 参考<br>4.15 以逆序形式打印行<br>4.15.1 预备知识<br>4.15.2 实战演练<br>4.15.3 工作原理<br>4.15.4 参考<br>4.16 解析文本中的电子邮件地址和 URL<br>4.16.1 预备知识<br>4.16.2 实战演练<br>4.16.3 工作原理<br>4.16.4 参考<br>4.17 打印文件中某个样式之前或之后的 n 行<br>4.17.1 预备知识<br>4.17.2 实战演练<br>4.17.3 参考<br>4.18 在文件中移除包含某个单词的句子<br>4.18.1 预备知识<br>4.18.2 实战演练<br>4.18.3 工作原理<br>4.18.4 参考<br>4.19 用 awk 实现 head、tail 和 tac<br>4.19.1 预备知识<br>4.19.2 实战演练<br>4.19.3 工作原理<br>4.19.4 参考<br>4.20 文本切片与参数操作<br>4.20.1 实战演练<br>4.20.2 参考</p><h2 id="第-5-章-一团乱麻？没这回事"><a href="#第-5-章-一团乱麻？没这回事" class="headerlink" title="第 5 章 一团乱麻？没这回事"></a>第 5 章 一团乱麻？没这回事</h2><p>5.1 入门<br>5.2 网站下载<br>5.2.1 预备知识<br>5.2.2 实战演练<br>5.2.3 补充内容<br>5.3 以格式化纯文本形式下载网页<br>5.4 cURL 入门<br>5.4.1 预备知识<br>5.4.2 实战演练<br>5.4.3 补充内容<br>5.4.4 参考<br>5.5 从命令行访问 Gmail<br>5.5.1 实战演练<br>5.5.2 工作原理<br>5.5.3 参考<br>5.6 解析网站数据<br>5.6.1 实战演练<br>5.6.2 工作原理<br>5.6.3 参考<br>5.7 制作图片抓取器及下载工具<br>5.7.1 实战演练<br>5.7.2 工作原理<br>5.7.3 参考<br>5.8 网页相册生成器<br>5.8.1 预备知识<br>5.8.2 实战演练<br>5.8.3 工作原理<br>5.8.4 参考<br>5.9 Twitter 命令行客户端<br>5.9.1 预备知识<br>5.9.2 实战演练<br>5.9.3 工作原理<br>5.9.4 参考<br>5.10 基于 Web 后端的定义查询工具<br>5.10.1 预备知识<br>5.10.2 实战演练<br>5.10.3 工作原理<br>5.10.4 参考<br>5.11 查找网站中的无效链接<br>5.11.1 预备知识<br>5.11.2 实战演练<br>5.11.3 工作原理<br>5.11.4 参考<br>5.12 跟踪网站变更<br>5.12.1 预备知识<br>5.12.2 实战演练<br>5.12.3 工作原理<br>5.12.4 参考<br>5.13 以 POST 方式发送网页并读取响应<br>5.13.1 预备知识<br>5.13.2 实战演练<br>5.13.3 补充内容<br>5.13.4 参考</p><h2 id="第-6-章-B-计划"><a href="#第-6-章-B-计划" class="headerlink" title="第 6 章 B 计划"></a>第 6 章 B 计划</h2><p>6.1 简介<br>6.2 用 tar 归档<br>6.2.1 预备知识<br>6.2.2 实战演练<br>6.2.3 补充知识<br>6.2.4 参考<br>6.3 用 cpio 归档<br>6.4 用 gunzip 或 gzip 压缩<br>6.4.1 实战演练<br>6.4.2 补充内容<br>6.4.3 参考<br>6.5 用 bunzip 或 bzip 压缩<br>6.5.1 实战演练<br>6.5.2 补充内容<br>6.5.3 参考<br>6.6 用 lzma 压缩<br>6.6.1 实战演练<br>6.6.2 补充内容<br>6.6.3 参考<br>6.7 用 zip 归档和压缩<br>6.8 超高压缩率的 squashfs 文件系统<br>6.8.1 预备知识<br>6.8.2 实战演练<br>6.8.3 补充内容<br>6.9 加密工具与散列<br>6.10 用 raync 备份系统快照<br>6.10.1 实战演练<br>6.10.2 补充内容<br>6.11 用 Git 备份版本控制<br>6.11.1 预备知识<br>6.11.2 实战演练<br>6.12 用 dd 克隆磁盘<br>6.12.1 预备知识<br>6.12.2 实战演练<br>6.12.3 补充内容<br>6.12.4 参考</p><h2 id="第-7-章-无网不利"><a href="#第-7-章-无网不利" class="headerlink" title="第 7 章 无网不利"></a>第 7 章 无网不利</h2><p>7.1 简介<br>7.2 联网知识入门<br>7.2.1 新手上路<br>7.2.2 实战演练<br>7.2.3 补充内容<br>7.2.4 参考<br>7.3 使用 ping<br>7.3.1 实战演练<br>7.3.2 补充内容<br>7.4 列出网络上所有的活动主机<br>7.4.1 新手上路<br>7.4.2 实战演练<br>7.4.3 工作原理<br>7.4.4 补充内容<br>7.4.5 参考<br>7.5 传输文件<br>7.5.1 新手上路<br>7.5.2 实战演练<br>7.5.3 补充内容<br>7.5.4 参考<br>7.6 用脚本设置以太网与无线 LAN<br>7.6.1 新手上路<br>7.6.2 实战演练<br>7.6.3 工作原理<br>7.6.4 参考<br>7.7 用 SSH 实现无密码自动登录<br>7.8 用 SSH 在远程主机上运行命令<br>7.8.1 新手上路<br>7.8.2 实战演练<br>7.8.3 补充内容<br>7.8.4 参考<br>7.9 在本地挂载点上挂载远程驱动器<br>7.9.1 新手上路<br>7.9.2 实战演练<br>7.9.3 参考<br>7.10 在网络上发送多播式窗口消息<br>7.10.1 新手上路<br>7.10.2 实战演练<br>7.10.3 工作原理<br>7.10.4 参考<br>7.11 网络流量与端口分析<br>7.11.1 新手上路<br>7.11.2 实战演练<br>7.11.3 补充内容</p><h2 id="第-8-章-当个好管家"><a href="#第-8-章-当个好管家" class="headerlink" title="第 8 章 当个好管家"></a>第 8 章 当个好管家</h2><p>8.1 简介<br>8.2 统计磁盘的使用情况<br>8.2.1 新手上路<br>8.2.2 实战演练<br>8.2.3 补充内容<br>8.3 计算命令执行时间<br>8.4 与当前登录用户、启动日志及启动故障的相关信息<br>8.4.1 新手上路<br>8.4.2 实战演练<br>8.5 打印出 10 条最常使用的命令<br>8.5.1 新手上路<br>8.5.2 实战演练<br>8.5.3 工作原理<br>8.6 列出 1 小时内占用 CPU 最多的 10 个进程<br>8.6.1 新手上路<br>8.6.2 实战演练<br>8.6.3 工作原理<br>8.6.4 参考<br>8.7 用 watch 监视命令输出<br>8.7.1 实战演练<br>8.7.2 补充内容<br>8.8 对文件及目录访问进行记录<br>8.8.1 新手上路<br>8.8.2 实战演练<br>8.8.3 工作原理<br>8.9 用 logrotate 管理日志文件<br>8.9.1 新手上路<br>8.9.2 实战演练<br>8.10 用 syslog 记录日志<br>8.10.1 新手上路<br>8.10.2 实战演练<br>8.10.3 参考<br>8.11 通过监视用户登录找出入侵者<br>8.11.1 新手上路<br>8.11.2 实战演练<br>8.11.3 工作原理<br>8.12 监视远程磁盘的健康情况<br>8.12.1 新手上路<br>8.12.2 实战演练<br>8.12.3 工作原理<br>8.12.4 参考<br>8.13 找出系统中用户的活动时段<br>8.13.1 新手上路<br>8.13.2 实战演练<br>8.13.3 工作原理</p><h2 id="第-9-章-管理重任"><a href="#第-9-章-管理重任" class="headerlink" title="第 9 章 管理重任"></a>第 9 章 管理重任</h2><p>9.1 简介<br>9.2 收集进程信息<br>9.2.1 新手上路<br>9.2.2 实战演练<br>9.2.3 补充内容<br>9.2.4 参考<br>9.3 杀死进程以及发送或响应信号<br>9.3.1 新手上路<br>9.3.2 实战演练<br>9.3.3 补充内容<br>9.4 which、whereis、file、whatis 与平均负载<br>9.5 向用户终端发送消息<br>9.5.1 新手上路<br>9.5.2 实战演练<br>9.5.3 工作原理<br>9.6 收集系统信息<br>9.7 用 /proc 收集信息<br>9.8 用 cron 进行调度<br>9.8.1 新手上路<br>9.8.2 实战演练<br>9.8.3 补充内容<br>9.9 从 Bash 中读写 MySQL 数据库<br>9.9.1 新手上路<br>9.9.2 实战演练<br>9.9.3 工作原理<br>9.10 用户管理脚本<br>9.10.1 实战演练<br>9.10.2 工作原理<br>9.11 图像文件的批量缩放及格式转换<br>9.11.1 新手上路<br>9.11.2 实战演练<br>9.11.3 工作原理<br>9.11.4 参考</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第-1-章-小试牛刀&quot;&gt;&lt;a href=&quot;#第-1-章-小试牛刀&quot; class=&quot;headerlink&quot; title=&quot;第 1 章 小试牛刀&quot;&gt;&lt;/a&gt;第 1 章 小试牛刀&lt;/h2&gt;&lt;h3 id=&quot;1-2-终端打印&quot;&gt;&lt;a href=&quot;#1-2-终端打印&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>读书笔记/《MongoDB 实战》阅读笔记</title>
    <link href="https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMongoDB%20%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html"/>
    <id>https://zronghui.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMongoDB%20%E5%AE%9E%E6%88%98%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</id>
    <published>2020-11-27T11:57:29.000Z</published>
    <updated>2020-11-27T12:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图书馆借阅的书，网上也没有电子版，只能自己记了</p></blockquote><h2 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h2><p>MongoDB 数据存在哪里？内存 or 磁盘？缓存是怎样的？</p><p>默认有没有索引？有的话是哪个？id?</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="MongoDB-提供了几个命令行工具"><a href="#MongoDB-提供了几个命令行工具" class="headerlink" title="MongoDB 提供了几个命令行工具"></a>MongoDB 提供了几个命令行工具</h3><p>mongodump mongostore 备份和恢复数据库的工具</p><p>mongoexport mongoimport 导入或导出 json CSV等格式的数据</p><p>mongosniff 查看发送给数据库的命令，会把 BSON 转换成人类可读的</p><p>mongostat 与 iostat 类似，查看 MongoDB 数据库的状态，包括，每秒的操作数，分配虚拟内存的数量，以及服务器的连接数量</p><p>mongotop 显示 MongoDB 在每个集合里话费的读取和写入数据的时间总数</p><p>mongoperf MongoDB 操作磁盘情况</p><p>mongoplog 展示 MongoDB 日志</p><p>Bsondump bson-&gt;json 等格式</p><p>如 将 json 数据导入 MongoDB 数据库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat sample.json | mongoimport -c tweets</span><br></pre></td></tr></table></figure><h3 id="Why-MongoDB"><a href="#Why-MongoDB" class="headerlink" title="Why MongoDB ?"></a>Why MongoDB ?</h3><p>关系型数据库最大的特点是支持 SQL 查询语句，故 SQL 数据库的适用场景为 需要事务的系统（银行或金融）或 SQL、规范化数据模型</p><p>而像 MongoDB 的 NoSQL 更适用于 高吞吐量（如消息队列），缓存，web 网站等场景</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="动态操作数据"><a href="#动态操作数据" class="headerlink" title="动态操作数据"></a>动态操作数据</h3><p>只有在第一次插入数据库和集合是才会创建数据库，所以文档的数据结构不用提前定义</p><h3 id="shell-操作"><a href="#shell-操作" class="headerlink" title="shell 操作"></a>shell 操作</h3><p>以操作 db 数据库中的 users 集合为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">use db</span><br><span class="line">db.users.insert(&#123;username: "smith"&#125;)</span><br><span class="line"></span><br><span class="line">db.users.find()</span><br><span class="line">db.users.find(&#123;username: "jones"&#125;)</span><br><span class="line">db.users.find(&#123;username: "jones"&#125;).pretty()</span><br><span class="line"><span class="meta">#</span><span class="bash"> find 里的 json 的多个字段默认的联合逻辑是 AND</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用 <span class="variable">$and</span> 和 <span class="variable">$or</span> 组合多个条件</span></span><br><span class="line"></span><br><span class="line">db.users.update(&#123;查询条件&#125;, &#123;$set: &#123;更新的字段 json&#125;&#125;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不加 <span class="built_in">set</span> 就整个替换为后面的 json，之前的字段全部不保留</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者用 <span class="variable">$addToSet</span> 将查询的数据插入其他集合</span></span><br><span class="line"></span><br><span class="line">db.users.remove()</span><br><span class="line">db.users.remove(&#123;限制条件&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建和查询索引"><a href="#创建和查询索引" class="headerlink" title="创建和查询索引"></a>创建和查询索引</h3><p>可以从 shell 方便地创建索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.createIndex(&#123;num: 1&#125;)</span><br></pre></td></tr></table></figure><p>explain</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.numbers.find(&#123;...&#125;).explain("executionStats")</span><br></pre></td></tr></table></figure><p>explain 输出的结果的 json 中包括 totalDocsExamined 扫描的条数 indexName 使用的索引(没有使用索引就不显示这个字段)</p><h3 id="查看数据库状态"><a href="#查看数据库状态" class="headerlink" title="查看数据库状态"></a>查看数据库状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以在数据库或集合中使用 stats</span></span><br><span class="line">db.stats()</span><br><span class="line">db.users.stats()</span><br></pre></td></tr></table></figure><h3 id="数据库-集合-文档"><a href="#数据库-集合-文档" class="headerlink" title="数据库 集合 文档"></a>数据库 集合 文档</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图书馆借阅的书，网上也没有电子版，只能自己记了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;困惑&quot;&gt;&lt;a href=&quot;#困惑&quot; class=&quot;headerlink&quot; title=&quot;困惑&quot;&gt;&lt;/a&gt;困惑&lt;/h2&gt;&lt;p&gt;MongoDB 数据存在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/开题报告 IPFS 文件管理与共享平台的设计与实现</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A%20IPFS%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A%20IPFS%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-11-26T04:35:07.000Z</published>
    <updated>2020-11-26T16:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPFS-文件管理与共享平台的设计与实现"><a href="#IPFS-文件管理与共享平台的设计与实现" class="headerlink" title="IPFS 文件管理与共享平台的设计与实现"></a>IPFS 文件管理与共享平台的设计与实现</h1><h2 id="一、立题依据"><a href="#一、立题依据" class="headerlink" title="一、立题依据"></a>一、立题依据</h2><h3 id="1-研究的目的与意义"><a href="#1-研究的目的与意义" class="headerlink" title="1.研究的目的与意义"></a>1.研究的目的与意义</h3><p>可信文件存储是目前互联网系统中的一种新型架构，传统的文件存储不能保证文件存储可信。当企业用户向企业发起存储文件请求时，企业会将企业用户的文件存储在服务器上，当企业用户需要时，再从服务器上将文件取出返回。由于文件仅仅存储在一个企业的服务器上，一方面不能保证文件的可信，文件有可能会被修改；另一方面，一旦企业的服务器不可用，用户便无法再获取文件。</p><p>而 IPFS 网络是完全去中心化的，网络中的节点互相提供文件，且通过文件 hash 确保文件的完整性。IPFS 是基于内容的寻址，不是基于位置的寻址。IPFS 通过 CID 实现内容寻址，CID 即内容标识符，是用来指向 IPFS 中文件的标签。CID 是基于内容的加密hash，内容上的任何差异都会产生不同的 CID，使用相同的设置添加到两个不同 IPFS 节点的相同内容将生成完全一样的 CID。当下载文件时，IPFS 网络上的主机若存储有相同 CID 的文件，便会提供文件。下载文件之后，CID 会被用来校验文件是否被篡改。IPFS 使用内容寻址的另一个好处是去除重复文件，当多个人在IPFS上发布同一文件时，该文件只会创建一次，这会使网络非常高效地运行。</p><p>目前 IPFS 有以下几点不足： </p><p>1）目前用户可以通过 IFPS 客户端上传文件，上传的文件记录会保存在本地的数据库中，但若不小心将该数据库文件删除或系统宕机，用户的上传文件记录就会丢失。</p><p>2）IPFS 存在用户之间共享文件繁琐的问题，若用户想要将文件分享给其他用户，需要复制文件的 CID 给每一个人。</p><p>3）IPFS 中的文件公开存储，若文件的 CID 泄露，任何人都能下载此文件。</p><p>4）若文件已经上传到 IPFS 中，但是由于没有主机持有该文件或者持有该文件的主机连接较差，该文件的下载服务就暂时不可用。</p><p>因此，本课题计划设计并实现 IPFS 文件管理与共享平台。IPFS 文件管理系统为用户提供管理 IPFS 中文件的功能，一方面便于用户方便地在网页端将 IPFS 中的文件归类整理，另一方面即使用户本地的文件记录丢失，用户也能从平台中找回自己的文件记录。IPFS 文件共享系统主要包括群组功能和资源发布功能，通过建立群组，实现群组内资源共享，而将资源发布可以让系统内所有用户都能查看并下载文件资源。</p><h3 id="2-研究现状和发展趋势"><a href="#2-研究现状和发展趋势" class="headerlink" title="2.研究现状和发展趋势"></a>2.研究现状和发展趋势</h3><p>由 Fluence Labs 发布的《去中心化开发人员 2020》报告的结果表明， IPFS 和以太坊是迄今为止用于创建 DWeb 应用程序的领导者。</p><p>IPFS 全称 InterPlanetary File System，是一个旨在创建持久且分布式存储和共享文件的网络传输协议。IPFS是一种内容可寻址的对等超媒体分发协议。在 IPFS 网络中的节点将构成一个分布式文件系统。 IPFS 是点对点的超媒体协议，可以让网络更快、更安全、更开放。数据在 IPFS 上的存储都是以碎片的形式存储的，每个碎片的大小是 256k。网络中的节点会对文件的碎片进行存储。当检索数据时，所有文件的碎片会被收集起来，通过文件管理系统按序组合碎片得到想要下载的文件。整个 IPFS 网络中没有中心服务器，是完全去中心化的。</p><p>Filecoin 是运行在 IPFS 上面的一个激励层。分布文件的行为，完全是自愿的，为了让 IPFS 协议能够被更多人使用，让更多的人愿意拿出自己的电脑和存储空间给其他人使用，Protocol Labs 公司创建了 Filecoin 这个项目。Filecoin 是一个去中心化存储网络，它让云存储变成一个算法市场。这个市场运行在有着本地协议令牌（也叫做 Filecoin）的区块链。区块链中的矿工可以通过为客户提供存储来获取 Filecoin。</p><p>除了使用 IPFS 协议的 Filecoin，还有不少其他用于分布式存储的加密货币。其中知名度比较高的有 Sia、Storj、Swarm 和 Lambda：</p><p>(1) Sia: Sia[4] 在数据切分过程中采用 Reed-Solomon 编码 [5] ， 来提高数据的可恢复性。Sia 交易匹配方式是存储提供方设定价格，存储需求方进行挑选，然后提交匹配订单。但是目前 Sia 采用 POW 共识机制来对交易进行验证，无法适用于高频实时结算的场景。</p><p>(2) Storj: Storj 是一个云存储项目 [8] ，本质上和区块链没有关系，只是在结算时采用了以太坊的 ERC-20 Token。Storj 基于“即用即付”的设计方式，用户自定义一对一存储、还是一对多存储。但是用户需要保持长时间的在线，来确保存储设备是否正常工作，用户体验较差，而且 Storj 基于以太坊进行交易结算，很明显也无法应用于高频的交易场景。</p><p>(3) Swarm: 另一个在以太坊网络上的分布式存储协议，名为 Swarm，基本上和 Filecoin 的技术差不多，但是发展要比 IPFS 慢一些。</p><p>(4) Lambda: Lambda 是一个中国团队项目，获得了多家投资机构站台。作为一个分布式存储的项目，它解决的问题是在分布式存储中，用户把自己的文件交由未知的存储端时产生的信任的问题，而 Lambda 通过验证节点的共识完成文件数据的持有性证明和可恢复性证明，保证了存储在未知存储端上文件的完整性和可恢复性。</p><h2 id="二、研究内容和目标"><a href="#二、研究内容和目标" class="headerlink" title="二、研究内容和目标"></a>二、研究内容和目标</h2><h3 id="1-课题研究内容"><a href="#1-课题研究内容" class="headerlink" title="1.课题研究内容"></a>1.课题研究内容</h3><p>本课题计划在 IPFS 去中心化的基础上，为用户提供线上的用户文件管理与用户间的文件资源共享与交流平台。</p><h3 id="2-研究目标与效果"><a href="#2-研究目标与效果" class="headerlink" title="2.研究目标与效果"></a>2.研究目标与效果</h3><p>（1）为用户提供管理在 IPFS 上存储的文件的功能</p><p>1）用户上传文件</p><p>用户可以上传本地的文件到系统中，由系统上传到 IPFS 中。</p><p>若文件之前已经被上传到 IPFS 中，用户可以直接输入文件对应的 cid。</p><p>如果用户想要上传某链接里的文件，可以直接填写文件链接，系统会在下载对应链接里的文件之后，将文件上传到 IPFS 中。</p><p>2）用户文件管理</p><p>用户可以创建文件夹，也可以移动文件或文件夹到其他文件夹。</p><p>此外，用户可以删除文件或文件夹。</p><p>3）查看文件</p><p>系统检测文件的格式，为用户提供查看文件的功能，包括阅读文本，播放音频文件，播放视频文件。</p><p>4）文件（夹）分享</p><p>用户可以分享文件或文件夹，并设置分享的有效时间，系统会为用户生成分享链接和相应的密码。用户可以将链接和密码分享给其他用户。</p><p>如果过了有效时间，分享链接会失效，其他用户就无法访问相应的文件。</p><p>通过这种方式分享资源，可以避免资源的 CID 被泄露。</p><p>（2）群组功能</p><p>1）组长创建群组，邀请组员加入群组，组长可以编辑群组内的共享资源。</p><p>2）组员可以查看群组内的文件资源，或者将文件资源加入自己私人的文件列表中，但是没有编辑权限。</p><p>3）群组内有交流板块，组员之间可以互相交流</p><p>（3）IPFS 资源共享交流平台</p><p>1）发布资源</p><p>用户发布的资源是一系列文件与文件夹的集合。用户可以在平台上发布资源，并为资源添加资源名称与相关描述信息。发布的资源在平台上是共享的，所有用户都可以浏览或下载自己感兴趣的资源。</p><p>2）资源讨论区</p><p>每个资源下面都有一个讨论区，用户可以在讨论区里进行讨论和交流。</p><p>3）资源搜索</p><p>用户可以搜索资源，输入关键词，系统将列出包含关键词的所有资源。</p><p>4）资源排序</p><p>资源默认按照发布时间排列，也可以按照下载量和评论数进行排序。</p><p>5）热门资源展示板块</p><p>系统统计并展示最近 1 个月的热门资源</p><h3 id="3-拟解决的关键问题"><a href="#3-拟解决的关键问题" class="headerlink" title="3.拟解决的关键问题"></a>3.拟解决的关键问题</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IPFS-文件管理与共享平台的设计与实现&quot;&gt;&lt;a href=&quot;#IPFS-文件管理与共享平台的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;IPFS 文件管理与共享平台的设计与实现&quot;&gt;&lt;/a&gt;IPFS 文件管理与共享平台的设计与实现&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/ipfs</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/ipfs.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/ipfs.html</id>
    <published>2020-11-25T05:10:35.000Z</published>
    <updated>2020-11-25T05:49:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ipfs"><a href="#ipfs" class="headerlink" title="ipfs"></a>ipfs</h1><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://github.com/ipfs/go-ipfs#usage">ipfs/go-ipfs: IPFS implementation in Go</a><br><a href="https://docs.ipfs.io/how-to/work-with-blocks/#what-to-do-with-blocks">Work with blocks | IPFS Docs</a><br><a href="https://github.com/ipfs/js-ipfs/tree/master/examples/browser-mfs">js-ipfs/examples/browser-mfs at master · ipfs/js-ipfs</a><br><a href="https://github.com/ipfs/go-ipfs/blob/master/docs/examples/go-ipfs-as-a-library/README.md">go-ipfs/README.md at master · ipfs/go-ipfs</a></p><h2 id="ipfs-files"><a href="#ipfs-files" class="headerlink" title="ipfs files"></a>ipfs files</h2><p>ipfs files                                                                                                                                                                    0.06 Dur  ✔  01:02  1.60G RAM<br>USAGE<br>  ipfs files - Interact with unixfs files.</p><p>  ipfs files [–flush=false]</p><p>  Files is an API for manipulating IPFS objects as if they were a Unix<br>  filesystem.</p><p>  The files facility interacts with MFS (Mutable File System). MFS acts as a<br>  single, dynamic filesystem mount. MFS has a root CID that is transparently<br>  updated when a change happens (and can be checked with “ipfs files stat /“).</p><p>  All files and folders within MFS are respected and will not be cleaned up<br>  during garbage collections. MFS is independent from the list of pinned items<br>  (“ipfs pin ls”). Calls to “ipfs pin add” and “ipfs pin rm” will add and remove<br>  pins independently of MFS. If MFS content that was<br>  additionally pinned is removed by calling “ipfs files rm”, it will still<br>  remain pinned.</p><p>  Content added with “ipfs add” (which by default also becomes pinned), is not<br>  added to MFS. Any content can be put into MFS with the command “ipfs files cp<br>  /ipfs/<cid> /some/path/“.</p><p>  NOTE:<br>  Most of the subcommands of ‘ipfs files’ accept the ‘–flush’ flag. It defaults<br>  to true. Use caution when setting this flag to false. It will improve<br>  performance for large numbers of file operations, but it does so at the cost<br>  of consistency guarantees. If the daemon is unexpectedly killed before running<br>  ‘ipfs files flush’ on the files in question, then data may be lost. This also<br>  applies to run ‘ipfs repo gc’ concurrently with ‘–flush=false’<br>  operations.</p><p>SUBCOMMANDS<br>  ipfs files chcid [<path>]      - Change the cid version or hash function of the root node of a given path.<br>  ipfs files cp <source> <dest>  - Copy any IPFS files and directories into MFS (or copy within MFS).<br>  ipfs files flush [<path>]      - Flush a given path’s data to disk.<br>  ipfs files ls [<path>]         - List directories in the local mutable namespace.<br>  ipfs files mkdir <path>        - Make directories.<br>  ipfs files mv <source> <dest>  - Move files.<br>  ipfs files read <path>         - Read a file in a given MFS.<br>  ipfs files rm <path>…        - Remove a file.<br>  ipfs files stat <path>         - Display file status.<br>  ipfs files write <path> <data> - Write to a mutable file in a given filesystem.</p><p>  For more information about each command, use:<br>  ‘ipfs files <subcmd> –help’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建目录后查看 cid</span></span><br><span class="line">ipfs files mkdir /test # 这里创建后目录被 pin 了</span><br><span class="line">ipfs files stat /test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建多级目录</span></span><br><span class="line">ipfs files mkdir /test/a</span><br><span class="line">ipfs files mkdir /test/a/b</span><br><span class="line">ipfs files mkdir /test/a/b/c</span><br><span class="line">ipfs files mkdir /test/a/b/c/d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp 需要指定文件的名字</span></span><br><span class="line">ipfs files cp /ipfs/QmXyGzTdvyZVYPCd3w3sE9tHRFVAykWtLzt7wXrtH3dfU8 /test1</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 移动文件到目录里面</li><li><input checked="" disabled="" type="checkbox"> 查看目录里面的文件或者文件夹，怎么获取他们的 cid 或者文件类型（文件夹或图片或视频）</li></ul><p><img src="https://i.loli.net/2020/11/25/6oHZYfhJyGeNBF7.png" alt="image-20201125134756115"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ipfs&quot;&gt;&lt;a href=&quot;#ipfs&quot; class=&quot;headerlink&quot; title=&quot;ipfs&quot;&gt;&lt;/a&gt;ipfs&lt;/h1&gt;&lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/IPFS 文件管理与共享平台的设计与实现</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/IPFS%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/IPFS%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-11-24T07:46:32.000Z</published>
    <updated>2020-11-26T04:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPFS-文件管理与共享平台的设计与实现"><a href="#IPFS-文件管理与共享平台的设计与实现" class="headerlink" title="IPFS 文件管理与共享平台的设计与实现"></a>IPFS 文件管理与共享平台的设计与实现</h1><h2 id="一、立题依据（800-字）"><a href="#一、立题依据（800-字）" class="headerlink" title="一、立题依据（800 字）"></a>一、立题依据（800 字）</h2><h3 id="1-研究的目的与意义"><a href="#1-研究的目的与意义" class="headerlink" title="1.研究的目的与意义"></a>1.研究的目的与意义</h3><p>可信文件存储是目前互联网系统中的一种新型架构，传统的文件存储不能保证文件存储可信。当企业用户向企业发起存储文件请求时，企业会将企业用户的文件存储在服务器上，当企业用户需要时，再从服务器上将文件取出返回。由于文件仅仅存储在一个企业的服务器上，一方面不能保证文件的可信，文件有可能会被修改；另一方面，一旦企业的服务器不可用，用户便无法再获取文件。</p><p>而 IPFS 网络是完全去中心化的，网络中的节点互相提供文件，且通过文件 hash 确保文件的完整性。IPFS 是基于内容的寻址，不是基于位置的寻址。IPFS 通过 CID 实现内容寻址，CID 即内容标识符，是用来指向 IPFS 中文件的标签。CID 是基于内容的加密hash，内容上的任何差异都会产生不同的 CID，使用相同的设置添加到两个不同 IPFS 节点的相同内容将生成完全一样的 CID。当下载文件时，IPFS 网络上的主机若存储有相同 CID 的文件，便会提供文件。下载文件之后，CID 会被用来校验文件是否被篡改。IPFS 使用内容寻址的另一个好处是去除重复文件，当多个人在IPFS上发布同一文件时，该文件只会创建一次，这会使网络非常高效地运行。</p><p>目前 IPFS 有以下几点不足：</p><p>1）目前用户可以通过 IFPS 客户端上传文件，上传的文件记录会保存在本地的数据库中，但若不小心将该数据库文件删除或系统宕机，用户的上传文件记录就会丢失。</p><p>2）IPFS 存在用户之间共享文件繁琐的问题，若用户想要将文件分享给其他用户，需要复制文件的 CID 给每一个人。</p><p>3）IPFS 中的文件公开存储，若文件的 CID 泄露，任何人都能下载此文件。</p><p>4）若文件已经上传到 IPFS 中，但是由于没有主机持有该文件或者持有该文件的主机连接较差，该文件的下载服务就暂时不可用。</p><p>因此，本课题计划设计并实现 IPFS 文件管理与共享平台。IPFS 文件管理系统为用户提供管理 IPFS 中文件的功能，一方面便于用户方便地在网页端将 IPFS 中的文件归类整理，另一方面即使用户本地的文件记录丢失，用户也能从平台中找回自己的文件记录。IPFS 文件共享系统主要包括群组功能和资源发布功能，通过建立群组，实现群组内资源共享，而将资源发布可以让系统内所有用户都能查看并下载文件资源。</p><ul><li><input checked="" disabled="" type="checkbox"> <p>中心化的缺点</p></li><li><input checked="" disabled="" type="checkbox"> <p>引入 去中心化的 ipfs ，介绍 IPFS 的概念，不足</p></li><li><input checked="" disabled="" type="checkbox"> <p>我要做的事情，怎么解决上面的不足</p></li></ul><h3 id="2-研究现状和发展趋势"><a href="#2-研究现状和发展趋势" class="headerlink" title="2.研究现状和发展趋势"></a>2.研究现状和发展趋势</h3><p>Fluence Labs 发布了《去中心化开发人员 2020》报告的结果，表明 IPFS 和以太坊是迄今为止用于创建 DWeb 应用程序的领导者。</p><p><a href="https://medium.com/fluence-network/decentralized-web-developer-report-2020-5b41a8d86789">Decentralized Web Developer Report 2020 | by Evgeny Ponomarev | Fluence Labs | Medium</a></p><p><a href="https://zhuanlan.zhihu.com/p/100047515">来看看你对 IPFS 到底误解有多深！ - 知乎</a></p><p>IPFS 全称 InterPlanetary File System，是一个旨在创建持久且分布式存储和共享文件的网络传输协议。IPFS是一种内容可寻址的对等超媒体分发协议。在 IPFS 网络中的节点将构成一个分布式文件系统。 IPFS 是点对点的超媒体协议，可以让网络更快、更安全、更开放。数据在 IPFS 上的存储都是以碎片的形式存储的，每个碎片的大小是 256k。网络中的节点会对文件的碎片进行存储。当检索数据时，所有文件的碎片会被收集起来，通过文件管理系统按序组合碎片得到想要下载的文件。整个 IPFS 网络中没有中心服务器，是完全去中心化的。</p><p>Filecoin 是运行在 IPFS 上面的一个激励层。分布文件的行为，完全是自愿的，为了让 IPFS 协议能够被更多人使用，让更多的人愿意拿出自己的电脑和存储空间给其他人使用，Protocol Labs 公司创建了 Filecoin 这个项目。Filecoin 是一个去中心化存储网络，它让云存储变成一个算法市场。这个市场运行在有着本地协议令牌（也叫做 Filecoin）的区块链。区块链中的矿工可以通过为客户提供存储来获取 Filecoin。</p><p>除了使用 IPFS 协议的 Filecoin，还有不少其他用于分布式存储的加密货币。其中知名度比较高的有 Sia、Storj、Swarm 和 Lambda：</p><p>(1) Sia: Sia[4] 在数据切分过程中采用 Reed-Solomon 编码 [5] ， 来提高数据的可恢复性。Sia 交易匹配方式是存储提供方设定价格，存储需求方进行挑选，然后提交匹配订单。但是目前 Sia 采用 POW 共识机制来对交易进行验证，无法适用于高频实时结算的场景。</p><p>(2) Storj: Storj 是一个云存储项目 [8] ，本质上和区块链没有关系，只是在结算时采用了以太坊的 ERC-20 Token。Storj 基于“即用即付”的设计方式，用户自定义一对一存储、还是一对多存储。但是用户需要保持长时间的在线，来确保存储设备是否正常工作，用户体验较差，而且 Storj 基于以太坊进行交易结算，很明显也无法应用于高频的交易场景。</p><p>(3) Swarm: 另一个在以太坊网络上的分布式存储协议，名为 Swarm，基本上和 Filecoin 的技术差不多，但是发展要比 IPFS 慢一些。</p><p>(4) Lambda: Lambda 是一个中国团队项目，获得了多家投资机构站台。作为一个分布式存储的项目，它解决的问题是在分布式存储中，用户把自己的文件交由未知的存储端时产生的信任的问题，而 Lambda 通过验证节点的共识完成文件数据的持有性证明和可恢复性证明，保证了存储在未知存储端上文件的完整性和可恢复性。</p><ul><li><input disabled="" type="checkbox"> <p>区块链的发展</p></li><li><input checked="" disabled="" type="checkbox"> <p>区块链的用途</p></li><li><input checked="" disabled="" type="checkbox"> <p>去中心化存储的一些应用</p></li><li><input disabled="" type="checkbox"> <p>ipfs 的一些应用</p></li></ul><p><a href="https://www.chainnews.com/articles/156661111396.htm">IPFS 和 Filecoin 到底是什么关系？ - 链闻 ChainNews</a><br><a href="https://zhuanlan.zhihu.com/p/35050286">IPFS 与 FileCoin 究竟是什么关系？ - 知乎</a><br><a href="https://www.chainnews.com/articles/866414329889.htm">Filecoin 主网上线后，IPFS 网络会开始收费吗？ - 链闻 ChainNews</a><br><a href="https://v2ex.com/t/410619">谁给我解释下 ipfs , 真的不需要 “矿工”， 不要钱吗？- V2EX</a></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><input disabled="" type="checkbox"> 差不多 20 条</li></ul><ul><li><input disabled="" type="checkbox"> 网址怎么弄参考文献</li></ul><h2 id="二、研究内容和目标（2500-字）"><a href="#二、研究内容和目标（2500-字）" class="headerlink" title="二、研究内容和目标（2500 字）"></a>二、研究内容和目标（2500 字）</h2><h3 id="1-课题研究内容"><a href="#1-课题研究内容" class="headerlink" title="1.课题研究内容"></a>1.课题研究内容</h3><p>本课题计划在 IPFS 去中心化的基础上，为用户提供线上的用户文件管理与用户间的文件资源共享与交流平台。</p><p>具体包括以下三个研究内容：</p><p>（1）为用户提供管理在 IPFS 上存储的文件的功能</p><p>1）用户上传文件</p><p>用户可以上传本地的文件到系统中，由系统上传到 IPFS 中。</p><p>若文件之前已经被上传到 IPFS 中，用户可以直接输入文件对应的 cid。</p><p>如果用户想要上传某链接里的文件，可以直接填写文件链接，系统会在下载对应链接里的文件之后，将文件上传到 IPFS 中。</p><p>2）用户文件管理</p><p>用户可以创建文件夹，也可以移动文件或文件夹到其他文件夹。</p><p>此外，用户可以删除文件或文件夹。</p><p>3）查看文件</p><p>系统检测文件的格式，为用户提供查看文件的功能，包括阅读文本，播放音频文件，播放视频文件。</p><p>4）文件（夹）分享</p><p>用户可以分享文件或文件夹，并设置分享的有效时间，系统会为用户生成分享链接和相应的密码。用户可以将链接和密码分享给其他用户。</p><p>如果过了有效时间，分享链接会失效，其他用户就无法访问相应的文件。</p><p>通过这种方式分享资源，可以避免资源的 CID 被泄露。</p><p>（2）群组功能</p><p>1）组长创建群组，邀请组员加入群组，组长可以编辑群组内的共享资源。</p><p>2）组员可以查看群组内的文件资源，或者将文件资源加入自己私人的文件列表中，但是没有编辑权限。</p><p>3）群组内有交流板块，组员之间可以互相交流</p><p>（3）IPFS 资源共享交流平台</p><p>1）发布资源</p><p>用户发布的资源是一系列文件与文件夹的集合。用户可以在平台上发布资源，并为资源添加资源名称与相关描述信息。发布的资源在平台上是共享的，所有用户都可以浏览或下载自己感兴趣的资源。</p><p>2）资源讨论区</p><p>每个资源下面都有一个讨论区，用户可以在讨论区里进行讨论和交流。</p><p>3）资源搜索</p><p>用户可以搜索资源，输入关键词，系统将列出包含关键词的所有资源。</p><p>4）资源排序</p><p>资源默认按照发布时间排列，也可以按照下载量和评论数进行排序。</p><p>5）热门资源展示板块</p><p>系统统计并展示最近 1 个月的热门资源</p><h3 id="2-研究目标与效果"><a href="#2-研究目标与效果" class="headerlink" title="2.研究目标与效果"></a>2.研究目标与效果</h3><p>（1） 功能需求</p><p>（2） 非功能需求</p><h3 id="3-拟解决的关键问题"><a href="#3-拟解决的关键问题" class="headerlink" title="3.拟解决的关键问题"></a>3.拟解决的关键问题</h3><p>（1）</p><h2 id="三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）"><a href="#三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）" class="headerlink" title="三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）"></a>三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）</h2><p>1、研究方法</p><p>2、技术路线</p><p>拟按照瀑布模型分以下几个阶段：</p><p>1.进行可行性分析。 </p><p>2.用户需求分析与处理。搜集，分析并确定最后需求，要实现的功能。</p><p>3.概念性系统设计。粗略描述系统的功能，将用户需求模块化。</p><p>4.模块详细设计。将第 3 阶段的模块分析，建模。</p><p>5.数据库设计。用 powerdesigner 工具设计数据库，在 SQL 中生成数据库。</p><p>6.系统架构设计。采用 MVC 模式。分为 Model (模型)，View (视图)，Controller (控制器)。</p><p>7.编码，单元测试。 </p><p>8.系统测试。 </p><p>9.发布运行与维护。</p><p>从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈，因此，如果有信息未被覆盖或者发现了问题，那么就 “返回” 上一个阶段并进行适当的修改，项目开发进程从一个阶段 “流动” 到下一个阶段。</p><h2 id="四、本研究课题可能的创新之处（不少于500字）"><a href="#四、本研究课题可能的创新之处（不少于500字）" class="headerlink" title="四、本研究课题可能的创新之处（不少于500字）"></a>四、本研究课题可能的创新之处（不少于500字）</h2><p>1）提供 Web端 IPFS 文件管理功能</p><p>IPFS-desktop 和 IPFS 命令行上传文件后，文件的记录都在本地保存，</p><p>2）提供 IPFS 资源共享交流平台</p><h2 id="五、研究基础与工作条件（1-与本项目相关的研究工作积累基础-2-包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）"><a href="#五、研究基础与工作条件（1-与本项目相关的研究工作积累基础-2-包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）" class="headerlink" title="五、研究基础与工作条件（1.与本项目相关的研究工作积累基础 2.包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）"></a>五、研究基础与工作条件（1.与本项目相关的研究工作积累基础 2.包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）</h2><h2 id="学位论文工作计划"><a href="#学位论文工作计划" class="headerlink" title="学位论文工作计划"></a>学位论文工作计划</h2><h4 id="更多复杂但是不打算实现的功能："><a href="#更多复杂但是不打算实现的功能：" class="headerlink" title="更多复杂但是不打算实现的功能："></a>更多复杂但是不打算实现的功能：</h4><p>群组内或论坛里可以艾特其他人，人会在个人头像旁边的铃铛里收到提醒</p><p>资源板块划分</p><h4 id="不难但是不准备做的功能："><a href="#不难但是不准备做的功能：" class="headerlink" title="不难但是不准备做的功能："></a>不难但是不准备做的功能：</h4><p>系统允许用户导出个人的所有文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IPFS-文件管理与共享平台的设计与实现&quot;&gt;&lt;a href=&quot;#IPFS-文件管理与共享平台的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;IPFS 文件管理与共享平台的设计与实现&quot;&gt;&lt;/a&gt;IPFS 文件管理与共享平台的设计与实现&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/基于区块链的隐私文件存储系统的设计与实现</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%9A%90%E7%A7%81%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%9A%90%E7%A7%81%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-11-17T10:12:31.000Z</published>
    <updated>2020-11-24T16:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于区块链的隐私文件存储系统的设计与实现"><a href="#基于区块链的隐私文件存储系统的设计与实现" class="headerlink" title="基于区块链的隐私文件存储系统的设计与实现"></a>基于区块链的隐私文件存储系统的设计与实现</h1><h2 id="一、立题依据"><a href="#一、立题依据" class="headerlink" title="一、立题依据"></a>一、立题依据</h2><h3 id="1-研究的目的与意义"><a href="#1-研究的目的与意义" class="headerlink" title="1.研究的目的与意义"></a>1.研究的目的与意义</h3><p>物联网、云计算、以及人工智能等技术的兴起和发展加速了数据量的增长，国际 数据中心（IDC，International Data Center）在报告《Data Age 2025》 [1] 中指出：到 2025 年全球数据总量将达到 163 ZB 以上。</p><p>可信文件存储是目前互联网系统中的一种新型架构，传统的文件存储不能保证文件存储可信。当企业用户向企业发起存储文件请求时，企业会将企业用户的文件存储在服务器上，当企业用户需要时，再从服务器上将文件取出返回。由于文件仅仅存储在一个企业的服务器上，所以并不能保证文件的可信，文件有可能会被修改。</p><p>2008 年 10 月，“中本聪”发布区块链技术的开创性论文《Bitcoin：a peer-to-peer electronic cash system》 [2] ：通过使用一个公开可验证的分布式账本，在没有中心化监 管机构的情况下，用户能够安全地进行价值的转移。区块链中区块的哈希指针和共识算法保证了区块链的不可篡改的特性。区块链就是一个一个区块组成的链表。区块链和普通的链表的区别在于区块链用哈希指针代替了普通指针。一个区块的哈希指针是把前面整个区块的内容，包括里面的哈希指针，合在一起取哈希值。如果一个区块的内容被改变，后面一个区块的哈希指针就对不上，因为后一个区块哈希指针是根据前一个区块的内容计算出来的，所以后一个哈希指针也得改，因此已经上链的区块无法被修改。此外，区块链是一种通过去中心化和去信任的方式维护一个可靠数据库的技术方案。任意节点添加新区块时，只有多数区块链节点达成共识才能将区块新加入链中。</p><p>综上所述，为了确保文件存储的防篡改及隐私性，本文希望实现一个基于区块链的隐私文件存储系统，用户将文件上传到系统中，文件的 hash 以及相关描述信息会被存储到区块链上。为了保证存储系统的高可用，文件也会被复制到多台存储节点，以免一台存储节点宕机导致文件不可用或文件丢失。用户获取文件时，系统判断用户对文件的权限，并检查文件的相关信息是否与区块链上存储的信息是否一致，检查通过后向用户提供文件的传输服务。</p><h3 id="2-研究现状和发展趋势"><a href="#2-研究现状和发展趋势" class="headerlink" title="2.研究现状和发展趋势"></a>2.研究现状和发展趋势</h3><p>区块链具备去中心化、不可篡改的特性，能够很好地解决目前数据存储领域普遍 存在的安全性差等问题。近些年来，国内外专家和机构都在不断进行区块链技术在存 储领域的探索和实践，区块链和数据存储的结合方式，目前主要包括以下两种方式： </p><p>第一，直接将数据写入区块，数据得到共识后同步到所有节点，保证了数据的不可篡改性。但是这种存储模式中数据的存放是多节点、全冗余备份，会带来存储资源 的浪费。因此此种模式一般用于简单的、重要的信息存储，如商品溯源 [3] 等场景； </p><p>第二，针对于大文件的存储，区块链往往与文件系统相结合，将真实文件存放在文件系统，而区块链存储文件摘要等属性信息，利用哈希函数的唯一性和不可逆性来实现对数据的验证。目前基于区块链的存储系统主要有以下几种：</p><p>（1）Sia：Sia[4] 在数据切分过程中采用 Reed-Solomon 编码 [5] ， 来提高数据的可恢复性。Sia 交易匹配方式是存储提供方设定价格，存储需求方进行挑选，然后提交匹配订单。但是目前 Sia 采用 POW 共识机制来对交易进行验证，无法适用于高频实时结算的场景。</p><p>（2）IPFS/Filecoin：IPFS（InterPlanetary File System）是一个点对点的分布式文件系统，目标在于改变现有的 HTTP 协议，构建一个去冗余的互联网世界 [6] 。相较于传统的客户端/服务器结构，P2P 网络中节点的地位都是对等的，每个节点 既可以获取其他节点的资源或服务，又能对其他节点的请求做出响应，提供资源和服务 [7] 。而 Filecoin 是 IPFS 上面的激励层，来鼓励更多的节点加入 IPFS 网络。但是 Filecoin 的服务方式是让服务商和用户相互选择，因此存储空间的利用率会相对偏低。且文件一旦上传，它们就不能被修改或删除。</p><p>由于它的文件索引是公开的，任何人只要知道了文件的 Hash 就能任意访问文件，这样的设计方式更适合存储网页等公开信息，而不适合用于存储个人数据和企业数据，进而在存储网络中会带来用户隐私的问题。</p><p>在激励层面，有些证明算法过于复杂，很可能导致整个系统无法大规模运作。在 P2P 网络的设计上面，虽然使用了比较成熟的 Bittorrent 的设计，但针对各种网络异常以及区域网的处理上面，并不够友好，这将在实际运行中给大量租户以及运营商带来各种各样的问题。</p><p>在落地层面，IPFS 声称的不受监管（无法删除），必然将会面临各国政策和法律的风险，而它本身体系的设计并没有考虑应对此方面的风险，这将使整个项目的全球落地变得更为困难。</p><p>（3）Storj：Storj 是一个云存储项目 [8] ，本质上和区块链没有关系，只是在结算时采用了以太坊的 ERC-20 Token。Storj 基于“即用即付”的设计方式，用户自定义一对一存储、还是一对多存储。但是用户需要保持长时间的在线，来确保存储设备是否正常工作，用户体验较差，而且 Storj 基于以太坊进行交易结算，很明显也无法应用于高频的交易场景。</p><p>因此，为了实现文件存储的高可用，隐私性及防篡改特性，本文计划将文件存储在分布式存储系统中，将文件的 hash 等描述信息上链，以实现一个基于区块链的隐私文件存储系统。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] Reinsel D, Gantz J, Rydning J. Data age 2025: The evolution of data to life-critical[J]. IDC White Paper, 2017:1-25.</p><p>[2] Nakamoto S. Bitcoin: A peer-to-peer electronic cash system[J]. 2008.</p><p>[3] 郭珊珊. 供应链的可信溯源查询在区块链上的实现[D]. 大连海事大学, 2017.</p><p>[4] Vorick D, Champine L. Sia: Simple decentralized storage[J]. White paper available at <a href="https://sia">https://sia</a>. tech/sia.</p><p>pdf, 2014.</p><p>[5] McEliece R J, Sarwate D V. On sharing secrets and Reed-Solomon codes[J]. Communications of the ACM, 1981,24(9):583-584.</p><p>[6] Benet J. Ipfs-content addressed, versioned, p2p file system[J]. arXiv preprint arXiv:1407.3561, 2014.</p><p>[7] Shteyn Y. Distributed storage on a P2P network architecture[Z]. Google Patents, 2002.</p><p>[8] Wilkinson S, Boshevski T, Brandoff J, et al. Storj a peer-to-peer cloud storage network[J]. 2014.</p><p>[9] 侯孟书. 基于 P2P 的分布式存储及其相关技术研究[D]. 成都: 电子科技大学, 2005.</p><h2 id="二、研究内容和目标（2500-字）"><a href="#二、研究内容和目标（2500-字）" class="headerlink" title="二、研究内容和目标（2500 字）"></a>二、研究内容和目标（2500 字）</h2><h3 id="1-研究内容"><a href="#1-研究内容" class="headerlink" title="1.研究内容"></a>1.研究内容</h3><p>本文要实现的是基于区块链的隐私文件存储系统，系统由区块链节点组成，用户将文件上传到分布式对象存储系统之后，文件的描述信息会被记录在区块链账本中公开存储，而文件内容在指定节点中存储，既保证了文件在区块链系统中不可篡改，又保证了文件的隐私性；既能避免区块链节点的单点故障，又能保证恶意节点无法盗取隐私文件。因此，本文主要计划完成以下两点研究内容：</p><p>第一，区块链的搭建及智能合约设计与部署。这一部分是整个系统的基础，区块链保障了系统中文件的防篡改特性，所以为区块链设计合理的智能合约至关重要，如果合约字段过多，会对系统的整体性能造成影响，如果合约字段过少，则无法借助区块链实现防篡改的特性。</p><p>第二，隐私文件存储系统的设计与实现。在区块链搭建完成的基础上，设计并实现隐私文件存储系统。这一部分是整个系统的核心，也是整个毕设中任务量最大的部分，主要工作包括系统架构设计，数据库表的设计，技术选型，功能点的计划以及具体的前后端开发。</p><table><thead><tr><th>时间</th><th>研究内容</th><th>预期效果</th></tr></thead><tbody><tr><td>2020.09-2020.10</td><td>研究现状调研工作</td><td>了解常用区块链文件存储方案</td></tr><tr><td>2020.11</td><td>论文开题</td><td>撰写开题报告，完成开题答辩</td></tr><tr><td>2020.12-2021.1</td><td>区块链的搭建及智能合约设计与部署</td><td>完成区块链的搭建及智能合约部署</td></tr><tr><td>2021.2-2021.5</td><td>设计与实现隐私文件存储系统</td><td>完成隐私文件存储系统</td></tr><tr><td>2021.7-2021.8</td><td>撰写阶段报告</td><td>完成阶段报告</td></tr><tr><td>2021.9-2021.12</td><td>撰写毕业论文</td><td>提交初稿、修改稿、定稿</td></tr><tr><td>2021.1-2021.5</td><td>论文送审、修改及答辩</td><td>论文送审、修改及答辩</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><a href="https://www.zhihu.com/question/43404157">为什么要用区块链技术实现智能合约？ - 知乎</a></p><p><a href="https://www.zhihu.com/question/36790600/answer/566875748">如何评价分布式存储项目 IPFS？ - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于区块链的隐私文件存储系统的设计与实现&quot;&gt;&lt;a href=&quot;#基于区块链的隐私文件存储系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;基于区块链的隐私文件存储系统的设计与实现&quot;&gt;&lt;/a&gt;基于区块链的隐私文件存储系统的设计与实现&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-215</title>
    <link href="https://zronghui.github.io/weekly-contest-215.html"/>
    <id>https://zronghui.github.io/weekly-contest-215.html</id>
    <published>2020-11-15T04:10:36.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/design-an-ordered-stream/">设计有序流</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/determine-if-two-strings-are-close/">确定两个字符串是否接近</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/minimum-operations-to-reduce-x-to-zero/">将 x 减到 0 的最小操作数</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-215/problems/maximize-grid-happiness/">最大化网格幸福感</a><strong>7</strong></li></ul><p><img src="https://i.loli.net/2020/11/15/QnlxpMiLIF315YJ.png" alt="image-20201115121121254"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedStream</span> </span>&#123;</span><br><span class="line">    String[] l;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> ptr = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderedStream</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        l = <span class="keyword">new</span> String[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.n = n+<span class="number">1</span>; <span class="comment">// ignore index 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id, String value)</span> </span>&#123;</span><br><span class="line">        l[id] = value;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(id!=ptr) <span class="keyword">return</span> res;</span><br><span class="line">        res.add(value);</span><br><span class="line">        <span class="keyword">int</span> i = id+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n &amp;&amp; l[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            res.add(l[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr = i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; param_1 = obj.insert(id,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">closeStrings</span><span class="params">(String w1, String w2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w1.length()!=w2.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] m1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>], m2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: w1.toCharArray())</span><br><span class="line">            m1[c-<span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: w2.toCharArray())</span><br><span class="line">            m2[c-<span class="string">'a'</span>] += <span class="number">1</span>;</span><br><span class="line">        List&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList&lt;&gt;(),  l2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m1[i]!=<span class="number">0</span>) l1.add(m1[i]);</span><br><span class="line">            <span class="keyword">if</span>(m2[i]!=<span class="number">0</span>) l2.add(m2[i]);</span><br><span class="line">            <span class="comment">// 你有的字符我也要有</span></span><br><span class="line">            <span class="keyword">if</span>(m1[i]==<span class="number">0</span> &amp;&amp; m2[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(m2[i]==<span class="number">0</span> &amp;&amp; m1[i]!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(l1);</span></span><br><span class="line">        <span class="comment">// System.out.println(l2);</span></span><br><span class="line">        <span class="comment">// System.out.println(l1.size()+"|"+l2.size());</span></span><br><span class="line">        <span class="keyword">if</span>(l1.size()!=l2.size()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Collections.sort(l1);</span><br><span class="line">        Collections.sort(l2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;l1.size(); i++)&#123;</span><br><span class="line">            <span class="comment">// Hence the comparison with == only works for numbers between -128 and 127.</span></span><br><span class="line">            <span class="comment">// System.out.println(l1.get(i)+"|"+l2.get(i) +"|"+ (l1.get(i)!=l2.get(i)));</span></span><br><span class="line">            <span class="keyword">if</span>((l1.get(i)-l2.get(i))!=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>postsum -&gt; sufsum 更合适</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minOperations</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] presum = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>], postsum = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            presum[i] = presum[i-<span class="number">1</span>]+nums[i-<span class="number">1</span>];</span><br><span class="line">            postsum[i] = postsum[i-<span class="number">1</span>]+nums[n-i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i: presum) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// System.out.println("");</span></span><br><span class="line">        <span class="comment">// for(int i: postsum) System.out.print(i+"|");</span></span><br><span class="line">        <span class="comment">// 0|1|2|6|8|11|</span></span><br><span class="line">        <span class="comment">// 0|3|5|9|10|11|</span></span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, j=n;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;res &amp;&amp; i&lt;=n &amp;&amp; presum[i]&lt;=x)&#123;</span><br><span class="line">            <span class="keyword">while</span>(n-j&gt;i-<span class="number">1</span> &amp;&amp; postsum[j]+presum[i]&gt;x)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span>(n-j&gt;i-<span class="number">1</span> &amp;&amp; (postsum[j]+presum[i]-x==<span class="number">0</span>))</span><br><span class="line">                res = Math.min(res, i+j);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==Integer.MAX_VALUE?-<span class="number">1</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/design-an-ordered-stream/&quot;&gt;设计有序流&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/determine-if-two-strings-are-close/&quot;&gt;确定两个字符串是否接近&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/minimum-operations-to-reduce-x-to-zero/&quot;&gt;将 x 减到 0 的最小操作数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-215/problems/maximize-grid-happiness/&quot;&gt;最大化网格幸福感&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/QnlxpMiLIF315YJ.png&quot; alt=&quot;image-20201115121121254&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-39</title>
    <link href="https://zronghui.github.io/biweekly-contest-39.html"/>
    <id>https://zronghui.github.io/biweekly-contest-39.html</id>
    <published>2020-11-14T16:52:55.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/defuse-the-bomb/">拆炸弹</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-deletions-to-make-string-balanced/">使字符串平衡的最少删除次数</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-jumps-to-reach-home/">到家的最少跳跃次数</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-39/problems/distribute-repeating-integers/">分配重复整数</a><strong>6</strong></li></ul><p><img src="https://i.loli.net/2020/11/15/7Aw4iYzBlrh1qaR.png" alt="image-20201115005339026"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] decrypt(<span class="keyword">int</span>[] code, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">// 恶心</span></span><br><span class="line">        <span class="keyword">int</span> n = code.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> d = k&gt;<span class="number">0</span> ? <span class="number">1</span>: -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=Math.abs(k); j++)&#123;</span><br><span class="line">                res[i] += code[(i+j*d+n)%n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDeletions</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="comment">// aa 格式  aab 格式</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>], b = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        b[<span class="number">0</span>] = -<span class="number">1</span>; <span class="comment">// 起始不可能 aab 格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'a'</span>)&#123;</span><br><span class="line">                a[i] = a[i-<span class="number">1</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                a[i] = a[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 不可能 aab 格式</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'a'</span> &amp;&amp; b[i-<span class="number">1</span>]==-<span class="number">1</span>) b[i]=-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 以 a 结尾，a 肯定要删除</span></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">'a'</span>)&#123;</span><br><span class="line">                    b[i] = b[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 可以从 aa 或者 aab 转换过来</span></span><br><span class="line">                    b[i] = Math.min(a[i-<span class="number">1</span>], b[i-<span class="number">1</span>]==-<span class="number">1</span> ? n : b[i-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// aa 格式</span></span><br><span class="line">        <span class="keyword">if</span>(b[n]==-<span class="number">1</span>) <span class="keyword">return</span> a[n];</span><br><span class="line">        <span class="keyword">return</span> Math.min(a[n], b[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] q;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canDistribute</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] quantity)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        m = quantity.length;</span><br><span class="line">        <span class="comment">// reverse sort</span></span><br><span class="line">        Arrays.sort(quantity);</span><br><span class="line">        q = quantity;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=m-<span class="number">1</span>; i&lt;j; i++, j--)&#123;</span><br><span class="line">            <span class="keyword">int</span> t = q[i];</span><br><span class="line">            q[i] = q[j];</span><br><span class="line">            q[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) </span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 暴力</span></span><br><span class="line">        <span class="keyword">return</span> dfs(map, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(HashMap&lt;Integer, Integer&gt; map, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = map.get(num);</span><br><span class="line">            <span class="keyword">if</span>(cnt&lt;q[i]) <span class="keyword">continue</span>;</span><br><span class="line">            map.put(num, cnt-q[i]);</span><br><span class="line">            <span class="keyword">if</span>(dfs(map, i+<span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            map.put(num, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/defuse-the-bomb/&quot;&gt;拆炸弹&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-deletions-to-make-string-balanced/&quot;&gt;使字符串平衡的最少删除次数&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/minimum-jumps-to-reach-home/&quot;&gt;到家的最少跳跃次数&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-39/problems/distribute-repeating-integers/&quot;&gt;分配重复整数&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/11/15/7Aw4iYzBlrh1qaR.png&quot; alt=&quot;image-20201115005339026&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/开题报告</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%BC%80%E9%A2%98%E6%8A%A5%E5%91%8A.html</id>
    <published>2020-11-10T04:13:31.000Z</published>
    <updated>2020-11-24T07:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于区块链的隐私文件存储系统的设计与实现"><a href="#基于区块链的隐私文件存储系统的设计与实现" class="headerlink" title="基于区块链的隐私文件存储系统的设计与实现"></a>基于区块链的隐私文件存储系统的设计与实现</h1><h2 id="一、立题依据（800-字）"><a href="#一、立题依据（800-字）" class="headerlink" title="一、立题依据（800 字）"></a>一、立题依据（800 字）</h2><h3 id="1-研究的目的与意义"><a href="#1-研究的目的与意义" class="headerlink" title="1.研究的目的与意义"></a>1.研究的目的与意义</h3><p>可信文件存储是目前互联网系统中的一种新型架构，传统的文件存储不能保证文件存储可信。当企业用户向企业发起存储文件请求时，企业会将企业用户的文件存储在服务器上，当企业用户需要时，再从服务器上将文件取出返回。由于文件仅仅存储在一个企业的服务器上，所以并不能保证文件的可信，文件有可能会被修改。</p><p>区块链就是一个一个区块组成的链表。区块链和普通的链表的区别在于区块链用哈希指针代替了普通指针。一个区块的哈希指针是把前面整个区块的内容，包括里面的哈希指针，合在一起取哈希值。如果有人改变了一个区块的内容，后面一个区块的哈希指针就对不上，因为后一个区块哈希指针是根据前一个区块的内容算出来的，所以后一个哈希指针也得改。因此没有任何办法可以修改已经上链的区块。区块链通过去中心化和去信任的方式维护一个可靠数据库的技术方案。任意节点添加新区块时，只有多数区块链节点达成共识才能将区块新加入链中。因此，哈希指针和共识算法保证了区块链的不可篡改的特性。</p><p>本论文为了确保文件存储的防篡改、隐私性，并保证区块链的性能，希望实现一个基于区块链的隐私文件存储系统，用户将文件上传到系统中，文件的 hash 以及相关描述信息会被存储到区块链上。为了防止文件被篡改，文件也会被复制到多台存储节点，以免一台存储节点宕机导致文件不可用或文件丢失。用户获取文件时，系统判断用户对文件的权限，并检查文件的相关信息是否与区块链上存储的信息是否一致，检查通过后向用户提供文件的传输服务。</p><h3 id="2-研究现状和发展趋势"><a href="#2-研究现状和发展趋势" class="headerlink" title="2.研究现状和发展趋势"></a>2.研究现状和发展趋势</h3><p>使用区块链可以将文件存储在区块链上，这样就可以保证文件的可信性，但也引入了新的问题，区块链的区块大小有限，存储大文件会导致区块链性能低下。此外，由于区块链上的数据无法删除和修改，随着用户数目及使用时间的增长，区块链存储的数据会变得巨大，会引发性能问题和存储问题。</p><p>区块链不应存储大文件，而是应该将大文件存储在链下，链上仅存储能唯一标识文件的标识符。随着物联网时代的到来，大量的文件需要被唯一标识，一些企业开始根据文件的内容对文件做出唯一标识，这方面的典型技术产品是 IPFS (Inter Planetary File System 即星际文件系统)。IPFS 是一种点对点的分布式文件系统。IPFS 系统结合了分布式哈希表技术和基于默克尔树的文件存储技术打造了一个所有文件被唯一标识的分布式文件存储系统。仅使用区块链不能高效地存储，仅使用 IPFS 不能保证数据可信，因此，为了解决区块链存储大文件会导致性能低下的问题，有人将区块链与 IPFS 结合，融合高效存储和可信存储的优势，实现可信并高效的存储。然而 IPFS 有一些致命的问题，第一， IPFS 中存储的文件是公开与共享的，连接上区块链的任何人都能获取链上记录的文件，不能保证文件的私密性；第二，IPFS 提供的点对点的传输，如果持有文件的用户都不在线，文件就无法获取；此外，获取 IPFS 中的文件需要文件对应的 hash，如果没有 hash 则无法下载文件；第三，与将文件存储在区块链上类似的问题是，文件一旦上传，它们就不能被修改或删除，即便没有存储的价值，也会占用多台机器的存储空间。</p><p>本论文希望实现基于区块链的隐私文件存储系统，将文件存储在分布式存储系统中，支持文件的删除，将文件的 hash 等描述信息上链，实现信息的防篡改特性。</p><p>私链+IPFS 也能达到隐私性文件的效果。</p><p>如果你要分享文件，就得保持在线；一旦上传，它们就不能被修改或删除；不能通过其有意义的内容来搜索它们</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><h2 id="二、研究内容和目标（2500-字）"><a href="#二、研究内容和目标（2500-字）" class="headerlink" title="二、研究内容和目标（2500 字）"></a>二、研究内容和目标（2500 字）</h2><h3 id="1-研究内容"><a href="#1-研究内容" class="headerlink" title="1.研究内容"></a>1.研究内容</h3><p>本论文要实现的是基于区块链的隐私文件存储系统，系统由区块链节点组成，用户将文件上传到分布式对象存储系统之后，文件的描述信息会被记录在区块链账本中公开存储，而文件内容在指定节点中存储，既保证了文件在区块链系统中不可篡改，又保证了文件的隐私性；既能避免区块链节点的单点故障，又能保证恶意节点无法盗取隐私文件。因此，本文主要计划完成以下两点研究内容：</p><p>第一，区块链的搭建及智能合约设计与部署。这一部分是整个系统的基础，区块链保障了系统中文件的防篡改特性，所以为区块链设计合理的智能合约至关重要，如果合约字段过多，会对系统的整体性能造成影响，如果合约字段过少，则无法借助区块链实现防篡改的特性。</p><p>第二，隐私文件存储系统的设计与实现。在区块链搭建完成的基础上，设计并实现隐私文件存储系统。这一部分是整个系统的核心，也是整个毕设中任务量最大的部分，主要工作包括系统架构设计，数据库表的设计，技术选型，功能点的计划以及具体的前后端开发。</p><p><strong>区块链设计</strong></p><p><strong>链上存储数据：</strong></p><p>(*userId_hash)， 逻辑目录(M)，显示的文件名(M)</p><p>考虑1：不能放更少的字段，如果只存放 userId_hash 的话，如果某文件被替换为此用户的其他文件，系统无法检测出被篡改。如果 用户 ID，目录，文件名，hash 任何一项与数据库不一致的话，都可以检测出文件被篡改</p><p>考虑 2：不能放 bucketName, 存储文件名。</p><p><strong>数据库设计</strong></p><p><strong>用户数据库：</strong></p><p>userId, 用户名, 邮箱，bcrypt(密码)</p><p>文件数据库还有没有存在的必要？</p><p>可以先不加</p><p><strong>文件数据库</strong>：</p><p><strong>userId, hash</strong>, bucketName, 存储文件名, 逻辑目录(M)，显示的文件名(M)，文件上传时间(M)</p><p>userId, hash 作为联合主键</p><p>(M) 表示允许用户修改的字段</p><p>数据库中这里面每一行允许删除</p><p><strong>目录文件数据库</strong>：</p><p>功能：用于获得用户的某个目录下面的目录以及文件，或者用于搜索用户的目录及文件</p><p><strong>userid，目录或文件</strong></p><p>（userid, 目录） 作为联合主键</p><p>目录类似 /a/b/c/ 格式，以/结尾</p><p>文件类似 /a/b/c/d 格式，以非/的字符结尾</p><p><strong>分享数据库</strong>：</p><p><strong>可能涉及的操作</strong>：</p><p>创建文件夹：在目录文件数据库创建对应的文件夹</p><p>文件上传：检查此用户当前目录下是否有重名的文件，如果有，上传失败。没有重名的文件，将文件上传到服务器，由服务器计算文件的 hash，并将文件上传到分布式存储系统，然后将(userid, 文件的全路径名) 插入到 目录文件数据库，再往文件数据库插入这个文件的信息</p><p>文件下载：</p><p>移动文件：用户指定需要移动到的文件夹后，如果目标文件夹不存在，服务器创建文件夹，接着修改数据库及区块链中对应文件的 文件夹字段。删除目录文件数据库的原纪录，插入新的记录。</p><p>文件重命名：</p><p>删除文件：</p><p>删除文件夹：</p><p>文件/目录 分享：（设置密码、分享时效）</p><p>文件或目录搜索功能：</p><p><strong>其他细节：</strong></p><p>由系统提供下载服务，而不是 minIO</p><p>有 minIO 提供的话，可能会暴露文件服务器地址，有文件泄露的风险，不安全</p><p><strong>密码的存储</strong></p><p>不存储明文，存储bcrypt(密码)  ，用户登录时验证根据用户提供的密码生成 bcrypt，检查是否与数据库中记录的相等即可</p><p><a href="https://www.zhihu.com/question/20479856">互联网网站应该如何存储密码？ - 知乎</a><br><a href="https://tate-young.github.io/2019/05/21/bcrypt.html">bcrypt 与密码安全 - Tate &amp; Snow</a></p><p><strong>hash 上链的必要性：</strong></p><p>如果没有上链的话，如果 MySQL 和 minIO 的用户名密码泄露，可以很轻松的修改文件，然后将数据库中对应记录的 hash 修改成 新文件的 hash。就能达到篡改文件的目的。</p><p>但是如果 userID_hash 上链了，即便文件和数据库中的 hash 字段被修改，当用下载文件时，或者定时程序运行的时候，检测到文件的信息与链上不一致，就会告知用户及管理员。</p><p><strong>为什么不把数据全部存在区块链上？</strong></p><p>为了性能，如果把相对来说不那么重要的信息全部存在区块链中，写区块链的时候需要大部分节点达成共识，响应速度必然会降低</p><p>为了提升用户上传文件的隐私性，用户可自行将文件加密后上传</p><p>文件加密 签名？ 一个用户拥有 2 套公私钥？先加密，后签名</p><p>第一套公钥加密文件，第二套私钥签名文件</p><p>具体怎么弄还没想清楚</p><p>邮箱注册、通过邮箱找回密码功能</p><p>树形结构怎么存储，参考下文，可能他的并不是更好的方法</p><p><a href="https://juejin.im/post/6844903873581170701">大量文件名记录的树形结构存储</a></p><p>第一，</p><p>第二，</p><p>第三，</p><p>1）文件存储与上链方案设计与实现</p><p>文件上传到分布式对象存储系统</p><p>2）cli 设计与实现</p><p>3）在线网盘设计与实现</p><h3 id="2-研究目标与效果"><a href="#2-研究目标与效果" class="headerlink" title="2.研究目标与效果"></a>2.研究目标与效果</h3><p>1）</p><p>2）</p><p>3）</p><h3 id="3-拟解决的关键问题"><a href="#3-拟解决的关键问题" class="headerlink" title="3.拟解决的关键问题"></a>3.拟解决的关键问题</h3><p>1）</p><p>2）</p><p>3）</p><h2 id="三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）"><a href="#三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）" class="headerlink" title="三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）"></a>三、研究方案设计及可行性分析（包括：研究方法，技术路线，理论分析、计算、实验方法和步骤及其可行性等）（不少于800字）</h2><p>1、研究方法</p><p>2、技术路线</p><p>MinIO 是一个基于 Apache License v2.0 开源协议的对象存储服务。它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器 / 虚拟机镜像等，而一个对象文件可以是任意大小，从几 kb 到最大 5T 不等。</p><p>分布式 Minio 可以让你将多块硬盘（甚至在不同的机器上）组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式 Minio 避免了单点故障。</p><p><a href="https://docs.min.io/cn/distributed-minio-quickstart-guide.html">MinIO Docs | 分布式 MinIO 快速入门</a></p><h2 id="四、本研究课题可能的创新之处（不少于500字）"><a href="#四、本研究课题可能的创新之处（不少于500字）" class="headerlink" title="四、本研究课题可能的创新之处（不少于500字）"></a>四、本研究课题可能的创新之处（不少于500字）</h2><h2 id="五、研究基础与工作条件（1-与本项目相关的研究工作积累基础-2-包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）"><a href="#五、研究基础与工作条件（1-与本项目相关的研究工作积累基础-2-包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）" class="headerlink" title="五、研究基础与工作条件（1.与本项目相关的研究工作积累基础 2.包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）"></a>五、研究基础与工作条件（1.与本项目相关的研究工作积累基础 2.包括已具备的实验条件，尚缺少的实验条件和拟解决途径）（不少于500字）</h2><h2 id="学位论文工作计划"><a href="#学位论文工作计划" class="headerlink" title="学位论文工作计划"></a>学位论文工作计划</h2><p>[1]黄俊飞,刘杰.区块链技术研究综述[J].北京邮电大学学报,2018,41(02):1-8.</p><p>[1]区块链技术:架构及进展[J]. 邵奇峰,金澈清,张召,钱卫宁,周傲英.  计算机学报. 2018(05)<br>[2]基于区块链的个人隐私保护机制[J]. 章宁,钟珊.  计算机应用. 2017(10)<br>[3]区块链技术与应用前瞻综述[J]. 何蒲,于戈,张岩峰,鲍玉斌.  计算机科学. 2017(04)<br>[4]基于区块链的应用系统开发方法研究[J]. 蔡维德,郁莲,王荣,刘娜,邓恩艳.  软件学报. 2017(06)<br>[5]区块链技术综述[J]. 沈鑫,裴庆祺,刘雪峰.  网络与信息安全学报. 2016(11)<br>[6]区块链技术发展现状与展望[J]. 袁勇,王飞跃.  自动化学报. 2016(04)</p><p>问题解决</p><p>内容丰富</p><p>开题报告</p><p>演讲稿</p><p>怎么保证防篡改</p><p>文件校验机制，为什么不直接用 hash 校验</p><p>文件的 hash 存入数据库，也可以校验</p><p>但是 1.文件有丢失的可能 2.MySQL 以及服务器密码泄露后，修改文件和对应数据库中的 hash</p><p>目标用户，应用场景，需求分析</p><p>依托什么项目</p><p>加入地质勘探项目，将文件的 项目文件，勘察文件，资金相关文件</p><p>文件上传，文件获取，文件校验的 API，方便快速接入其他系统</p><p>哪篇论文做了什么</p><h3 id="基于-ipfs-和区块链的去中心化分布式版本控制系统的设计与实现"><a href="#基于-ipfs-和区块链的去中心化分布式版本控制系统的设计与实现" class="headerlink" title="基于 ipfs 和区块链的去中心化分布式版本控制系统的设计与实现"></a>基于 ipfs 和区块链的去中心化分布式版本控制系统的设计与实现</h3><p><a href="https://bbs.huaweicloud.com/blogs/133411">《IPFS 原理与实践》 —2.3　版本控制（Git）_博客_云社区_开发者中心 - 华为云</a></p><p>做到完全的去中心化</p><p>1.可以有自己的代码仓库</p><p>需要有自己的命令行工具，比如叫 igit (ipfs git)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ipfs 域名设置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置全局的或当前位置项目的 远程ipfs 域名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码上传到 ipfs 中</span></span><br><span class="line">igit init</span><br><span class="line">igit add .</span><br><span class="line">igit commit -m ''</span><br><span class="line">igit push</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传后的文件的结构和 <span class="built_in">hash</span> 放在类似 .git 的目录 一个文件 中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 做到去中心</span></span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出文件的状态（通过对比文件的 <span class="built_in">hash</span>）</span></span><br><span class="line"></span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以设置与我的后台服务器相关联，这样可以在前端进行展示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户需要现在我的网站注册，然后在本地设置全局的账号密码</span></span><br><span class="line">igit </span><br><span class="line"><span class="meta">#</span><span class="bash"> igit push 的时候可以选择是否同步到后台服务器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接把对应仓库 <span class="built_in">clone</span> 下来</span></span><br><span class="line">igit clone 101.200.240.225/git/hash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前端展示代码文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 私有代码仓库（文件加密）</span></span><br></pre></td></tr></table></figure><p>其他实现细节：</p><p>可以学习 git, 历史文件也保存在本地，包括历史版本的文件，确保在没有连接 ipfs 或 ipfs 服务暂时不可用时 可以随时进行版本回退</p><p>igit 类似 git, 保存文件的快照，而不是像CVS或Subversion一样保存</p><p><a href="https://github.com/sahib/brig">sahib/brig: File synchronization on top of ipfs with git like interface &amp; web based UI</a><br><a href="https://brig.readthedocs.io/en/latest/installation.html">Installation — brig v0.4.0-beta documentation</a></p><p><a href="https://brig.readthedocs.io/en/latest/installation.html#step-0-installing-go">Installation — brig v0.4.0-beta documentation</a></p><p>可以将 Git 仓库传到ipfs 或者下载</p><p><a href="https://github.com/cryptix/git-remote-ipfs">cryptix/git-remote-ipfs: git transport helper for ipfs</a></p><h4 id="ipgit"><a href="#ipgit" class="headerlink" title="ipgit"></a>ipgit</h4><p>将代码上传到他的服务器，由服务器负责上传到 ipfs 中</p><p>相当于利用 ipfs 做一个存储，并不完全去中心化</p><p><a href="https://github.com/meyer1994/ipgit">meyer1994/ipgit: Inter Planetary Git</a></p><h4 id="git-ipfs-rehost"><a href="#git-ipfs-rehost" class="headerlink" title="git-ipfs-rehost"></a>git-ipfs-rehost</h4><p>命令行，直接把项目传到 ipfs 中，也没说有什么效果和其他用途</p><p><a href="https://github.com/whyrusleeping/git-ipfs-rehost">whyrusleeping/git-ipfs-rehost: A script to rehost your git repos in ipfs</a></p><h4 id="ipld"><a href="#ipld" class="headerlink" title="ipld"></a>ipld</h4><p>可以通过 cid 获取递归子目录的所有文件</p><p><a href="https://github.com/ipfs-shipyard/ipld-explorer">ipfs-shipyard/ipld-explorer: Explore the Merkle Forest from the comfort of your browser</a><br><a href="https://explore.ipld.io/">浏览 - IPLD</a><br><a href="https://explore.ipld.io/#/explore/z8mWaJHXieAVxxLagBpdaNWFEBKVWmMiE/parents/0/parents/1/tree/package-lock.json/hash">浏览 - IPLD</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> ipfs://ipfs/<span class="variable">$hash</span>/repo.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> repo &amp;&amp; make <span class="variable">$stuff</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -a -m <span class="string">'done!'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin</span></span><br><span class="line">=&gt; clone-able as ipfs://ipfs/$newHash/repo.git</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sahib/brig/issues/45">Why not Gitless · Issue #45 · sahib/brig</a><br><a href="https://github.com/gitless-vcs/gitless">gitless-vcs/gitless: A simple version control system built on top of Git</a></p><p>IPFS 文件共享与管理系统的设计与实现</p><p>安装 go-ipfs ，查看是否能打印 本机所有已经上传的数据</p><p>nix-env -i ipfs</p><p>毕设 PPT，发给修老师，杨老师，寻求意见</p><h3 id="其他有意思的事情"><a href="#其他有意思的事情" class="headerlink" title="其他有意思的事情"></a>其他有意思的事情</h3><h4 id="文件加密上传到-ipfs-中"><a href="#文件加密上传到-ipfs-中" class="headerlink" title="文件加密上传到 ipfs 中"></a>文件加密上传到 ipfs 中</h4><p><a href="https://github.com/shlemph/ipfsecret">shlemph/ipfsecret: Encrypt and decrypt IPFS files with a secret passphrase.</a></p><p> a simple webtool to add URLs to an IPFS node.</p><p>每太看懂具体是做什么的，但是感觉有点用</p><p><a href="https://github.com/jbenet/http2ipfs-web">jbenet/http2ipfs-web</a></p><h3 id="IPFS-通俗易懂的解释"><a href="#IPFS-通俗易懂的解释" class="headerlink" title="IPFS 通俗易懂的解释"></a>IPFS 通俗易懂的解释</h3><p><a href="https://www.youtube.com/watch?v=5Uj6uR3fp-U&utm_source=siderus&ab_channel=SimplyExplained">IPFS: Interplanetary file storage! - YouTube</a></p><h3 id="论文内容意义-做法修改、确定"><a href="#论文内容意义-做法修改、确定" class="headerlink" title="论文内容意义 做法修改、确定"></a>论文内容意义 做法修改、确定</h3><p>在 IPFS 中缺少的是加密。此外，还应该有一种在<a href="https://ipfsdrop.com/special/blockchain/">区块链</a>中注册哈希的标准化方法。特意排除这些主题是因为它会让那些需要完成基础工作的人分心太多。</p><p><a href="https://ipfsdrop.com/view/weiheyitaifangweifilecoincaosuilexin/">为何以太坊为 Filecoin 操碎了心 | IPFS 点滴资讯</a></p><p>storj sia filecoin 的逐步改进</p><p>FileCoin 不是使用不是工作证明（POW）挖矿，而是存储证明（POS）来保护网络</p><p>filecoin “采矿” 是一种更高效的能源（不再是毁灭地球！）以及 b）由为有用的 “采矿” 买单的人补贴</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://juejin.cn/post/6844903510987767815">推荐一个制作「ASCII 流程图」工具 ——Graph Easy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于区块链的隐私文件存储系统的设计与实现&quot;&gt;&lt;a href=&quot;#基于区块链的隐私文件存储系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;基于区块链的隐私文件存储系统的设计与实现&quot;&gt;&lt;/a&gt;基于区块链的隐私文件存储系统的设计与实现&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-11</title>
    <link href="https://zronghui.github.io/tricks-2020-11.html"/>
    <id>https://zronghui.github.io/tricks-2020-11.html</id>
    <published>2020-11-04T06:16:58.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9393f4caf9f308ab38351a7062b8f5613e6f94bd57f370246957ae46d17e944b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试复习</title>
    <link href="https://zronghui.github.io/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0.html"/>
    <id>https://zronghui.github.io/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0.html</id>
    <published>2020-11-02T09:07:56.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p>java/基础/Java-面试宝典笔记.md (包含单例模式)</p><p>/Users/zhangronghui/01Code/hexo/hexo-theme-icarus-removeif/source/_posts/Java基础-CSNotes.md</p><p>/Users/zhangronghui/01Code/hexo/hexo-theme-icarus-removeif/source/_posts/Java容器.md</p><p><a href="https://yfzjay.github.io/2020/03/21/HashMap.html">HashMap</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390612">Java基础知识面试题（2020最新版）_ThinkWon的博客-CSDN博客</a><br><a href="https://thinkwon.blog.csdn.net/article/details/104588551">Java集合容器面试题（2020最新版）_ThinkWon的博客-CSDN博客</a><br><a href="https://thinkwon.blog.csdn.net/article/details/104390689">Java异常面试题（2020最新版）_ThinkWon的博客-CSDN博客</a></p><h3 id="mysql-计算机网络-操作系统-redis-http"><a href="#mysql-计算机网络-操作系统-redis-http" class="headerlink" title="mysql 计算机网络 操作系统 redis http"></a>mysql 计算机网络 操作系统 redis http</h3><p><a href="https://www.zhihu.com/question/31346392">如何理解数据库事务中的一致性的概念？ - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/214295381">《我想进大厂》之mysql夺命连环13问 - 知乎</a></p><p>other/字节跳动面试准备.md</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">Skill-Tree/计算机网络.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md">Skill-Tree/操作系统.md at master · linw7/Skill-Tree</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104778621">MySQL 数据库面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://leetcode-cn.com/circle/discuss/UrcaDQ/">面试问题详解——网址访问过程详解 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/circle/discuss/zIxrWn/">面试问题整理——操作系统 - 力扣（LeetCode）</a></p><p><a href="https://zhuanlan.zhihu.com/p/263028782">《我想进大厂》之 Redis 夺命连环 11 问 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/260351128">《我想进大厂》之MQ夺命连环11问 - 知乎</a></p><p>Redis高频面试题 无答案</p><p><a href="https://leetcode-cn.com/circle/discuss/eX58OT/view/V5enA9/">【大厂面试系列】吊打面试官之Redis高频面试题（最新版） - 力扣（LeetCode）</a></p><h3 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h3><p>JVM-CSNotes.md</p><p><a href="https://zhuanlan.zhihu.com/p/268286740">《我想进大厂》之JVM夺命连环10问 - 知乎</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390752">Java 虚拟机 (JVM) 面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p>cap </p><p><a href="https://yfzjay.github.io/2020/06/17/%E6%98%93%E9%94%99%E7%82%B9%E8%AE%B0%E5%BD%95.html#htmlup">易错点记录</a></p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>Java并发-CSNotes.md</p><p>java/基础/Java-并发.md</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104863992">并发编程面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/267356985">面试官：说说CountDownLatch，CyclicBarrier，Semaphore的原理？ - 知乎</a></p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>java/spring.md</p><p><a href="https://zhuanlan.zhihu.com/p/266607403">《我想进大厂》之Dubbo普普通通9问 - 知乎</a></p><h3 id="LeetCode、牛客"><a href="#LeetCode、牛客" class="headerlink" title="LeetCode、牛客"></a>LeetCode、牛客</h3><p>sb 牛客输入输出模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="comment">#str = input()</span></span><br><span class="line"><span class="comment">#print(str)</span></span><br><span class="line">print(<span class="string">'Hello,World!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Scanner in = new Scanner(System.in);</span></span><br><span class="line">        <span class="comment">//int a = in.nextInt();</span></span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他面试题"><a href="#其他面试题" class="headerlink" title="其他面试题"></a>其他面试题</h3><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.md">Skill-Tree/海量数据处理.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E7%9C%9F%E9%A2%98%E6%91%98%E5%BD%95.md">Skill-Tree/真题摘录.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/Linux%E5%B7%A5%E5%85%B7.md">Skill-Tree/Linux工具.md at master · linw7/Skill-Tree</a></p><h3 id="想问的问题"><a href="#想问的问题" class="headerlink" title="想问的问题"></a>想问的问题</h3><h1 id="11-月-TODO"><a href="#11-月-TODO" class="headerlink" title="11 月 TODO"></a>11 月 TODO</h1><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/MYSQL45讲（全）</p><p>一天 5 节 当前看到 30 节 , 预计 13 号看完</p><p>有一节 间隙锁 没看懂， 还有 30 节 40节 也没看懂</p><p>预计 13 号 看完</p><p>MySQL 8 小时问题</p><p>索引 count(1) count(*) 锁 常用的配置项及其含义</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104778621">MySQL 数据库面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><h3 id="Redis-实现-锁等细节"><a href="#Redis-实现-锁等细节" class="headerlink" title="Redis 实现 锁等细节"></a>Redis 实现 锁等细节</h3><p>《Redis 实战》 1 天 1 章 今天看到第 4 章 预计到 16 号看完</p><p>《Redis 设计与实现》共 24 章 1 天 2 章 预计 22 号看完</p><p><a href="https://zhuanlan.zhihu.com/p/263028782">《我想进大厂》之 Redis 夺命连环 11 问 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/260351128">《我想进大厂》之MQ夺命连环11问 - 知乎</a></p><h3 id="socket-编程"><a href="#socket-编程" class="headerlink" title="socket 编程"></a>socket 编程</h3><p>搭建最简单的服务器</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>之前做的笔记</p><p><a href="https://thinkwon.blog.csdn.net/article/details/104863992">并发编程面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/267356985">面试官：说说CountDownLatch，CyclicBarrier，Semaphore的原理？ - 知乎</a></p><p>看书？</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p><a href="https://zhuanlan.zhihu.com/p/268286740">《我想进大厂》之JVM夺命连环10问 - 知乎</a></p><p><a href="https://thinkwon.blog.csdn.net/article/details/104390752">Java 虚拟机 (JVM) 面试题（2020 最新版）_ThinkWon 的博客 - CSDN 博客</a></p><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p>/Volumes/My Passport/data/ut下载/02     后端/极客时间/jvm_action-master/115-RPC实战与核心原理（完结）</p><p>/Volumes/My Passport/data/ut下载/02     后端/极客时间/14 深入浅出 gRPC - 李林峰</p><h3 id="简历改进，丰满"><a href="#简历改进，丰满" class="headerlink" title="简历改进，丰满"></a>简历改进，丰满</h3><h3 id="投实习，继续面试"><a href="#投实习，继续面试" class="headerlink" title="投实习，继续面试"></a>投实习，继续面试</h3><h3 id="开题"><a href="#开题" class="headerlink" title="开题"></a>开题</h3><h3 id="IO-NIO"><a href="#IO-NIO" class="headerlink" title="IO NIO"></a>IO NIO</h3><h3 id="计算机网络-操作系统"><a href="#计算机网络-操作系统" class="headerlink" title="计算机网络 操作系统"></a>计算机网络 操作系统</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/网络是怎样连接的_户根勤.pdf</p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">Skill-Tree/计算机网络.md at master · linw7/Skill-Tree</a></p><p><a href="https://github.com/linw7/Skill-Tree/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md">Skill-Tree/操作系统.md at master · linw7/Skill-Tree</a></p><p><a href="https://leetcode-cn.com/circle/discuss/UrcaDQ/">面试问题详解——网址访问过程详解 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/circle/discuss/zIxrWn/">面试问题整理——操作系统 - 力扣（LeetCode）</a></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>/Volumes/My Passport/data/ut下载/05     书籍/挑战程序设计竞赛(第2版) 高清完整版.pdf</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h3 id="快速切换主题"><a href="#快速切换主题" class="headerlink" title="快速切换主题"></a>快速切换主题</h3><p>搜索引擎改进</p><p><a href="https://uglyduck.ca/quick-dirty-theme-switcher/">Quick &amp; Dirty Theme Switcher | Ugly Duck</a></p><p><a href="https://zhuanlan.zhihu.com/p/144169144">使用 Chii 调试移动端页面 - 知乎</a></p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p><a href="https://github.com/fuzhengwei/itstack-demo-design?utm_source=gold_browser_extension">fuzhengwei/itstack-demo-design《重学 Java 设计模式「22 个互联网真实案例实战」》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-212</title>
    <link href="https://zronghui.github.io/weekly-contest-212.html"/>
    <id>https://zronghui.github.io/weekly-contest-212.html</id>
    <published>2020-10-25T10:39:45.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>![image-20201025184334845](/Users/zhangronghui/Library/Application Support/typora-user-images/image-20201025184334845.png)</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public char slowestKey(int[] l, String s) &#123;</span><br><span class="line">        int mi = <span class="number">0</span>, m=l[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i&lt;l.length; i++)&#123;</span><br><span class="line">            int duration = l[i]-l[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(duration&gt;m)&#123;</span><br><span class="line">                m = duration;</span><br><span class="line">                mi = i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(duration==m &amp;&amp; s.charAt(i)&gt;s.charAt(mi))&#123;</span><br><span class="line">                mi = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.charAt(mi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Boolean&gt; checkArithmeticSubarrays(int[] nums, int[] l, int[] r) &#123;</span><br><span class="line">        int n=nums.length, m=l.length;</span><br><span class="line">        List&lt;Boolean&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            res.add(check(nums, l[i], r[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean check(int[] nums, int l, int r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(r==l+<span class="number">1</span>) <span class="keyword">return</span> true;</span><br><span class="line">        int[] arr = new int[r-l+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=l; i&lt;=r; i++)&#123;</span><br><span class="line">            arr[i-l] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        int gap = arr[<span class="number">1</span>]-arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">1</span>; i&lt;r-l+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]-arr[i<span class="number">-1</span>]!=gap) <span class="keyword">return</span> false;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>一开始自己瞎jb写，也能过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    boolean changed = true;</span><br><span class="line">    public int minimumEffortPath(int[][] heights) &#123;</span><br><span class="line">        int n=heights.length, m=heights[<span class="number">0</span>].length;</span><br><span class="line">        int[][] dp = new int[n][m];</span><br><span class="line">        <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(int j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(changed)&#123;</span><br><span class="line">            changed = false;</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i<span class="number">-1</span>, j);</span><br><span class="line">                    update(heights, dp, n, m, i, j, i, j<span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // right to left</span><br><span class="line">            <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int j=m<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // down to up</span><br><span class="line">            <span class="keyword">for</span>(int j=m<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(int i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">                    update(heights, dp, n, m, i, j, i+<span class="number">1</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void update(int[][] heights, int[][] dp, int n, int m, int i, int j, int ii, int jj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ii&gt;=<span class="number">0</span> &amp;&amp; ii&lt;n &amp;&amp; jj&gt;=<span class="number">0</span> &amp;&amp; jj&lt;m)&#123;</span><br><span class="line">            int t = Math.max(Math.abs(heights[i][j]-heights[ii][jj]), dp[ii][jj]);</span><br><span class="line">            <span class="keyword">if</span>(t&lt;dp[i][j])&#123;</span><br><span class="line">                changed = true;</span><br><span class="line">                dp[i][j] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/path-with-minimum-effort/solution/zui-xiao-ti-li-xiao-hao-lu-jing-by-zerotrac2/">最小体力消耗路径 - 最小体力消耗路径 - 力扣（LeetCode）</a></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] p;</span><br><span class="line">    DSU(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            p[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[x]!=x)</span><br><span class="line">            p[x] = find(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = find(x), v=find(y);</span><br><span class="line">        <span class="keyword">if</span>(u!=v)</span><br><span class="line">            p[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> find(x)==find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Edge</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    Edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dist)&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="keyword">int</span>[][] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=heights.length, m=heights[<span class="number">0</span>].length;</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur=i*m+j;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>) edges.add(<span class="keyword">new</span> Edge(cur, cur-<span class="number">1</span>, Math.abs(heights[i][j]-heights[i][j-<span class="number">1</span>])));</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>) edges.add(<span class="keyword">new</span> Edge(cur, cur-m, Math.abs(heights[i][j]-heights[i-<span class="number">1</span>][j])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(edges, (a,b) -&gt; a.dist-b.dist);</span><br><span class="line">        DSU dsu = <span class="keyword">new</span> DSU(n*m);</span><br><span class="line">        <span class="keyword">for</span>(Edge edge: edges)&#123;</span><br><span class="line">            dsu.union(edge.x, edge.y);</span><br><span class="line">            <span class="keyword">if</span>(dsu.isSame(<span class="number">0</span>, n*m-<span class="number">1</span>)) <span class="keyword">return</span> edge.dist;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumEffortPath</span><span class="params">(<span class="keyword">int</span>[][] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>, r=<span class="number">999999</span>, mid, ans=<span class="number">0</span>;</span><br><span class="line">        n=heights.length;</span><br><span class="line">        m=heights[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">            visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n*m];</span><br><span class="line">            <span class="comment">// mid &gt;= ans</span></span><br><span class="line">            <span class="keyword">if</span>(check(heights, visited, mid, <span class="number">0</span>, <span class="number">0</span>, heights[<span class="number">0</span>][<span class="number">0</span>]))&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span>[][] heights, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> dist, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;=n || j&gt;=m || visited[i*m+j] || Math.abs(pre-heights[i][j])&gt;dist) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==n-<span class="number">1</span> &amp;&amp; j==m-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        visited[i*m+j] = <span class="keyword">true</span>;</span><br><span class="line">        pre = heights[i][j];</span><br><span class="line">        <span class="keyword">return</span> check(heights, visited, dist, i-<span class="number">1</span>, j, pre)</span><br><span class="line">            || check(heights, visited, dist, i+<span class="number">1</span>, j, pre)</span><br><span class="line">            || check(heights, visited, dist, i, j-<span class="number">1</span>, pre)</span><br><span class="line">            || check(heights, visited, dist, i, j+<span class="number">1</span>, pre);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;![image-20201025184334845](/Users/zhangronghui/Library/Application Support/typora-user-images/image-20201025184334845.png)&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>文件上传解决方案</title>
    <link href="https://zronghui.github.io/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>https://zronghui.github.io/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</id>
    <published>2020-10-24T09:23:20.000Z</published>
    <updated>2020-10-24T11:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传解决方案"><a href="#文件上传解决方案" class="headerlink" title="文件上传解决方案"></a>文件上传解决方案</h1><h3 id="文件上传下载的问题总览"><a href="#文件上传下载的问题总览" class="headerlink" title="文件上传下载的问题总览"></a>文件上传下载的问题总览</h3><p>创建项目时，项目基本信息 夹杂着任务书的上传</p><p>编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书</p><p>单独上传项目任务书</p><p>项目任务书下载</p><p>（文件可以是任务书或其他文件，这里都用任务书作说明）</p><h3 id="创建项目时，项目基本信息-夹杂着任务书的上传"><a href="#创建项目时，项目基本信息-夹杂着任务书的上传" class="headerlink" title="创建项目时，项目基本信息 夹杂着任务书的上传"></a>创建项目时，项目基本信息 夹杂着任务书的上传</h3><p>前端可以实现基本信息的 text 与任务书的 file 一起上传（一个简单的 demo：<a href="https://developer.aliyun.com/article/298018">模拟提交有文件上传的表单(通过http模拟上传文件)-阿里云开发者社区</a>）</p><p>点击选择任务书后，浏览器只是记录了文件存放的位置，可以暂时不发送请求到后端，等所有信息填写完毕后，点击确定，随着其他信息一起发送 post 请求到后端</p><h3 id="编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书"><a href="#编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书" class="headerlink" title="编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书"></a>编辑项目时，没有项目任务书时上传项目任务书，以及有项目任务书时重新上传任务书</h3><p>当对项目信息进行更新时，先从后端获取已有的项目信息（包括任务书的信息）</p><p>如果没有项目任务书，前端的 上传任务书 这部分和 创建项目时保持一致即可；</p><p>但是如果已经有了项目任务书，建议：</p><p>1.首先显示已有项目任务书的文件名，文件大小，上传时间</p><p>2.将网页上的 “上传任务书” 改为 “重新上传任务书”</p><h3 id="单独上传项目任务书"><a href="#单独上传项目任务书" class="headerlink" title="单独上传项目任务书"></a>单独上传项目任务书</h3><p>类似 <code>创建项目时，项目基本信息 夹杂着任务书的上传</code> </p><p>首先选择任务书，在点击上传按钮之后再向服务器发送请求</p><p>类似于 <a href="https://element.eleme.cn/#/zh-CN/component/upload#shou-dong-shang-chuan">组件 | Element</a> 中的 手动上传 部分</p><h3 id="项目任务书下载"><a href="#项目任务书下载" class="headerlink" title="项目任务书下载"></a>项目任务书下载</h3><p>前端项目首先会从后端获取第一页的项目及相关信息，后端可以在每一个项目的信息中写上任务书的信息，包括是否有任务书，以及任务书的下载链接（将文件上传到minio之后，会自动生成相应的下载链接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type&#x3D;&quot;text&quot;&gt;项目任务书下载&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure><p>当点击下载的 button 时，前端根据 任务书的下载链接就能直接下载了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传解决方案&quot;&gt;&lt;a href=&quot;#文件上传解决方案&quot; class=&quot;headerlink&quot; title=&quot;文件上传解决方案&quot;&gt;&lt;/a&gt;文件上传解决方案&lt;/h1&gt;&lt;h3 id=&quot;文件上传下载的问题总览&quot;&gt;&lt;a href=&quot;#文件上传下载的问题总览&quot; class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode/分类/树的遍历</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html</id>
    <published>2020-10-23T11:14:14.000Z</published>
    <updated>2020-10-23T13:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p> 前序 后序 单层循环，只判断 stack 是否为空，且一开始将 root 放入 stack</p><p>中序 双层循环，外层判断 stack cur, 一开始 cur=root</p><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        TreeNode cur;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) stack.push(cur.right);</span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) stack.push(cur.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="N叉树的前序遍历"><a href="#N叉树的前序遍历" class="headerlink" title="N叉树的前序遍历"></a>N叉树的前序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) stack.push(root);</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=cur.children.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                stack.push(cur.children.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = stack.pop();</span><br><span class="line">            res.add(<span class="number">0</span>, cur.val); <span class="comment">//头插法</span></span><br><span class="line">            <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) stack.push(cur.left);</span><br><span class="line">            <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) stack.push(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="N-叉树后序遍历"><a href="#N-叉树后序遍历" class="headerlink" title="N 叉树后序遍历"></a>N 叉树后序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/">590. N叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            Node cur = stack.pop();</span><br><span class="line">            res.add(<span class="number">0</span>, cur.val);</span><br><span class="line">            <span class="keyword">for</span>(Node node: cur.children)&#123;</span><br><span class="line">                stack.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) deque.addLast(root);</span><br><span class="line">        TreeNode cur;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; t = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                cur = deque.pollFirst();</span><br><span class="line">                t.add(cur.val);</span><br><span class="line">                <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>) deque.addLast(cur.left);</span><br><span class="line">                <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>) deque.addLast(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="N叉树的层序遍历"><a href="#N叉树的层序遍历" class="headerlink" title="N叉树的层序遍历"></a>N叉树的层序遍历</h3><p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N叉树的层序遍历 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(Node root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;Node&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>) deque.addLast(root);</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; t = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                cur = deque.pollFirst();</span><br><span class="line">                t.add(cur.val);</span><br><span class="line">                <span class="keyword">for</span>(Node node: cur.children)&#123;</span><br><span class="line">                    deque.addLast(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="垂续遍历"><a href="#垂续遍历" class="headerlink" title="垂续遍历"></a>垂续遍历</h4><p><a href="https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/">987. 二叉树的垂序遍历 - 力扣（LeetCode）</a></p><p>按照坐标排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Location&gt; locations;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(TreeNode root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        locations.add(<span class="keyword">new</span> Location(x, y, root.val));</span><br><span class="line">        help(root.left, x-<span class="number">1</span>, y+<span class="number">1</span>);</span><br><span class="line">        help(root.right, x+<span class="number">1</span>, y+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; verticalTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        locations = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        help(root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        Collections.sort(locations, (a, b)-&gt; <span class="number">100</span>*(a.x-b.x)+(a.y-b.y));</span><br><span class="line">        <span class="keyword">int</span> prex = locations.get(<span class="number">0</span>).x-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(Location loc: locations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(loc.x!=prex)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            res.get(res.size()-<span class="number">1</span>).add(loc.val);</span><br><span class="line">            prex = loc.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y; </span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Location(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)&#123;</span><br><span class="line">        x = a;</span><br><span class="line">        y = b;</span><br><span class="line">        val = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树的遍历&quot;&gt;&lt;a href=&quot;#树的遍历&quot; class=&quot;headerlink&quot; title=&quot;树的遍历&quot;&gt;&lt;/a&gt;树的遍历&lt;/h1&gt;&lt;p&gt; 前序 后序 单层循环，只判断 stack 是否为空，且一开始将 root 放入 stack&lt;/p&gt;
&lt;p&gt;中序 双层循环，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/基于区块链的防篡改存储系统的设计与实现</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%98%B2%E7%AF%A1%E6%94%B9%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%98%B2%E7%AF%A1%E6%94%B9%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</id>
    <published>2020-10-23T05:42:27.000Z</published>
    <updated>2020-11-24T16:39:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于区块链的防篡改存储系统的设计与实现"><a href="#基于区块链的防篡改存储系统的设计与实现" class="headerlink" title="基于区块链的防篡改存储系统的设计与实现"></a>基于区块链的防篡改存储系统的设计与实现</h3><p>为了解决区块链文件存储的难点，设计与实现 minio + 区块链 的存储系统</p><p>用户加密后上传或者直接上传到服务器加密，避免文件存储服务器被破解后的造成巨大的损失。计算文件的 hash 并存储到区块链上，实现防篡改；采用多节点部署 minio 以实现高可用。</p><p>在完成加密存储、上链的基础上，实现个人的网盘系统，每个人可以有自己的指定大小的网盘空间，加密文件，上传文件，浏览、下载文件。</p><p>更多细节：</p><p>允许用户选择 是否加密 是否上链 以提升性能。用户可以选择自己加密文件，保证文件的隐私性；也可以选择让服务器加密；或者选择不加密，加速存储的速度。可以选择是否上链，这样就不用计算 hash 值，提升上传文件的速度。</p><p>可能遇到的难点：</p><p>得考虑大文件的断点续传问题；以及大文件进行 hash 计算以及后期用 hash 进行校验的速度问题（将大文件进行分割，多进程计算小文件的 hash ，最后合并可能是一个解决方案，有待实验验证）</p><p>后期进展顺利的话，可以实现以下几个扩展功能：</p><p>1.文件分享功能，将文件分享给其他用户；</p><p>2.多用户建立群组，群组内共享文件</p><h3 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h3><p><a href="https://www.iplaysoft.com/zpan.html">ZPan - 快速搭建私人的不限速网盘！基于云存储的免费简单开源多用户 Go 网盘程序 - 异次元软件下载</a><br><a href="https://zpan.space/#/zh-cn/">介绍</a></p><h3 id="文件文档在线预览"><a href="#文件文档在线预览" class="headerlink" title="文件文档在线预览"></a>文件文档在线预览</h3><p><a href="https://github.com/kekingcn/kkFileView?utm_source=gold_browser_extension">kekingcn/kkFileView: 使用 spring boot 打造文件文档在线预览项目解决方案，支持 doc、docx、ppt、pptx、xls、xlsx、zip、rar、mp4，mp3 以及众多类文本如 txt、html、xml、java、properties、sql、js、md、json、conf、ini、vue、php、py、bat、gitignore 等文件在线预览</a></p><h3 id="RSA-加密解密"><a href="#RSA-加密解密" class="headerlink" title="RSA 加密解密"></a>RSA 加密解密</h3><p><a href="https://www.zhihu.com/question/25912483">RSA 的公钥和私钥到底哪个才是用来加密和哪个用来解密？ - 知乎</a></p><p>既然是加密，那肯定是不希望别人知道我的消息，所以只有我才能解密，所以可得出公钥负责加密，私钥负责解密；同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出私钥负责签名，公钥负责验证。</p><h3 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a>画图工具</h3><p><a href="https://draveness.me/sketch-and-sketch/">技术文章配图指南 - 面向信仰编程</a></p><h3 id="智能合约设计"><a href="#智能合约设计" class="headerlink" title="智能合约设计"></a>智能合约设计</h3><p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/manual/smart_contract.html">智能合约开发 — FISCO BCOS v2.6.0 文档</a></p><p><a href="http://fisco-bcos.org/zh/">FISCO BCOS 官网 - 区块链底层开源技术平台</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基于区块链的防篡改存储系统的设计与实现&quot;&gt;&lt;a href=&quot;#基于区块链的防篡改存储系统的设计与实现&quot; class=&quot;headerlink&quot; title=&quot;基于区块链的防篡改存储系统的设计与实现&quot;&gt;&lt;/a&gt;基于区块链的防篡改存储系统的设计与实现&lt;/h3&gt;&lt;p&gt;为了
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毕设/毕设选题</title>
    <link href="https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E6%AF%95%E8%AE%BE%E9%80%89%E9%A2%98.html"/>
    <id>https://zronghui.github.io/%E6%AF%95%E8%AE%BE/%E6%AF%95%E8%AE%BE%E9%80%89%E9%A2%98.html</id>
    <published>2020-10-22T07:49:36.000Z</published>
    <updated>2020-11-21T12:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选题一"><a href="#选题一" class="headerlink" title="选题一"></a>选题一</h2><h3 id="区块链平台选择系统的设计与实现"><a href="#区块链平台选择系统的设计与实现" class="headerlink" title="区块链平台选择系统的设计与实现"></a>区块链平台选择系统的设计与实现</h3><p>选题原因：</p><p>目前有多款区块链平台，为了帮助用户或企业在选择适合自己的区块链平台，构建区块链平台性能仿真系统。</p><p>初步设想：</p><p>在多个平台（包括 以太坊、fabric、fisco bcos）上部署区块链，用户可定制区块链节点数目、并发请求数等参数，选定想要比较的一个或多个平台，后台部署选定的区块链平台后，依次模拟向区块链发送并发请求，计算不同区块链平台的吞吐量、平均确认时间、存储消耗 等用户关心的性能指标。最后呈现具体的表格或图表给用户。</p><p>其他细节：</p><p>将已经模拟过的平台的相关性能指标 保存到数据库中，下次直接使用</p><p><a href="https://www.tuoluocaijing.cn/article/detail-9994400.html">今日推荐｜一文对比市面主流四大联盟链技术_陀螺财经</a></p><p><a href="https://developer.aliyun.com/article/584278">区块链技术对比和实战项目选型 - 阿里云开发者社区</a></p><h2 id="选题二"><a href="#选题二" class="headerlink" title="选题二"></a>选题二</h2><h3 id="基于区块链的防篡改存储系统的设计与实现"><a href="#基于区块链的防篡改存储系统的设计与实现" class="headerlink" title="基于区块链的防篡改存储系统的设计与实现"></a>基于区块链的防篡改存储系统的设计与实现</h3><p>为了解决区块链文件存储的难点，设计与实现 minio + 区块链 的存储系统</p><p>用户加密后上传或者直接上传到服务器加密，避免文件存储服务器被破解后的造成巨大的损失。区块链存储加密的文件的 hash ，实现防篡改，采用多节点部署 minio 以实现高可用。</p><p>在完成架构设计的基础上，实现个人的网盘系统，每个人可以有自己的指定大小的网盘空间，加密文件，上传文件，浏览、下载文件。</p><p>更多细节：</p><p>允许用户选择 是否加密 是否上链 以提升性能。用户可以选择自己加密文件，保证文件的隐私性；也可以选择让服务器加密；或者选择不加密，加速存储的速度。可以选择是否上链，这样就不用计算 hash 值，提升上传文件的速度。</p><p>可能遇到的难点：</p><p>得考虑大文件的断点续传问题；以及大文件进行 hash 计算以及后期用 hash 进行校验的速度问题，将大文件进行分割，多进程计算小文件的 hash ，最后合并可能是一个可能的解决方案。</p><p>后期进展顺利的话，可以实现以下几个扩展功能：</p><p>1.文件分享功能，将文件分享给其他用户；</p><p>2.多用户建立群组，群组内共享文件</p><p>IPFS/多节点 minio + 区块链</p><p>多节点 minio 或 ipfs 实现高可用，</p><p>上传文件：用户用秘钥对文件加密，接着上传到服务器中，存储借助 minio，然后将文件的相关信息及其 hash 上链</p><p>浏览文件：web 端浏览已经上传的所有文件，下载后用秘钥解密</p><p><a href="https://www.21ic.com/article/731364.html">区块链技术在加密文件防篡改中的应用介绍 - 21ic 中国电子网</a></p><p>以太坊提供的文件存储机制： swarm bee</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p><a href="https://www.chainnews.com/articles/682942316015.htm">一文读懂基于区块链的分布式存储技术 IPFS - 链闻 ChainNews</a></p><p>交易并发限制 改进</p><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><h4 id="pear-admin-boot"><a href="#pear-admin-boot" class="headerlink" title="pear admin boot"></a>pear admin boot</h4><p><a href="https://www.oschina.net/p/pear-admin-boot">Pear Admin Boot 首页、文档和下载 - Spring 快速开发平台 - OSCHINA - 中文开源技术交流社区</a><br><a href="http://www.pearadmin.com/">Pear Admin 官网</a><br><a href="http://forum.pearadmin.com/">Pear 社区</a><br><a href="http://www.pearadmin.com/doc/">Pear Admin 文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选题一&quot;&gt;&lt;a href=&quot;#选题一&quot; class=&quot;headerlink&quot; title=&quot;选题一&quot;&gt;&lt;/a&gt;选题一&lt;/h2&gt;&lt;h3 id=&quot;区块链平台选择系统的设计与实现&quot;&gt;&lt;a href=&quot;#区块链平台选择系统的设计与实现&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>地勘项目前期开发信息</title>
    <link href="https://zronghui.github.io/%E5%9C%B0%E5%8B%98%E9%A1%B9%E7%9B%AE%E5%89%8D%E6%9C%9F%E5%BC%80%E5%8F%91%E4%BF%A1%E6%81%AF.html"/>
    <id>https://zronghui.github.io/%E5%9C%B0%E5%8B%98%E9%A1%B9%E7%9B%AE%E5%89%8D%E6%9C%9F%E5%BC%80%E5%8F%91%E4%BF%A1%E6%81%AF.html</id>
    <published>2020-10-18T10:04:26.000Z</published>
    <updated>2020-10-18T11:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平台地址"><a href="#平台地址" class="headerlink" title="平台地址"></a>平台地址</h2><p>总部管理平台：10.103.240.153:9547</p><p>Admin: BUPT（大小写都可以）</p><p>Pwd: 123456</p><p>机构管理平台：10.103.240.153:9548</p><p>Admin: buptdeva</p><p>Pwd: 15300000001</p><p>Eureka:10.103.240.153:8000</p><h2 id="修改settings-xml（后端项目）"><a href="#修改settings-xml（后端项目）" class="headerlink" title="修改settings.xml（后端项目）"></a>修改settings.xml（后端项目）</h2><p>实验室项目会用到实验室仓库，需要修改maven配置文件，把下方代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>pcs-maven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>yang1290<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>pcs-maven-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>yang1290<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>填入setting.xml中，大约在130行的位置，视不同情况而定。</p><p><img src="https://i.loli.net/2020/10/18/KAbL1s6joVzuyMa.jpg" alt="img"> </p><p>可以使用自己下载的maven（建议使用，方便和其他仓库环境替换），也可以使用idea自带的maven，文件路径可以通过如下查看：</p><p><img src="https://i.loli.net/2020/10/18/wnativGOy8ULlXu.jpg" alt="img"> </p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h4 id="1-业务分析"><a href="#1-业务分析" class="headerlink" title="1.业务分析"></a>1.业务分析</h4><p>信息化管理平台主要的任务是负责管理一个项目从立项到执行最后到验收过程中所有的流程操作以及存储相应的文档资料，而且不同的角色在同一阶段也会执行不同的操作。因此开发设计应该按照项目的实际操作流程划分业务模块，并根据每个角色每个流程需要的完成功能模块设计。</p><h4 id="2-功能需求"><a href="#2-功能需求" class="headerlink" title="2.功能需求"></a>2.功能需求</h4><p>根据项目需求信息化管理平台将分为项目立项、项目执行、项目验收、项目台账四个主要模块，根据分工不同将设计四种不同的用户类型，分别为基金管理部门、勘察单位、监理单位和验收单位。不同用户在不同模块中执行不同的功能操作。一个完整的地质勘测项目的项目流程为项目立项阶段、项目预算阶段、项目执行阶段、项目验收阶段与项目收尾阶段，以项目流程阶段为基础介绍每个用户角色在各阶段可以执行的操作。</p><p>1) 项目立项</p><p><img src="https://i.loli.net/2020/10/18/GaPc6LnDVlo2ezK.jpg" alt="img"> </p><p>图1-1 项目立项用例图</p><p>项目立项阶段，基金管理部门在项目立项期新建项目，填写项目立项初始信息，提交初审，审批通过的项目就可以下达项目任务书。然后由勘察单位补充初审信息，提交项目立项资料，对基金管理部门下达的项目任务书进行确认，并提交项目设计报告供其审核。</p><p>基金管理部门审核项目设计报告通过后就可以委派监理单位。监理单位受到委派后制定监理计划，并提交供基金管理部门审核，同时可以查看项目设计资料，包括各项资料附件、任务书、合同等附件。基金管理部门审核监理计划，所有审核通过后基金管理部门将勘察合同和监理合同上传到系统中，一个基金项目就可以正式执行了。</p><p>2) 项目预算</p><p><img src="https://i.loli.net/2020/10/18/x1fBLWQOToD9zUr.jpg" alt="img"> </p><p>图1-2 项目预算用例图</p><p>项目预算阶段，由勘察单位制定项目预算，基金管理部门审核预算，并下达预算批复，再由勘察单位确认批复预算。</p><p>勘察单位在项目开展过程中可以根据预算和和工作开展情况提出预算拨付申请，并将拨付清单记录保存。基金管理部门按照预算和工作开展情况对勘查单位提出的预算拨付进行审核。同时对拨付清单与预算资料进行存储记录，以供查看。同时监理单位也可以在项目预算阶段中检查预算执行情况并汇报。</p><p>3) 项目执行</p><p><img src="https://i.loli.net/2020/10/18/cpUj1JGKTbLvDd2.jpg" alt="img"> </p><p>图1-3 项目执行用例图</p><p>项目执行阶段，由监理单位提供监理指标，并随时查看项目执行过程中的各种信息，并按照监管指标给出监理意见。</p><p>勘察单位对物探、化探、山地工程和钻探根据监管指标按照实施要求采集各项数据，每一段时间都采集一批数据，包括图片、影像和各种测量数据，将结果上传。</p><p>4) 项目验收</p><p><img src="https://i.loli.net/2020/10/18/SEB9H3z6yjiwvgM.jpg" alt="img"> </p><p>图1-4 项目验收用例图</p><p>项目验收阶段，先由基金管理单位委托验收单位。勘察单位提交项目验收申请。然后由监理单位审核验收申请，审批通过后交由验收单位验收。</p><p>验收单位下发验收意见。由勘察单位确认验收评审意见以及提交修改报告，最终将成果资料汇交。然后基金管理单位对验收成果资料汇交结果进行备案确认，至此，一个基金项目已经完成了。</p><p>5) 项目收尾</p><p><img src="https://i.loli.net/2020/10/18/XE69TzYbSgxJUIu.jpg" alt="img"> </p><p>图1-5 项目收尾用例图</p><p>在项目收尾阶段，基金管理部门将项目成果提交到上级图书馆汇交，将汇交凭证提交到系统中，最终还会根据成果执行储量评审、成果处置等功能。同时可以查看项目台账，项目台账中包含了一个项目在整个阶段的所有有关的文档、合同、勘察数据以及项目成果等资料信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;平台地址&quot;&gt;&lt;a href=&quot;#平台地址&quot; class=&quot;headerlink&quot; title=&quot;平台地址&quot;&gt;&lt;/a&gt;平台地址&lt;/h2&gt;&lt;p&gt;总部管理平台：10.103.240.153:9547&lt;/p&gt;
&lt;p&gt;Admin: BUPT（大小写都可以）&lt;/p&gt;
&lt;p&gt;P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98.html</id>
    <published>2020-10-11T09:02:50.000Z</published>
    <updated>2020-11-29T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>p2 p3 讲的都很棒</p><p><a href="https://www.bilibili.com/video/av70148899?p=2">[Algorithm][011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili</a></p><h3 id="三种背包问题"><a href="#三种背包问题" class="headerlink" title="三种背包问题"></a>三种背包问题</h3><p>dp 问题的 3 要素</p><p><img src="https://i.loli.net/2020/10/11/y4vZ5P6uMmcqkiO.png" alt="504176@1602352071@2"></p><p>背包：背包空间是有限的，往里面放石头，每个石头有 体积 vi 和 价值 wi，求背包能放的最大的价值</p><p>或者要求把背包放满的最大价值</p><p>01背包：每个元素取 0 个或 1 个</p><p>完全背包：每个元素可以取无数个</p><p>多重背包：每个元素可以取有限个</p><p><img src="https://i.loli.net/2020/10/11/iNDByobUa6vCk5O.png" alt="331176@1602352657@2"></p><h3 id="01-背包问题"><a href="#01-背包问题" class="headerlink" title="01 背包问题"></a>01 背包问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] 表示从 1~i 的元素中进行选择，体积为 j 时的 value</span><br><span class="line">dp[i][j] &#x3D; max(dp[i-1][j], dp[i-1][j-vi]+wi)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/10/11/O86kuQdyrpXSo7W.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP @18-14.40 1602404542726"></p><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>01 背包在将二维空间简化为一维时，为了避免修改上次的值，按照从后往前的遍历顺序</p><p>然而 01 背包想要避免的事情，真是完全背包想要的。完全背包从前往后遍历 1 遍就能利用当前元素取无数个的条件</p><p>详见↓代码</p><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p>up说了，LeetCode 上甚至没有这样的题。</p><p>不过感觉听完思路也不是太难</p><p>主要是用 二进制分解为 01背包 问题</p><p><img src="https://i.loli.net/2020/10/11/e5D9rGzpRMTg2Uh.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP @45-31.39 1602405979949"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><img src="https://i.loli.net/2020/10/11/Ss2CFqnW6i5BrXO.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @11-32.92 1602406642659"></p><p><img src="https://i.loli.net/2020/10/11/Qj2sLdAOGPnlcYy.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @08-36.31 1602406470479"></p><p><img src="https://i.loli.net/2020/10/11/82vpBSm4yHt5eWo.png" alt="Algorit16m[011] 动态规划 Dynamic Programming (DP) 背包 DP 3 讲 [OTTFF]_哔哩哔哩 (゜ - ゜) つロ 干杯～-bilibili - Algorit16m 011 背包DP 模板 @05-43.06 1602406299806"></p><h2 id="LeetCode-实战"><a href="#LeetCode-实战" class="headerlink" title="LeetCode 实战"></a>LeetCode 实战</h2><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/">希望用一种规律搞定背包问题 - 组合总和 Ⅳ - 力扣（LeetCode）</a><br><a href="https://hexuezhi.github.io/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/">01 背包问题 | 何小智の博客 | 时间是人类发展的空间。</a></p><blockquote><h3 id="一、背包问题分类"><a href="#一、背包问题分类" class="headerlink" title="一、背包问题分类"></a>一、背包问题分类</h3><h4 id="1-组合问题"><a href="#1-组合问题" class="headerlink" title="1 组合问题"></a>1 组合问题</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/description/">377. 组合总和 Ⅳ</a></p><p><a href="https://leetcode-cn.com/problems/target-sum/description/">494. 目标和</a></p><p><a href="https://leetcode-cn.com/problems/coin-change-2/description/">518. 零钱兑换 II</a></p><h4 id="2-True、False-问题。"><a href="#2-True、False-问题。" class="headerlink" title="2 True、False 问题。"></a>2 True、False 问题。</h4><p><a href="https://leetcode-cn.com/problems/word-break/">139. 单词拆分</a></p><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></p><h4 id="3-最大最小问题"><a href="#3-最大最小问题" class="headerlink" title="3 最大最小问题"></a>3 最大最小问题</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/description/">474. 一和零</a></p><p><a href="https://leetcode-cn.com/problems/coin-change/description/">322. 零钱兑换</a></p><h3 id="二、背包问题状态转移公式"><a href="#二、背包问题状态转移公式" class="headerlink" title="二、背包问题状态转移公式"></a>二、背包问题状态转移公式</h3><h4 id="1-组合问题公式"><a href="#1-组合问题公式" class="headerlink" title="1 组合问题公式"></a>1 组合问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] +&#x3D; dp\[i-num\]</span><br></pre></td></tr></table></figure><h4 id="2-True、False-问题公式"><a href="#2-True、False-问题公式" class="headerlink" title="2 True、False 问题公式"></a>2 True、False 问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] &#x3D; dp\[i\] or dp\[i-num\]</span><br></pre></td></tr></table></figure><h4 id="3-最大最小问题公式"><a href="#3-最大最小问题公式" class="headerlink" title="3 最大最小问题公式"></a>3 最大最小问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp\[i\] &#x3D; min(dp\[i\], dp\[i-num\]+1)或者dp\[i\] &#x3D; max(dp\[i\], dp\[i-num\]+1)</span><br></pre></td></tr></table></figure><h3 id="三、解题步骤"><a href="#三、解题步骤" class="headerlink" title="三、解题步骤"></a>三、解题步骤</h3><ol><li>分析是否为背包问题。</li><li>是以上三种背包问题中的哪一种。</li><li>是 0-1 背包问题还是完全背包问题。也就是题目给的 nums 数组中的元素是否可以重复使用。</li><li>如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。</li></ol><h3 id="四、背包问题的判定"><a href="#四、背包问题的判定" class="headerlink" title="四、背包问题的判定"></a>四、背包问题的判定</h3><p><strong>背包问题具备的特征</strong>：</p><p>给定一个 target，target 可以是数字也可以是字符串，再给定一个数组 nums，nums 中装的可能是数字，也可能是字符串，问：能否使用 nums 中的元素做各种排列组合得到 target。</p><p><strong>背包问题技巧</strong>：</p><ol><li>如果是 0-1 背包，即数组中的元素不可重复使用，nums 放在外循环，target 在内循环，且内循环倒序；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for num in nums:</span><br><span class="line">    for i in range(target, nums-1, -1):</span><br></pre></td></tr></table></figure><ol start="2"><li>如果是完全背包，即数组中的元素可重复使用，nums 放在外循环，target 在内循环。且内循环正序。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for num in nums:</span><br><span class="line">    for i in range(nums, target+1):</span><br></pre></td></tr></table></figure><ol start="3"><li>如果组合问题需考虑元素之间的顺序，需将 target 放在外循环，将 nums 放在内循环。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1, target+1):</span><br><span class="line">    for num in nums:</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2020/10/26/4kESMmGZJO5PhiC.png" alt="image-20201026072211241" style="zoom: 33%;" /></blockquote><h3 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h3><h4 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h4><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背包问题：1. 背包分类 2. 循环顺序 3. 状态转移</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0 1 背包 背包上限为 sum/2</span></span><br><span class="line">        <span class="comment">// dp[i][j] : 前 i 个数字选择若干个元素, 能否 使得背包和为 j </span></span><br><span class="line">        <span class="comment">// dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]]</span></span><br><span class="line">        <span class="comment">// return dp[-1][-1]</span></span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) target += num;</span><br><span class="line">        <span class="keyword">if</span>(target%<span class="number">2</span>!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        target /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=target; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!dp[j] &amp;&amp; j-num&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[j] = dp[j-num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="474-一和零-力扣（LeetCode）"><a href="#474-一和零-力扣（LeetCode）" class="headerlink" title="474. 一和零 - 力扣（LeetCode）"></a>474. 一和零 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/">474. 一和零 - 力扣（LeetCode）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">背包大小有 2 个限制， 所以 dp[i][j][k] 有三层</span><br><span class="line">表示 前 i 个字符串 背包上限为 j 和 k 时，最大的 value（不撑破背包时 字符串的数量）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 01背包问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(String s: strs)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] cnt = count(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i-cnt[<span class="number">0</span>]&gt;=<span class="number">0</span> &amp;&amp; j-cnt[<span class="number">1</span>]&gt;=<span class="number">0</span>)</span><br><span class="line">                        dp[i][j] = Math.max(dp[i][j], dp[i-cnt[<span class="number">0</span>]][j-cnt[<span class="number">1</span>]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] count(String s)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">            cnt[c-<span class="string">'0'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="494-目标和-力扣（LeetCode）"><a href="#494-目标和-力扣（LeetCode）" class="headerlink" title="494. 目标和 - 力扣（LeetCode）"></a>494. 目标和 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/target-sum">494. 目标和 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题转化：num 与 -num 选择哪一个结果相差 2*num</span></span><br><span class="line"><span class="comment">//    将 num -num 映射为 2*num  0</span></span><br><span class="line"><span class="comment">//    将 nums 中的每个 num 转换成 2*num，操作为取或不取</span></span><br><span class="line"><span class="comment">//    S 的范围是 -sum(nums) ~ sum(nums), 对 num 做映射之后，S 的范围也发生了变化: 0~2*sum(nums)</span></span><br><span class="line"><span class="comment">//    因此，S -&gt; S+sum(nums)，完成 S 的映射</span></span><br><span class="line"><span class="comment">// 现在是标准的 01 背包 问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            nums[i] += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S&gt;sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        S += sum;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[S+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=S; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-num&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i] = dp[i] + dp[i-num];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[S];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="879-盈利计划-力扣（LeetCode）不会"><a href="#879-盈利计划-力扣（LeetCode）不会" class="headerlink" title="879. 盈利计划 - 力扣（LeetCode）不会"></a>879. 盈利计划 - 力扣（LeetCode）不会</h4><p><a href="https://leetcode-cn.com/problems/profitable-schemes/">879. 盈利计划 - 力扣（LeetCode）</a></p><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><h4 id="322-零钱兑换-力扣（LeetCode）"><a href="#322-零钱兑换-力扣（LeetCode）" class="headerlink" title="322. 零钱兑换 - 力扣（LeetCode）"></a>322. 零钱兑换 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换 - 力扣（LeetCode）</a></p><p>换成指定金额的最少硬币数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coin&gt;=<span class="number">0</span> &amp;&amp; dp[i-coin]!=Integer.MAX_VALUE)</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i-coin]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]==Integer.MAX_VALUE? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="518-零钱兑换-II-力扣（LeetCode）"><a href="#518-零钱兑换-II-力扣（LeetCode）" class="headerlink" title="518. 零钱兑换 II - 力扣（LeetCode）"></a>518. 零钱兑换 II - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/coin-change-2/">518. 零钱兑换 II - 力扣（LeetCode）</a></p><p>换成指定金额的方法数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=amount; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-coin&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[i] = dp[i]+dp[i-coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1449-数位成本和为目标值的最大-力扣（LeetCode）"><a href="#1449-数位成本和为目标值的最大-力扣（LeetCode）" class="headerlink" title="1449. 数位成本和为目标值的最大 - 力扣（LeetCode）"></a>1449. 数位成本和为目标值的最大 - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target">1449. 数位成本和为目标值的最大数字 - 力扣（LeetCode）</a></p><p>这里背包需要装满，初始化时只初始化 dp[0] = “”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] cost, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 所占空间：i(1-9) -&gt; cost[i-1] </span></span><br><span class="line">        <span class="comment">// value: 先放较大的数字</span></span><br><span class="line">        String[] dp = <span class="keyword">new</span> String[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">8</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=target; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-cost[i]&gt;=<span class="number">0</span> &amp;&amp; dp[j-cost[i]]!=<span class="keyword">null</span>)</span><br><span class="line">                    dp[j] = max(dp[j], dp[j-cost[i]]+String.valueOf(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target]==<span class="keyword">null</span>? <span class="string">"0"</span> : dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">max</span><span class="params">(String a, String b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(a.length()&gt;b.length() || (a.length()==b.length() &amp;&amp; a.compareTo(b)&gt;<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="377-组合总和-Ⅳ-力扣（LeetCode）"><a href="#377-组合总和-Ⅳ-力扣（LeetCode）" class="headerlink" title="377. 组合总和 Ⅳ - 力扣（LeetCode）"></a>377. 组合总和 Ⅳ - 力扣（LeetCode）</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/">377. 组合总和 Ⅳ - 力扣（LeetCode）</a></p><p>这里对元素的顺序不同算一种方案，因此，对 nums 的遍历在内层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combinationSum4</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=target; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i-num&gt;=<span class="number">0</span>)</span><br><span class="line">                    dp[i] += dp[i-num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
</feed>
