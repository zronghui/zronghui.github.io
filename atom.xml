<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-03-02T12:40:25.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tricks-2020-03</title>
    <link href="https://zronghui.github.io/tricks/tricks-2020-03.html"/>
    <id>https://zronghui.github.io/tricks/tricks-2020-03.html</id>
    <published>2020-03-02T11:59:51.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p><strong>Autojump 插件</strong></p><p><code>j</code>快速切换，用<code>jo</code>快递在finder里打开文件夹</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="https://zronghui.github.io/categories/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>mac tricks</title>
    <link href="https://zronghui.github.io/Mac/mac-tricks.html"/>
    <id>https://zronghui.github.io/Mac/mac-tricks.html</id>
    <published>2020-03-02T08:11:45.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5252976b2d8566b47fc907fbead2846b558545d253edb249cdae721693678cbb">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d08db779553b4221e5c021694fc5a68dee81f20e76340ca9f8390d3e4000ddf135d5e8d033e2d692e97ea9ed12453ab9e2e66611ae1c5d35d3bf42a7ca2ab71a7e14e083276368426862050f80b090666626504a9d4a599a97ed97a829d74bce3256053cb12cdd7d3935fda50a23125e5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>有意思的Mac软件</title>
    <link href="https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Mac/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84Mac%E8%BD%AF%E4%BB%B6.html</id>
    <published>2020-03-02T03:28:36.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="eb68c0475bf49a99a8d7b3fabc37ea3d2f960f4b02596695aa2466c32f2c17c7">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d4c0a1094e142f657914a6f9634a33dc368707d770b4eb504761cf93bc04ff1a5d95cdb2417506f1191c91135138c00c93423e8e0ea938977f13db4448834053a6d0cf6317f4217b801a3a5c206479e676ab6f227fe55dae5f900eba9c9173f640ad58bbd6a1d47324bed0decb18128bf9d3990d356b9afc0283b1e4431f122719cdd4cb357b6b7e314d16cadad485c9452bc82648486c3d86637a85315d6f4aa9ea4fb4a44c48d9430f5c90b2343b002b869534c11d1aa5e559f48a51ef9c46a440e59a9d7fa08f8db895c8d5fdb4575e4be20e223a613e978853e4f09aa28eb96bf02768127e83017a4b58398e87fb4d48da30b6eb142f4e237db6fbb8c521c4f81f9c0dabd447b1f3fcadc48f5601b2c37983c470f5618eeac7cbf40f78346</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>ssh config editor</title>
    <link href="https://zronghui.github.io/Mac/03-ssh-config-editor.html"/>
    <id>https://zronghui.github.io/Mac/03-ssh-config-editor.html</id>
    <published>2020-03-02T03:07:19.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="720ea76b8eef78e17c5526378e4b88a9a68f4d9942e466f2ffaf1483e64b1a1c">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879d9a45bacecaba7ac1e6748ab25d1f452f33e33d3e242e63df8cc1598d5d1ee8b31d9615b6d2d2d992d157638983a7a73838abecb596271bfca4862ad3c8144d5b8d95befa869896f929c944cd822ad007533ecf1266d0cda0f251e1d7685db130f37e66f8ec86357509d458c003df5d58c0927aa8b47e6218918e5bba0d96a773abbf502f9630d9f51f8648fd60e459cdbe087ade3f7a99b6ece6b04a1e685795607568dcea6572ad4b332c79ffd9ca99f06dde82d5ed167baacb379f0d2d2792b9997041048885d1b926cdc90a2e89463fa3ac67721ba604dbfd970146ed6d4d9197940d63822cd76d2cee4a125871b8e422a5b78c91daf06473590d8a81104a30eab917da2e61ce2c88584ced1b937f2915b42b0ba6b9debf0bec60f993a88449fe7dec3456d9ebec7b485e1ac210c6b4c071346f7bc44aef2f67bb5e35bfe8532b3a2d41d576c2dceaa2ae68510ff92661a0ee7ad00898c9e0aebecda0ab0afabe60102632b1db820599e6c7f065a5</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云</title>
    <link href="https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html"/>
    <id>https://zronghui.github.io/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%98%BF%E9%87%8C%E4%BA%91.html</id>
    <published>2020-03-02T00:11:19.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c8410fd80c765af57ab3f52028b228d6d1f152d72e95f428116a2b3ce0253123"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="阿里云" scheme="https://zronghui.github.io/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
  </entry>
  
  <entry>
    <title>aria2</title>
    <link href="https://zronghui.github.io/Mac/02-aria2.html"/>
    <id>https://zronghui.github.io/Mac/02-aria2.html</id>
    <published>2020-03-01T15:37:02.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>主要用 aria2 gui</p><p>dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/</p><p><a href="https://medium.com/@Justin___Smith/aria2%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B-mac%E5%92%8Cwindows-b31d0f64bd4e">Aria2配置教程（Mac和Windows） - Justin Smith - Medium</a></p><h3 id="Aria2-配置"><a href="#Aria2-配置" class="headerlink" title="Aria2 配置"></a>Aria2 配置</h3><p><a href="http://aria2c.com/usage.html">Aria2 &amp; YAAW 使用说明</a><br><a href="https://aria2.github.io/manual/en/html/aria2c.html">aria2c(1) — aria2 1.35.0 documentation</a></p><h3 id="win-mac-aria2下载"><a href="#win-mac-aria2下载" class="headerlink" title="win mac aria2下载"></a>win mac aria2下载</h3><p><a href="https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&parentPath=%2Fsharelink2668081893-566048232074527">https://pan.baidu.com/s/1nu4UHfV#list/path=%2F&amp;parentPath=%2Fsharelink2668081893-566048232074527</a></p><h2 id="网页端管理软件"><a href="#网页端管理软件" class="headerlink" title="网页端管理软件"></a>网页端管理软件</h2><p><a href="https://ziahamza.github.io/webui-aria2/">active: 7 - waiting: 0 - stopped: 0 — Aria2 WebUI</a><br><a href="http://binux.github.io/yaaw/demo/">↓214 KB - Yet Another Aria2 Web Frontend</a></p><p>查看 aria2 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep aria2c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/Applications/Aria2GUI.app/Contents/Resources/aria2c --dir=/Volumes/My\ Passport/data/ut下载/0\ \ 未分类/ytdl\ videos/bilibili/ --conf-path=/Applications/Aria2GUI.app/Contents/Resources/aria2.conf --input-file=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --save-session=/Applications/Aria2GUI.app/Contents/Resources/aria2.session --max-concurrent-downloads=10 --max-connection-per-server=16 --min-split-size=1024K --split=16 --max-overall-download-limit=0K --max-overall-upload-limit=0K --max-download-limit=0K --max-upload-limit=0K --continue=true --auto-file-renaming=true --allow-overwrite=true --disk-cache=0M --max-tries=0 --retry-wait=5 -D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取 SP 图片</title>
    <link href="https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html"/>
    <id>https://zronghui.github.io/other/%E7%88%AC%E5%8F%96-SP-%E5%9B%BE%E7%89%87.html</id>
    <published>2020-03-01T06:09:16.000Z</published>
    <updated>2020-03-01T07:27:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>爬取网站下的所有卡片</p><p><a href="https://southparkphonedestroyer.fandom.com/wiki/Characters">https://southparkphonedestroyer.fandom.com/wiki/Characters</a></p><h2 id="用-siteSucker-爬取网页内容"><a href="#用-siteSucker-爬取网页内容" class="headerlink" title="用 siteSucker 爬取网页内容"></a>用 siteSucker 爬取网页内容</h2><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -o --nocolor --nofilename --nonumbers "https://vignette.wikia.nocookie.net/southparkphonedestroyer/images.*png" | sort | uniq | grep -v '"' | grep -v ' ' | pbcopy</span><br><span class="line">cd 图片保存目录</span><br><span class="line">pbpaste | xargs wget</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>Grep 是 ag 的alias</p><p>wget 是 axel 的 alias</p><p>ag 默认支持正则，注意需要用引号包裹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-o --only-matching      Prints only the matching part of the lines</span><br><span class="line">--[no]numbers</span><br></pre></td></tr></table></figure><p>grep -v 反选</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>命令行还挺好用的，熟悉的话比 Python 脚本高效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>烦人的网页编码问题</title>
    <link href="https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html"/>
    <id>https://zronghui.github.io/python/01-%E7%83%A6%E4%BA%BA%E7%9A%84%E7%BD%91%E9%A1%B5%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98.html</id>
    <published>2020-03-01T02:31:44.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>请求网址乱码：</p><p>一开始以为是压缩问题：</p><h2 id="content-encoding-和-accept-encoding"><a href="#content-encoding-和-accept-encoding" class="headerlink" title="content-encoding 和 accept-encoding"></a>content-encoding 和 accept-encoding</h2><ul><li>response headers中的content-encoding</li><li>request headers 中的accept-encoding</li></ul><p>content-encoding是指网页使用了哪种压缩方式传输数据给你，accept-encoding表示你发送请求时告诉服务器，我可以解压这些格式的数据。</p><p>二者的关系是，对方网页会根据你发送的accept-encoding来决定用什么格式(content-encoding)传给你。</p><p>Python 中，若不添加 accept-encoding, requests 默认添加 r.request.headers[‘Accept-Encoding’] 为 ‘gzip, deflate’</p><p>若 ‘Accept-Encoding’: ‘’，则 response 应该没有压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://zhuanlan.zhihu.com/python-programming'</span>, headers = headers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers[<span class="string">'Content-Encoding'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\Program Files\Anaconda3\lib\site-packages\requests\structures.py"</span>, line <span class="number">54</span>, <span class="keyword">in</span> __getitem__</span><br><span class="line">    <span class="keyword">return</span> self._store[key.lower()][<span class="number">1</span>]</span><br><span class="line">KeyError: <span class="string">'content-encoding'</span></span><br></pre></td></tr></table></figure><h2 id="获取网页正确编码"><a href="#获取网页正确编码" class="headerlink" title="获取网页正确编码"></a>获取网页正确编码</h2><p>requests会从服务器返回的响应头的 Content-Type 去获取字符集编码，如果content-type有charset字段那么requests才能正确识别编码，否则就使用默认的 ISO-8859-1</p><p>所以 requests 的 response.text 有可能是乱码的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ic(doc.headers, chardet.detect(doc.content), doc.apparent_encoding, doc.encoding)</span><br><span class="line"><span class="comment"># ic| doc.headers: &#123;'Content-Type': 'text/html', 'Last-Modified': 'Sun, 01 Mar 2020 00:49:50 GMT', 'Vary': 'Accept-Encoding', 'ETag': 'W/"5e5b06ae-1da6a"', 'Expires': 'Sun, 01 Mar 2020 02:44:33 GMT', 'Cache-Control': 'max-age=300', 'P3P': 'CP=CAO PSA OUR', 'Content-Encoding': 'gzip', 'Content-Length': '25940', 'Accept-Ranges': 'bytes', 'Date': 'Sun, 01 Mar 2020 02:44:01 GMT', 'Age': '267', 'Connection': 'keep-alive', 'X-Hits': '4'&#125;</span></span><br><span class="line"><span class="comment">#     chardet.detect(doc.content): &#123;'confidence': 0.99, 'encoding': 'GB2312', 'language': 'Chinese'&#125;</span></span><br><span class="line"><span class="comment">#     doc.apparent_encoding: 'GB2312'</span></span><br><span class="line"><span class="comment">#     doc.encoding: 'ISO-8859-1'</span></span><br></pre></td></tr></table></figure><h2 id="查看网页正确编码的方法"><a href="#查看网页正确编码的方法" class="headerlink" title="查看网页正确编码的方法"></a>查看网页正确编码的方法</h2><p>response.apparent_encoding 或者 chardet.detect(response.content)</p><p>requests的返回结果对象里有个apparent_encoding函数, apparent_encoding通过调用chardet.detect()来识别文本编码. 但是需要注意的是，这有些消耗计算资源.</p><p>正确的编码还可能存在于 meta 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gbk"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>python requests的utils.py里已经有个完善的从html中获取meta charset的函数. 说白了还是一对的正则表达式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: requests.utils.get_encodings_from_content(r.content)</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="string">'gbk'</span>]</span><br></pre></td></tr></table></figure><p>总之，网页乱码的情况下，可以用 response.apparent_encoding 获取正确编码xx，再用 response.encoding = ‘xx’ , 然后就能调用 response.text</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/35643926">Headers设置之Accept-Encoding - 知乎</a><br><a href="http://xiaorui.cc/archives/2786">代码分析Python requests库中文编码问题 – 峰云就她了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://zronghui.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>mac 屏保</title>
    <link href="https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html"/>
    <id>https://zronghui.github.io/Mac/mac-%E5%B1%8F%E4%BF%9D.html</id>
    <published>2020-02-29T04:45:00.000Z</published>
    <updated>2020-03-01T04:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>好多屏保不支持 10.14+</p><h2 id="Fractal-Clock-Screen-Saver"><a href="#Fractal-Clock-Screen-Saver" class="headerlink" title="*Fractal Clock Screen Saver"></a>*Fractal Clock Screen Saver</h2><p><img src="http://www.dqd.com/~mayoff/programs/FractalClock/shot-1.png" alt="这些年我在 Mac 上用过的 39 款精品屏保程序插图(27)"></p><p><a href="http://www.dqd.com/~mayoff/programs/FractalClock/">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;好多屏保不支持 10.14+&lt;/p&gt;
&lt;h2 id=&quot;Fractal-Clock-Screen-Saver&quot;&gt;&lt;a href=&quot;#Fractal-Clock-Screen-Saver&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>chrome 插件</title>
    <link href="https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html"/>
    <id>https://zronghui.github.io/Chrome/chrome-%E6%8F%92%E4%BB%B6.html</id>
    <published>2020-02-28T11:50:49.000Z</published>
    <updated>2020-02-28T16:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BlockTube-Chrome-网上应用店"><a href="#BlockTube-Chrome-网上应用店" class="headerlink" title="BlockTube - Chrome 网上应用店"></a><a href="https://chrome.google.com/webstore/detail/blocktube/bbeaicapbccfllodepmimpkgecanonai">BlockTube - Chrome 网上应用店</a></h2><p>用很多规则屏蔽某些视频</p><h2 id="recent-history"><a href="#recent-history" class="headerlink" title="recent history"></a>recent history</h2><img src="https://i.loli.net/2020/02/28/MHvKZ7JEBD8xsNR.png" alt="MHvKZ7JEBD8xsNR" style="zoom:33%;" /><h2 id="JSON-Viewer-Awesome-Chrome-网上应用店"><a href="#JSON-Viewer-Awesome-Chrome-网上应用店" class="headerlink" title="JSON Viewer Awesome - Chrome 网上应用店"></a>JSON Viewer Awesome - Chrome 网上应用店</h2><h2 id="Linkclump-鼠标多选打开、复制标签页"><a href="#Linkclump-鼠标多选打开、复制标签页" class="headerlink" title="Linkclump-鼠标多选打开、复制标签页"></a>Linkclump-鼠标多选打开、复制标签页</h2><p>设置按住 z, 同时拖拽鼠标新标签页打开</p><p>c, 复制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BlockTube-Chrome-网上应用店&quot;&gt;&lt;a href=&quot;#BlockTube-Chrome-网上应用店&quot; class=&quot;headerlink&quot; title=&quot;BlockTube - Chrome 网上应用店&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://c
      
    
    </summary>
    
    
      <category term="Chrome" scheme="https://zronghui.github.io/categories/Chrome/"/>
    
    
  </entry>
  
  <entry>
    <title>第3讲：Kubernetes 核心概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC3%E8%AE%B2%EF%BC%9AKubernetes-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:25.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】"><a href="#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】" class="headerlink" title="初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】"></a>初识 K8s，创建一个guestbook留言簿应用 【K8s | from zero to hero】</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre">木环</a> 2019-11-07 876浏览量</p><p><strong>简介：</strong> 本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。这个案例要在 Kubernetes 集群上部署一个名叫 guestbook 的 CURD 应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><h2 id="课后实践：Kubernetes-核心概念"><a href="#课后实践：Kubernetes-核心概念" class="headerlink" title="课后实践：Kubernetes 核心概念"></a>课后实践：Kubernetes 核心概念</h2><h3 id="1-目标概述"><a href="#1-目标概述" class="headerlink" title="1. 目标概述"></a>1. 目标概述</h3><p>本文介绍一个简单的K8s上手应用，希望通过这个简单的实践让大家对K8s的核心概念有更深入的理解。</p><ol><li>巩固 Kubernetes 的基本概念</li><li>学会使用 Kubernetes 部署一个标准的“多层（multi-tier）”应用</li><li>了解 Kubernetes 里如何通过 Pod，Deployment，Service 等 API 原语描述“应用”</li></ol><h3 id="2-实验概览"><a href="#2-实验概览" class="headerlink" title="2. 实验概览"></a>2. 实验概览</h3><p>完成此实验后，可以掌握的能力有：</p><p>本实验主要在 Kubernetes 集群上部署一个名叫 guestbook 留言簿的 CURD (增查改删)应用。guestbook 是 Kubernetes 社区的一个经典的应用示例，它有一个 Web 界面来让用户进行 CURD 操作，然后向一个 Redis 主节点写入数据，从多个 Redics 从节点读去数据。</p><p>实验分以下几个步骤：</p><ol><li>创建 Redis 主节点</li><li>创建 Redis 从节点集群</li><li>创建 guestbook 应用</li><li>将 guestbook 应用通过 Service 暴露出来并进行访问</li><li>水平扩展 guestbook 应用</li></ol><h3 id="3-所需资源："><a href="#3-所需资源：" class="headerlink" title="3. 所需资源："></a>3. 所需资源：</h3><p>一个完备的 Kubernetes 集群。您可以选择<a href="https://www.aliyun.com/product/kubernetes">阿里云容器服务Kubernetes（ACK）</a>进行上手操作。</p><p>可以用 Minikube 快速启动一个单节点集群（国内建议使用<a href="https://github.com/AliyunContainerService/minikube">Minikube 中国版</a>），也可以用云上的 Kubernetes 集群。本次实验演示将使用阿里云容器服务提供的 Kubernetes 集群，版本为 1.12。</p><p>你可以使用使用 <code>kubectl version</code> 查看你的集群版本同实验版本一致。</p><h3 id="4-实验详情"><a href="#4-实验详情" class="headerlink" title="4. 实验详情"></a>4. 实验详情</h3><h3 id="4-1-创建-Redis-主节点"><a href="#4-1-创建-Redis-主节点" class="headerlink" title="4.1 创建 Redis 主节点"></a>4.1 创建 Redis 主节点</h3><p>在这里，我们使用一个叫做 Deployment 的 API 对象，来描述单实例的Redis 主节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: master</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: master</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: master</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;redis</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>我们需要把这个上述内容保存为本地 YAML文件，名叫：<code>redis-master-deployment.yaml</code>。这个文件主要定义了两个东西：第一，Pod 里的容器的镜像是 <code>redis</code>；第二，这个 Deployment 的实例数（replicas）是 1，即指启动一个 Pod。</p><p>然后，我们使用 Kubernetes 的客户端，执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f  redis-master-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>这一步完成后，Kubernetes 就会按照这个 YAML 文件里的描述为你创建对应的 Pod。这种使用方式就是声明式 API 的典型特征。</p><p>接下来，我们可以查看到这个 Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running   0          49s</span><br></pre></td></tr></table></figure><p>可以看到，Pod 已经进入了 Running 状态，表示一切正常。这时，我们就可以查看这个 Pod 里的 Redis 的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl logs -f redis-master-68979f4ddd-pg9cv</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Redis version&#x3D;5.0.4, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started</span><br><span class="line">1:C 26 Apr 2019 18:49:29.303 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server &#x2F;path&#x2F;to&#x2F;redis.conf</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Running mode&#x3D;standalone, port&#x3D;6379.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # WARNING: The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of 128.</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 # Server initialized</span><br><span class="line">1:M 26 Apr 2019 18:49:29.304 * Ready to accept connections</span><br></pre></td></tr></table></figure><h4 id="4-2-为-Redis-主节点创建-Service"><a href="#4-2-为-Redis-主节点创建-Service" class="headerlink" title="4.2 为 Redis 主节点创建 Service"></a>4.2 为 Redis 主节点创建 Service</h4><p>Kubernetes 里要访问 Pod 最好通过 Service 的方式，这样客户端就不需要记录 Pod 的 IP 地址了。我们的 guestbook 网站需要访问 Redis 主节点的 Pod，所以也要通过 Service 来做。这个 Service API 对象的定义如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-master</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">    targetPort: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: master</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>这个 Service 名叫 <code>redis-master</code>，它声明用自己的 6379 端口代理 Pod 的 6379端口。</p><p>我们还是把上述内容保存成文件然后让 Kubernetes 为我们创建它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl apply -f redis-master-service.yaml</span><br><span class="line">service&#x2F;redis-master created</span><br></pre></td></tr></table></figure><p>然后我们可以查看一下这个 Service：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   9s</span><br></pre></td></tr></table></figure><p>这时候，你就可以通过 <code>10.107.220.208:6379</code> 访问到这个 Redis 主节点。</p><h4 id="4-3-创建-Redis-从节点集群"><a href="#4-3-创建-Redis-从节点集群" class="headerlink" title="4.3 创建 Redis 从节点集群"></a>4.3 创建 Redis 从节点集群</h4><p>我们这个示例中，有多个 Redis 从节点来共同响应读请求。同样的，我们还是通过 Deployment 来描述”一个服务由多个相同的 Pod 实例副本组成”这种语义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: redis</span><br><span class="line">      role: slave</span><br><span class="line">      tier: backend</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: redis</span><br><span class="line">        role: slave</span><br><span class="line">        tier: backend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: slave</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-redisslave:v1</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6379</span><br></pre></td></tr></table></figure><p>在这个 Deployment 中，我们指定了 <code>replicas: 2</code>，即这个 Deployment 会启动两个相同 Pod（Redis 从节点）。</p><p>此外，<code>gb-redisslave:v1</code> 这个镜像，会自动读取 <code>REDIS_MASTER_SERVICE_HOST</code> 这个环境变量的值，也就是 Redis 主节点的 Service 地址，然后用它来组建集群。这个环境变量是Kubernetes 自动根据 redis-master 这个 Service 名字，自动注入到集群的每一个 Pod 当中的。</p><p>然后，我们创建 Redis 从节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-deployment.yaml</span><br><span class="line">deployment.apps&#x2F;redis-slave created</span><br></pre></td></tr></table></figure><p>这时候，我们就可以查看这些从节点的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                            READY   STATUS              RESTARTS   AGE</span><br><span class="line">redis-master-68979f4ddd-pg9cv   1&#x2F;1     Running             0          17m</span><br><span class="line">redis-slave-78b464f5cd-2kn7w    0&#x2F;1     ContainerCreating   0          37s</span><br><span class="line">redis-slave-78b464f5cd-582bk    0&#x2F;1     ContainerCreating   0          37s</span><br></pre></td></tr></table></figure><h4 id="4-4-为-Redis-从节点创建-Service"><a href="#4-4-为-Redis-从节点创建-Service" class="headerlink" title="4.4 为 Redis 从节点创建 Service"></a>4.4 为 Redis 从节点创建 Service</h4><p>类似的，为了让 guestbook 应用访问上述 Redis 从节点，我们还需要为它们创建一个 Service。在Kubernetes 里，Service 可以通过 selector 选择代理多个 Pod，并且负责负载均衡。这个Service 内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: redis-slave</span><br><span class="line">  labels:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 6379</span><br><span class="line">  selector:</span><br><span class="line">    app: redis</span><br><span class="line">    role: slave</span><br><span class="line">    tier: backend</span><br></pre></td></tr></table></figure><p>创建和查看 Service（ 注意：这里 6379 端口使用了简化写法，就不需要写明 targetPort了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f redis-slave-svc.yaml</span><br><span class="line">service&#x2F;redis-slave created</span><br><span class="line"></span><br><span class="line">$ kubectl get services</span><br><span class="line">NAME           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes     ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP    181d</span><br><span class="line">redis-master   ClusterIP   10.107.220.208   &lt;none&gt;        6379&#x2F;TCP   16m</span><br><span class="line">redis-slave    ClusterIP   10.101.244.239   &lt;none&gt;        6379&#x2F;TCP   57s</span><br></pre></td></tr></table></figure><p>这样，你就可以通过 <code>10.10.101.244:6379</code> 访问到任何一个 Redis 从节点了。</p><h4 id="4-5-创建-guestbook-应用"><a href="#4-5-创建-guestbook-应用" class="headerlink" title="4.5 创建 guestbook 应用"></a>4.5 创建 guestbook 应用</h4><p>guestbook 应用本身，依然通过一个 Deployment 来描述，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: guestbook</span><br><span class="line">      tier: frontend</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: guestbook</span><br><span class="line">        tier: frontend</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: php-redis</span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com&#x2F;kubeapps&#x2F;gb-frontend:v4</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">        - name: GET_HOSTS_FROM</span><br><span class="line">          value: env</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>这个 YAML 定义了一个 3 副本的 Deployment，即 guestbook 应用会启动 3 个 Pod。</p><p>我们还是通过同样的步骤创建这个 Deployment：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend.yaml</span><br><span class="line">deployment.apps&#x2F;frontend created</span><br></pre></td></tr></table></figure><p>查看 Pod 的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          3m4s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          3m4s</span><br></pre></td></tr></table></figure><h4 id="4-6-为-guestbook-应用创建-Service"><a href="#4-6-为-guestbook-应用创建-Service" class="headerlink" title="4.6 为 guestbook 应用创建 Service"></a>4.6 为 guestbook 应用创建 Service</h4><p>为了能够让用户访问到 guestbook，我们也需要为 guestbook 来创建一个 Service，从而把这个应用以服务的形式暴露出来给用户使用。</p><p>而为了能够让 Kubernetes 集群以外的用户，这个 Service 就必须是一个外部可访问的 Service。这个在 Kubernetes 里有几种做法。在云上最常见的，是 LoadBalancer 模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: frontend</span><br><span class="line">  labels:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br><span class="line">spec:</span><br><span class="line">  # 自建集群只能使用 NodePort 模式</span><br><span class="line">  # type: NodePort </span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: guestbook</span><br><span class="line">    tier: frontend</span><br></pre></td></tr></table></figure><p>由于我的集群由阿里云容器服务提供，所以像上面这样直接用 LoadBalancer 模式即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f frontend-service.yaml</span><br><span class="line">$ kubectl get service frontend</span><br><span class="line">NAME       TYPE        CLUSTER-IP      EXTERNAL-IP        PORT(S)        AGE</span><br><span class="line">frontend   ClusterIP   172.19.10.209   101.37.192.20     80:32372&#x2F;TCP   1m</span><br></pre></td></tr></table></figure><p>现在，你只要用浏览器打开 <code>EXTERNAL-IP</code> 对应的地址： <a href="http://101.37.192.20:31323/">http://101.37.192.20:31323</a> ，就可以访问到这个部署好的 guestbook 应用了。</p><p>而如果你是自建集群，那就只能用 NodePort 模式来实验（上面 YAML 的注释已经给出了使用方法）。需要注意的是 NodePort 由于安全性问题，不建议在生产环境中使用。</p><h4 id="4-7-水平扩展-guestbook-应用"><a href="#4-7-水平扩展-guestbook-应用" class="headerlink" title="4.7 水平扩展 guestbook 应用"></a>4.7 水平扩展 guestbook 应用</h4><p>要通过 Kubernetes 来水平扩展你的应用以响应更多的请求非常简单，只需要如下一条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale deployment frontend --replicas&#x3D;5</span><br><span class="line">deployment.extensions&#x2F;frontend scaled</span><br></pre></td></tr></table></figure><p>你就会立刻看到你的 guestbook 应用的实例从 3 个变成了 5 个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -l app&#x3D;guestbook -l tier&#x3D;frontend</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">frontend-78d6c59f4-2x24x   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-7mz87   1&#x2F;1     Running   0          14m</span><br><span class="line">frontend-78d6c59f4-chxwd   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-jrvfx   1&#x2F;1     Running   0          19s</span><br><span class="line">frontend-78d6c59f4-sw7f2   1&#x2F;1     Running   0          14m</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot;&gt;&lt;a href=&quot;#初识-K8s，创建一个guestbook留言簿应用-【K8s-from-zero-to-hero】&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>第2讲：容器基本概念 实践</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC2%E8%AE%B2%EF%BC%9A%E5%AE%B9%E5%99%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-%E5%AE%9E%E8%B7%B5.html</id>
    <published>2020-02-28T09:23:12.000Z</published>
    <updated>2020-02-28T09:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero"><a href="#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero" class="headerlink" title="你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]"></a>你的第一个容器镜像，构建、分发、运行 [ K8s | from zero to hero ]</h1><p><a href="https://developer.aliyun.com/profile/44amimozjxtre?spm=a2c6h.12873639.0.0.16051fcfeERjS6">木环</a> 2019-11-07 106浏览量</p><p><strong>简介：</strong> 再也不要当容器小白了！Build ship and run！</p><h3 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h3><p>因为虚拟机（vm）存在一定不足，容器技术的诞生后才如此受欢迎。以传统的Java应用架构而言，将一个应用程序生成一个war包，放到一个tomcat容器当中并在一台虚拟机（VM）中启动运行，然后配置nginx的负载均衡策略，将来自用户的请求转发到某个tomcat应用上，这种基于主机或虚拟机部署的应用会存在以下问题：可移植性差、可维护性差、可扩展性差、无法资源隔离。扩展阅读</p><p>而容器是什么呢？它就是一个视图隔离、资源可限制、独立文件系统的进程集合。所谓“视图隔离”就是能够看到部分进程以及具有独立的主机名等；控制资源使用率则是可以对于内存大小以及 CPU 使用个数等进行限制。容器就是一个进程集合，它将系统的其他资源隔离开来，具有自己独立的资源视图。</p><p>容器具有一个独立的文件系统，因为使用的是系统的资源，所以在独立的文件系统内不需要具备内核相关的代码或者工具，我们只需要提供容器所需的二进制文件、配置文件以及依赖即可。只要容器运行时所需的文件集合都能够具备，那么这个容器就能够运行起来。<a href="https://developer.aliyun.com/article/718433">扩展阅读《详解 K8s 容器基本概念》</a></p><h3 id="什么是容器镜像？"><a href="#什么是容器镜像？" class="headerlink" title="什么是容器镜像？"></a>什么是容器镜像？</h3><p>从一个比较具体的角度去看，镜像就是一个多层存储的文件，相较于普通的ISO系统镜像来说，分层存储会带来两个优点：</p><ul><li>一个是<strong>分层存储的镜像比较容易扩展</strong>，比如我们可以基于一个Ubuntu镜像去构建我们的Nginx镜像，这样我们只需要在Ubuntu镜像的基础上面做一些Nginx的安装配置工作。一个Nginx镜像工作就算制作完成了，我们不需要从头开始去制作各种镜像。</li><li>另一点是可以<strong>优化镜像存储空间</strong>，假如我们有两个镜像，Tag1.0镜像和 Tag2.0镜像，我们如果以传统方式去传这两个镜像，每个镜像大概130多兆，但如果我们以分层的方式去存储两个镜像，我们通过下面两个紫色的才能共享，可以节约大量的空间，两个镜像加起来只需要140多兆的空间就可以存下来。这样一是节省了存储空间，二是可以减少网络上的开销，比如我们已经把下面镜像下载了，我们要去下载上面镜像的时候，我们只需要去下10M的部分。</li></ul><p>如果从抽象的角度去看，<strong>Docker镜像其实是Docker提供的一种标准化的交付手段</strong>，<strong>传统应用在交付的时候其实是交付一个可执行文j件</strong>。问题在于传统方式的这个可执行文件不包括它的运行环境，我们可能会因为32位系统或64位系统，或者开发测试使用1.0软件，结果交付时候发现用户的环境是2.0等各种各样的问题，导致我们要去花时间去排查；但是，如果我们以Docker镜像的标准化形式去交付，我们就会避免掉这些问题。</p><p>扩展阅读《<a href="https://yq.aliyun.com/articles/219139">Docker 镜像优化与最佳实践</a>》</p><p>*<em>好了，闲话少叙。下面开始实验时间。<br>*</em></p><h3 id="1-实验概述"><a href="#1-实验概述" class="headerlink" title="1. 实验概述"></a>1. 实验概述</h3><p>本实验会使用 Dockerfile 将下面 golang 代码构建成镜像，并通过阿里云镜像服务将镜像分发到阿里云虚拟机，运行该镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-实验目标"><a href="#2-实验目标" class="headerlink" title="2. 实验目标"></a>2. 实验目标</h3><p>完成此实验后，可以掌握的能力有：</p><ol><li>Dockerfile 编写和使用</li><li>使用阿里云镜像服务来分发镜像。</li></ol><blockquote><p>NOTE: 学前建议: 了解 docker 的基本操作命令 以及 如何使用 ECS 实例。</p></blockquote><h3 id="3-实验详情"><a href="#3-实验详情" class="headerlink" title="3. 实验详情"></a>3. 实验详情</h3><h4 id="3-1-准备应用代码和-Dockerfile"><a href="#3-1-准备应用代码和-Dockerfile" class="headerlink" title="3.1 准备应用代码和 Dockerfile"></a>3.1 准备应用代码和 Dockerfile</h4><p>首先在本地生成一个文件夹 <code>demo</code>，并将 golang 代码拷贝到 <code>demo</code> 文件夹下的 <code>main.go</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">main.go</span><br><span class="line"></span><br><span class="line">$ cat main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">        http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">                fmt.Fprintf(w, &quot;Hello! World\n&quot;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        fmt.Println(&quot;start to serve...&quot;)</span><br><span class="line">        http.ListenAndServe(&quot;:80&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前 <code>demo</code> 目录下编写 Dockerfile ，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM golang:1.12-alpine</span><br><span class="line"></span><br><span class="line"># change current working dir</span><br><span class="line">WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line"></span><br><span class="line"># copy main.go into &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># go build and install the app</span><br><span class="line">RUN go install -v .&#x2F;...</span><br><span class="line"></span><br><span class="line"># run the app by default</span><br><span class="line">CMD [&quot;app&quot;]</span><br></pre></td></tr></table></figure><h4 id="3-2-构建镜像"><a href="#3-2-构建镜像" class="headerlink" title="3.2 构建镜像"></a>3.2 构建镜像</h4><p>通常情况下，使用以下命令即可构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">&#x2F;tmp&#x2F;demo</span><br><span class="line"></span><br><span class="line"># demo:v1 表示镜像名字demo和标签v1</span><br><span class="line">$ docker build . -t demo:v1</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1&#x2F;5 : FROM golang:1.12-alpine</span><br><span class="line"> ---&gt; 8ff3fd35cf82</span><br><span class="line">Step 2&#x2F;5 : WORKDIR &#x2F;go&#x2F;src&#x2F;app</span><br><span class="line">Removing intermediate container ffd88a948413</span><br><span class="line"> ---&gt; 1056ea513b89</span><br><span class="line">Step 3&#x2F;5 : COPY . .</span><br><span class="line"> ---&gt; 9fc4655c973a</span><br><span class="line">Step 4&#x2F;5 : RUN go install -v .&#x2F;...</span><br><span class="line"> ---&gt; Running in 928fc776a6e1</span><br><span class="line">app</span><br><span class="line">Removing intermediate container 928fc776a6e1</span><br><span class="line"> ---&gt; a93f17a3a726</span><br><span class="line">Step 5&#x2F;5 : CMD [&quot;app&quot;]</span><br><span class="line"> ---&gt; Running in 9e3463aa81f6</span><br><span class="line">Removing intermediate container 9e3463aa81f6</span><br><span class="line"> ---&gt; 8697c7279c74</span><br><span class="line">Successfully built 8697c7279c74</span><br><span class="line">Successfully tagged demo:v1</span><br></pre></td></tr></table></figure><blockquote><p>NOTE:</p><p>在国内访问 Docker Hub 速度比较慢，可以在Docker引擎中设置镜像加速器加速对Docker Hub的访问。</p><p>更新 <code>/etc/docker/daemon.json</code>，添加如下参数，并重启Docker引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建完毕之后，可以在本地运行验证下是否符合预期</span><br></pre></td></tr></table></figure><h1 id="映射容器内-80-端到宿主机上的-8000-端口"><a href="#映射容器内-80-端到宿主机上的-8000-端口" class="headerlink" title="映射容器内 80 端到宿主机上的 8000 端口"></a>映射容器内 80 端到宿主机上的 8000 端口</h1><p>$ docker run -d -p 8000:80 demo:v1</p><h1 id="curl-一下查看结果"><a href="#curl-一下查看结果" class="headerlink" title="curl 一下查看结果"></a>curl 一下查看结果</h1><p>$ curl localhost:8000<br>Hello! World</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">如果看到 &#96;Hello! World&#96; 字样，我们就可以进入下一个环节了。</span><br><span class="line"></span><br><span class="line">#### 3.3 推送镜像至阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">在推送之前，需要注册阿里云账号和开通阿里云容器镜像服务</span><br><span class="line"></span><br><span class="line">&gt; 阿里云注册链接： [注册阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;register&#x2F;register.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云登录链接： [登录阿里云](https:&#x2F;&#x2F;account.aliyun.com&#x2F;login&#x2F;login.htm)</span><br><span class="line">&gt; </span><br><span class="line">&gt; 阿里云容器镜像服务页面： [访问阿里云容器镜像服务](https:&#x2F;&#x2F;cr.console.aliyun.com) </span><br><span class="line">&gt; </span><br><span class="line">&gt; 容器镜像服务（Container Registry）提供安全的应用镜像托管能力，精确的镜像安全扫描功能，稳定的国内外镜像构建服务，便捷的镜像授权功能，方便用户进行镜像全生命周期管理。</span><br><span class="line"></span><br><span class="line">当我们拥有阿里云容器镜像服务账号之后呢，可以使用 docker 客户端来登陆服务。</span><br></pre></td></tr></table></figure><p>$ docker login -username=**** registry.cn-hangzhou.aliyuncs.com<br>Password:<br>Login Succeeded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在推送到镜像之前，需要将本地镜像修改为对应的镜像仓库地址：</span><br></pre></td></tr></table></figure><h1 id="mydemo-可以替换成自己的命名空间"><a href="#mydemo-可以替换成自己的命名空间" class="headerlink" title="mydemo 可以替换成自己的命名空间"></a>mydemo 可以替换成自己的命名空间</h1><p>$ docker tag demo:v1 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><p>$ docker push registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#### 3.4 登陆阿里云 ECS 机器来下载 demo:v1 镜像</span><br><span class="line"></span><br><span class="line">登陆 ECS 实例，通过 docker pull 来下载镜像</span><br></pre></td></tr></table></figure><h1 id="mydemo-请替换成-3-3-步骤中指定的命令空间"><a href="#mydemo-请替换成-3-3-步骤中指定的命令空间" class="headerlink" title="mydemo 请替换成 3.3 步骤中指定的命令空间"></a>mydemo 请替换成 3.3 步骤中指定的命令空间</h1><p>$ docker pull registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载完毕之后，我们就可以直接运行该镜像</span><br></pre></td></tr></table></figure><p>$ docker run -d -p 8000:80 registry.cn-hangzhou.aliyuncs.com/mydemo/demo:v1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">并查看 ECS 机器的 &#96;8000&#96; 端口</span><br></pre></td></tr></table></figure><p>$ curl localhost:8000</p><p>另外，可以移步 <a href="https://edu.aliyun.com/lab/courses/a5519593714148358845ab3ce19ef996/detail">《课后实践：应用容器构建与部署》</a><br>直接在阿里云大学沙箱实验环境中尝试哦！！</p><p><strong>本文由阿里云容器云平台团队撰写，如有问题或希望转载还请与我们沟通，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot;&gt;&lt;a href=&quot;#你的第一个容器镜像，构建、分发、运行-K8s-from-zero-to-hero&quot; class=&quot;headerlink&quot; title=&quot;你的第一个容器镜像，构建
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>CNCF × Alibaba云原生技术公开课</title>
    <link href="https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC%201%202%E8%AE%B2.html"/>
    <id>https://zronghui.github.io/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/%E7%AC%AC%201%202%E8%AE%B2.html</id>
    <published>2020-02-28T07:58:36.000Z</published>
    <updated>2020-02-28T09:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://edu.aliyun.com/roadmap/cloudnative?spm=5176.8764728.631162.112.6c6b20beHfpsFO">CNCF x Alibaba 云原生技术公开课 - 云原生教程 - 阿里云大学</a></p><h2 id="第1讲-“云原生”课"><a href="#第1讲-“云原生”课" class="headerlink" title="第1讲: “云原生”课"></a>第1讲: “云原生”课</h2><h3 id="知识点自测（一）："><a href="#知识点自测（一）：" class="headerlink" title="知识点自测（一）："></a>知识点自测（一）：</h3><p>1.Kubernetes 并不支持为应用固定 IP，于是我自己通过编写网络插件把应用 IP 管理在了 etcd 里，然后上线。请问这破坏了云原生的理念了吗？*</p><p><strong>A. 否</strong></p><p>5.我编写的容器化应用，会将日志文件写在某路径写死的目录里。请问这破坏了云原生理念了吗？*</p><p><strong>B. 是</strong></p><p><em>6.以下哪些能力不是标准 Kubernetes 项目提供的？</em></p><p>A. 容器编排与调度</p><p><strong>B. PaaS</strong></p><p>C. 资源管理</p><p>D. 服务注册与发现</p><p>PaaS是（Platform as a Service）的缩写，是指<a href="https://baike.baidu.com/item/平台即服务/4329761">平台即服务</a>。 把<a href="https://baike.baidu.com/item/服务器/100571">服务器</a>平台作为一种服务提供的商业模式，通过网络进行程序提供的服务称之为SaaS(Software as a Service)，</p><p>单选 <em>7.容器启动后，我会时常 SSH 进入到容器里然后写很多文件。请问这破坏了云原生理念了吗？</em></p><p>A. 否</p><p><strong>B. 是</strong></p><p>单选 <em>9.以下哪些项目跟 Kubernetes 项目功能重合度最高？</em></p><p>A. Mesos</p><p>B. Docker Swarm</p><p><strong>C. Docker Swarm 模式（SwarmKit）</strong></p><p>D. Cloud Foundry</p><p>正确答案： C</p><p><em>多选</em> <em>10.以下哪些标准，可以用来考察一个应用的架构是不是云原生的？</em></p><p><strong>A. 应用实例能否快速水平扩展</strong></p><p><strong>B. 应用是否使用镜像机制打包来保证环境一致性</strong></p><p><strong>C. 应用数据是否都写在容器数据卷中</strong></p><p>D. 应用是否有状态</p><h2 id="第2讲：容器基本概念"><a href="#第2讲：容器基本概念" class="headerlink" title="第2讲：容器基本概念"></a>第2讲：容器基本概念</h2><img src="https://i.loli.net/2020/02/28/XSxHu6CgFrGpzKm.png" alt="XSxHu6CgFrGpzKm" style="zoom:50%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]    </span><br><span class="line">02.  </span><br><span class="line">03.  -d, --detach=false         指定容器运行于前台还是后台，默认为false     </span><br><span class="line">04.  -i, --interactive=false   打开STDIN，用于控制台交互    </span><br><span class="line">05.  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false    </span><br><span class="line">06.  -u, --user=""              指定容器的用户    </span><br><span class="line">07.  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  </span><br><span class="line">08.  -w, --workdir=""           指定容器的工作目录   </span><br><span class="line">09.  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用    </span><br><span class="line">10.  -e, --env=[]               指定环境变量，容器中可以使用该环境变量    </span><br><span class="line">11.  -m, --memory=""            指定容器的内存上限    </span><br><span class="line">12.  -P, --publish-all=false    指定容器暴露的端口    </span><br><span class="line">13.  -p, --publish=[]           指定容器暴露的端口   </span><br><span class="line">14.  -h, --hostname=""          指定容器的主机名    </span><br><span class="line">15.  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录    </span><br><span class="line">16.  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  </span><br><span class="line">17.  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities    </span><br><span class="line">18.  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities    </span><br><span class="line">19.  --cidfile=""               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    </span><br><span class="line">20.  --cpuset=""                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    </span><br><span class="line">21.  --device=[]                添加主机设备给容器，相当于设备直通    </span><br><span class="line">22.  --dns=[]                   指定容器的dns服务器    </span><br><span class="line">23.  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    </span><br><span class="line">24.  --entrypoint=""            覆盖image的入口点    </span><br><span class="line">25.  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量    </span><br><span class="line">26.  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口    </span><br><span class="line">27.  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息    </span><br><span class="line">28.  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    </span><br><span class="line">29.  --name=""                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    </span><br><span class="line">30.  --net="bridge"             容器网络设置:  </span><br><span class="line">31.                                bridge 使用docker daemon指定的网桥       </span><br><span class="line">32.                                host    //容器使用主机的网络    </span><br><span class="line">33.                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源    </span><br><span class="line">34.                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置   </span><br><span class="line">35.  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities    </span><br><span class="line">36.  --restart="no"             指定容器停止后的重启策略:  </span><br><span class="line">37.                                no：容器退出时不重启    </span><br><span class="line">38.                                on-failure：容器故障退出（返回值非零）时重启   </span><br><span class="line">39.                                always：容器退出时总是重启    </span><br><span class="line">40.  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)    </span><br><span class="line">41.  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure><h3 id="知识点自测（二）：容器基本概念"><a href="#知识点自测（二）：容器基本概念" class="headerlink" title="知识点自测（二）：容器基本概念"></a>知识点自测（二）：容器基本概念</h3><p>单选 <em>2.已运行 docker run -d -t —name demo ubuntu top 命令, 在 demo 这个容器内看到 top 命令的 PID 是什么？</em></p><p>A. 随机数字</p><p><strong>B. 1</strong></p><p>单选 <em>3.已运行 docker run -d -t —name demo ubuntu top 命令，以下哪个 docker 命令创建出的容器能看见 demo 容器进程？</em></p><p>A. docker run –name demo-x –net container:demo ubuntu ps</p><p><strong>B. docker run –name demo-x –pid container:demo ubuntu ps</strong></p><p>C. docker run –name demo-x –ipc container:demo ubuntu ps</p><p><em>4.已运行 docker run -d -t —name demo ubuntu top 和 docker run –name demo-x –pid container:demo ubuntu ps 命令，是否可以在 demo-x 容器内部停止容器？</em></p><p><strong>A. 是</strong></p><p><em>5.已运行 docker run -d -t —name demo ubuntu top 命令, 是否可以在 demo 这个容器内部停止容器？</em></p><p>A. 是</p><p><strong>B. 否</strong>     ？？</p><p><em>6.已运行 docker run -d —name demo busybox:1.25 top 命令，如何使用 docker 命令来获取容器 demo 的 Init 进程 PID？</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 两种方法</span></span><br><span class="line">docker container top &lt;container&gt;</span><br><span class="line">docker inspect -f '&#123;&#123;.State.Pid&#125;&#125;' &lt;container&gt; # 题目给的选项</span><br></pre></td></tr></table></figure><p>单选 <em>7.以下哪个 docker 命令可以用来创建一个使用宿主机主机名的容器？</em></p><p><strong>A. docker run –uts=host ubuntu hostname</strong></p><p>B. docker run ubuntu hostname</p><p>C. docker run –ipc host ubuntu ps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--uts  ??</span><br><span class="line">--ipc  ??</span><br></pre></td></tr></table></figure><p>单选 <em>8.已运行 docker run -d -t —name demo ubuntu top 和 docker run –name demo-x –pid container:demo ubuntu ps 命令，如果 demo 容器退出了，正在运行的 demo-x 容器是否会退出？</em></p><p><strong>A. 是</strong></p><p><em>9.以下哪个 docker 命令创建出来的容器可以自动重启？</em></p><p>A. docker run -d busybox top</p><p>B. docker run –restart always busybox top</p><p><strong>C. docker run -d –restart always busybox top</strong></p><h3 id="课后实践：应用容器构建与部署"><a href="#课后实践：应用容器构建与部署" class="headerlink" title="课后实践：应用容器构建与部署"></a>课后实践：应用容器构建与部署</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://edu.aliyun.com/roadmap/cloudnative?spm=5176.8764728.631162.112.6c6b20beHfpsFO&quot;&gt;CNCF x Alibaba 云原生技术公开课 - 云原生教程 - 阿里云大学&lt;/
      
    
    </summary>
    
    
      <category term="天书" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/"/>
    
      <category term="CNCF-×-Alibaba云原生技术公开课" scheme="https://zronghui.github.io/categories/%E5%A4%A9%E4%B9%A6/CNCF-%C3%97-Alibaba%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>bitbar</title>
    <link href="https://zronghui.github.io/Mac/01-bitbar.html"/>
    <id>https://zronghui.github.io/Mac/01-bitbar.html</id>
    <published>2020-02-28T05:20:11.000Z</published>
    <updated>2020-03-02T12:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="37486e5274905fb7866c9ad6d04cb79352b4741fc53c95e8f03b94485060121b">9ec28ecf2c643e162dad2fda697938046a45fb2cbe7c8c6c04a044efd2ce918a2b5d3a1007cdb485c68e9214cd58cc419c5e7292cbbff5da3258e97f7a6ce86ff3c08fa12936eaed5d13277072a3e2ddcb595484118f2b0b886471cb717a47e785cca033802fb7f55eb30ee2f5b8519e6666c7c14889fcf909f4f4e89b5c1cd68d2dd8f2bf005a1955803cc4f16c54b6154ac87950c6ff381cb2af43986f532acf5bfe7252182f6f2c7cf8e74b6a8cc0644ff39d12e78e914e02a4ccfb2ca0d483816b72f3ae992a5c2dc81a744c3e731b056b329bf256aa40e496daad744270fae8ac3c615937320f32fe9b00c56777ca64af699e798a70737c6dc518a1fd2b4a2d641838d93f6e851b68801f58c67f062f83a3d2217f4ad981eabdf67b35901ad5987e28e1806a942f0951254197691f46fd54d589e9f280500ad429ffc2e4e52ea13380ffe65873fd42d97dcb623f51bca7a3826a1f8068213b350969b247a65ee36eaae3b97e6370667c20e2678e4e920a4780a5dc262e4b1ce4fc4cc787dda884b705d59acfd37b05c03102218053c34b9fa346f634f0bcf3bfd02eb066a783836efa8f92d7c9fe499685bd8f660b1c609e07103da78c493de3947e07d94d157491d740950fd0a2e5705ea867863d879a5349423cad46835f55cb11201487bf85f17f1fe571cbd78fbd8678981b19fdc4318b68343b9df8cc9ccdabbc2d453e927e1cf2b67026edfbbca14cd3ecd89a88d62aa07517e8687472e68b24aec8e9a040fd4b82a7516e2d50a1cfc5a39900b14d17b7aa98544999031232cf98a838ff4e63eeda47fa514906c2cfd41b990933ee619abf449b7e1ea74ef3c4528b15850155c91ae3d4c1678280f0980296759e995ddd24ff71e744b4a599dc61c90827e37946bc6293e9e553b507e7abaac6cb08a837eba0d25d4496c737d52691b5fbe9d0235eb7a65425544ccb7cb5d9e1fbb53789cdfc0000cfc196f2944545e6cdc87dc485fd248e17b1dc31283658cddf1452a9b641576cca80a92414d3b7a9fc6a1431cbb0626e0530d5213203fc33f6d01c7fa996c8dd5bc6bc369d70750464bd22805022ae8098fb2f580973ced65e392f27ff14c283e11868dadaa2317298a6e0dfa2f518464504913e399f1c5b995ff405f10cba634d1609c2cb862c56b7f1f4ad7a15999fedcfd7e244ead8cdd8ba930f7706c9743f3eac439f3deee6824f181e462c07ef2f4aee849688e11b787725f8f6357d96511d1b2a2c59931bc28646d19b82a35d0f0b149b3114bd487a418b12feecd52336d5a36784cfd93938676f73009ffebe88c8c5774044c57e67561e0a9758c19aeca175dcabcc76ba7ba8b76d13e58c9a2f7a9a83b50a5259308576d89d36a1134a247b61b09000e8b028856a823187739c6fd4f1593572cf4271436fa729d7e4b57c2a04e9102d4fefc4f01a4089357dedd155ef08f35fc49e534d8b9a78e75114cc4334d2a07f48250b387e86a5cf09150a1a9fb5f4e31a90a8e0b7010a6b39dfaa3c6455efce593699c06967ccd0873f8d1ad8912798d850dc81cdbee81afb6f80edcea65b4adedfdd5fd425d2f95cb8940c38da1e466fafb72860c8a971f2fed6c67d9993a8c4257a095fe067a2d31a5ab4f11a94e3369890faf150442fa33a1a884e146504bd8c51426705ea168680b78400b25befd6d0e9f6a005dc155c504a03101c43f946d1cee6bc56adbddd6e84d091a0932b9d1190653cf83c64b129152f41ceafd4275a698fb43638aea2b52bfe653def811de70079f9e56c28cd062774d9e71ac04910dc14c43ac59e3ccdcde8e5929320b9c0f865cdad87b09b3d03be24b616eb6447cd4437c76b62c643715d3f4f2b2710d052a09358213e7838176f6a25b21497c4afd9f6b1683f9615c8f9fd002e3005b0d897eedd214b560ee7318bab1b6ef31d470acde854af1c4060ab87577c8a1c8d8d456a73e5399b2dad7ff0ffb9f46560fe48312a943a4fd4ad56e15f8ca9c0133bbf4543f8553f86ccdfac1d8bc87c3842e763a8e87ce3ae7c7cce4c2ea81c8257231addec2efa317ba79691f30b228bb9093e33a5378a13cc1f8aee0e0a203c9db570702e027be28cd53b5fe5f48c30c9dbc2d70878f6b99ff2755c1935652983c1fb01f9699cf511508aa9931432577e29e063851f728f35e0eb9dd50f155181aaeeadc16cf7d6a76a59f5fc059ddc3c5d6a0dd6ef85e62f70ea9f8095f2b60e9263930a6303ff92816a6965247176bb80ac2c6d23b5e63a8c8dd8d20b6dca2578fd8eed5287213616c89636ff5e4bd90ba9cc6a809745e72b5e70d885993822b590bd7fa8967acc6227593cf87ee370767a36226ffb10a4979636a79e76d427a41e14f834bba73c06174bd80ca93161160c44579b59fc4a7c66442b24f3315596f816bd279800a28bf81d100a537c188552111111bbc7f3ad5661155c6510179a3e7fe6a2221f347da06150888c200765fa1d387e65d34d2d4b7fbaa72874e654b3511c9767cde840eec9cb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://zronghui.github.io/test.html"/>
    <id>https://zronghui.github.io/test.html</id>
    <published>2020-02-27T03:03:17.000Z</published>
    <updated>2020-02-27T03:03:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机操作系统 CS-Notes</title>
    <link href="https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-CS-Notes.html"/>
    <id>https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-CS-Notes.html</id>
    <published>2020-02-26T01:46:45.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>]]></content>
    
    <summary type="html">
    
      计算机操作系统 CS-Notes
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="操作系统" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>socket CS-Notes</title>
    <link href="https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/socket-CS-Notes.html"/>
    <id>https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/socket-CS-Notes.html</id>
    <published>2020-02-26T01:46:25.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>]]></content>
    
    <summary type="html">
    
      socket CS-Notes
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP CS-Notes</title>
    <link href="https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP-CS-Notes.html"/>
    <id>https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP-CS-Notes.html</id>
    <published>2020-02-26T01:46:04.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>]]></content>
    
    <summary type="html">
    
      HTTP CS-Notes
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络 CS-Notes</title>
    <link href="https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-CS-Notes.html"/>
    <id>https://zronghui.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-CS-Notes.html</id>
    <published>2020-02-25T01:58:13.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="概述-https-cyc2018-github-io-CS-Notes-notes-计算机网络-概述"><a href="#概述-https-cyc2018-github-io-CS-Notes-notes-计算机网络-概述" class="headerlink" title="[概述](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 概述)"></a>[概述](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 概述)</h1><h2 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h2><p>互联网服务提供商（Internet Service Provider），ISP 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等互联设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/72be01cd-41ae-45f7-99b9-a8d284e44dd4.png" alt="img" style="zoom: 50%;" /><h2 id="主机之间的通信方式"><a href="#主机之间的通信方式" class="headerlink" title="主机之间的通信方式"></a>主机之间的通信方式</h2><p>C-S 客户端-服务器 模式</p><p>P2P</p><h2 id="电路交换与分组交换"><a href="#电路交换与分组交换" class="headerlink" title="电路交换与分组交换"></a>电路交换与分组交换</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路，因此电路交换对线路的利用率很低，往往不到 10%。</p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>每个分组都有首部和尾部，包含了源地址和目的地址等控制信息，在同一个传输线路上同时传输多个分组互相不会影响，因此在同一条传输线路上允许同时传输多个分组，也就是说分组交换不需要占用传输线路。</p><p>在一个邮局通信系统中，邮局收到一封邮件之后，先存储下来，然后把相同目的地的邮件一起转发到下一个目的地，这个过程就是存储转发过程，分组交换也使用了<strong>存储转发过程</strong>。</p><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>总时延=排队时延+处理时延+传输时延+传播时延</p><h3 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h3><p>分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p><h3 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h3><p>主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据、进行差错检验或查找适当的路由等。</p><h3 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h3><p>主机或路由器传输数据帧所需要的时间。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dcdbb96c-9077-4121-aeb8-743e54ac02a4.png" alt="img" style="zoom: 33%;" /><p>其中 l 表示数据帧的长度，v 表示传输速率。</p><h3 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h3><p>电磁波在信道中传输所需要的花费的时间，电磁波传播的速度接近光速。</p><p>delay = l / v</p><p>其中 l 表示信道长度(m)，v 表示电磁波速度(m/s)</p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png" alt="img" style="zoom:50%;" /><h3 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h3><p><strong>应用层</strong>：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文</p><p><strong>传输层</strong>：为进程提供数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两层协议：TCP UDP。TCP: 传输控制协议，提供面向连接、可靠的数据传输服务，数据单位为报文段。UDP: 用户数据报协议，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供即时性服务。</p><p><strong>网络层</strong>：为主机提供数据传输服务。网络层把数据层传递下来的报文段或用户数据报封装成分组。</p><p><strong>数据链路层</strong>：网络层针对的是主机之间的数据传输服务，而主机之间可以有许多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p><p><strong>物理层</strong>：考虑怎么在传输媒体上传输比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p><h3 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h3><p>表示层和会话层，五层协议中没有这 2 层，而是将这些功能留给应用程序开发者处理。</p><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><h3 id="数据在各层之间的传递过程"><a href="#数据在各层之间的传递过程" class="headerlink" title="数据在各层之间的传递过程"></a>数据在各层之间的传递过程</h3><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。</p><h1 id="物理层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-物理层"><a href="#物理层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-物理层" class="headerlink" title="[物理层](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 物理层)"></a>[物理层](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 物理层)</h1><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>根据信息在传输线上的传送方向，分为以下三种通信方式：</p><p>单工通信：单向传输</p><p>半双工通信：双向交替传输</p><p>全双工通信：双向同时传输</p><h2 id="带通调制"><a href="#带通调制" class="headerlink" title="带通调制"></a>带通调制</h2><p>模拟信号是连续的信号，数字信号是离散的信号。而带通调制把数字信号转换为模拟信号。</p><h1 id="链路层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-链路层"><a href="#链路层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-链路层" class="headerlink" title="[链路层](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 链路层)"></a>[链路层](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 链路层)</h1><h2 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h2><h3 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1. 封装成帧"></a>1. 封装成帧</h3><h3 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2. 透明传输"></a>2. 透明传输</h3><p>帧使用首部和尾部进行定界，透明传输就是将与首部尾部相同的内容转义。接收端处理后还原出原始数据，用户察觉不到转移字符的存在，这个过程是透明传输。</p><h3 id="3-差错检测"><a href="#3-差错检测" class="headerlink" title="3. 差错检测"></a>3. 差错检测</h3><p>数据链路层使用循环冗余校验(CRC)来检查比特差错。</p><h2 id="信道分类"><a href="#信道分类" class="headerlink" title="信道分类"></a>信道分类</h2><h3 id="1-广播信道"><a href="#1-广播信道" class="headerlink" title="1. 广播信道"></a>1. 广播信道</h3><p>一对多通信</p><p>有 2 种方法避免所有节点发送的数据，一个是信道复用技术，一是使用 CSMA/CD 协议。</p><h3 id="2-点对点信道"><a href="#2-点对点信道" class="headerlink" title="2. 点对点信道"></a>2. 点对点信道</h3><p>使用 PPP 协议</p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="1-频分复用"><a href="#1-频分复用" class="headerlink" title="1. 频分复用"></a>1. 频分复用</h3><h3 id="2-时分复用"><a href="#2-时分复用" class="headerlink" title="2. 时分复用"></a>2. 时分复用</h3><p>由于计算机数据的突发性之，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高。</p><h3 id="3-统计时分复用"><a href="#3-统计时分复用" class="headerlink" title="3. 统计时分复用"></a>3. 统计时分复用</h3><h3 id="4-波分复用"><a href="#4-波分复用" class="headerlink" title="4. 波分复用"></a>4. 波分复用</h3><h3 id="5-码分复用"><a href="#5-码分复用" class="headerlink" title="5. 码分复用"></a>5. 码分复用</h3><h2 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA/CD 协议"></a>CSMA/CD 协议</h2><p>Carrier Sense Multiple Access with Collision Detection</p><p>载波监听多点接入/碰撞检测</p><p>载波监听：主机不停地监听信道，在发送前，如果监听到信道正在使用，就必须等待。</p><p>多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上。？</p><p>碰撞检测：发送中，若监听到信道已有其他主机正在发送数据，就表示发生了碰撞。</p><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，2τ 为争用期。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 <strong>截断二进制指数退避算法</strong> 来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p><h2 id="PPP-协议"><a href="#PPP-协议" class="headerlink" title="PPP 协议"></a>PPP 协议</h2><p>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><h2 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h2><p>Mac 地址是链路层地址，长度是 6 字节（48 位），用于唯一标识网络适配器（网卡）。</p><p>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</p><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><p>目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><h1 id="网络层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-网络层"><a href="#网络层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-网络层" class="headerlink" title="[网络层](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 网络层)"></a>[网络层](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 网络层)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>IP协议</p><p>地址解析协议 ARP（Address Resolution Protocol）</p><p>网络控制报文协议 ICMP（Internet Control Message Protocol）</p><p>网络组管理协议 IGMP（Internet Group Management Protocol）</p><h2 id="IP-数据报格式"><a href="#IP-数据报格式" class="headerlink" title="IP 数据报格式"></a>IP 数据报格式</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" alt="img" style="zoom:50%;" /><ul><li><strong>版本</strong> : 有 4（IPv4）和 6（IPv6）两个值；</li><li><strong>首部长度</strong> : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li><strong>区分服务</strong> : 用来获得更好的服务，一般情况下不使用。</li><li><strong>总长度</strong> : 包括首部长度和数据部分长度。</li><li><strong>生存时间</strong> ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li><strong>标识</strong> : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li><strong>片偏移</strong> : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</li></ul><h2 id="IP-地址编址方式"><a href="#IP-地址编址方式" class="headerlink" title="IP 地址编址方式"></a>IP 地址编址方式</h2><p>IP 地址的编址方式经历了三个历史阶段：</p><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png" alt="img" style="zoom:50%;" /><h3 id="2-子网划分"><a href="#2-子网划分" class="headerlink" title="2. 子网划分"></a>2. 子网划分</h3><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><h3 id="3-无分类"><a href="#3-无分类" class="headerlink" title="3. 无分类"></a>3. 无分类</h3><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 <strong>构成超网</strong> 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>由 IP 地址得到 MAC 地址</p><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。</p><h3 id="1-Ping"><a href="#1-Ping" class="headerlink" title="1. Ping"></a>1. Ping</h3><p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><h3 id="2-Traceroute"><a href="#2-Traceroute" class="headerlink" title="2. Traceroute"></a>2. Traceroute</h3><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><h2 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h2><p>路由器从功能上可以划分为：路由选择和分组转发</p><h2 id="路由器分组转发流程"><a href="#路由器分组转发流程" class="headerlink" title="路由器分组转发流程"></a>路由器分组转发流程</h2><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ul><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><h3 id="1-内部网关协议-RIP"><a href="#1-内部网关协议-RIP" class="headerlink" title="1. 内部网关协议 RIP"></a>1. 内部网关协议 RIP</h3><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h3 id="2-内部网关协议-OSPF"><a href="#2-内部网关协议-OSPF" class="headerlink" title="2. 内部网关协议 OSPF"></a>2. 内部网关协议 OSPF</h3><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="3-外部网关协议-BGP"><a href="#3-外部网关协议-BGP" class="headerlink" title="3. 外部网关协议 BGP"></a>3. 外部网关协议 BGP</h3><p>BGP（Border Gateway Protocol，边界网关协议）</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9cd0ae20-4fb5-4017-a000-f7d3a0eb3529.png" alt="img" style="zoom:50%;" /><h1 id="传输层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-传输层"><a href="#传输层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-传输层" class="headerlink" title="[传输层](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 传输层)"></a>[传输层](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 传输层)</h1><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p><h2 id="UDP-和-TCP-的特点"><a href="#UDP-和-TCP-的特点" class="headerlink" title="UDP 和 TCP 的特点"></a>UDP 和 TCP 的特点</h2><ul><li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li><li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li></ul><h2 id="UDP-首部格式"><a href="#UDP-首部格式" class="headerlink" title="UDP 首部格式"></a>UDP 首部格式</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg" alt="img" style="zoom:50%;" /><p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p><h2 id="TCP-首部格式"><a href="#TCP-首部格式" class="headerlink" title="TCP 首部格式"></a>TCP 首部格式</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/55dc4e84-573d-4c13-a765-52ed1dd251f9.png" alt="img" style="zoom:50%;" /><ul><li><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li><li><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li><li><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li><li><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li><li><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li><li><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li><li><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li></ul><h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e92d0ebc-7d46-413b-aec1-34a39602f787.png" alt="img" style="zoom:50%;" /><p>假设 A 为客户端，B 为服务器端。</p><ul><li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li><li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li><li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li><li>B 收到 A 的确认后，连接建立。</li></ul><p><strong>三次握手的原因</strong></p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h2 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h2><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" alt="img" style="zoom:50%;" /><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li>A 发送连接释放报文，FIN=1。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ul><p><strong>四次挥手的原因</strong></p><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong></p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><h2 id="TCP-可靠传输"><a href="#TCP-可靠传输" class="headerlink" title="TCP 可靠传输"></a>TCP 可靠传输</h2><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><h2 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h2><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg" alt="img" style="zoom: 50%;" /><h2 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h2><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h2 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg" alt="img" style="zoom:50%;" /><p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p><p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ul><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/910f613f-514f-4534-87dd-9b4699d59d31.png" alt="img" style="zoom:50%;" /><h3 id="1-慢开始-与拥塞避免"><a href="#1-慢开始-与拥塞避免" class="headerlink" title="1. 慢开始 与拥塞避免"></a>1. 慢开始 与拥塞避免</h3><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。<strong>设置一个慢开始门限 ssthresh</strong>，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p><h3 id="2-快重传-与快恢复"><a href="#2-快重传-与快恢复" class="headerlink" title="2. 快重传 与快恢复"></a>2. 快重传 与快恢复</h3><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时<strong>执行快重传</strong>，立<strong>即重传下一个报文段</strong>。<strong>例如收到三个 M2，则 M3 丢失，立即重传 M3。</strong></p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p><strong>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</strong></p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png" alt="img" style="zoom:50%;" /><h1 id="应用层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层"><a href="#应用层-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层" class="headerlink" title="[应用层](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 应用层)"></a>[应用层](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 应用层)</h1><h2 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h2><p>DNS 提供主机名和 IP 地址之间相互转换的服务。域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b54eeb16-0b0e-484c-be62-306f57c40d77.jpg" alt="img" style="zoom:50%;" /><h2 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h2><p>FTP 使用 TCP 进行连接，它需要 2 个连接来传送一个文件：</p><ul><li><p>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传送服务器的应答。</p></li><li><p>数据连接：用来传送一个文件数据。</p></li></ul><p>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：</p><ul><li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。</li></ul><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/03f47940-3843-4b51-9e42-5dcaff44858b.jpg" alt="img" style="zoom:50%;" /><ul><li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。</li></ul><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/be5c2c61-86d2-4dba-a289-b48ea23219de.jpg" alt="img"></p><p>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。</p><h2 id="动态主机配置协议"><a href="#动态主机配置协议" class="headerlink" title="动态主机配置协议"></a>动态主机配置协议</h2><p>DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，<strong>用户不再需要手动配置 IP 地址等信息</strong>。</p><p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。</p><p>DHCP 工作过程如下：</p><ol><li>客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。</li><li>DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li><li>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。</li><li>DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。</li></ol><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/23219e4c-9fc0-4051-b33a-2bd95bf054ab.jpg" alt="img" style="zoom:50%;" /><h2 id="远程登录协议"><a href="#远程登录协议" class="headerlink" title="远程登录协议"></a>远程登录协议</h2><p>TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。</p><p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。</p><h2 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h2><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。</p><p>邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7b3efa99-d306-4982-8cfb-e7153c33aab4.png" alt="img" style="zoom:50%;" /><h3 id="1-SMTP-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-1-smtp"><a href="#1-SMTP-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-1-smtp" class="headerlink" title="[1. SMTP](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 应用层?id=_1-smtp)"></a>[1. SMTP](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 应用层?id=_1-smtp)</h3><p>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ed5522bb-3a60-481c-8654-43e7195a48fe.png" alt="img" style="zoom:50%;" /><h3 id="2-POP3-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-2-pop3"><a href="#2-POP3-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-2-pop3" class="headerlink" title="[2. POP3](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 应用层?id=_2-pop3)"></a>[2. POP3](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 应用层?id=_2-pop3)</h3><p>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件。</p><h3 id="3-IMAP-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-3-imap"><a href="#3-IMAP-https-cyc2018-github-io-CS-Notes-notes-计算机网络-应用层-id-3-imap" class="headerlink" title="[3. IMAP](https://cyc2018.github.io/CS-Notes/#/notes/计算机网络 - 应用层?id=_3-imap)"></a>[3. IMAP](<a href="https://cyc2018.github.io/CS-Notes/#/notes/计算机网络">https://cyc2018.github.io/CS-Notes/#/notes/计算机网络</a> - 应用层?id=_3-imap)</h3><p>IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。</p><h2 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h2><table><thead><tr><th>应用</th><th>应用层协议</th><th>端口号</th><th>传输层协议</th><th>备注</th></tr></thead><tbody><tr><td>域名解析</td><td>DNS</td><td>53</td><td>UDP/TCP</td><td>长度超过 512 字节时使用 TCP</td></tr><tr><td>动态主机配置协议</td><td>DHCP</td><td>67/68</td><td>UDP</td><td></td></tr><tr><td>简单网络管理协议</td><td>SNMP</td><td>161/162</td><td>UDP</td><td></td></tr><tr><td>文件传送协议</td><td>FTP</td><td>20/21</td><td>TCP</td><td>控制连接 21，数据连接 20</td></tr><tr><td>远程终端协议</td><td>TELNET</td><td>23</td><td>TCP</td><td></td></tr><tr><td>超文本传送协议</td><td>HTTP</td><td>80</td><td>TCP</td><td></td></tr><tr><td>简单邮件传送协议</td><td>SMTP</td><td>25</td><td>TCP</td><td></td></tr><tr><td>邮件读取协议</td><td>POP3</td><td>110</td><td>TCP</td><td></td></tr><tr><td>网际报文存取协议</td><td>IMAP</td><td>143</td><td>TCP</td><td></td></tr></tbody></table><h2 id="Web-页面请求过程"><a href="#Web-页面请求过程" class="headerlink" title="Web 页面请求过程"></a>Web 页面请求过程</h2><h3 id="1-DHCP-配置主机信息"><a href="#1-DHCP-配置主机信息" class="headerlink" title="1. DHCP 配置主机信息"></a>1. DHCP 配置主机信息</h3><p>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</p><p><strong>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</strong></p><p><strong>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</strong></p><p><strong>该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</strong></p><p><strong>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</strong></p><p>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</p><p><strong>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</strong></p><h3 id="2-ARP-解析-MAC-地址"><a href="#2-ARP-解析-MAC-地址" class="headerlink" title="2. ARP 解析 MAC 地址"></a>2. ARP 解析 MAC 地址</h3><ul><li><strong>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</strong></li><li>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</li><li>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</li><li>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</li><li>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</li><li><strong>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文</strong>，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</li><li><strong>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机</strong>。</li></ul><h3 id="3-DNS-解析域名"><a href="#3-DNS-解析域名" class="headerlink" title="3. DNS 解析域名"></a>3. DNS 解析域名</h3><ul><li>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</li><li>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</li><li>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</li><li>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</li><li>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</li></ul><h3 id="4-HTTP-请求页面"><a href="#4-HTTP-请求页面" class="headerlink" title="4. HTTP 请求页面"></a>4. HTTP 请求页面</h3><ul><li>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</li><li>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</li><li>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</li><li>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</li><li>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</li><li>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</li></ul>]]></content>
    
    <summary type="html">
    
      计算机网络 CS-Notes
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机网络" scheme="https://zronghui.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>front end tricks 202002</title>
    <link href="https://zronghui.github.io/frontEnd/front-end-tricks-202002.html"/>
    <id>https://zronghui.github.io/frontEnd/front-end-tricks-202002.html</id>
    <published>2020-02-24T09:17:38.000Z</published>
    <updated>2020-02-26T13:15:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="JavaScript-倒计时关闭页面-蚂蚁部落"><a href="#JavaScript-倒计时关闭页面-蚂蚁部落" class="headerlink" title="JavaScript 倒计时关闭页面-蚂蚁部落"></a><a href="https://www.softwhy.com/article-3402-1.html">JavaScript 倒计时关闭页面-蚂蚁部落</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> otimer;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> second=<span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">timer</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">  otimer.innerHTML=second;</span><br><span class="line">  if(second&gt;0)&#123;</span><br><span class="line">    second=second-1;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.close();</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  otimer=<span class="built_in">document</span>.getElementById(<span class="string">"timer"</span>);</span></span><br><span class="line">  setInterval(timer,1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码实现了我们想要的功能，可以倒计时10秒之后关闭页面。</p><p>原理非常的简单，利用定时器setInterval()方法，不断调用timer()函数，每调用一次秒数减一，直到秒数变为零就执行window.close()，将页面关闭。同时每次调用函数都会将当前的剩余秒数写入div中，于是实现了倒计时效果。</p><p><strong>相关阅读：</strong></p><p>（1）.innerHTML属性参阅<a href="https://www.softwhy.com/article-9293-1.html">JavaScript innerHTML</a>一章节。 </p><p>（2）.setInterval()方法参阅<a href="https://www.softwhy.com/article-9300-1.html">JavaScript setInterval()</a>一章节。 </p><h2 id="JavaScript-获取倒数第二个li元素-蚂蚁部落"><a href="#JavaScript-获取倒数第二个li元素-蚂蚁部落" class="headerlink" title="JavaScript 获取倒数第二个li元素-蚂蚁部落"></a><a href="https://www.softwhy.com/article-8133-1.html">JavaScript 获取倒数第二个li元素-蚂蚁部落</a></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> obox=<span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> oshow=<span class="built_in">document</span>.getElementById(<span class="string">"show"</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> lis=obox.getElementsByTagName(<span class="string">"li"</span>);</span></span><br><span class="line">  oshow.innerHTML=lis[lis.length-2].innerHTML;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-获取网页脚本代码内容-蚂蚁部落"><a href="#JavaScript-获取网页脚本代码内容-蚂蚁部落" class="headerlink" title="JavaScript 获取网页脚本代码内容-蚂蚁部落"></a><a href="https://www.softwhy.com/article-1154-1.html">JavaScript 获取网页脚本代码内容-蚂蚁部落</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(s.indexOf(<span class="string">'&lt;script'</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^\&gt;]*?&gt;([^\x00]*?)&lt;\/script&gt;/ig</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span>(arr = p.exec(s))&#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="regexp">/&lt;script[^\&gt;]*?src=\"([^\&gt;]*?)\"[^\&gt;]*?(reload=\"1\")?(?:charset=\"([\w\-]+?)\")?&gt;&lt;\/script&gt;/i</span>;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(arr1)&#123;</span><br><span class="line">      appendscript(arr1[<span class="number">1</span>], <span class="string">''</span>, arr1[<span class="number">2</span>], arr1[<span class="number">3</span>]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      p1 = <span class="regexp">/&lt;script(.*?)&gt;([^\x00]+?)&lt;\/script&gt;/i</span>;</span><br><span class="line">      arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">      appendscript(<span class="string">''</span>, arr1[<span class="number">2</span>], arr1[<span class="number">1</span>].indexOf(<span class="string">'reload='</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给出了核心代码，直接套用即可。</p><h2 id="JavaScript-替换字符串全部指定内容-蚂蚁部落"><a href="#JavaScript-替换字符串全部指定内容-蚂蚁部落" class="headerlink" title="JavaScript 替换字符串全部指定内容-蚂蚁部落"></a><a href="https://www.softwhy.com/article-1153-1.html">JavaScript 替换字符串全部指定内容-蚂蚁部落</a></h2><p>将字符串中所有的字符”n”替换为字符”b”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll=<span class="function"><span class="keyword">function</span>(<span class="params">str,repaceStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(str,<span class="string">"gmi"</span>),repaceStr) <span class="comment">// "gmi" ? </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"antzone"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replaceAll(<span class="string">"n"</span>,<span class="string">"b"</span>));</span><br></pre></td></tr></table></figure><h2 id="正则表达式删除字符串两端空格-蚂蚁部落"><a href="#正则表达式删除字符串两端空格-蚂蚁部落" class="headerlink" title="正则表达式删除字符串两端空格-蚂蚁部落"></a><a href="https://www.softwhy.com/article-1152-1.html">正则表达式删除字符串两端空格-蚂蚁部落</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reExtraSpace=<span class="regexp">/^\s*(.*?)\s+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace,<span class="string">"$1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"  antzone "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="keyword">var</span> strNew=str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(strNew.length);</span><br></pre></td></tr></table></figure><h2 id="CSS-紧邻下一个兄弟元素-蚂蚁部落"><a href="#CSS-紧邻下一个兄弟元素-蚂蚁部落" class="headerlink" title="CSS 紧邻下一个兄弟元素-蚂蚁部落"></a><a href="https://www.softwhy.com/article-8241-1.html">CSS 紧邻下一个兄弟元素-蚂蚁部落</a></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.antzone</span>+<span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码将class属性值为antzone的li元素的紧邻下一个兄弟li元素的字体颜色设置为红色。</p><p>+选择器可以参阅<a href="https://www.softwhy.com/article-460-1.html">CSS的相邻选择符(E+F)</a>一章节。</p><h2 id="CSS-获取所有紧邻兄弟元素-蚂蚁部落"><a href="#CSS-获取所有紧邻兄弟元素-蚂蚁部落" class="headerlink" title="CSS 获取所有紧邻兄弟元素-蚂蚁部落"></a><a href="https://www.softwhy.com/article-5201-1.html">CSS 获取所有紧邻兄弟元素-蚂蚁部落</a></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ant</span> ~ <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将class属性值为”ant”元素后面的li元素字体颜色设置为红色，具体参阅<a href="https://www.softwhy.com/article-9599-1.html">CSS E~F 兄弟选择器</a>一章节。</p>]]></content>
    
    <summary type="html">
    
      front end tricks 202002
    
    </summary>
    
    
      <category term="frontEnd" scheme="https://zronghui.github.io/categories/frontEnd/"/>
    
    
  </entry>
  
</feed>
