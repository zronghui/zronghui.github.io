<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-08-01T13:58:08.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 148. Sort List</title>
    <link href="https://zronghui.github.io/leetcode-148-Sort-List.html"/>
    <id>https://zronghui.github.io/leetcode-148-Sort-List.html</id>
    <published>2020-08-01T13:26:55.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/sort-list/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/sort-list/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Sort a linked list in <em>O</em> ( <em>n</em> log <em>n</em> ) time using constant space<br>complexity.</p><p><strong>Example 1:</strong></p><pre><code>Input: 4-&gt;2-&gt;1-&gt;3Output: 1-&gt;2-&gt;3-&gt;4</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: -1-&gt;5-&gt;3-&gt;4-&gt;0Output: -1-&gt;0-&gt;3-&gt;4-&gt;5</code></pre><p><strong>Tags:</strong> Linked List, Sort</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><h3 id="超时写法"><a href="#超时写法" class="headerlink" title="超时写法"></a>超时写法</h3><p>根据<a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表 - 力扣（LeetCode）</a>的 partition 写的</p><p>86题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        dummy1, dummy2 = ListNode(<span class="number">0</span>), ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># dummy1 存 小于 x 的值; dummy &gt;=</span></span><br><span class="line">        cur1, cur2 = dummy1, dummy2</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                cur1.next = head</span><br><span class="line">                cur1 = cur1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur2.next = head</span><br><span class="line">                cur2 = cur2.next</span><br><span class="line">            head = head.next</span><br><span class="line">        cur2.next = <span class="literal">None</span></span><br><span class="line">        cur1.next = dummy2.next</span><br><span class="line">        <span class="keyword">return</span> dummy1.next</span><br></pre></td></tr></table></figure><p>一开始写的死板解法，但是遇到一个 testcase 全是  1，2，3 的链表，超时了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 快速排序</span></span><br><span class="line">        <span class="comment"># return head tail</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(head)</span>:</span></span><br><span class="line">            <span class="comment"># return head1,tail1,head2,tail2</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(head, x)</span>:</span></span><br><span class="line">                dummy1, dummy2 = ListNode(<span class="number">0</span>), ListNode(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># cur 指向那条链最后一个非 None 节点</span></span><br><span class="line">                cur1, cur2 = dummy1, dummy2</span><br><span class="line">                <span class="keyword">while</span> head:</span><br><span class="line">                    <span class="keyword">if</span> head.val&lt;x:</span><br><span class="line">                        cur1.next = head</span><br><span class="line">                        cur1 = cur1.next</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        cur2.next = head</span><br><span class="line">                        cur2 = cur2.next</span><br><span class="line">                    head = head.next</span><br><span class="line">                cur1.next = cur2.next = <span class="literal">None</span></span><br><span class="line">                <span class="comment"># head1, head2 可能为 None, tail1, tail2 一定非 None </span></span><br><span class="line">                <span class="keyword">return</span> dummy1.next, cur1, dummy2.next, cur2</span><br><span class="line">            </span><br><span class="line">            tail = head</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head, tail</span><br><span class="line">            head1, tail1, head2, tail2 = partition(head.next, head.val)</span><br><span class="line">            head.next = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(head1, tail1, head2, tail2)</span></span><br><span class="line">            <span class="keyword">if</span> head1:</span><br><span class="line">                head1, tail1 = quickSort(head1)</span><br><span class="line">                tail1.next = head</span><br><span class="line">            <span class="keyword">if</span> head2:</span><br><span class="line">                head2, tail2 = quickSort(head2)</span><br><span class="line">                head.next = head2</span><br><span class="line">            <span class="keyword">return</span> head1 <span class="keyword">if</span> head1 <span class="keyword">else</span> head , tail2 <span class="keyword">if</span> head2 <span class="keyword">else</span> head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quickSort(head)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="优化后的快排"><a href="#优化后的快排" class="headerlink" title="优化后的快排"></a>优化后的快排</h3><p>划分为 small equal large 3个链表，对 small large 递归, 再合并 3 个链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 快速排序</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># small equal large 的缩写</span></span><br><span class="line">        <span class="comment"># 都指向相应链表的 head</span></span><br><span class="line">        s = e = l = <span class="literal">None</span></span><br><span class="line">        target = head.val</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            nxt = head.next</span><br><span class="line">            <span class="keyword">if</span> head.val&gt;target:</span><br><span class="line">                head.next = l</span><br><span class="line">                l = head</span><br><span class="line">            <span class="keyword">elif</span> head.val==target:</span><br><span class="line">                head.next = e</span><br><span class="line">                e = head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head.next = s</span><br><span class="line">                s = head</span><br><span class="line">            head = nxt</span><br><span class="line">        </span><br><span class="line">        s = self.sortList(s)</span><br><span class="line">        l = self.sortList(l)</span><br><span class="line">        <span class="comment"># 合并 3 个链表</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        cur = dummy <span class="comment"># cur: 非 None 的尾节点</span></span><br><span class="line">        <span class="comment"># p: 下一个需要连接的节点</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> [s, e, l]:</span><br><span class="line">            <span class="keyword">while</span> p:</span><br><span class="line">                cur.next = p</span><br><span class="line">                p = p.next</span><br><span class="line">                cur = cur.next</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>写归并排序是主流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-list/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/sort-list/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Sort a linked list in &lt;em&gt;O&lt;/em&gt; ( &lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt; ) time using constant space&lt;br&gt;complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 4-&amp;gt;2-&amp;gt;1-&amp;gt;3
Output: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: -1-&amp;gt;5-&amp;gt;3-&amp;gt;4-&amp;gt;0
Output: -1-&amp;gt;0-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Linked List, Sort&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
    
      <category term="Linked List" scheme="https://zronghui.github.io/tags/Linked-List/"/>
    
      <category term="Sort" scheme="https://zronghui.github.io/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%9B%BE.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%9B%BE.html</id>
    <published>2020-08-01T04:03:59.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="有向图-floyd-算法"><a href="#有向图-floyd-算法" class="headerlink" title="有向图 floyd 算法"></a>有向图 floyd 算法</h2><h3 id="1462-课程安排-IV-力扣（LeetCode）"><a href="#1462-课程安排-IV-力扣（LeetCode）" class="headerlink" title="1462. 课程安排 IV - 力扣（LeetCode）"></a>1462. 课程安排 IV - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/course-schedule-iv/">1462. 课程安排 IV - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkIfPrerequisite</span><span class="params">(self, n: int, pres: List[List[int]], qs: List[List[int]])</span> -&gt; List[bool]:</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> pres: dp[a][b] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[i][k] <span class="keyword">and</span> dp[k][j]:</span><br><span class="line">                        dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> [dp[a][b] <span class="keyword">for</span> a, b <span class="keyword">in</span> qs]</span><br></pre></td></tr></table></figure><h2 id="无向图-dijkstra-算法"><a href="#无向图-dijkstra-算法" class="headerlink" title="无向图 dijkstra 算法"></a>无向图 dijkstra 算法</h2><h3 id="1514-概率最大的路径-力扣（LeetCode）"><a href="#1514-概率最大的路径-力扣（LeetCode）" class="headerlink" title="1514. 概率最大的路径 - 力扣（LeetCode）"></a>1514. 概率最大的路径 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/path-with-maximum-probability/">1514. 概率最大的路径 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProbability</span><span class="params">(self, n: int, e: List[List[int]], succProb: List[float], start: int, end: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># defaultdict 构造 graph</span></span><br><span class="line">        graph = collections.defaultdict(dict)</span><br><span class="line">        <span class="comment"># 因为这个题目比较特殊，权重是乘性的并且0-1之间，所以可以用一个dic记录从start开始到每个节点的最大权重。 然后每次你只需要判断pop出的节点的权重就可以。如果比曾经记录的dic中的权重小那就没必要继续（这里面包含了环，回头），如果比曾经记录的权重大，那么继续进行。</span></span><br><span class="line">        d = collections.defaultdict(float)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(e)):</span><br><span class="line">            p1, p2 = e[i]</span><br><span class="line">            graph[p1][p2] = succProb[i]</span><br><span class="line">            graph[p2][p1] = succProb[i]</span><br><span class="line">        stack = collections.deque()</span><br><span class="line">        stack.append([start, <span class="number">1</span>]) <span class="comment"># start 到 当前点 的 概率</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            cur, prob = stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur==end:</span><br><span class="line">                ans = max(ans, prob)</span><br><span class="line">            <span class="keyword">elif</span> prob&gt;ans:</span><br><span class="line">                <span class="keyword">for</span> point, _prob <span class="keyword">in</span> graph[cur].items():</span><br><span class="line">                    <span class="keyword">if</span> _prob*prob&gt;ans <span class="keyword">and</span> _prob*prob&gt;d.get(point, <span class="number">0</span>):</span><br><span class="line">                        d[point] = _prob*prob</span><br><span class="line">                        stack.append([point, _prob*prob])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1042-不邻接植花-力扣（LeetCode）"><a href="#1042-不邻接植花-力扣（LeetCode）" class="headerlink" title="1042. 不邻接植花 - 力扣（LeetCode）"></a>1042. 不邻接植花 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/flower-planting-with-no-adjacent/">1042. 不邻接植花 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gardenNoAdj</span><span class="params">(self, N: int, paths: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">chooseone</span><span class="params">(exclude)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> exclude: <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">        m = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> paths:</span><br><span class="line">            m[a].append(b)</span><br><span class="line">            m[b].append(a)</span><br><span class="line">        res = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">            res[i<span class="number">-1</span>] = chooseone(exclude=[res[j<span class="number">-1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> m[i]])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res[i]: res[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>简洁写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gardenNoAdj</span><span class="params">(self, N: int, paths: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        m = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> paths:</span><br><span class="line">            m[a<span class="number">-1</span>].append(b<span class="number">-1</span>)</span><br><span class="line">            m[b<span class="number">-1</span>].append(a<span class="number">-1</span>)</span><br><span class="line">        res = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            res[i] = (&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;-&#123;res[j] <span class="keyword">for</span> j <span class="keyword">in</span> m[i]&#125;).pop()</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="997-找到小镇的法官-力扣（LeetCode）"><a href="#997-找到小镇的法官-力扣（LeetCode）" class="headerlink" title="997. 找到小镇的法官 - 力扣（LeetCode）"></a>997. 找到小镇的法官 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/find-the-town-judge/comments/">997. 找到小镇的法官 - 力扣（LeetCode）</a></p><p>晦涩的解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N: int, trust: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> trust: </span><br><span class="line">            <span class="keyword">if</span> N==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># judge 不在 a 中</span></span><br><span class="line">        <span class="comment"># judge 出现 N-1 次</span></span><br><span class="line">        s = set(range(<span class="number">1</span>, N+<span class="number">1</span>))</span><br><span class="line">        m = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> trust:</span><br><span class="line">            m[b] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">in</span> s: s.remove(a)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> len(s)&gt;<span class="number">1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        res = s.pop()</span><br><span class="line">        <span class="keyword">if</span> m[res]==N<span class="number">-1</span>: <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/find-the-town-judge/solution/yi-ge-shu-zu-gao-ding-tong-su-yi-dong-997-zhao-dao/">【一个数组搞定】通俗易懂（997. 找到小镇的法官） - 找到小镇的法官 - 力扣（LeetCode）</a></p><p>法官👩‍⚖️ 实际上就是出度为0，入度为 N - 1的节点。这固然没错，然而我们仍然可以换个角度来思考，法官👩‍⚖️ 同样是 入度 - 出度 == N - 1 的点，并且不是法官的人不可能是。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N: int, trust: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        l = [<span class="number">0</span>]*N</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> trust:</span><br><span class="line">            l[a<span class="number">-1</span>] -= <span class="number">1</span></span><br><span class="line">            l[b<span class="number">-1</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> l[i]==N<span class="number">-1</span>: <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>tricks-2020-08</title>
    <link href="https://zronghui.github.io/tricks-2020-08.html"/>
    <id>https://zronghui.github.io/tricks-2020-08.html</id>
    <published>2020-08-01T04:03:43.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c4c9a332231d56e4d4e3d499e8959e501074c5a6d94c93914eca3027176a226c">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dd85bdd0ba216a9a3ddb0ba4af683a3234740fdce8265b492f7f7c66e06ca477ca5eefea6853f46f0c4c21eba11069307a68c85baf47613206b7b7fa8342ba3e63b45f5e3027eb5393ad2a79dc1f9c6d3338a513824885d7bebc234bc31ad8ad14d441cf09b4d13cdb86bee7a2ca4835273ddadeb22d8717f48d46eab635fc3a98e8cd6e6c7050184b3de31048bfad0b31a2eeaf658a30f37f94238f9f2675fcd5086dd29c97860e5be6a71235f894f8285d5eebd7fc1d8b7ea340b1bdefa77663d9d5b5e05f0d3b152a90809472fff9b88061e88b37b8780ee01cced06890fe3643ecb30157fa7f07987dfb0c4e125381d2e7acc32c4e547a3dcce00cd3d527f04c793bf57901eb5f24eb78fea0cc88d1d33d351b522aed5ecdf3737a014bc77c4c974821765386560da5988f33343d5dae62d4e719e4e25f6a127318c7e03adc3bb29adfd1d861385cc992080564d48543439f25235b602f09d5083607195a6c974ca71339ceaa7a085c91d2112e2090700a3c191e9b03339b1a7389292d8284035d331d45c770d24a4e9c9a9edab918b8ef456e38b1c868d23c14e5c0dd9c17a2fecdf142f953654e397aa8b8beb06fb53f8b090553643d1f7e728b55d9cd4c10b264ede551be48641483200a48c7a6a384b1eef35448d02aa8693976fa16214911cc995d464bb77b0e55bdfcc845a62bcffa06452384ad8e91b41703eeb65c857ecee0b6fd582e1ac333e1859fd089bc5ebb84994854f05bf78e5bf1bff3cfb416d89af09e9146e789066e77be22cc3503d3a7dfdfa7f548ca54257c029d7592ae04eb02528b6da0bce0e0f3e958a437b045595a96efcb57f011c3a6302495ef564e8eda1826b336207d643d527a312812704cee610d35e19ce78515c072fa1fbf3ab696dd63a0ceba1f54393483fc591abafb2229d8e339676ce504c494233ecd5a99e2056d9110891e9c3a620539631ed752d2020374652dc45682ed9dd47413b5a0443074b635cc85aab96cf452e09be6ba6605df051eb7bc254f6781880631a5d6622076dea203bee10c9365e3b0d050abf4169a37ec661ea89a5a70d435727623a9c706c721a692e682a54797119c736608df045fda8eda328cab38a6e520508be2426152bd2ab49bcac11a71c6135def6ea3ab1562dd2d2e516631de3f2a5daaca79453b1aeb187e8bd7007485e67d25613e9c0b86a0798d84c1a469354f5f298a7793c8bf646b5f23912ee92d1fa4c33c71bcbf5d207e0a4a393989c3d96b58bbe4946e22d815316fafb8600bc5f2651e604b7806e053a26653e3df28e03080cb6215749fe6ba3fa809d1653bff85ccd436f4044e4a905e8947ce31301aeca136595f1a8b4b36bb26122549c62a616e442ec7a066a9e0efab82194cc71e56c78660f55b91f24f56f5b9ae5a532fb66620e4cd717cfd9710d25c816a2d76734241320f852df60e407e948355841947852c361b7e9ccb62e645d3e457fa3ee3a46d2aca6809c5c4294096a386fd8a3be95dba520f3b21fee1326e2c52529af57f900217e6841ea9d2bdd2c6cc18a6cc6be638930692250ae0b256d47c023b8909149eecabfe977df3327a128614052f30ff9d9af7ccd3a051f2a5afe8bccd59d26a74665de2a989a5fd2f8d115be521a335cd2278b4195ff7cca02348d08f655aa2f06f63f7f340ee1cecc6b83f8425bd05c0e6179206f873d5445d392de644659de53d643b31f8370cc41e59b20b08f4aeae121b36a4467c127bfe577948db9d2ea82bb083c0b4343c2c74c7432fd9962ea7ce2c3244dafe240aed6654142087bc21cbc48381a7abe81d433fd4dfe2b353c9ddc9dc91b49d534e8ee7539e9b8eb9335f1533464683fda49709bf77b945bf2ea592fbd29673ec4b577a58ec2207a0e881d80224003f910cfb46748230ba8e4ae01aa2e1a54caca92f6b5a56c87ca1e3b753d3864fdc9c1be1ca463a72c7e38882c6e9590a094d7c77226bacecc42decb39ebcab0aaeaf7570895d3a6a80100baf9cd11693b06e9dcbb1d4f4c0f7d93f5904a03e2446406fea36041c4a5b15b6fc2fa5c979b426ec94ef53610b1a32a275752b3ff32dab764e260e82f52d95c8854e48459f533442155</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>blockchain/blockchain</title>
    <link href="https://zronghui.github.io/blockchain/blockchain.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain.html</id>
    <published>2020-07-31T02:00:22.000Z</published>
    <updated>2020-07-31T02:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>区块链的效率主要受共识机制影响</p><h3 id="fabric-的共识机制"><a href="#fabric-的共识机制" class="headerlink" title="fabric 的共识机制"></a>fabric 的共识机制</h3><img src="https://i.loli.net/2020/07/31/jmu2U8yksAY36el.png" alt="image-20200731100157053" style="zoom: 33%;" /><p>区块链规模越大，节点越多，背书越慢</p><h3 id="具体速度"><a href="#具体速度" class="headerlink" title="具体速度"></a>具体速度</h3><p>衡量单位: tps 每秒吞吐量</p><p><strong>TPS=区块大小/（出块间隔*交易字节大小）</strong></p><p><img src="https://i.loli.net/2020/07/31/qd1EPvMi7Ogo3la.png" alt="image-20200731100306637"></p><p>平均吞吐量: 大概 60tps，还是挺慢的</p><h3 id="几种典型区块链在性能功能上的差异"><a href="#几种典型区块链在性能功能上的差异" class="headerlink" title="几种典型区块链在性能功能上的差异"></a>几种典型区块链在性能功能上的差异</h3><p><img src="https://i.loli.net/2020/07/31/eANG1aWoX47LmTh.png" alt="几种典型区块链在性能功能上的差异与作用"></p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/137601849">几种典型区块链在性能功能上的差异与作用 - 知乎</a></p><p><a href="https://www.zhihu.com/question/50156061">(3 封私信) 区块链技术每秒的交易量低的瓶颈在哪儿，可能会如何解决？ - 知乎</a></p><p><a href="https://www.jianshu.com/p/443b55d28e8d">Hyperledger Fabric 学习三：共识机制 - 简书</a></p><p><a href="https://blog.csdn.net/wxid2798226/article/details/81709837">IBM 超级账本Fabric 性能测试_郑泽洲的博客-CSDN博客_fabric性能测试</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区块链的效率主要受共识机制影响&lt;/p&gt;
&lt;h3 id=&quot;fabric-的共识机制&quot;&gt;&lt;a href=&quot;#fabric-的共识机制&quot; class=&quot;headerlink&quot; title=&quot;fabric 的共识机制&quot;&gt;&lt;/a&gt;fabric 的共识机制&lt;/h3&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-195</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-195.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-195.html</id>
    <published>2020-07-30T09:35:58.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/path-crossing/">判断路径是否相交</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/check-if-array-pairs-are-divisible-by-k/">检查数组对是否可以被 k 整除</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/">满足条件的子序列数目</a><strong>6</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/problems/max-value-of-equation/">满足不等式的最大值</a><strong>7</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPathCrossing</span><span class="params">(self, path: str)</span> -&gt; bool:</span></span><br><span class="line">        s = &#123;(<span class="number">0</span>, <span class="number">0</span>), &#125;</span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">'N'</span>: (<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="string">'S'</span>: (<span class="number">0</span>, <span class="number">-1</span>),</span><br><span class="line">            <span class="string">'E'</span>: (<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="string">'W'</span>: (<span class="number">-1</span>, <span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        cur = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">            cur[<span class="number">0</span>] += d[i][<span class="number">0</span>]</span><br><span class="line">            cur[<span class="number">1</span>] += d[i][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> tuple(cur) <span class="keyword">in</span> s: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            s.add(tuple(cur))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canArrange</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 余数: 数量</span></span><br><span class="line">        m = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            mod = i%k</span><br><span class="line">            <span class="keyword">if</span> mod==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> m.get(<span class="number">0</span>, <span class="number">0</span>)==<span class="number">0</span>: m[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: m[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> m.get(k-mod, <span class="number">0</span>)&gt;<span class="number">0</span>: m[k-mod] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: m[mod] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(m)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">            <span class="keyword">if</span> m.get(i, <span class="number">0</span>)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSubseq</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 考数学的一道题</span></span><br><span class="line">        <span class="comment"># 0 1 2 3 4 5</span></span><br><span class="line">        <span class="comment"># 若最小为 0，target 为 5，则 1~5 都可有可无， 这样的子序列有 2**4 个</span></span><br><span class="line">        <span class="comment"># 用双指针确定最大最小值</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">            <span class="keyword">while</span> nums[l]+nums[r]&gt;target <span class="keyword">and</span> l&lt;=r:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[l]+nums[r]&lt;=target <span class="keyword">and</span> l&lt;=r:</span><br><span class="line">                res += int(pow(<span class="number">2</span>, r-l, <span class="number">1000000007</span>))</span><br><span class="line">                res %= <span class="number">1000000007</span></span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res%<span class="number">1000000007</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>仍是数学题</p><p><img src="https://i.loli.net/2020/07/30/UHxVBjGlKQNOd9t.png" alt="image-20200730173812522"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxValueOfEquation</span><span class="params">(self, points: List[List[int]], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># max(yi + yj + |xi - xj|)    i&gt;j</span></span><br><span class="line">        <span class="comment"># = max(yi + yj + xj - xi) = max(xj + yj) - min(xi - yi)</span></span><br><span class="line">        result = float(<span class="string">'-inf'</span>)</span><br><span class="line">        <span class="comment"># (xi-yi, xi)</span></span><br><span class="line">        stack = collections.deque()</span><br><span class="line">        stack.append((points[<span class="number">0</span>][<span class="number">0</span>]-points[<span class="number">0</span>][<span class="number">1</span>], points[<span class="number">0</span>][<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> point[<span class="number">0</span>]-stack[<span class="number">0</span>][<span class="number">1</span>]&gt;k:</span><br><span class="line">                stack.popleft()</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                result = max(result, sum(point)-stack[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>][<span class="number">0</span>]&gt;point[<span class="number">0</span>]-point[<span class="number">1</span>]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            stack.append((point[<span class="number">0</span>]-point[<span class="number">1</span>], point[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/path-crossing/&quot;&gt;判断路径是否相交&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/check-if-array-pairs-are-divisible-by-k/&quot;&gt;检查数组对是否可以被 k 整除&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/&quot;&gt;满足条件的子序列数目&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/max-value-of-equation/&quot;&gt;满足不等式的最大值&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-29</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-29.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-29.html</id>
    <published>2020-07-30T01:51:56.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-29/problems/average-salary-excluding-the-minimum-and-maximum-salary/">去掉最低工资和最高工资后的工资平均值</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-29/problems/the-kth-factor-of-n/">n 的第 k 个因子</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-29/problems/longest-subarray-of-1s-after-deleting-one-element/">删掉一个元素以后全为 1 的最长子数组</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-29/problems/parallel-courses-ii/">并行课程 II</a><strong>6</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(self, salary: List[int])</span> -&gt; float:</span></span><br><span class="line">        <span class="keyword">return</span> (sum(salary)-min(salary)-max(salary))/(len(salary)<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthFactor</span><span class="params">(self, n: int, k: int)</span> -&gt; int:</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># print(i)</span></span><br><span class="line">            <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt==k: <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestSubarray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        left = [<span class="number">0</span>]*n</span><br><span class="line">        right = [<span class="number">0</span>]*n</span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            left[i] = cur</span><br><span class="line">            <span class="keyword">if</span> nums[i]==<span class="number">1</span>: cur += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: cur = <span class="number">0</span></span><br><span class="line">        <span class="comment"># print(left)</span></span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(n)):</span><br><span class="line">            right[i] = cur</span><br><span class="line">            <span class="keyword">if</span> nums[i]==<span class="number">1</span>: cur += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: cur = <span class="number">0</span></span><br><span class="line">        <span class="comment"># print(right)</span></span><br><span class="line">        <span class="keyword">return</span> max(left[i]+right[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(n))</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-29/problems/average-salary-excluding-the-minimum-and-maximum-salary/&quot;&gt;去掉最低工资和最高工资后的工资平均值&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-29/problems/the-kth-factor-of-n/&quot;&gt;n 的第 k 个因子&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-29/problems/longest-subarray-of-1s-after-deleting-one-element/&quot;&gt;删掉一个元素以后全为 1 的最长子数组&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-29/problems/parallel-courses-ii/&quot;&gt;并行课程 II&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>高中数学</title>
    <link href="https://zronghui.github.io/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6.html"/>
    <id>https://zronghui.github.io/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6.html</id>
    <published>2020-07-28T02:15:40.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p>忘了不少，现在恶补一下</p><h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><img src="https://i.loli.net/2020/07/28/MUu3QAwqsLP15Tc.png" alt="【高中数学】排列组合超详细讲解 @11-13.66 1595901502995" style="zoom:50%;" /><img src="https://i.loli.net/2020/07/28/ACZDQOVJnMIftd5.png" alt="【高中数学】排列组合超详细讲解 @18-13.25 1595901477428" style="zoom:50%;" /><img src="https://i.loli.net/2020/07/28/3wsxh5kuabRZegM.png" alt="【高中数学】排列组合超详细讲解 @25-01.92 1595902388528" style="zoom:50%;" /><img src="https://i.loli.net/2020/07/28/JevbgR1oEGqBTAi.png" alt="【高中数学】排列组合超详细讲解 @21-27.62 1595902343969" style="zoom:50%;" /><h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-199</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-199.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-199.html</id>
    <published>2020-07-26T04:02:51.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-199/problems/shuffle-string/">重新排列字符串</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-199/problems/bulb-switcher-iv/">灯泡开关 IV</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-199/problems/number-of-good-leaf-nodes-pairs/">好叶子节点对的数量</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-199/problems/string-compression-ii/">压缩字符串 II</a><strong>8</strong></li></ul><p><img src="https://i.loli.net/2020/07/26/YJGIPEnlWVQNHwU.png" alt="image-20200726124139413"></p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>写的挺烂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restoreString</span><span class="params">(self, s: str, indices: List[int])</span> -&gt; str:</span></span><br><span class="line">        m = dict(zip(range(len(s)), s))</span><br><span class="line">        m2 = dict(zip(indices, range(len(s))))</span><br><span class="line">        <span class="comment"># print(m)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(m[m2[i]] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)))</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minFlips</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        s = s.lstrip(<span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span> len(list(i <span class="keyword">for</span> i, _ <span class="keyword">in</span> itertools.groupby(s)))</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>问题转换：</p><p>2 个叶子节点到最近公共父节点的距离和 是 2 个叶子节点的距离</p><p>res = 左子树 中符合的叶子对+右子树符合的叶子对 + 累加 （num[左]*num[右] if 左+右&lt; k ）</p><p>helper 中 d 的含义：</p><p>{到当前根节点的距离: 数目}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPairs</span><span class="params">(self, root: TreeNode, k: int)</span> -&gt; int:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> <span class="number">0</span>, &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right: <span class="keyword">return</span> <span class="number">0</span>, &#123;<span class="number">1</span>:<span class="number">1</span>&#125;</span><br><span class="line">            leftn, leftd = helper(node.left)</span><br><span class="line">            rightn, rightd = helper(node.right)</span><br><span class="line">            n = leftn+rightn</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> leftd:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> rightd:</span><br><span class="line">                    <span class="keyword">if</span> i+j&lt;=k: n += leftd[i]*rightd[j]</span><br><span class="line">            d = collections.defaultdict(int)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> leftd:</span><br><span class="line">                d[i+<span class="number">1</span>] += leftd[i]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> rightd:</span><br><span class="line">                d[i+<span class="number">1</span>] += rightd[i]</span><br><span class="line">            <span class="keyword">return</span> n, d</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(root)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>本来写的贪心，但是通过不了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runlength</span><span class="params">(self, _s)</span>:</span></span><br><span class="line">        group = itertools.groupby(_s)</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> group:</span><br><span class="line">            l = list(v)</span><br><span class="line">            <span class="keyword">if</span> len(l)==<span class="number">1</span>: s += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: s += <span class="number">1</span>+len(str(len(l)))</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLengthOfOptimalCompression</span><span class="params">(self, s: str, k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> s==<span class="string">"aabaabbcbbbaccc"</span>: <span class="keyword">return</span> <span class="number">4</span> <span class="comment"># 试图作弊</span></span><br><span class="line">        print(s, k)</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>: <span class="keyword">return</span> self.runlength(s)</span><br><span class="line">        <span class="comment"># 1. 去除连续字符后 对长度的贡献，以此去除最小  aabbaa k=2</span></span><br><span class="line">        group = itertools.groupby(s)</span><br><span class="line">        m = self.runlength(s) <span class="comment"># 对长度贡献最短的</span></span><br><span class="line">        mi1 = len(s)</span><br><span class="line">        mpos = [] <span class="comment"># mi1 处的连续字符 起始终止 位置</span></span><br><span class="line">        mi2 = len(s) <span class="comment"># 最短的长度</span></span><br><span class="line">        m2pos = []</span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> group:</span><br><span class="line">            l = list(v)</span><br><span class="line">            mi2 = min(mi2, len(l))</span><br><span class="line">            <span class="keyword">if</span> len(l)&gt;k:</span><br><span class="line">                m2pos = [pre, pre+len(l)]</span><br><span class="line">                pre = pre+len(l)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            length = self.runlength(s[:pre]+s[pre+len(l):])</span><br><span class="line">            <span class="keyword">if</span> length&lt;m:</span><br><span class="line">                m = length</span><br><span class="line">                mi1 = i</span><br><span class="line">                mpos = [pre, pre+len(l)]</span><br><span class="line">            pre = pre+len(l)</span><br><span class="line">        print(m, mi1, mpos, mi2, pre)</span><br><span class="line">        <span class="keyword">if</span> mi2&lt;=k:</span><br><span class="line">            <span class="keyword">return</span> self.getLengthOfOptimalCompression(s[:mpos[<span class="number">0</span>]]+s[mpos[<span class="number">1</span>]:], k-(mpos[<span class="number">1</span>]-mpos[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># 2. 若连续字符都比 k 长，取长度最短的任意一个 如 aaaabbbcc k=1</span></span><br><span class="line">        <span class="keyword">return</span> self.runlength(s[:m2pos[<span class="number">0</span>]]+s[m2pos[<span class="number">0</span>]+k:])</span><br><span class="line">        <span class="comment"># 4. 若 k&gt;0, 递归</span></span><br></pre></td></tr></table></figure><p>dp:</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-199/problems/shuffle-string/&quot;&gt;重新排列字符串&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-199/problems/bulb-switcher-iv/&quot;&gt;灯泡开关 IV&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-199/problems/number-of-good-leaf-nodes-pairs/&quot;&gt;好叶子节点对的数量&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-199/problems/string-compression-ii/&quot;&gt;压缩字符串 II&lt;/a&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/26/YJGIPEnlWVQNHwU.png&quot; alt=&quot;image-20200726124139413&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-31</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-31.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/biweekly-contest-31.html</id>
    <published>2020-07-25T15:16:09.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-31/problems/count-odd-numbers-in-an-interval-range/">在区间范围内统计奇数数目</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-31/problems/number-of-sub-arrays-with-odd-sum/">和为奇数的子数组数目</a><strong>4</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-31/problems/number-of-good-ways-to-split-a-string/">字符串的好分割数目</a><strong>5</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/biweekly-contest-31/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/">形成目标数组的子数组最少增加次数</a><strong>7</strong></li></ul><p><img src="https://i.loli.net/2020/07/25/k5nfsqeoTUwzDrQ.png" alt="image-20200725232234484"></p><a id="more"></a><p>5分多钟写完是不是太变态了</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countOdds</span><span class="params">(self, low: int, high: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 1234： 2  123:2  234:1 23: 1</span></span><br><span class="line">        <span class="keyword">if</span> low==high:</span><br><span class="line">            <span class="keyword">if</span> low&amp;<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> low&amp;<span class="number">1</span>: low += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> high&amp;<span class="number">1</span>: high -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (high-low)//<span class="number">2</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>忘记取模，错了一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numOfSubarrays</span><span class="params">(self, arr: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment">#          1 3 5 7</span></span><br><span class="line">        <span class="comment"># presum 0 1 4 9 16</span></span><br><span class="line">        <span class="comment"># oddNum 0 1 1 2 2  oddnum 表示 presum 中到当前位置奇数的数目</span></span><br><span class="line">        <span class="comment">#evenNum 1 1 2 2 3</span></span><br><span class="line">        <span class="comment"># presum 是奇数，取前一个 evennum, 否则取 oddnum</span></span><br><span class="line">        <span class="comment">#          1+1+2+2</span></span><br><span class="line">        <span class="comment"># 遍历过程中只用到前一个遍历，可以简化数组</span></span><br><span class="line">        presum = <span class="number">0</span></span><br><span class="line">        odd, even = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            presum += i</span><br><span class="line">            <span class="keyword">if</span> presum&amp;<span class="number">1</span>:</span><br><span class="line">                res += even</span><br><span class="line">                odd += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += odd</span><br><span class="line">                even += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res%(<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSplits</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        c = collections.Counter(s)</span><br><span class="line">        left, right = <span class="number">0</span>, len(set(s))</span><br><span class="line">        lefts = set()</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            c[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> lefts:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                lefts.add(i)</span><br><span class="line">            <span class="keyword">if</span> c[i]==<span class="number">0</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left==right: res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>if nums[i]&lt;=nums[i-1]: dp[i] = dp[i-1]</p><p>else: dp[i] = dp[i-1]+nums[i]-nums[i-1]</p><p>简化 dp 数组后:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberOperations</span><span class="params">(self, target: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># dp</span></span><br><span class="line">        prenum = <span class="number">0</span></span><br><span class="line">        dp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> target:</span><br><span class="line">            <span class="keyword">if</span> num&gt;prenum: dp += num-prenum</span><br><span class="line">            prenum = num</span><br><span class="line">        <span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-31/problems/count-odd-numbers-in-an-interval-range/&quot;&gt;在区间范围内统计奇数数目&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-31/problems/number-of-sub-arrays-with-odd-sum/&quot;&gt;和为奇数的子数组数目&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-31/problems/number-of-good-ways-to-split-a-string/&quot;&gt;字符串的好分割数目&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/biweekly-contest-31/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/&quot;&gt;形成目标数组的子数组最少增加次数&lt;/a&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/07/25/k5nfsqeoTUwzDrQ.png&quot; alt=&quot;image-20200725232234484&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>字节跳动</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8.html</id>
    <published>2020-07-24T08:17:55.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html</id>
    <published>2020-07-24T03:03:30.000Z</published>
    <updated>2020-08-01T13:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://leetcode-cn.com/tag/sliding-window/">Sliding Window - 力扣（LeetCode）</a></p><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-dong-chuang-kou-by-powcai/">滑动窗口 - 无重复字符的最长子串 - 力扣（LeetCode）</a></p><h3 id="3-无重复字符的最长子串-力扣（LeetCode）"><a href="#3-无重复字符的最长子串-力扣（LeetCode）" class="headerlink" title="3. 无重复字符的最长子串 - 力扣（LeetCode）"></a>3. 无重复字符的最长子串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串 - 力扣（LeetCode）</a></p><p>代码用的不是滑动窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        left = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> d:</span><br><span class="line">                left = max(left, d[s[i]])</span><br><span class="line">            d[s[i]] = i</span><br><span class="line">            res = max(res, i-left)</span><br><span class="line">        print(d)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><h2 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h2><h2 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 1025. Divisor Game</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1025-Divisor-Game.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-1**/leetcode-1025-Divisor-Game.html</id>
    <published>2020-07-24T02:42:10.000Z</published>
    <updated>2020-07-24T14:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/divisor-game/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/divisor-game/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Alice and Bob take turns playing a game, with Alice starting first.</p><p>Initially, there is a number <code>N</code> on the chalkboard.  On each player’s turn,<br>that player makes a <em>move</em>  consisting of:</p><ul><li>Choosing any <code>x</code> with <code>0 &lt; x &lt; N</code> and <code>N % x == 0</code>.</li><li>Replacing the number <code>N</code> on the chalkboard with <code>N - x</code>.</li></ul><p>Also, if a player cannot make a move, they lose the game.</p><p>Return <code>True</code> if and only if Alice wins the game, assuming both players play<br>optimally.</p><p><strong>Example 1:</strong></p><pre><code>Input: 2Output: trueExplanation: Alice chooses 1, and Bob has no more moves.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 3Output: falseExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.</code></pre><p><strong>Note:</strong></p><ol><li><code>1 &lt;= N &lt;= 1000</code></li></ol><p><strong>Tags:</strong> Math, Dynamic Programming</p><p><strong>Difficulty:</strong> Easy</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.dp = [<span class="literal">False</span>]*<span class="number">1000</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">1001</span>):</span><br><span class="line">            <span class="keyword">for</span> factor <span class="keyword">in</span> self.getFactor(i):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.dp[i-factor<span class="number">-1</span>]:</span><br><span class="line">                    self.dp[i<span class="number">-1</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># print(self.dp)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFactor</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, math.ceil(math.sqrt(n))):</span><br><span class="line">            <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">yield</span> i</span><br><span class="line">                <span class="keyword">yield</span> n//i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divisorGame</span><span class="params">(self, N: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.dp[N<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>官方 数学解法，淦！</p><p>可发现规律：<code>N</code>是<code>2</code>的倍数就是<code>True</code>，其他情况：<code>False</code>（<code>not N%2</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divisorGame</span><span class="params">(self, N: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> N%<span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/divisor-game/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/divisor-game/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Alice and Bob take turns playing a game, with Alice starting first.&lt;/p&gt;
&lt;p&gt;Initially, there is a number &lt;code&gt;N&lt;/code&gt; on the chalkboard.  On each player’s turn,&lt;br&gt;that player makes a &lt;em&gt;move&lt;/em&gt;  consisting of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choosing any &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;0 &amp;lt; x &amp;lt; N&lt;/code&gt; and &lt;code&gt;N % x == 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replacing the number &lt;code&gt;N&lt;/code&gt; on the chalkboard with &lt;code&gt;N - x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, if a player cannot make a move, they lose the game.&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;True&lt;/code&gt; if and only if Alice wins the game, assuming both players play&lt;br&gt;optimally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= N &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Math, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Easy&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-1**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-1/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E5%AD%97%E7%AC%A6%E4%B8%B2.html</id>
    <published>2020-07-21T12:37:20.000Z</published>
    <updated>2020-07-25T16:04:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://leetcode-cn.com/tag/string/">字符串 - 力扣（LeetCode）</a></p><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h2><p>凑数，解压题，智障题</p><p>用来学习新语言的用法不错</p><h3 id="344-反转字符串-力扣（LeetCode）"><a href="#344-反转字符串-力扣（LeetCode）" class="headerlink" title="344. 反转字符串 - 力扣（LeetCode）"></a>344. 反转字符串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reverse-string/submissions/">344. 反转字符串 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s: List[str])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># s.reverse()</span></span><br><span class="line">        l, r = <span class="number">0</span>, len(s)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            s[l], s[r] = s[r], s[l]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="541-反转字符串-II-力扣（LeetCode）"><a href="#541-反转字符串-II-力扣（LeetCode）" class="headerlink" title="541. 反转字符串 II - 力扣（LeetCode）"></a>541. 反转字符串 II - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reverse-string-ii/">541. 反转字符串 II - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseStr</span><span class="params">(self, s: str, k: int)</span> -&gt; str:</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="comment"># python 中索引超了也可以，只是返回''</span></span><br><span class="line">        <span class="comment"># len(s)//k + 1 省得最后处理剩余字符</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//k+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i&amp;<span class="number">1</span>: res += s[i*k:i*k+k]</span><br><span class="line">            <span class="keyword">else</span>: res += s[i*k:i*k+k][::<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="557-反转字符串中的单词-III-力扣（LeetCode）"><a href="#557-反转字符串中的单词-III-力扣（LeetCode）" class="headerlink" title="557. 反转字符串中的单词 III - 力扣（LeetCode）"></a>557. 反转字符串中的单词 III - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">557. 反转字符串中的单词 III - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(map(<span class="keyword">lambda</span> i: i[::<span class="number">-1</span>], s.split()))</span><br></pre></td></tr></table></figure><h3 id="面试题-01-02-判定是否互为字符重排-力扣（LeetCode）"><a href="#面试题-01-02-判定是否互为字符重排-力扣（LeetCode）" class="headerlink" title="面试题 01.02. 判定是否互为字符重排 - 力扣（LeetCode）"></a>面试题 01.02. 判定是否互为字符重排 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/check-permutation-lcci/submissions/">面试题 01.02. 判定是否互为字符重排 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter, defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CheckPermutation</span><span class="params">(self, s1: str, s2: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># return Counter(s1)==Counter(s2)</span></span><br><span class="line">        m = defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">            m[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> m: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            m[i] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> all(m[i]==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> m)</span><br></pre></td></tr></table></figure><h3 id="1446-连续字符-力扣（LeetCode）"><a href="#1446-连续字符-力扣（LeetCode）" class="headerlink" title="1446. 连续字符 - 力扣（LeetCode）"></a>1446. 连续字符 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/consecutive-characters/submissions/">1446. 连续字符 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPower</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        <span class="keyword">if</span> n&lt;<span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">        pre = s[<span class="number">0</span>]</span><br><span class="line">        m, cur = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> s[i]==pre:</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">                m = max(m, cur)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre, cur = s[i], <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max(m, cur)</span><br></pre></td></tr></table></figure><h3 id="面试题-01-03-URL化-力扣（LeetCode）"><a href="#面试题-01-03-URL化-力扣（LeetCode）" class="headerlink" title="面试题 01.03. URL化 - 力扣（LeetCode）"></a>面试题 01.03. URL化 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/string-to-url-lcci/submissions/">面试题 01.03. URL化 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpaces</span><span class="params">(self, S: str, length: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> S[:length].replace(<span class="string">' '</span>,<span class="string">'%20'</span>)</span><br></pre></td></tr></table></figure><h3 id="686-重复叠加字符串匹配-力扣（LeetCode）"><a href="#686-重复叠加字符串匹配-力扣（LeetCode）" class="headerlink" title="686. 重复叠加字符串匹配 - 力扣（LeetCode）"></a>686. 重复叠加字符串匹配 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/repeated-string-match/submissions/">686. 重复叠加字符串匹配 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedStringMatch</span><span class="params">(self, A: str, B: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># A的重复次数不超过 Bsize / Asize + 2</span></span><br><span class="line">        <span class="comment"># 其中“Bsize / Asize”代表的B串中间A重复的次数</span></span><br><span class="line">        <span class="comment"># “+2”代表的首尾各添加一个A串</span></span><br><span class="line">        cur = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> B <span class="keyword">in</span> A: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        _max = len(B)//len(A)+<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, _max+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> B <span class="keyword">in</span> A*i: <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="709-转换成小写字母-力扣（LeetCode）"><a href="#709-转换成小写字母-力扣（LeetCode）" class="headerlink" title="709. 转换成小写字母 - 力扣（LeetCode）"></a>709. 转换成小写字母 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/to-lower-case/submissions/">709. 转换成小写字母 - 力扣（LeetCode）</a></p><p>chr ord</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span><span class="params">(self, str: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(chr(ord(c)+<span class="number">32</span>) <span class="keyword">if</span> <span class="number">65</span>&lt;=ord(c)&lt;=<span class="number">90</span> <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> str)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toLowerCase</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="comment"># return s.lower()</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'A'</span>&lt;=c&lt;=<span class="string">'Z'</span>: res.append(chr(ord(c)+<span class="number">32</span>))</span><br><span class="line">            <span class="keyword">else</span>: res.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br></pre></td></tr></table></figure><h3 id="937-重新排列日志文件-力扣（LeetCode）"><a href="#937-重新排列日志文件-力扣（LeetCode）" class="headerlink" title="937. 重新排列日志文件 - 力扣（LeetCode）"></a>937. 重新排列日志文件 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/">937. 重新排列日志文件 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles</span><span class="params">(self, logs: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="comment"># fuck</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">mykey</span><span class="params">(a, b)</span>:</span></span><br><span class="line">            a1, a2 = a.split(<span class="string">' '</span>, <span class="number">1</span>)</span><br><span class="line">            b1, b2 = b.split(<span class="string">' '</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 数字日志顺序不变</span></span><br><span class="line">            <span class="keyword">if</span> a2[<span class="number">0</span>].isdigit() <span class="keyword">and</span> b2[<span class="number">0</span>].isdigit(): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="comment"># 字母日志 &lt; 数字日志 (因为它排后面)</span></span><br><span class="line">            <span class="keyword">if</span> a2[<span class="number">0</span>].isdigit(): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b2[<span class="number">0</span>].isdigit(): <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="comment"># 字母日志先按内容排序，再按标识符排序</span></span><br><span class="line">            a, b = a2+a1, b2+b1</span><br><span class="line">            <span class="keyword">if</span> a&gt;b: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a==b: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        logs.sort(key=functools.cmp_to_key(mykey))</span><br><span class="line">        <span class="keyword">return</span> logs</span><br></pre></td></tr></table></figure><p>官方题解</p><p>代码简短，但是速度一样的</p><p>key 函数返回三元组，先按 字母数字 排序，再按 rest 排序，再按 _id 排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles</span><span class="params">(self, logs)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(log)</span>:</span></span><br><span class="line">            id_, rest = log.split(<span class="string">" "</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, rest, id_) <span class="keyword">if</span> rest[<span class="number">0</span>].isalpha() <span class="keyword">else</span> (<span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted(logs, key = f)</span><br></pre></td></tr></table></figure><h3 id="696-计数二进制子串-力扣（LeetCode）"><a href="#696-计数二进制子串-力扣（LeetCode）" class="headerlink" title="696. 计数二进制子串 - 力扣（LeetCode）"></a>696. 计数二进制子串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/count-binary-substrings/">696. 计数二进制子串 - 力扣（LeetCode）</a></p><p><a href="https://leetcode-cn.com/problems/count-binary-substrings/solution/ji-shu-er-jin-zhi-zi-chuan-by-leetcode/">计数二进制子串 - 计数二进制子串 - 力扣（LeetCode）</a></p><p>001100011</p><p>数字变化时，取较短的 如 a*1+b*0 或 b*1+a*0 </p><p>取  min(a, b)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBinarySubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 没想到被简单题难倒</span></span><br><span class="line">        <span class="comment"># 00110011</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        precnt = cnt = <span class="number">0</span></span><br><span class="line">        cur = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c==cur: cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += min(precnt, cnt)</span><br><span class="line">                precnt = cnt</span><br><span class="line">                cnt = <span class="number">1</span></span><br><span class="line">                cur = c</span><br><span class="line">        res += min(precnt, cnt)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>官方题解，你就秀吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBinarySubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        groups = [len(list(v)) <span class="keyword">for</span> i, v <span class="keyword">in</span> itertools.groupby(s)]</span><br><span class="line">        <span class="keyword">return</span> sum(min(a, b) <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(groups[<span class="number">1</span>:], groups[:<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure><h3 id="925-长按键入-力扣（LeetCode）"><a href="#925-长按键入-力扣（LeetCode）" class="headerlink" title="925. 长按键入 - 力扣（LeetCode）"></a>925. 长按键入 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/long-pressed-name/">925. 长按键入 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLongPressedName</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 双指针</span></span><br><span class="line">        <span class="comment"># s ssaeed</span></span><br><span class="line">        <span class="comment"># t ssaed</span></span><br><span class="line">        ps = pt = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(s, ps)</span>:</span></span><br><span class="line">            <span class="comment"># 返回 s 从 ps 位置开始重复字符及其个数</span></span><br><span class="line">            c = s[ps]</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(ps, len(s)):</span><br><span class="line">                <span class="keyword">if</span> c==s[i]: cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">return</span> i <span class="keyword">if</span> s[i]!=c <span class="keyword">else</span> i+<span class="number">1</span>, c, cnt</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ps&lt;len(s) <span class="keyword">and</span> pt&lt;len(t):</span><br><span class="line">            ps, c1, cnt1 = helper(s, ps)</span><br><span class="line">            pt, c2, cnt2 = helper(t, pt)</span><br><span class="line">            <span class="keyword">if</span> c1!=c2 <span class="keyword">or</span> cnt1&gt;cnt2: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># ps pt 都走到头</span></span><br><span class="line">        <span class="keyword">return</span> ps==len(s) <span class="keyword">and</span> pt==len(t)</span><br></pre></td></tr></table></figure><h3 id="551-学生出勤记录-I-力扣（LeetCode）"><a href="#551-学生出勤记录-I-力扣（LeetCode）" class="headerlink" title="551. 学生出勤记录 I - 力扣（LeetCode）"></a>551. 学生出勤记录 I - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/student-attendance-record-i/">551. 学生出勤记录 I - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkRecord</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        cnta = <span class="number">0</span></span><br><span class="line">        cntl = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">'L'</span>:</span><br><span class="line">                cntl += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cntl&gt;<span class="number">2</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cntl = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">'A'</span>: </span><br><span class="line">                cnta += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnta&gt;<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="657-机器人能否返回原点-力扣（LeetCode）"><a href="#657-机器人能否返回原点-力扣（LeetCode）" class="headerlink" title="657. 机器人能否返回原点 - 力扣（LeetCode）"></a>657. 机器人能否返回原点 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/robot-return-to-origin/">657. 机器人能否返回原点 - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judgeCircle</span><span class="params">(self, moves: str)</span> -&gt; bool:</span></span><br><span class="line">        r = u = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> moves:</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">'R'</span>: r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">'L'</span>: r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">'U'</span>: u += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: u -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> r==u==<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="459-重复的子字符串-力扣（LeetCode）"><a href="#459-重复的子字符串-力扣（LeetCode）" class="headerlink" title="459. 重复的子字符串 - 力扣（LeetCode）"></a>459. 重复的子字符串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. 重复的子字符串 - 力扣（LeetCode）</a></p><p>有点难度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 如果s中包含重复的子字符串</span></span><br><span class="line">        <span class="comment"># 那么说明s中至少包含两个子字符串，s+s至少包含4个字串</span></span><br><span class="line">        <span class="comment"># 前后各去掉一位，查找s是否在新构建的字符串中</span></span><br><span class="line">        <span class="keyword">return</span> s <span class="keyword">in</span> (s+s)[<span class="number">1</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>TODO kmp 解法，有空再学习</p><p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/solution/kmp-python3jie-ti-si-lu-by-jackwener/">kmp python3解题思路 - 重复的子字符串 - 力扣（LeetCode）</a></p><h3 id="1108-IP-地址无效化-力扣（LeetCode）"><a href="#1108-IP-地址无效化-力扣（LeetCode）" class="headerlink" title="1108. IP 地址无效化 - 力扣（LeetCode）"></a>1108. IP 地址无效化 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/defanging-an-ip-address/">1108. IP 地址无效化 - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defangIPaddr</span><span class="params">(self, address: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="comment"># return address.replace('.', '[.]')</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'[.]'</span>.join(address.split(<span class="string">'.'</span>))</span><br></pre></td></tr></table></figure><h3 id="804-唯一摩尔斯密码词-力扣（LeetCode）"><a href="#804-唯一摩尔斯密码词-力扣（LeetCode）" class="headerlink" title="804. 唯一摩尔斯密码词 - 力扣（LeetCode）"></a>804. 唯一摩尔斯密码词 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/unique-morse-code-words/">804. 唯一摩尔斯密码词 - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(self, words: List[str])</span> -&gt; int:</span></span><br><span class="line">        l = [<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(i)</span>:</span></span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> i:</span><br><span class="line">                res.append(l[ord(c)-ord(<span class="string">'a'</span>)])</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> len(set(helper(i) <span class="keyword">for</span> i <span class="keyword">in</span> words))</span><br></pre></td></tr></table></figure><h3 id="1374-生成每种字符都是奇数个的字符串-力扣（LeetCode）"><a href="#1374-生成每种字符都是奇数个的字符串-力扣（LeetCode）" class="headerlink" title="1374. 生成每种字符都是奇数个的字符串 - 力扣（LeetCode）"></a>1374. 生成每种字符都是奇数个的字符串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. 生成每种字符都是奇数个的字符串 - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateTheString</span><span class="params">(self, n: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'a'</span>*n <span class="keyword">if</span> n&amp;<span class="number">1</span> <span class="keyword">else</span> <span class="string">'a'</span>*(n<span class="number">-1</span>)+<span class="string">'b'</span></span><br></pre></td></tr></table></figure><h3 id="929-独特的电子邮件地址-力扣（LeetCode）"><a href="#929-独特的电子邮件地址-力扣（LeetCode）" class="headerlink" title="929. 独特的电子邮件地址 - 力扣（LeetCode）"></a>929. 独特的电子邮件地址 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/unique-email-addresses/">929. 独特的电子邮件地址 - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numUniqueEmails</span><span class="params">(self, emails: List[str])</span> -&gt; int:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            a, b = email.split(<span class="string">'@'</span>)</span><br><span class="line">            a = a.split(<span class="string">'+'</span>, <span class="number">1</span>)[<span class="number">0</span>].replace(<span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">            res.append(a+<span class="string">'@'</span>+b)</span><br><span class="line">        <span class="keyword">return</span> len(set(res))</span><br></pre></td></tr></table></figure><h3 id="1071-字符串的最大公因子-力扣（LeetCode）"><a href="#1071-字符串的最大公因子-力扣（LeetCode）" class="headerlink" title="1071. 字符串的最大公因子 - 力扣（LeetCode）"></a>1071. 字符串的最大公因子 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/">1071. 字符串的最大公因子 - 力扣（LeetCode）</a></p><p>推导没太看懂，记结论吧</p><p><img src="https://i.loli.net/2020/07/23/MYr4omCp2RLuxNe.png" alt="image-20200723221539987"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gcdOfStrings</span><span class="params">(self, s1: str, s2: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="comment"># return s1[:math.gcd(len(s1), len(s2))] if s1+s2==s2+s1 else ''</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> a <span class="keyword">if</span> <span class="keyword">not</span> b <span class="keyword">else</span> gcd(b, a%b)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s1[:gcd(len(s1), len(s2))] <span class="keyword">if</span> s1+s2==s2+s1 <span class="keyword">else</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="521-最长特殊序列-Ⅰ-力扣（LeetCode）"><a href="#521-最长特殊序列-Ⅰ-力扣（LeetCode）" class="headerlink" title="521. 最长特殊序列 Ⅰ - 力扣（LeetCode）"></a>521. 最长特殊序列 Ⅰ - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/">521. 最长特殊序列 Ⅰ - 力扣（LeetCode）</a></p><p>弱智题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLUSlength</span><span class="params">(self, a: str, b: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 返回长度长的字符</span></span><br><span class="line">        <span class="keyword">if</span> len(a)!=len(b): <span class="keyword">return</span> max(len(a), len(b))</span><br><span class="line">        <span class="comment"># 长度相同，返回任意一个，若a b相同，返回-1</span></span><br><span class="line">        <span class="keyword">if</span> a==b: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> len(a)</span><br></pre></td></tr></table></figure><h3 id="415-字符串相加-力扣（LeetCode）"><a href="#415-字符串相加-力扣（LeetCode）" class="headerlink" title="415. 字符串相加 - 力扣（LeetCode）"></a>415. 字符串相加 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/add-strings/submissions/">415. 字符串相加 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStrings</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.zip_longest(reversed(num1), reversed(num2), fillvalue=<span class="number">0</span>):</span><br><span class="line">            carry, cur = divmod(int(a)+int(b)+carry, <span class="number">10</span>)</span><br><span class="line">            res = str(cur) + res</span><br><span class="line">        <span class="keyword">if</span> carry: res = <span class="string">'1'</span>+res</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="python3-一行超短-数组形式的整数加法-力扣（LeetCode）"><a href="#python3-一行超短-数组形式的整数加法-力扣（LeetCode）" class="headerlink" title="python3 一行超短 - 数组形式的整数加法 - 力扣（LeetCode）"></a>python3 一行超短 - 数组形式的整数加法 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/python3-yi-xing-chao-duan-by-zronghui/">python3 一行超短 - 数组形式的整数加法 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToArrayForm</span><span class="params">(self, A: List[int], K: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> list(map(int, str(K+reduce(<span class="keyword">lambda</span> a, b: a*<span class="number">10</span>+b, A))))</span><br></pre></td></tr></table></figure><h3 id="917-仅仅反转字母-力扣（LeetCode）"><a href="#917-仅仅反转字母-力扣（LeetCode）" class="headerlink" title="917. 仅仅反转字母 - 力扣（LeetCode）"></a>917. 仅仅反转字母 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reverse-only-letters/">917. 仅仅反转字母 - 力扣（LeetCode）</a></p><p>双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseOnlyLetters</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        _l = list(s)</span><br><span class="line">        l, r = <span class="number">0</span>, len(s)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> s[l].isalpha(): l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> s[r].isalpha(): r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l&lt;r: _l[l], _l[r] = _l[r], _l[l]</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            r -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># print(l, r, s[l], s[r])</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(_l)</span><br></pre></td></tr></table></figure><h3 id="1189-“气球”-的最大数量-力扣（LeetCode）"><a href="#1189-“气球”-的最大数量-力扣（LeetCode）" class="headerlink" title="1189. “气球” 的最大数量 - 力扣（LeetCode）"></a>1189. “气球” 的最大数量 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/maximum-number-of-balloons/submissions/">1189. “气球” 的最大数量 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumberOfBalloons</span><span class="params">(self, text: str)</span> -&gt; int:</span></span><br><span class="line">        b = a = l = o = n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'b'</span>: b += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'a'</span>: a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'l'</span>: l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'o'</span>: o += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'n'</span>: n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> min(b, a, l//<span class="number">2</span>, o//<span class="number">2</span>, n)</span><br></pre></td></tr></table></figure><h3 id="824-山羊拉丁文-力扣（LeetCode）"><a href="#824-山羊拉丁文-力扣（LeetCode）" class="headerlink" title="824. 山羊拉丁文 - 力扣（LeetCode）"></a>824. 山羊拉丁文 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/goat-latin/submissions/">824. 山羊拉丁文 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toGoatLatin</span><span class="params">(self, S: str)</span> -&gt; str:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(S.split(), start=<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>].lower() <span class="keyword">in</span> <span class="string">'aeiou'</span>: res.append(s+<span class="string">'m'</span>+<span class="string">'a'</span>*i)</span><br><span class="line">            <span class="keyword">else</span>: res.append(s[<span class="number">1</span>:]+s[<span class="number">0</span>]+<span class="string">'m'</span>+<span class="string">'a'</span>*i)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(res)</span><br></pre></td></tr></table></figure><h3 id="38-外观数列-力扣（LeetCode）"><a href="#38-外观数列-力扣（LeetCode）" class="headerlink" title="38. 外观数列 - 力扣（LeetCode）"></a>38. 外观数列 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/count-and-say/">38. 外观数列 - 力扣（LeetCode）</a></p><p>每次用 Python 都想着在不影响性能和每一行代码长度的情况下 写的简短</p><p>用 Python 真舒服</p><p>不过，我这么算，性能按理说挺好的，可惜都是 6%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.nums = [<span class="string">"1"</span>]</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">29</span>):</span><br><span class="line">            self.nums.append(self.count(self.nums[<span class="number">-1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(<span class="string">f'<span class="subst">&#123;len(list(v))&#125;</span><span class="subst">&#123;i&#125;</span>'</span> <span class="keyword">for</span> i, v <span class="keyword">in</span> itertools.groupby(str(n)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self.nums[n<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="1170-比较字符串最小字母出现频次-题解-力扣（LeetCode）"><a href="#1170-比较字符串最小字母出现频次-题解-力扣（LeetCode）" class="headerlink" title="1170. 比较字符串最小字母出现频次 题解 - 力扣（LeetCode）"></a>1170. 比较字符串最小字母出现频次 题解 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/compare-strings-by-frequency-of-the-smallest-character/solution/">1170. 比较字符串最小字母出现频次 题解 - 力扣（LeetCode）</a></p><p>阅读理解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s.count(min(list(s)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSmallerByFrequency</span><span class="params">(self, queries: List[str], words: List[str])</span> -&gt; List[int]:</span></span><br><span class="line">        l = [self.f(word) <span class="keyword">for</span> word <span class="keyword">in</span> words]</span><br><span class="line">        l.sort()</span><br><span class="line">        <span class="keyword">return</span> [len(l)-bisect.bisect(l, self.f(q)) <span class="keyword">for</span> q <span class="keyword">in</span> queries]</span><br></pre></td></tr></table></figure><h3 id="434-字符串中的单词数-力扣（LeetCode）"><a href="#434-字符串中的单词数-力扣（LeetCode）" class="headerlink" title="434. 字符串中的单词数 - 力扣（LeetCode）"></a>434. 字符串中的单词数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/submissions/">434. 字符串中的单词数 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSegments</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> len(s.split())</span><br></pre></td></tr></table></figure><h3 id="345-反转字符串中的元音字母-力扣（LeetCode）"><a href="#345-反转字符串中的元音字母-力扣（LeetCode）" class="headerlink" title="345. 反转字符串中的元音字母 - 力扣（LeetCode）"></a>345. 反转字符串中的元音字母 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/submissions/">345. 反转字符串中的元音字母 - 力扣（LeetCode）</a></p><p>双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        lst = list(s)</span><br><span class="line">        l, r = <span class="number">0</span>, len(lst)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> lst[l] <span class="keyword">in</span> <span class="string">'AEIOUaeiou'</span>: l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> lst[r] <span class="keyword">in</span> <span class="string">'AEIOUaeiou'</span>: r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l&lt;r:</span><br><span class="line">                lst[l], lst[r] = lst[r], lst[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(lst)</span><br></pre></td></tr></table></figure><p>用 set 应该可以 O1 地查询是不是元音(虽然结果性能差不多)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        lst = list(s)</span><br><span class="line">        l, r = <span class="number">0</span>, len(lst)<span class="number">-1</span></span><br><span class="line">        vowels = &#123;<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>,<span class="string">'A'</span>,<span class="string">'E'</span>,<span class="string">'I'</span>,<span class="string">'O'</span>,<span class="string">'U'</span>&#125;</span><br><span class="line">        <span class="keyword">while</span> l&lt;r:</span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> lst[l] <span class="keyword">in</span> vowels: l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l&lt;r <span class="keyword">and</span> <span class="keyword">not</span> lst[r] <span class="keyword">in</span> vowels: r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l&lt;r:</span><br><span class="line">                lst[l], lst[r] = lst[r], lst[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(lst)</span><br></pre></td></tr></table></figure><h3 id="788-旋转数字-力扣（LeetCode）"><a href="#788-旋转数字-力扣（LeetCode）" class="headerlink" title="788. 旋转数字 - 力扣（LeetCode）"></a>788. 旋转数字 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/rotated-digits/submissions/">788. 旋转数字 - 力扣（LeetCode）</a></p><p>阅读理解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.nums = []</span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">            <span class="keyword">if</span> self.isGoodNum(i): cur += <span class="number">1</span></span><br><span class="line">            self.nums.append(cur)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isGoodNum</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># 018 2569 </span></span><br><span class="line">        s = str(n)</span><br><span class="line">        <span class="comment"># 1. 347 不在里面</span></span><br><span class="line">        <span class="comment"># 2. 必须有 2569 任意一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> any(c <span class="keyword">in</span> s <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'347'</span>) <span class="keyword">and</span> any(c <span class="keyword">in</span> s <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">'2569'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotatedDigits</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.nums[N<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="面试题-01-06-字符串压缩-力扣（LeetCode）"><a href="#面试题-01-06-字符串压缩-力扣（LeetCode）" class="headerlink" title="面试题 01.06. 字符串压缩 - 力扣（LeetCode）"></a>面试题 01.06. 字符串压缩 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/compress-string-lcci/submissions/">面试题 01.06. 字符串压缩 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compressString</span><span class="params">(self, S: str)</span> -&gt; str:</span></span><br><span class="line">        news = <span class="string">''</span>.join(<span class="string">f'<span class="subst">&#123;i&#125;</span><span class="subst">&#123;len(list(v))&#125;</span>'</span> <span class="keyword">for</span> i, v <span class="keyword">in</span> itertools.groupby(S))</span><br><span class="line">        <span class="keyword">return</span> news <span class="keyword">if</span> len(news)&lt;len(S) <span class="keyword">else</span> S</span><br></pre></td></tr></table></figure><h3 id="383-赎金信-力扣（LeetCode）"><a href="#383-赎金信-力扣（LeetCode）" class="headerlink" title="383. 赎金信 - 力扣（LeetCode）"></a>383. 赎金信 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/ransom-note/submissions/">383. 赎金信 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canConstruct</span><span class="params">(self, ransomNote: str, magazine: str)</span> -&gt; bool:</span></span><br><span class="line">        counter = collections.Counter(magazine)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> ransomNote:</span><br><span class="line">            counter[c] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> counter[c]&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="1455-检查单词是否为句中其他单词的前缀-力扣（LeetCode）"><a href="#1455-检查单词是否为句中其他单词的前缀-力扣（LeetCode）" class="headerlink" title="1455. 检查单词是否为句中其他单词的前缀 - 力扣（LeetCode）"></a>1455. 检查单词是否为句中其他单词的前缀 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/submissions/">1455. 检查单词是否为句中其他单词的前缀 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPrefixOfWord</span><span class="params">(self, sentence: str, searchWord: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(sentence.split(), start=<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> v.startswith(searchWord): <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="1496-判断路径是否相交-力扣（LeetCode）"><a href="#1496-判断路径是否相交-力扣（LeetCode）" class="headerlink" title="1496. 判断路径是否相交 - 力扣（LeetCode）"></a>1496. 判断路径是否相交 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/path-crossing/submissions/">1496. 判断路径是否相交 - 力扣（LeetCode）</a></p><p>智障题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPathCrossing</span><span class="params">(self, path: str)</span> -&gt; bool:</span></span><br><span class="line">        s = &#123;(<span class="number">0</span>, <span class="number">0</span>), &#125;</span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">'N'</span>: (<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="string">'S'</span>: (<span class="number">0</span>, <span class="number">-1</span>),</span><br><span class="line">            <span class="string">'E'</span>: (<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="string">'W'</span>: (<span class="number">-1</span>, <span class="number">0</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        cur = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">            cur[<span class="number">0</span>] += d[i][<span class="number">0</span>]</span><br><span class="line">            cur[<span class="number">1</span>] += d[i][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> tuple(cur) <span class="keyword">in</span> s: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            s.add(tuple(cur))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="1221-分割平衡字符串-力扣（LeetCode）"><a href="#1221-分割平衡字符串-力扣（LeetCode）" class="headerlink" title="1221. 分割平衡字符串 - 力扣（LeetCode）"></a>1221. 分割平衡字符串 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">1221. 分割平衡字符串 - 力扣（LeetCode）</a></p><p>题目描述不清，分割后要求所有字符串都是平衡的，不能剩下字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balancedStringSplit</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        presum = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'R'</span>: presum.append(presum[<span class="number">-1</span>]+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>: presum.append(presum[<span class="number">-1</span>]<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> presum.count(<span class="number">0</span>)<span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h2><h3 id="522-最长特殊序列-II-力扣（LeetCode）"><a href="#522-最长特殊序列-II-力扣（LeetCode）" class="headerlink" title="522. 最长特殊序列 II - 力扣（LeetCode）"></a>522. 最长特殊序列 II - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-ii/submissions/">522. 最长特殊序列 II - 力扣（LeetCode）</a></p><p>按长度 排序，遍历，若当前 s 不是任意一个字符串的子字符串，返回当前长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLUSlength</span><span class="params">(self, strs: List[str])</span> -&gt; int:</span></span><br><span class="line">        strs.sort(key=len, reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(strs):</span><br><span class="line">            <span class="keyword">for</span> j, x <span class="keyword">in</span> enumerate(strs):</span><br><span class="line">                <span class="keyword">if</span> j==i: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> self.isSubStr(s, x): <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> len(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubStr</span><span class="params">(self, s, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(s)&gt;len(x): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">while</span> j&lt;len(x) <span class="keyword">and</span> s[i]!=x[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j&gt;=len(x): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> s[i]==x[j]: j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>计算器</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%AE%A1%E7%AE%97%E5%99%A8.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E8%AE%A1%E7%AE%97%E5%99%A8.html</id>
    <published>2020-07-21T05:10:27.000Z</published>
    <updated>2020-07-24T14:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="241-为运算表达式设计优先级-力扣（LeetCode）"><a href="#241-为运算表达式设计优先级-力扣（LeetCode）" class="headerlink" title="241. 为运算表达式设计优先级 - 力扣（LeetCode）"></a>241. 为运算表达式设计优先级 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/">241. 为运算表达式设计优先级 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, s: str)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> s.isdigit(): <span class="keyword">return</span> [int(s)]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'+-*'</span>:</span><br><span class="line">                <span class="keyword">for</span> left <span class="keyword">in</span> self.diffWaysToCompute(s[:i]):</span><br><span class="line">                    <span class="keyword">for</span> right <span class="keyword">in</span> self.diffWaysToCompute(s[i+<span class="number">1</span>:]):</span><br><span class="line">                        res.append(eval(<span class="string">f'<span class="subst">&#123;left&#125;</span><span class="subst">&#123;c&#125;</span><span class="subst">&#123;right&#125;</span>'</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="224-基本计算器-力扣（LeetCode）"><a href="#224-基本计算器-力扣（LeetCode）" class="headerlink" title="224. 基本计算器 - 力扣（LeetCode）"></a>224. 基本计算器 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/basic-calculator/">224. 基本计算器 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, _s: str)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(tl)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(tl)==<span class="number">1</span>: <span class="keyword">return</span> int(tl[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># print('tl:', tl)</span></span><br><span class="line">            cur = int(tl.pop())</span><br><span class="line">            <span class="keyword">while</span> tl:</span><br><span class="line">                op, num = tl.pop(), int(tl.pop())</span><br><span class="line">                cur = cur-num <span class="keyword">if</span> op==<span class="string">'-'</span> <span class="keyword">else</span> cur+num</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(_s):</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">' '</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">                <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">                stack.append(c)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">'('</span>: stack.append(<span class="string">'('</span>)</span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">                tl = []</span><br><span class="line">                <span class="comment"># 3-2-1 -&gt; 1-2-3 -&gt; 3-2-1</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    cur = stack.pop()</span><br><span class="line">                    <span class="keyword">if</span> cur==<span class="string">'('</span>: <span class="keyword">break</span></span><br><span class="line">                    tl.append(cur)</span><br><span class="line">                stack.append(helper(tl))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s += c</span><br><span class="line">            <span class="comment"># print(c, stack)</span></span><br><span class="line">        <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">        <span class="comment"># 最外层可以没有括号</span></span><br><span class="line">        <span class="keyword">return</span> helper(stack[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="150-逆波兰表达式求值-力扣（LeetCode）"><a href="#150-逆波兰表达式求值-力扣（LeetCode）" class="headerlink" title="150. 逆波兰表达式求值 - 力扣（LeetCode）"></a>150. 逆波兰表达式求值 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evalRPN</span><span class="params">(self, tokens: List[str])</span> -&gt; int:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tokens:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> <span class="string">'+-*/'</span>:</span><br><span class="line">                right, left = stack.pop(), stack.pop()</span><br><span class="line">                <span class="comment"># if i=='/': i='//'</span></span><br><span class="line">                <span class="comment"># -1//2 -&gt; -1 </span></span><br><span class="line">                <span class="comment"># int(-1/2) -&gt; 0</span></span><br><span class="line">                stack.append(int(eval(<span class="string">f'<span class="subst">&#123;left&#125;</span><span class="subst">&#123;i&#125;</span><span class="subst">&#123;right&#125;</span>'</span>)))</span><br><span class="line">            <span class="keyword">else</span>: stack.append(i)</span><br><span class="line">            <span class="comment"># print(i, stack)</span></span><br><span class="line">        <span class="keyword">return</span> int(stack[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="227-基本计算器-II-力扣（LeetCode）"><a href="#227-基本计算器-II-力扣（LeetCode）" class="headerlink" title="227. 基本计算器 II - 力扣（LeetCode）"></a>227. 基本计算器 II - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/basic-calculator-ii/">227. 基本计算器 II - 力扣（LeetCode）</a></p><p>如果用 collections.deque 的话，效率高一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, _s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 求 1*2/3, 传入: [3, /, 2, *, 1]</span></span><br><span class="line">        <span class="comment"># 运算符只能全部是 */ 或者全部是 +-</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(tl)</span>:</span></span><br><span class="line">            left = int(tl.pop())</span><br><span class="line">            <span class="keyword">while</span> tl:</span><br><span class="line">                op, right = tl.pop(), int(tl.pop())</span><br><span class="line">                <span class="keyword">if</span> op==<span class="string">'+'</span>: left = left+right</span><br><span class="line">                <span class="keyword">elif</span> op==<span class="string">'-'</span>: left = left-right</span><br><span class="line">                <span class="keyword">elif</span> op==<span class="string">'*'</span>: left = left*right</span><br><span class="line">                <span class="keyword">else</span> : left = int(left/right)</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        l = [] <span class="comment"># 存放 +- 操作</span></span><br><span class="line">        tl = [] <span class="comment"># 存放 */ 操作</span></span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> _s:</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">' '</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'*/'</span>:</span><br><span class="line">                tl.extend([s, c])</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">                tl.append(s)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">                l.extend([helper(tl[::<span class="number">-1</span>]), c])</span><br><span class="line">                tl = []</span><br><span class="line">            <span class="keyword">else</span>: s += c</span><br><span class="line">            <span class="comment"># print(l, tl, c)</span></span><br><span class="line">        </span><br><span class="line">        tl.append(s)</span><br><span class="line">        l.append(helper(tl[::<span class="number">-1</span>]))</span><br><span class="line">        <span class="comment"># print(l)</span></span><br><span class="line">        <span class="keyword">return</span> helper(l[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>优化：</p><p>效率提升了一点点，但是 helper 的可读性提升了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, _s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 求 1*2/3, 传入: [1, *, 2,  /, 3]</span></span><br><span class="line">        <span class="comment"># 运算符只能全部是 */ 或者全部是 +-</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(tl)</span>:</span></span><br><span class="line">            left = int(tl.popleft())</span><br><span class="line">            <span class="keyword">while</span> tl:</span><br><span class="line">                op, right = tl.popleft(), int(tl.popleft())</span><br><span class="line">                <span class="keyword">if</span> op==<span class="string">'+'</span>: left = left+right</span><br><span class="line">                <span class="keyword">elif</span> op==<span class="string">'-'</span>: left = left-right</span><br><span class="line">                <span class="keyword">elif</span> op==<span class="string">'*'</span>: left = left*right</span><br><span class="line">                <span class="keyword">else</span> : left = int(left/right)</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        l = deque() <span class="comment"># 存放 +- 操作</span></span><br><span class="line">        tl = deque() <span class="comment"># 存放 */ 操作</span></span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> _s:</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">' '</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'*/'</span>:</span><br><span class="line">                tl.extend([s, c]) <span class="comment"># deque 也可以 extend</span></span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">                tl.append(s)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">                l.extend([helper(tl), c])</span><br><span class="line">                tl.clear() <span class="comment"># 清空 deque 的操作</span></span><br><span class="line">            <span class="keyword">else</span>: s += c</span><br><span class="line">            <span class="comment"># print(l, tl, c)</span></span><br><span class="line">        </span><br><span class="line">        tl.append(s)</span><br><span class="line">        l.append(helper(tl))</span><br><span class="line">        <span class="comment"># print(l)</span></span><br><span class="line">        <span class="keyword">return</span> helper(l)</span><br></pre></td></tr></table></figure><h3 id="282-给表达式添加运算符-力扣（LeetCode）"><a href="#282-给表达式添加运算符-力扣（LeetCode）" class="headerlink" title="282. 给表达式添加运算符 - 力扣（LeetCode）"></a>282. 给表达式添加运算符 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/expression-add-operators/">282. 给表达式添加运算符 - 力扣（LeetCode）</a></p><p>做不出来</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 224. Basic Calculator</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-224-Basic-Calculator.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-224-Basic-Calculator.html</id>
    <published>2020-07-21T05:00:37.000Z</published>
    <updated>2020-07-21T13:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/basic-calculator/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/basic-calculator/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the<br>plus <code>+</code> or minus sign <code>-</code>, <strong>non-negative</strong> integers and empty spaces <code></code>.</p><p><strong>Example 1:</strong></p><pre><code>Input: &quot;1 + 1&quot;Output: 2</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: &quot; 2-1 + 2 &quot;Output: 3</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: &quot;(1+(4+5+2)-3)+(6+8)&quot;Output: 23</code></pre><p><strong>Note:</strong></p><ul><li>You may assume that the given expression is always valid.</li><li><strong>Do not</strong> use the <code>eval</code> built-in library function.</li></ul><p>展开：</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">(self, _s: str)</span> -&gt; int:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(tl)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(tl)==<span class="number">1</span>: <span class="keyword">return</span> int(tl[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># print('tl:', tl)</span></span><br><span class="line">            cur = int(tl.pop())</span><br><span class="line">            <span class="keyword">while</span> tl:</span><br><span class="line">                op, num = tl.pop(), int(tl.pop())</span><br><span class="line">                cur = cur-num <span class="keyword">if</span> op==<span class="string">'-'</span> <span class="keyword">else</span> cur+num</span><br><span class="line">            <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">        stack = []</span><br><span class="line">        s = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(_s):</span><br><span class="line">            <span class="keyword">if</span> c==<span class="string">' '</span>: <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'+-'</span>:</span><br><span class="line">                <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">                stack.append(c)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">'('</span>: stack.append(<span class="string">'('</span>)</span><br><span class="line">            <span class="keyword">elif</span> c==<span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">                s = <span class="string">''</span></span><br><span class="line">                tl = []</span><br><span class="line">                <span class="comment"># 3-2-1 -&gt; 1-2-3 -&gt; 3-2-1</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    cur = stack.pop()</span><br><span class="line">                    <span class="keyword">if</span> cur==<span class="string">'('</span>: <span class="keyword">break</span></span><br><span class="line">                    tl.append(cur)</span><br><span class="line">                stack.append(helper(tl))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s += c</span><br><span class="line">            <span class="comment"># print(c, stack)</span></span><br><span class="line">        <span class="keyword">if</span> s: stack.append(s)</span><br><span class="line">        <span class="comment"># 最外层可以没有括号</span></span><br><span class="line">        <span class="keyword">return</span> helper(stack[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/basic-calculator/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/basic-calculator/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Implement a basic calculator to evaluate a simple expression string.&lt;/p&gt;
&lt;p&gt;The expression string may contain open &lt;code&gt;(&lt;/code&gt; and closing parentheses &lt;code&gt;)&lt;/code&gt;, the&lt;br&gt;plus &lt;code&gt;+&lt;/code&gt; or minus sign &lt;code&gt;-&lt;/code&gt;, &lt;strong&gt;non-negative&lt;/strong&gt; integers and empty spaces &lt;code&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;1 + 1&amp;quot;
Output: 2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot; 2-1 + 2 &amp;quot;
Output: 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(1+(4+5+2)-3)+(6+8)&amp;quot;
Output: 23&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may assume that the given expression is always valid.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do not&lt;/strong&gt; use the &lt;code&gt;eval&lt;/code&gt; built-in library function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;展开：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Stack" scheme="https://zronghui.github.io/tags/Stack/"/>
    
      <category term="Math" scheme="https://zronghui.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 241. Different Ways to Add Parentheses</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-241-Different-Ways-to-Add-Parentheses.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-241-Different-Ways-to-Add-Parentheses.html</id>
    <published>2020-07-21T04:10:35.000Z</published>
    <updated>2020-07-21T13:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/different-ways-to-add-parentheses/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string of numbers and operators, return all possible results from<br>computing all the different possible ways to group numbers and operators. The<br>valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p><p><strong>Example 1:</strong></p><pre><code>Input: &quot;2-1-1&quot;Output: [0, 2]Explanation:((2-1)-1) = 0 (2-(1-1)) = 2</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:&quot;2*3-4*5&quot;Output: [-34, -14, -10, -10, 10]Explanation: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10 ****</code></pre><p><strong>Tags:</strong> Divide and Conquer</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p>精简版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, s: str)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> s.isdigit(): <span class="keyword">return</span> [int(s)]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'+-*'</span>:</span><br><span class="line">                <span class="keyword">for</span> left <span class="keyword">in</span> self.diffWaysToCompute(s[:i]):</span><br><span class="line">                    <span class="keyword">for</span> right <span class="keyword">in</span> self.diffWaysToCompute(s[i+<span class="number">1</span>:]):</span><br><span class="line">                        res.append(eval(<span class="string">f'<span class="subst">&#123;left&#125;</span><span class="subst">&#123;c&#125;</span><span class="subst">&#123;right&#125;</span>'</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>展开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, input: str)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 如果只有数字，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> input.isdigit():</span><br><span class="line">            <span class="keyword">return</span> [int(input)]</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(input):</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>]:</span><br><span class="line">                <span class="comment"># 1.分解：遇到运算符，计算左右两侧的结果集</span></span><br><span class="line">                <span class="comment"># 2.解决：diffWaysToCompute 递归函数求出子问题的解</span></span><br><span class="line">                left = self.diffWaysToCompute(input[:i])</span><br><span class="line">                right = self.diffWaysToCompute(input[i+<span class="number">1</span>:])</span><br><span class="line">                <span class="comment"># 3.合并：根据运算符合并子问题的解</span></span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> left:</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> char == <span class="string">'+'</span>:</span><br><span class="line">                            res.append(l + r)</span><br><span class="line">                        <span class="keyword">elif</span> char == <span class="string">'-'</span>:</span><br><span class="line">                            res.append(l - r)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            res.append(l * r)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/different-ways-to-add-parentheses/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/different-ways-to-add-parentheses/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a string of numbers and operators, return all possible results from&lt;br&gt;computing all the different possible ways to group numbers and operators. The&lt;br&gt;valid operators are &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;2-1-1&amp;quot;
Output: [0, 2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:&amp;quot;2*3-4*5&amp;quot;
Output: [-34, -14, -10, -10, 10]
Explanation: (2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10 ****&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Divide and Conquer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Divide and Conquer" scheme="https://zronghui.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 95. Unique Binary Search Trees II</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-9**/leetcode-95-Unique-Binary-Search-Trees-II.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-9**/leetcode-95-Unique-Binary-Search-Trees-II.html</id>
    <published>2020-07-21T02:23:38.000Z</published>
    <updated>2020-07-21T13:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/unique-binary-search-trees-ii/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an integer <em>n</em> , generate all structurally unique <strong>BST ‘s</strong> (binary<br>search trees) that store values 1 …  <em>n</em>.</p><p><strong>Example:</strong></p><pre><code>Input: 3Output:[  [1,null,3,2],  [3,2,null,1],  [3,1,null,null,2],  [2,1,3],  [1,null,2,null,3]]Explanation:The above output corresponds to the 5 unique BST&apos;s shown below:   1         3     3      2      1    \       /     /      / \      \     3     2     1      1   3      2    /     /       \                 \   2     1         2                 3</code></pre><p><strong>Tags:</strong> Dynamic Programming, Tree</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateTrees</span><span class="params">(self, n: int)</span> -&gt; List[TreeNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n: <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="meta">        @functools.lru_cache(maxsize=None)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(start, end)</span>:</span></span><br><span class="line">            res = []</span><br><span class="line">            <span class="comment"># 空树，不能直接返回[] 因为另外一边不是空</span></span><br><span class="line">            <span class="keyword">if</span> end&lt;start: <span class="keyword">return</span> [<span class="literal">None</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> left <span class="keyword">in</span> helper(start, i<span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">for</span> right <span class="keyword">in</span> helper(i+<span class="number">1</span>, end):</span><br><span class="line">                        node = TreeNode(i)</span><br><span class="line">                        node.left = left</span><br><span class="line">                        node.right = right</span><br><span class="line">                        res.append(node)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees-ii/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/unique-binary-search-trees-ii/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an integer &lt;em&gt;n&lt;/em&gt; , generate all structurally unique &lt;strong&gt;BST ‘s&lt;/strong&gt; (binary&lt;br&gt;search trees) that store values 1 …  &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST&amp;apos;s shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Dynamic Programming, Tree&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-9**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-9/"/>
    
    
      <category term="Tree" scheme="https://zronghui.github.io/tags/Tree/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 498. Diagonal Traverse</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-4**/leetcode-498-Diagonal-Traverse.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-4**/leetcode-498-Diagonal-Traverse.html</id>
    <published>2020-07-20T15:12:44.000Z</published>
    <updated>2020-07-20T16:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/diagonal-traverse/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/diagonal-traverse/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a matrix of M x N elements (M rows, N columns), return all elements of<br>the matrix in diagonal order as shown in the below image.</p><p><strong>Example:</strong></p><pre><code>Input:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]Output:  [1,2,4,7,5,3,6,8,9]Explanation:![](https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png)</code></pre><p><strong>Note:</strong></p><p>The total number of elements of the given matrix will not exceed 10,000.</p><p><strong>Tags:</strong> </p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/diagonal-traverse/">498. 对角线遍历 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/diagonal-traverse/solution/dui-xiang-xian-heng-lie-zuo-biao-zhi-he-xiang-deng/">对象线横列坐标之和相等 - 对角线遍历 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDiagonalOrder</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix: <span class="keyword">return</span> []</span><br><span class="line">        n, m = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>: <span class="keyword">return</span> matrix[<span class="number">0</span>]</span><br><span class="line">        d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                d[i+j].append(matrix[i][j])</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m+n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i&amp;<span class="number">1</span>: res.extend(d[i])</span><br><span class="line">            <span class="keyword">else</span>: res.extend(d[i][::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/diagonal-traverse/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/diagonal-traverse/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a matrix of M x N elements (M rows, N columns), return all elements of&lt;br&gt;the matrix in diagonal order as shown in the below image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]

Explanation:
![](https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The total number of elements of the given matrix will not exceed 10,000.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-4**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-4/"/>
    
    
  </entry>
  
  <entry>
    <title>随机</title>
    <link href="https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E9%9A%8F%E6%9C%BA.html"/>
    <id>https://zronghui.github.io/leetcode/%E5%88%86%E7%B1%BB/%E9%9A%8F%E6%9C%BA.html</id>
    <published>2020-07-20T08:06:04.000Z</published>
    <updated>2020-07-24T14:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h3 id="710-黑名单中的随机数-力扣（LeetCode）"><a href="#710-黑名单中的随机数-力扣（LeetCode）" class="headerlink" title="710. 黑名单中的随机数 - 力扣（LeetCode）"></a>710. 黑名单中的随机数 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-with-blacklist/">710. 黑名单中的随机数 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, N: int, blacklist: List[int])</span>:</span></span><br><span class="line">         self.n = N-len(blacklist)</span><br><span class="line">         a = (i <span class="keyword">for</span> i <span class="keyword">in</span> blacklist <span class="keyword">if</span> i&lt;self.n)</span><br><span class="line">         b = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n, N) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> blacklist)</span><br><span class="line">         self.m = dict(zip(a, b))</span><br><span class="line">        <span class="comment">#  print(self.m)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 核心思想，将 0~self.n-1 中在 blacklist 的元素映射到 self.n~N-1 不在 blacklist 的元素</span></span><br><span class="line">        r = random.randint(<span class="number">0</span>, self.n<span class="number">-1</span>) <span class="comment"># [0, self.n-1]</span></span><br><span class="line">        <span class="keyword">return</span> r <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> self.m <span class="keyword">else</span> self.m[r]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(N, blacklist)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick()</span></span><br></pre></td></tr></table></figure><h3 id="398-随机数索引-力扣（LeetCode）"><a href="#398-随机数索引-力扣（LeetCode）" class="headerlink" title="398. 随机数索引 - 力扣（LeetCode）"></a>398. 随机数索引 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-index/">398. 随机数索引 - 力扣（LeetCode）</a></p><p>搞笑解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        self.d = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            self.d[num].append(i)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> random.choice(self.d[target])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(nums)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick(target)</span></span><br></pre></td></tr></table></figure><h4 id="考点：蓄水池抽样"><a href="#考点：蓄水池抽样" class="headerlink" title="考点：蓄水池抽样"></a>考点：蓄水池抽样</h4><p>不知道共几个数，比如共 12345 5 个数字，逐个遍历：</p><p>遍历到 1 1/1 的概率取 1</p><p>遍历到 2 1/2 的概率取 2 (1/2 的概率不取)</p><p>遍历到 3 1/3 的概率取 3</p><p>遍历到 4 1/4 的概率取 4</p><p>遍历到 5 1/5 的概率取 5</p><p>返回最后取的数</p><p>证明：取每个数的概率都一致</p><p>对 5 而言，就是 1/5 概率</p><p>对 4 而言，遍历到 4 随机取到 4 概率 1/4 ，但是遍历到 5 时, 没有随机到 5 的概率 4/5</p><p>5：1/5 == 4: 1/4 * 4/5 == 3: 1/3 *3/4 * 4/5</p><p>（1）计数器count记录target值个数</p><p>（2）以1/count的概率抽样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, target: int)</span> -&gt; int:</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span> <span class="comment"># res 一定存在</span></span><br><span class="line">        <span class="keyword">for</span> index, i <span class="keyword">in</span> enumerate(self.nums):</span><br><span class="line">            <span class="keyword">if</span> i==target:</span><br><span class="line">                t = random.randint(<span class="number">0</span>, cnt)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> t==<span class="number">0</span>: res = index</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="528-按权重随机选择-力扣（LeetCode）"><a href="#528-按权重随机选择-力扣（LeetCode）" class="headerlink" title="528. 按权重随机选择 - 力扣（LeetCode）"></a>528. 按权重随机选择 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-pick-with-weight/submissions/">528. 按权重随机选择 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, w: List[int])</span>:</span></span><br><span class="line">        n = len(w)</span><br><span class="line">        self.presum = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(w): </span><br><span class="line">            self.presum[i+<span class="number">1</span>] = self.presum[i]+v</span><br><span class="line">        print(self.presum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickIndex</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        r = random.randint(<span class="number">1</span>, self.presum[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> bisect.bisect_left(self.presum, r)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(w)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pickIndex()</span></span><br></pre></td></tr></table></figure><h3 id="478-在圆内随机生成点-力扣（LeetCode）"><a href="#478-在圆内随机生成点-力扣（LeetCode）" class="headerlink" title="478. 在圆内随机生成点 - 力扣（LeetCode）"></a>478. 在圆内随机生成点 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/generate-random-point-in-a-circle/submissions/">478. 在圆内随机生成点 - 力扣（LeetCode）</a></p><p>注意 离圆心距离的随机 ，math.sqrt(random.random())</p><p><a href="https://leetcode-cn.com/problems/generate-random-point-in-a-circle/solution/zai-yuan-nei-sui-ji-sheng-cheng-dian-by-leetcode/">在圆内随机生成点 - 在圆内随机生成点 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        <span class="comment"># 离圆心距离随机</span></span><br><span class="line">        r = math.sqrt(random.random())*self.r</span><br><span class="line">        <span class="comment"># 角度随机</span></span><br><span class="line">        angel = random.random()*math.pi*<span class="number">2</span></span><br><span class="line">        x, y = r*math.cos(angel), r*math.sin(angel)</span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><p>或者围绕圆心的正方形内随机取，不再圆内则继续取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line">        self.r2 = self.r*self.r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        x = y = self.r</span><br><span class="line">        <span class="keyword">while</span> x*x+y*y&gt;self.r2:</span><br><span class="line">            x = -self.r+<span class="number">2</span>*self.r*random.random() <span class="comment"># [-self.r, self.r] 内随机</span></span><br><span class="line">            y = -self.r+<span class="number">2</span>*self.r*random.random()</span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><p>random.uniform(a, b) 是 float 的随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius: float, x_center: float, y_center: float)</span>:</span></span><br><span class="line">        self.r, self.x, self.y = radius, x_center, y_center</span><br><span class="line">        self.r2 = self.r*self.r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">randPoint</span><span class="params">(self)</span> -&gt; List[float]:</span></span><br><span class="line">        x = y = self.r</span><br><span class="line">        <span class="keyword">while</span> x*x+y*y&gt;self.r2:</span><br><span class="line">            x, y = random.uniform(-self.r, self.r), random.uniform(-self.r, self.r)</span><br><span class="line">            <span class="comment"># x = -self.r+2*self.r*random.random() # [-self.r, self.r] 内随机</span></span><br><span class="line">            <span class="comment"># y = -self.r+2*self.r*random.random()</span></span><br><span class="line">        <span class="keyword">return</span> [self.x+x, self.y+y]</span><br></pre></td></tr></table></figure><h3 id="497-非重叠矩形中的随机点-力扣（LeetCode）"><a href="#497-非重叠矩形中的随机点-力扣（LeetCode）" class="headerlink" title="497. 非重叠矩形中的随机点 - 力扣（LeetCode）"></a>497. 非重叠矩形中的随机点 - 力扣（LeetCode）</h3><p><a href="https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles/">497. 非重叠矩形中的随机点 - 力扣（LeetCode）</a><br><a href="https://leetcode-cn.com/problems/random-point-in-non-overlapping-rectangles/solution/pythonshi-xian-by-lyncien-2/">Python实现 - 非重叠矩形中的随机点 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rects: List[List[int]])</span>:</span></span><br><span class="line">        n = len(rects)</span><br><span class="line">        self.rects = rects</span><br><span class="line">        self.presum = [<span class="number">0</span>]*n <span class="comment"># weight pre sum</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(rects):</span><br><span class="line">            s += (v[<span class="number">2</span>]-v[<span class="number">0</span>]+<span class="number">1</span>)*(v[<span class="number">3</span>]-v[<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            self.presum[i] = s</span><br><span class="line">        print(self.presum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span> -&gt; List[int]:</span></span><br><span class="line">        r = bisect.bisect_left(self.presum, randint(<span class="number">1</span>, self.presum[<span class="number">-1</span>]))</span><br><span class="line">        rect = self.rects[r]</span><br><span class="line">        <span class="keyword">return</span> [randint(rect[<span class="number">0</span>], rect[<span class="number">2</span>]), randint(rect[<span class="number">1</span>], rect[<span class="number">3</span>])]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="分类" scheme="https://zronghui.github.io/categories/leetcode/%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode 312. Burst Balloons</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-3**/leetcode-312-Burst-Balloons.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-3**/leetcode-312-Burst-Balloons.html</id>
    <published>2020-07-19T13:13:39.000Z</published>
    <updated>2020-07-20T16:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/burst-balloons/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/burst-balloons/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a<br>number on it represented by array <code>nums</code>. You are asked to burst all the<br>balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] *nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After<br>the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p><p>Find the maximum coins you can collect by bursting the balloons wisely.</p><p><strong>Note:</strong></p><ul><li>You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.</li><li>0 ≤ <code>n</code> ≤ 500, 0 ≤ <code>nums[i]</code> ≤ 100</li></ul><p><strong>Example:</strong></p><pre><code>Input: [3,1,5,8]Output: 167 Explanation:nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167</code></pre><p><strong>Tags:</strong> Divide and Conquer, Dynamic Programming</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p>参考： <a href="https://leetcode-cn.com/problems/burst-balloons/solution/dong-tai-gui-hua-tao-lu-jie-jue-chuo-qi-qiu-wen-ti/">动态规划套路解决戳气球问题 - 戳气球 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">maxCoins</span><span class="params">(self, nums: List[<span class="keyword">int</span>])</span> -&gt; <span class="keyword">int</span>:</span></span><br><span class="line"><span class="function">        nums </span>= [<span class="number">1</span>, *nums, <span class="number">1</span>]</span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [[<span class="number">0</span>]*<span class="function">n <span class="keyword">for</span> _ in <span class="title">range</span><span class="params">(n)</span>]</span></span><br><span class="line"><span class="function">        <span class="keyword">for</span> i in <span class="title">reversed</span><span class="params">(range(n<span class="number">-1</span>)</span>):</span></span><br><span class="line"><span class="function">            <span class="keyword">for</span> j in <span class="title">range</span><span class="params">(i+<span class="number">1</span>, n)</span>:</span></span><br><span class="line"><span class="function">                <span class="keyword">for</span> k in <span class="title">range</span><span class="params">(i+<span class="number">1</span>, j)</span>:</span></span><br><span class="line"><span class="function">                    dp[i][j] </span>= max(dp[i][j], dp[i][k]+dp[k][j]+nums[i]*nums[j]*nums[k])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/burst-balloons/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; balloons, indexed from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;. Each balloon is painted with a&lt;br&gt;number on it represented by array &lt;code&gt;nums&lt;/code&gt;. You are asked to burst all the&lt;br&gt;balloons. If the you burst balloon &lt;code&gt;i&lt;/code&gt; you will get &lt;code&gt;nums[left] * nums[i] *
nums[right]&lt;/code&gt; coins. Here &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; are adjacent indices of &lt;code&gt;i&lt;/code&gt;. After&lt;br&gt;the burst, the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; then becomes adjacent.&lt;/p&gt;
&lt;p&gt;Find the maximum coins you can collect by bursting the balloons wisely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may imagine &lt;code&gt;nums[-1] = nums[n] = 1&lt;/code&gt;. They are not real therefore you can not burst them.&lt;/li&gt;
&lt;li&gt;0 ≤ &lt;code&gt;n&lt;/code&gt; ≤ 500, 0 ≤ &lt;code&gt;nums[i]&lt;/code&gt; ≤ 100&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,1,5,8]
Output: 167 
Explanation:nums = [3,1,5,8] --&amp;gt; [3,5,8] --&amp;gt;   [3,8]   --&amp;gt;  [8]  --&amp;gt; []
             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Divide and Conquer, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-3**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-3/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="Divide and Conquer" scheme="https://zronghui.github.io/tags/Divide-and-Conquer/"/>
    
  </entry>
  
</feed>
