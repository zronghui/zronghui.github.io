<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zronghui的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zronghui.github.io/"/>
  <updated>2020-04-27T14:39:13.000Z</updated>
  <id>https://zronghui.github.io/</id>
  
  <author>
    <name>zronghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020-04-28</title>
    <link href="https://zronghui.github.io/private/2020/04/2020-04-28.html"/>
    <id>https://zronghui.github.io/private/2020/04/2020-04-28.html</id>
    <published>2020-04-27T14:35:35.000Z</published>
    <updated>2020-04-27T14:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="592d243eb47bd964f43e8f84692e80ec965a1cbb95e091e373a1f91e9edfaa14">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a8521792c77f9e5daf58bf40859309482a95c772f70caf3a4d7098f22e8c4189ee4f861e2d2c5078cd4e37b9f8590da2fc0c3839315554091cdffeec1fa19d9869bbc950d3eb086250d304d7d4ef19f936012571b7ee42591d36d3a2b4046afef8c62ecae332afcc678602fdfa12447ce4115a5c7963a54d856a6e4b05e954c654a1837c328ab51889784e70f9aefe84d44a874433e93c0232a34dc80758dac755a3efa5fda1cf715731a96bc853ba4a8c016db97e161cc3a806c229089562710ef7fdc0ee6c9906e34d596f684e1417ec876ae20315e8b031a4aa175fbcb68ae91f17089b509bb0c16ae60caf1696921b0be6b5092f403d57a019608c51ebda3d041532df4576869043668d17b863c031ee04686acf6f9521883198ec571c4b111f4ea930e904f24102cc3d577df9ddd2accd3b668160faf4f1f81e5dae801c2d480b8f66ce3fda0b2a8290a138954e9a790c8ea2f17d261382f68cc15a9c505bc772d2cddb9d2536c7601c740840c39247eee950b8f11d4fd5cc5798e11e6876fb1c48824eb44c31953a7569da29486aac551611fb1b859c3fc40c41c037750f6b2558251c020f07df1f78cab79207ee8f94e394bfe47b010b4230c06bb804bdabb7542e1a3c2ccb8e86a131c255758fb6c7b6dc971669ee8f5c4765c35cdc420599396ad4b54609644935ee19c3c9ae7bf2d8dafdb0484357c02005a4fea9b09545f5a74f38f15a5786c50f83e4ab6313556e6c5a1c15979cb735bb27918e8a0562938fcea7bfba25c50190abe79f23b869014b4f5532521484a1818adb53ebdf2e08bd6cf1b91e782e2a827b64663883146505fb77ac78a91533d290fadf9695b73659bf9976f7568cdc68ccc000abcc1d61ed14eda83457e35ff04372240599ee4d9f9543c472b42cc1d943bffc9035154bb44011ed0cf8411e62fc3300f444667adac05996cb3538b914a92054e3c0f4aee560e9617c1c0acb4679f5b2293fc0929e2449075ecb936b47fa3406d7d294f60f16a61525ad6ef32a3b11ae5ac5147b5a47f01637ebcd437f78ef184500de40b55087ae092e85d3dc1dc50fe3ef6da9719adb206e24580285e02b36a80879fc8d7033ae0a6cdee82066d761ba04e4fa041f8ea58b0edae07fd1baacebaa503839e8d7a9f2886280a63a47ba68b4a8630ff0d367e750b27fcdddf92107e070fbce2c6fdd91a8a55c552d9cd156d30ba6812717de8f768c5c8d021828fa712f93eb672b5f29220c0cbc4453d1b8c2572e4e4fdd05ef7dc1a8d05c7f7125c5325c744fa7985d759540f364dd2f732408d12ebf8e52bce1355d60cf89f230f446ea34c0891d54f9a8ca7e3606f4f084eadfc4e825cb6cb51d63d61d1b9a6488de91c7c142097a10f7f39705ef818de0e377346a6e7842f3b46d183b33716f434e93c55eba34cdb3c219b05decfd22f2d839738e948653343a9a0720ed886466535</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="4" scheme="https://zronghui.github.io/categories/private/2020/4/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-185</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-185.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-185.html</id>
    <published>2020-04-27T07:16:00.000Z</published>
    <updated>2020-04-27T14:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reformat</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        ss = []</span><br><span class="line">        nn = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'0'</span>&lt;=i&lt;=<span class="string">'9'</span>:</span><br><span class="line">                nn.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ss.append(i)</span><br><span class="line">        <span class="keyword">if</span> abs(len(ss)-len(nn))&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        s = []</span><br><span class="line">        <span class="keyword">if</span> len(ss) &lt; len(nn):</span><br><span class="line">            ss, nn = nn, ss</span><br><span class="line">        <span class="keyword">while</span> nn:</span><br><span class="line">            s.append(ss.pop())</span><br><span class="line">            s.append(nn.pop())</span><br><span class="line">        <span class="keyword">if</span> ss:</span><br><span class="line">            s.append(ss[<span class="number">0</span>]) </span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(s)</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">displayTable</span><span class="params">(self, orders: List[List[str]])</span> -&gt; List[List[str]]:</span></span><br><span class="line">        <span class="comment"># 所有的菜，最后用来排序</span></span><br><span class="line">        foodl = []</span><br><span class="line">        <span class="comment"># &#123;table:&#123;food: n, ...&#125;&#125;</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _, table, food <span class="keyword">in</span> orders:</span><br><span class="line">            <span class="keyword">if</span> food <span class="keyword">not</span> <span class="keyword">in</span> foodl:</span><br><span class="line">                foodl.append(food)</span><br><span class="line">            <span class="keyword">if</span> table <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">                d[table] = &#123;food: <span class="number">1</span>&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[table][food] = d[table].get(food, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        res = []</span><br><span class="line">        foodl.sort()</span><br><span class="line">        </span><br><span class="line">        head = [<span class="string">"Table"</span>]</span><br><span class="line">        head.extend(foodl)</span><br><span class="line">        res.append(head)</span><br><span class="line">        </span><br><span class="line">        t = []</span><br><span class="line">        <span class="keyword">for</span> table <span class="keyword">in</span> sorted(d.keys(), key=<span class="keyword">lambda</span> i: int(i)):</span><br><span class="line">            t.append(str(table))</span><br><span class="line">            <span class="keyword">for</span> food <span class="keyword">in</span> foodl:</span><br><span class="line">                t.append(str(d[table].get(food, <span class="number">0</span>)))</span><br><span class="line">            res.append(t)</span><br><span class="line">            t = []</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>我的解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberOfFrogs</span><span class="params">(self, croakOfFrogs: str)</span> -&gt; int:</span></span><br><span class="line">        d1 = &#123;</span><br><span class="line">            <span class="string">'r'</span>: <span class="string">'c'</span>, </span><br><span class="line">            <span class="string">'o'</span>: <span class="string">'cr'</span>, </span><br><span class="line">            <span class="string">'a'</span>: <span class="string">'cro'</span></span><br><span class="line">        &#125;</span><br><span class="line">        d2 = &#123;</span><br><span class="line">            <span class="string">'c'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'cr'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'cro'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'croa'</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 最多的青蛙</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 当前的青蛙数</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> croakOfFrogs:</span><br><span class="line">            key = d1.get(i, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'c'</span>:</span><br><span class="line">                d2[i] += <span class="number">1</span></span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'k'</span>:</span><br><span class="line">                <span class="keyword">if</span> d2[<span class="string">'croa'</span>]==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    d2[<span class="string">'croa'</span>] -= <span class="number">1</span></span><br><span class="line">                    n -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> d2[key]==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">                d2[key] -= <span class="number">1</span></span><br><span class="line">                d2[key+i] += <span class="number">1</span></span><br><span class="line">            m = max(m, n)</span><br><span class="line">            <span class="comment">#print(m, n)</span></span><br><span class="line">        <span class="keyword">return</span> m <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>其他人的解法：</p><p><a href="https://leetcode-cn.com/problems/minimum-number-of-frogs-croaking/solution/ji-lu-dang-qian-qing-wa-ge-shu-de-zui-da-zhi-by-qi/">记录当前青蛙个数的最大值 - 数青蛙 - 力扣（LeetCode）</a></p><p>c,r,o,a,k分别表示遍历到当前位置时这几个字母出现的次数。<br>每次遍历过程中当且仅当c&gt;=r&gt;=o&gt;=a&gt;=k时才符合要求。<br>now表示当前存在的青蛙个数，即遇到c时加一，叫完以后(遇到k)减一。<br>遍历完后now应为0表示每次叫声都有头有尾，记录now的最大值即为答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberOfFrogs</span><span class="params">(self, croakOfFrogs: str)</span> -&gt; int:</span></span><br><span class="line">        c=r=o=a=k=<span class="number">0</span></span><br><span class="line">        now=<span class="number">0</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> croakOfFrogs:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'c'</span>:</span><br><span class="line">                c+=<span class="number">1</span></span><br><span class="line">                now+=<span class="number">1</span></span><br><span class="line">                res=max(res,now)</span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'r'</span>:</span><br><span class="line">                r+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'o'</span>:</span><br><span class="line">                o+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'a'</span>:</span><br><span class="line">                a+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'k'</span>:</span><br><span class="line">                k+=<span class="number">1</span></span><br><span class="line">                now-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> c&gt;=r&gt;=o&gt;=a&gt;=k:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> now==<span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>可以改进↓：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberOfFrogs</span><span class="params">(self, croakOfFrogs: str)</span> -&gt; int:</span></span><br><span class="line">        c=r=o=a=k=<span class="number">0</span></span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">'c'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'r'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'o'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'a'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'k'</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        now=<span class="number">0</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> croakOfFrogs:</span><br><span class="line">            d[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'c'</span>:</span><br><span class="line">                now+=<span class="number">1</span></span><br><span class="line">                res=max(res,now)</span><br><span class="line">            <span class="keyword">elif</span> i==<span class="string">'k'</span>:</span><br><span class="line">                now-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> d[<span class="string">'c'</span>]&gt;=d[<span class="string">'r'</span>]&gt;=d[<span class="string">'o'</span>]&gt;=d[<span class="string">'a'</span>]&gt;=d[<span class="string">'k'</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> now==<span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p><a href="https://leetcode-cn.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/solution/jian-dan-san-wei-dong-tai-gui-hua-by-coldme-2/">超简单的（？）三维动态规划 - 生成数组 - 力扣（LeetCode）</a></p><p>学不来学不来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-contest-186</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-186.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-186.html</id>
    <published>2020-04-27T01:26:01.000Z</published>
    <updated>2020-04-27T14:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-186/problems/maximum-score-after-splitting-a-string/">分割字符串的最大得分</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-186/problems/maximum-points-you-can-obtain-from-cards/">可获得的最大点数</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-186/problems/diagonal-traverse-ii/">对角线遍历 II</a><strong>5</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode-cn.com/contest/weekly-contest-186/problems/constrained-subset-sum/">带限制的子序列和</a><strong>6</strong></li></ul><a id="more"></a><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxScore</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 1 的总个数</span></span><br><span class="line">        n1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'1'</span>:</span><br><span class="line">                n1 += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 最大值</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 当前 0 的个数</span></span><br><span class="line">        n0 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">'0'</span>:</span><br><span class="line">                n0 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n1 -= <span class="number">1</span></span><br><span class="line">            m = max(n0+n1, m)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxScore</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 问题简化：nums 两边共 k 个数总共最大和是多少</span></span><br><span class="line">        m = sum(nums[:k])</span><br><span class="line">        n = len(nums)</span><br><span class="line">        lastsum = m</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(k)):</span><br><span class="line">            j = k-i</span><br><span class="line">            <span class="comment"># print('j', j, nums[n-j])</span></span><br><span class="line">            <span class="comment"># print('i', i, nums[i])</span></span><br><span class="line">            lastsum = lastsum-nums[i]+nums[n-j]</span><br><span class="line">            m = max(m, lastsum)</span><br><span class="line">            print(m)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p><a href="https://leetcode-cn.com/problems/diagonal-traverse-ii/solution/mei-ge-shu-zu-yuan-su-de-wei-zhi-jue-ding-liao-ta-/">每个数组元素的位置决定了它在最后结果的位置 - 对角线遍历 II - 力扣（LeetCode）</a></p><p>优先从机器角度考虑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 便于机器内存切换</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDiagonalOrder</span><span class="params">(self, nums: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="comment"># 总共对角线数量</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            m = max(m, i+len(nums[i]))</span><br><span class="line">        res = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(nums[i])):</span><br><span class="line">                res[i+j].append(nums[i][j])</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">            result.extend(i[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 超时：便于人类思考</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDiagonalOrder1</span><span class="params">(self, nums: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="comment"># 总共对角线数量</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        length_map = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            length_map[i] = len(nums[i])</span><br><span class="line">            m = max(m, i+length_map[i])</span><br><span class="line">        <span class="comment"># 第 j 条对角线</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment"># 第 i 个数字</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(j+<span class="number">1</span>):</span><br><span class="line">                _j = j-i</span><br><span class="line">                <span class="keyword">if</span> _j&gt;=n <span class="keyword">or</span> i&gt;=length_map[_j]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                res.append(nums[_j][i])</span><br><span class="line">                <span class="comment"># print(res)</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p><a href="https://leetcode-cn.com/problems/constrained-subset-sum/solution/dpdan-diao-zhan-you-hua-xiang-jie-by-wangdh15/">DP+单调栈优化 详解 - 带限制的子序列和 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constrainedSubsetSum</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 1. 定义状态dp[i]为以i结尾的的最大子序和，那么当考虑第i+1个的时候，由于向量两个小标差距不大于k且非空，所以有以下状态转移方程</span></span><br><span class="line">        <span class="comment"># for j in range(k):</span></span><br><span class="line">        <span class="comment">#    dp[i+1] = max(dp[i+1], nums[i+1]+dp[i+1-j], nums[i+1])</span></span><br><span class="line">        <span class="comment"># 2. 优化：维护前 k 个 dp 的最大值</span></span><br><span class="line">        <span class="comment"># https://leetcode-cn.com/problems/sliding-window-maximum/</span></span><br><span class="line">        <span class="comment"># dp[i+1] = max( max(dp[i+1-j] for j in range(k)), 0 )+nums[i+1]</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        res = dp[<span class="number">0</span>]</span><br><span class="line">        s = [(dp[<span class="number">0</span>], <span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            dp[i] = max(nums[i], nums[i]+s[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">while</span> s <span class="keyword">and</span> s[<span class="number">-1</span>][<span class="number">0</span>]&lt;=dp[i]:</span><br><span class="line">                s.pop()</span><br><span class="line">            s.append((dp[i], i))</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>][<span class="number">1</span>]&lt;=i-k:</span><br><span class="line">                s.pop(<span class="number">0</span>)</span><br><span class="line">            res = max(res, dp[i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-186/problems/maximum-score-after-splitting-a-string/&quot;&gt;分割字符串的最大得分&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-186/problems/maximum-points-you-can-obtain-from-cards/&quot;&gt;可获得的最大点数&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-186/problems/diagonal-traverse-ii/&quot;&gt;对角线遍历 II&lt;/a&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode-cn.com/contest/weekly-contest-186/problems/constrained-subset-sum/&quot;&gt;带限制的子序列和&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-04-27</title>
    <link href="https://zronghui.github.io/private/2020/04/2020-04-27.html"/>
    <id>https://zronghui.github.io/private/2020/04/2020-04-27.html</id>
    <published>2020-04-26T13:11:45.000Z</published>
    <updated>2020-04-27T14:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3ae3e45ff69686aa2d7a5d80b3da7033ab8cc8c87fb2f2a93059dea0987609fd">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879dec0bab702e62ec40be4bd40d33dd8011ba51f8d43c98b9d5bc1629306176c05577d8355c1beaf3cd461fc88eb2faf0341dcf59de272fed2aba653dff2fe249ba70a664e958658d9c25bad99b53b312a4784912b3d4d824b393d3a9bf39c7fdbd9a91353baa205adaf325e03ecaed45d28078a69f9cf2ccacd2f2aa11e354b3559c4ac979673b198b7b92de870cc798d808bc2baaf32ef42c4f4b04b743fa6613d524a3eb63642c92dc881d7484bf501849da260d78b35a97bd4f01df208b423e66b6cc5c20122a10e7d2f50b4a85217932c5af0ed34d2756766311258d19f0b0af3245a5f26b60bca23e36f84f048ddb7ee5c038551bad76c9363a50468dff08154e61383bde85a6a10cd57a2ab38a1902e48eb0135ead3e20a583bb430549950305163b4c2504373d99192233403b6bb073f51ca5c990a8ff2ffdf74a7f24e5aa84c9918a6c2a4f5e95c389b5d9d3161afd00bb46e9d9740cece104e6b70b9bcc579ee425531663e49a70abeda8721547ac32c970af9a68cf6dfcac07d35e1ab15a64ee9be3ae6a9f8b4a0bab5f10f258e89ef9eb87c688d05df77c49cd06ab261399fbc18c0adfad35f97db46185ba6e6fa0fa2190f0283217de46878485f6dbda4b9487fee05b2bec9387f2719b1ba74401c9cafc2ed31b9c4fdafaa938d5a5434e6b36d05b92bba1c3d6e36eaafa3e9e883937e3f4af86120241c186c7586628e690621a970dd698a1d213f962d843455c040c68c72a5fa93710175223219ee6a39c703d883448d3018e69294cfcf21edd49e69ff39d6e07431a574ca9266b561ef1b834b386d5b71adfc553b159f460067bcf073df722201dabe1ee2ff08f45a41c25d7dfc0f36260556801e9971173d7c160e061359c9c0985cff84917cfe615cff07c3d23b83f77b8c49f40147855ad1489f8146bd84a9795fce9a488bd38546ed59462bb1b5efc368896867378515ccafe787482fe1ef5565568adc4e05eb927fd2c5b6a9b6db2b8ca65c7d4f634b06c148cd3b34e01822637b5c0b86d869f95bf94f5a5eaeff1d117daaaaf034f088279300230744d22f02c7bfe0dd4fb3d941d5e88ec5cf2a6121a7fa1d8a9c74197025f3f2d3f1afbd444a403223a104785289d8c8dc6c1945a417ff27789a254437c909ffb336fe86a1f5cf547e7eea9bbd62abd5177c674775963f50f597fb9242161b501a459632e4c615f84201917a7d72f38f950852aad1f8a4f2a74fa79f454f0c889845cd53e00213de935b5adc966fe965de5e2575f17c744728004a8d665c9159f13c94c17ce5cd59715ff93cf7fb35c9f2df625c75eccdae3343b904ea2d33947a84ea7075001a5d9ab07d84d34288257d1e670ffb535a92923465c053482d268cbac7ec06edd1fa566ad1206b92033297de3df26a9d428c11d6ee991d75ade94d09507c496970bba5be6d2425b6b9b4f559f930fe86b8fc896901bbe75183fddb55144466009edb4d181dc8ced8ed2a5d5af078caa1e0013cee8054ebdc07260d876a4bc77cf34d6677d632df8474757da606b6ec30f3bc2c2bcfed8a7b16add9b5c4ad4aaa1bd653a3b84115927e71e533a3a4cde77bf867da0a120c99b9e25816b1215d3859c0a567bb7b87567de9f84e6d389c2ec46ef7aa370590d5802f60a62b029e7a0062a18de66bd7ccc15eb47835af70b5b20da7d9bf9d91c5a860cd4b40484112878938b91a44f6e5d9e2782308c7d83a96dab37e2bb08f3b56c6eef80792ab4dd7757c52618250b65029f3f69d0ed96d5329708f835948d541f6476a07ec0a554c765cc6e1e1acdf9530b917067bc2dd71d6c7022475bd38c3b4e6a7ba6286683a6280ccbd2fcb4de83670c9db8771ea6c7f21d648149b6a8c3cd433bf0c2d2ce46596c03e36a1f036a9ec5c6899f26f0da41bc5be67dba65ca1ccd959de0442d7e493dd65610659f3bfe9e46c0c596834d824d7ee68562c70c726455e8634b6472b78823407d07ac47134b7f94c655749ca62bf163ba1dedbac7046442ce4596e21123eef6ed8e77d2b165f7b0c7e2648e2dbd250c6b6f96d3fb1fb997ea9b8a6468052e3df55a2fa0bc62b8a63db7fa9f69afe15da029380b6eba3bb854f7274394ee3f77dcd35a46945d09e2dacc320dad3b1091d7f6f1e9b408009a56cf556668975b249aace4d5d0dcdbc1d401af4d0934772e044bb13daaf299d3e2d786005191fef35da0140657887ddc1527746ca872dc98caddd7bf383bf1898b94b27246c1d64a363f5e7f80a5871e6736fbb3aee06be51174332e7e6b5821aecb69c652d6eea8f3459953ac217808fdb0f175ce011bb1454c62252f03da9fb3d8437c667749b6fa67160066f58e13f6369285b5095e6d35ed5fd1f7997b010a0f5b5b72cfa787f5d5276153c5fe7fa492f7603960682990d851dacaf54f4ecd0af02d4baa9af3a137336092e3896a20049397dc49399bed6f2ffdfbe20ab7a2af575341d44cb4720e03468f9646393b289b54c65d52dfd38b183702486e5f909dbfb3924d04f364dfc6731477549fef9b36d032af8ab1e7a68f64a4572479197b16e6f3f3ffc0e32429ca3a786f1bde746f6cb527cc2a4c14e9ac4283325f45738857333303d5656524aae0673c0e5482198af85ab657253f19ba414b4905488bdbf71e2ac70465ca24cbcbce8c54a382d362a5f675e68004d80ded476d0602225c7bd85e0ab7bc9457aa5c228bc47a88cc07c8775265e62bc053bdbecc45a11ac7bcb8f7cbb898dc7270974eec1aaa5b17903cd81e691967b9126e8564e042bbe9af4fd98c81f7baaa3849c25363381ea3f643c1609ce563d625c4293b67f46f32a029fe7a3ebf865282712c6a64a8d55f43a35fec3f75510bd29ee0a886d9a724578f7bb3ab089561662ccf8e4cf008b631377f8b890674532132a3253b99611f11a89968ddba4f53bf5d8d7f6d8c8ba58ae87c0b8c8a2b9e32af9eeaa5732bc163bf472c105474510f5ec7ef22258afe582137aa94da5e0f8087cee3b69a2dae2fbf0da1095a2ccd2f0d5d638756bf7cbcc8623da73f66df852b5bdb129d255b85c0e631087e31b5eb319352b79f61b8eceae757db5e85745546cdd22ddab7df7b119ff0cb678678ca771a081314f07d671ef04913f13e08bc401eff2f0349bd28e91dc15ea28186a6a7113076c98724274d7b231410624d6628f8277d347fdca34f66fd07168915efca4987bf2511f4a5c07901cac1a2904a185bff2fccc18642a4af4c13f2d6be1560f574913f92dd1feb10f0200c50d15475323a609290918bfa27565e582ef3fbe0fd3a0fc9e3a97083e90767b7961e2455b51caaab5633e5c51de202e5f773b8e2bc849501e5c449380aa8304504dbd3c1f1c267c710b37bebe69941a91c942739a5fee024c431856c69028c373ccea5da165eac2946caa32c221bb54da3863de47cb156dbb6e15de1ad1e2f0df9c3bf1eb5cc070b87d232df8dc11b35b8dfc0e972d90f2073b2c52e223cebcecaa11a0caf297195061b49378f96c5156431b41d7d0db52333a9109c4f68a93b6519a8b47f08448e62f9449b2c88a04a45d4841cf6881e18e41d121d232c2d9ece6b44bc270dba5b084ff996b844dec1f06c900cb86afc773f4e5238ae3697c01321a3b202da2fa79f54a71645f09f6ea86bc9bac033498f8b0d18f5dde08e98dbc4feb298fdb79092e8528712eaeb675541b6beb333e9353653aa226771b6431767ce60962a854788be7bf3f945915353aaee856cd19dad4709f66d79de2b418d122691cf22b45ccc9e20bfb2c6ebf13cc43e73a3b3a33732baafde9e007c6fb74a76b64e1487bda23b828969a272e265152aafdd5c95b5fe6c16dab0e72190be786e59b88db60a2a19826332e353db28e38a00de83e15db93a9299d4f1dc64debb5a4d9f477b3e0e9afc91eb6458461ddfce076a21f1c462869145536a7fbf9056c27a86a71bc179e6531b8dac43d82d03be5a95d0c2a616f7a4227d43b244acada748ed40e1c1e1beb9522302888fbde345cf16e4fb0558ab306b8f95789a71a51597a0f985c90301b2e66c2a04e37afb0c97951e97155dbd170ded75121a83659ebc9451c63b39b92e418d4f7a7bdf43a0217d901f1a6dfea4bf4300e78402cc7073c9fadc0acb722f896c06fff03248199e448d5d6926c8af54979e4eee2adc286d4f474232fb4b47796a1fffcf18ed745cda9041460f3e0919a6d5db3835b7849d02abc0b4a64826fd0dc9e206aaf9ca87f810991e8c0654af56668cb0678ad6cb210cc7b40444180dc135ed7a270ed095b1eef1215a2d68b4704d9771d9b0ea7859e00eb9adde9d4e5917f788349bbd078b6307e0511ca87e83df87202fe3a2c7bbc34f6791b8de1bf31d06741816fc282c59658a4b6d56750162e5e45264d8719a8e2ce52acda392f8f1094aa9c0b39c79212b8e067dcdf5b195cea067d7c9e1e9bf2dda5b0b7880a4930adc9942f076fda7f9f3d78edb63d86cda70caa3b14aae015b062e37455abf04326b696a2424e5c2d9a7d679135c8e2342d4949a300d26b90308bd27fa388864b98bc781ef5a49f9aee60f3d44d7894f2f6ca21cbfe719fef0b0f2de32469e4ae241c0850ac4dcf2a922eb49772deabd8d3ab85c1b253f024ea38fe821c0da094de0c31fdcb3f87949a7b73197bacab6f8038218d28f5545ff5a626dec7f1d86c421d14eb404155e6fa153b55d2d438258faf541d657721511cec9de3d61e595014ce309f8cb4a234a1788d012821c54cd1309736212b8aebb5e16bb655d7797390869487036872f1425beccbfc5ccaf705bdffc60ec8296c72bdf473e0d44b1bd46aa00344ded1ad9c6786d60a98e7d63ed07bb4c4f8ecb56fd37e6031c5a4542678f283c67543cca4d00c0c2253b1679732a0f17cfe8586f49e6aba50435f8c89dc56ab7e7e871a92dd7ed970fe08f0b59c92caff27bd5d85031328d63</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="4" scheme="https://zronghui.github.io/categories/private/2020/4/"/>
    
    
  </entry>
  
  <entry>
    <title>2020-04-26</title>
    <link href="https://zronghui.github.io/private/2020/04/2020-04-26.html"/>
    <id>https://zronghui.github.io/private/2020/04/2020-04-26.html</id>
    <published>2020-04-26T12:49:06.000Z</published>
    <updated>2020-04-26T13:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="463e988d386ee5930ad26d73f689cc0388885ff3534443996305fbb02692f413">d4ddde657b62ae9d724a3e00dfabc05a45fdaf36a8bc4373ea59463028fb879df3385b5aa616ef27884fe3774c4023a9f1eed75171bfa1c728f8656a50179f9d93ca024c3031f1e68166aae0629e18bebf76bfe8f8cf24e39f6770abe1ba7cff87c2130409ac0aa6b021b630b1f4b827cc3a90f58a0f306bc9e20ca5ada39766c3dce3bbe2f3e52a7ffec5723b8b63c99dbe54ecf5157085d5b906ffe0ea17f75f933aa7a944ecb8e5c1864ea6f662cc5120cf1f72c93942e0bd10fc692bc1bd20687ddaee40d171464f121c4da1af20c1f83fb05a86f36f3c6aee69dc27f4d2037df904568f8e2202b6e7ff88cf9978b84cec5394b3f1c584cc0e0783a99a597f1db06b3f4633e59eb4939cab264cd90d12982f3be71287d2f473715bbc789ef7c5eebf4fa1d55be0ef3da4408164cc8e5d407dd035f171af6716be6c899fd4f9f4758e6a8236894a2d73ad407135c6d67e49492731440dc940ef622a8bcd2b83730f8ed6265ce29b773399ff0d8c122e25316647b55add608e267499fb40336bdf1fa3e5456bc26273bf477f565fc0591d7228d41693aa5fec8618031dea1ca893f52e3ecdd683c64bccc98a27e4c048bb6a139afd0dd20cce4fa76248aa6bb431d8bb9f26353b9212d8ebb5b61f933a0779c177b288d6f41d5c32b0c1fd35dec1718bc73114f99e1de766c93c1ab145820639369a729013d77196f7ad0e1203d003faf4e2ac23088eeee9d827c307a8edd1031184f132c9b3e8685a3f46fc2343545ec8cd6d4f2204b35340cb83bd708ff37aed312712f4d22f358a7a63b5a204c2bcc449dec12468718002c8f38d314d78c1766e7c8bf5c8641edc268b402684a908891e0e97470d9aa5a5dc9a7f4f0a03cb329a87fc8569628f62f5313b6176d81a0ead2eda70aff13b9f980f0035852a0e2fe473551c617f5eb4f2a77aa82b8ecb4cc4bce38bf036858743f62f57d34ebb16b6af39fdcdf262c245a07475af1a2ea763ad7fd5d6db94767cc84feaef8f39eb92d74206c804ed44a9c8af</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://zronghui.github.io/categories/private/"/>
    
      <category term="2020" scheme="https://zronghui.github.io/categories/private/2020/"/>
    
      <category term="4" scheme="https://zronghui.github.io/categories/private/2020/4/"/>
    
    
  </entry>
  
  <entry>
    <title>08-KDE Connector</title>
    <link href="https://zronghui.github.io/Mac/08-KDE-Connector.html"/>
    <id>https://zronghui.github.io/Mac/08-KDE-Connector.html</id>
    <published>2020-04-23T09:13:32.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><p><a href="https://kde.inoki.cc/2019/09/01/KDE-Connect-macOS-GSoC-Final-Release/">KDE Connect macOS Release | Inoki in KDE</a><br><a href="https://github.com/Inokinoki/kde-blog/releases">Releases · Inokinoki/kde-blog</a></p><p>官方发行Mac 版本</p><p><a href="https://binary-factory.kde.org/view/MacOS/job/kdeconnect-kde_Release_macos/">kdeconnect-kde_Release_macos [Jenkins]</a></p><p><a href="https://github.com/KDE/kdeconnect-kde">KDE/kdeconnect-kde: KDE Connect adds communication between KDE and your smartphone.</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="https://zronghui.github.io/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-02</title>
    <link href="https://zronghui.github.io/blockchain/blockchain-02.html"/>
    <id>https://zronghui.github.io/blockchain/blockchain-02.html</id>
    <published>2020-04-23T08:39:38.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="非文本文件如何存储-、数据是存储在哪里的、分布式存储在第三方机构和传统方式有何区别"><a href="#非文本文件如何存储-、数据是存储在哪里的、分布式存储在第三方机构和传统方式有何区别" class="headerlink" title="非文本文件如何存储 、数据是存储在哪里的、分布式存储在第三方机构和传统方式有何区别"></a>非文本文件如何存储 、数据是存储在哪里的、分布式存储在第三方机构和传统方式有何区别</h2><p>按照区块链专家 Wulf Kaal 教授的说法，去中心化的存储选项有这些：</p><ul><li>把一切都存储在区块链中</li><li>对等文件系统（Peer to peer file system），如 IPFS</li><li>去中心化云文件存储，如 Storj，Sia，Ethereum，Swarm 等等</li><li>分布式数据库，如 Apache Cassandra，Rethink DB 等等</li><li>巨链数据库（BigChainDB）</li><li>Ties DB， 分布式结构化数据存储的第一个公共数据库</li></ul><h3 id="1-把一切都存储在区块链中"><a href="#1-把一切都存储在区块链中" class="headerlink" title="1.把一切都存储在区块链中"></a>1.把一切都存储在区块链中</h3><p><strong>优点</strong>：</p><p>最简单</p><p><strong>缺点</strong>：</p><p>区块链交易确认缓慢【对于汇款来说，它似乎很快（每个人都可以等），但是，对于丰富的应用程序数据流来说，它实在是太慢了】</p><p>不可变【不可变性是区块链的优势，它给了区块链高稳健性，但是对于数据存储来说却是个弱点，造成了容量问题】</p><p>总结：</p><p>因此，在区块链中存储数据对于丰富的去中心化应用程序来说，不是个好选择</p><p>一般在块上记录交易数据/日志</p><h3 id="2-对等文件系统（Peer-to-peer-file-system），如-IPFS"><a href="#2-对等文件系统（Peer-to-peer-file-system），如-IPFS" class="headerlink" title="2.对等文件系统（Peer to peer file system），如 IPFS"></a>2.对等文件系统（Peer to peer file system），如 IPFS</h3><p><strong>数据存放在任何人的主机上</strong></p><p>这个技术建立在 BitTorrent 协议和分布式哈希表（Distributed Hash Table）的基础之上</p><p><strong>优点</strong>：速度快</p><p><strong>缺点</strong>：如果你要分享文件，就得保持在线；一旦上传，它们就不能被修改或删除；不能通过其有意义的内容来搜索它们</p><h3 id="3-去中心化云文件存储，如-Storj，Sia，Ethereum，Swarm-等等"><a href="#3-去中心化云文件存储，如-Storj，Sia，Ethereum，Swarm-等等" class="headerlink" title="3.去中心化云文件存储，如 Storj，Sia，Ethereum，Swarm 等等"></a>3.去中心化云文件存储，如 Storj，Sia，Ethereum，Swarm 等等</h3><p>用户出租硬盘空间，<strong>数据是托管在用户的计算机上</strong></p><p>从用户的角度来看，这些存储就是像 Dropbox 那样的云存储</p><p><strong>优点</strong>：你不再需要保持在线就能分享你的文件，<strong>只需上传文件，就可以在云中使用</strong>了；这些存储非常<strong>可靠，速度快，容量大</strong>。但是它们只提供静态文件，也<strong>没有内容搜索</strong>，</p><p><strong>缺点</strong>：还因为它们都是建立在租用的硬件上，所以不是免费的。</p><h3 id="4-分布式数据库，如-Apache-Cassandra，Rethink-DB-等等"><a href="#4-分布式数据库，如-Apache-Cassandra，Rethink-DB-等等" class="headerlink" title="4.分布式数据库，如 Apache Cassandra，Rethink DB 等等"></a>4.分布式数据库，如 Apache Cassandra，Rethink DB 等等</h3><p><strong>优点</strong>：速度快、可扩展、容错、支持丰富的查询语言</p><p><strong>缺点</strong>：不是拜占庭证明（集群中的所有节点相互之间完全信任。因此，任何一个恶意节点就能毁掉整个数据库）</p><h3 id="5-巨链数据库（BigChainDB）"><a href="#5-巨链数据库（BigChainDB）" class="headerlink" title="5.巨链数据库（BigChainDB）"></a>5.巨链数据库（BigChainDB）</h3><p><strong>优点</strong>：可以解决数据存储和交易速度问题、拥有巨大的数据容量和非常快的交易</p><p><strong>缺点</strong>：不是拜占庭证明</p><p>巨链数据库可能对私有区块链很有用（足够信任自己内部的节点）</p><h3 id="6-Ties-DB，-分布式结构化数据存储的第一个公共数据库"><a href="#6-Ties-DB，-分布式结构化数据存储的第一个公共数据库" class="headerlink" title="6.Ties DB， 分布式结构化数据存储的第一个公共数据库"></a>6.Ties DB， 分布式结构化数据存储的第一个公共数据库</h3><p>这是目前最好的公共数据库的可选项</p><p><strong>优点</strong>：任何用户都有数据库写入权限。但是，用户由他们的公钥识别，同时，所有的请求有签名。创建之后，记录记住它的创建者，创建者则成为记录的所有者。之后，<strong>记录只能被记录所有者修改</strong>。每个人都可以阅读所有的记录，因为<strong>数据库是公开的</strong>。根据请求和复制检查所有的权限。额外的权限可以通过智能合约管理。</p><h3 id="其他信息："><a href="#其他信息：" class="headerlink" title="其他信息："></a>其他信息：</h3><p>区块链的成本高，因此尽可能保持你的区块链最小化是非常重要的</p><p>采用区块链技术的主要驱动力一直是安全性</p><p>区块链中，数据透明，可能引发隐私问题，另一方面便于分析 客户/用户 的行为模式</p><p>尽管现在数据库很便宜，但在考虑各方面的问题后，商业和金融领域是最适合用死贵的区块链来存储数据的</p><p>智能合约是指在某些触发条件下自动执行的迷你程序。在区块链世界中，某些区块链技术，特别是以太坊，支持在插入新事务时执行代码</p><h2 id="数据治理的应用场景"><a href="#数据治理的应用场景" class="headerlink" title="数据治理的应用场景"></a>数据治理的应用场景</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数据治理：是对数据资产管理行使权力和控制的活动集合</p><p>ITSS WG1认为数据治理包含以下几方面内容<br>（1）确保信息利益相关者的需要评估，以达成一致的企业目标，这些企业目标需要通过对信息资源的获取和管理实现；<br>（2）确保有效助力业务的决策机制和方向；<br>（3）确保绩效和合规进行监督。</p><p>从目的来讲，数据治理就是要<strong>对数据的获取、处理、使用进行监管</strong>（监管就是我们在执行层面对信息系统的负反馈），而监管的职能主要通过以下五个方面的执行力来保证——发现、监督、控制、沟通、整合。</p><p><strong>个人理解</strong>：企业收集并管理数据；企业分析数据，用来辅助决策；企业监管、监督数据，确保安全性</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU2ODQzNzAyNQ==&mid=2247483817&idx=1&sn=65651edc7ac6508d65c5eecd2da0d928&chksm=fc8cb1e7cbfb38f1fbb9af73f0470c14d758344a28aba613f96476d322a4122657299abf4c04&scene=27#wechat_redirect">数据库那么便宜，为何还要死贵的区块链来存储数据？</a></p><p><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%86">数据治理_百度百科</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&mid=2649968514&idx=1&sn=4f0734265a897e0ca2441139af3d99a3&chksm=beca3f8489bdb6923e4e3736a2e9798e0992ebde1aac0479356713ccb5575b9efc179a89d9f9&scene=27#wechat_redirect">区块链存储，现在的做法可能都错了！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://zronghui.github.io/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>fe-tricks</title>
    <link href="https://zronghui.github.io/frontEnd/fe-tricks.html"/>
    <id>https://zronghui.github.io/frontEnd/fe-tricks.html</id>
    <published>2020-04-23T04:31:25.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="值得每日学习的-fe-资源"><a href="#值得每日学习的-fe-资源" class="headerlink" title="值得每日学习的 fe 资源"></a>值得每日学习的 fe 资源</h2><p><a href="https://github.com/haizlin/fe-interview">haizlin/fe-interview: 前端面试每日 3+1，以面试题来驱动学习，提倡每日学习与思考，每天进步一点！每天早上5点纯手工发布面试题（死磕自己，愉悦大家）</a><br><a href="https://github.com/haizlin/fe-interview/blob/master/category/skill.md">fe-interview/skill.md at master · haizlin/fe-interview</a></p><h3 id="响应式和自适应"><a href="#响应式和自适应" class="headerlink" title="响应式和自适应"></a>响应式和自适应</h3><p><a href="https://juejin.im/entry/58b6414a128fe1006421bfa7">响应式和自适应的区别 - 前端 - 掘金</a><br><a href="https://segmentfault.com/a/1190000015759719">(12) 自适应页面的实现方式 - 前端开发 - SegmentFault 思否</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">800px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.search_engines</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完 CSS 后，需要重命名css, 如 moon.m.0001.css  0001 是版本号，这样可以让浏览器强制加载新的 CSS</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontEnd" scheme="https://zronghui.github.io/categories/frontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>信息系统实训-中期PPT</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-%E4%B8%AD%E6%9C%9FPPT.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-%E4%B8%AD%E6%9C%9FPPT.html</id>
    <published>2020-04-20T04:40:09.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><hr><p>theme: gaia<br>_class: lead<br>paginate: true<br>backgroundColor: #fff<br>backgroundImage: url(‘<a href="https://marp.app/assets/hero-background.jpg&#39;">https://marp.app/assets/hero-background.jpg&#39;</a>)<br>marp: true</p><hr><h1 id="书籍搜索引擎"><a href="#书籍搜索引擎" class="headerlink" title="书籍搜索引擎"></a>书籍搜索引擎</h1><p>by 张荣辉-2019140740</p><hr><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><table><thead><tr><th>网站</th><th>类型</th><th>爬取条数（共 18w 条）</th></tr></thead><tbody><tr><td><a href="http://www.zxcs.me/">知轩藏书</a></td><td>网络小说</td><td>9976</td></tr><tr><td><a href="http://www.java1234.com/">Java知识分享网</a></td><td>计算机书籍</td><td>9441</td></tr><tr><td><a href="https://www.shudan.vip/">书单网</a></td><td>各种书籍</td><td>159335</td></tr><tr><td><a href="http://slfswh.xiangzhan.com/">读书皮</a></td><td>畅销流行书籍</td><td>899</td></tr><tr><td><a href="https://volmoe.com/">Vol.moe</a></td><td>漫画</td><td>8482</td></tr></tbody></table><hr><h1 id="搜索页"><a href="#搜索页" class="headerlink" title="搜索页"></a>搜索页</h1><img src="https://i.loli.net/2020/04/20/AoV5KxGqwUO1CWl.png" alt="AoV5KxGqwUO1CWl" style="zoom:33%;" /><hr><h1 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h1><p><img src="https://i.loli.net/2020/04/20/kUVtjuwmRXqS8xs.png" alt="kUVtjuwmRXqS8xs"></p><hr><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li><input disabled="" type="checkbox"> 来源网站过滤</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="信息系统实训" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/"/>
    
      <category term="提交作业" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>斐讯K2路由刷机</title>
    <link href="https://zronghui.github.io/other/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7%E6%9C%BA.html"/>
    <id>https://zronghui.github.io/other/%E6%96%90%E8%AE%AFK2%E8%B7%AF%E7%94%B1%E5%88%B7%E6%9C%BA.html</id>
    <published>2020-04-20T00:03:32.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><ol><li>手机上连接无线网，查看无线网详情，可以看到路由器配置地址</li><li>手动更新 刷V22.6.526.199官方固件</li><li>刷入Breed</li><li>刷入第三方固件 </li></ol><p><a href="http://www.upantool.com/gujian/phicomm/14035.html">斐讯K2 V22.6.526.199官方固件-刷机备用下载-斐讯固件-U盘量产网</a></p><p><a href="https://tbvv.net/posts/0101-breed.html">斐讯K1、K2、K2P 刷机、刷入Breed 辅助工具 | tb</a></p><p><a href="https://github.com/moonjoin/k2-firmware">moonjoin/k2-firmware: 斐讯K2刷机，固件，breed</a></p><img src="https://i.loli.net/2020/04/20/bTgrHKL3CG8sZjy.png" alt="bTgrHKL3CG8sZjy" style="zoom:50%;" /><h3 id="桥接设置"><a href="#桥接设置" class="headerlink" title="桥接设置"></a>桥接设置</h3><p><img src="https://i.loli.net/2020/04/20/OUWHJBLTlC37ndN.png" alt="OUWHJBLTlC37ndN"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="other" scheme="https://zronghui.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>biweekly-contest-24</title>
    <link href="https://zronghui.github.io/biweekly-contest-24.html"/>
    <id>https://zronghui.github.io/biweekly-contest-24.html</id>
    <published>2020-04-19T01:56:34.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 64. Minimum Path Sum</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-64-Minimum-Path-Sum.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-64-Minimum-Path-Sum.html</id>
    <published>2020-04-18T10:29:46.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/minimum-path-sum/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/minimum-path-sum/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top<br>left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p><p><strong>Note:</strong> You can only move either down or right at any point in time.</p><p><strong>Example:</strong></p><pre><code>Input:[  [1,3,1],  [1,5,1],  [4,2,1]]Output: 7Explanation: Because the path 1-&gt;3-&gt;1-&gt;1-&gt;1 minimizes the sum.</code></pre><p><strong>Tags:</strong> Array, Dynamic Programming</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 3. dp</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        m = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">and</span> j==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> i==<span class="number">0</span>:</span><br><span class="line">                    grid[i][j] += grid[i][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> j==<span class="number">0</span>:</span><br><span class="line">                    grid[i][j] += grid[i<span class="number">-1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    grid[i][j] += min(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line">    <span class="comment">#  1. 简单的递归</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum1</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(grid, n, m, i, j)</span>:</span></span><br><span class="line">            res = grid[i][j]</span><br><span class="line">            <span class="keyword">if</span> i==n<span class="number">-1</span> <span class="keyword">and</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> i==n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res + helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res + helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">            <span class="keyword">return</span> res + min(helper(grid, n, m, i, j+<span class="number">1</span>), helper(grid, n, m, i+<span class="number">1</span>, j))</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> helper(grid, len(grid), len(grid[<span class="number">0</span>]), <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 递归 + 存储 递归过程值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum2</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        n = len(grid)</span><br><span class="line">        m = len(grid[<span class="number">0</span>])</span><br><span class="line">        cache = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]<span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(grid, n, m, i, j)</span>:</span></span><br><span class="line">            res = grid[i][j]</span><br><span class="line">            <span class="keyword">if</span> i==n<span class="number">-1</span> <span class="keyword">and</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> i==n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> cache[i][j+<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> res+cache[i][j+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    t = helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">                    cache[i][j+<span class="number">1</span>] = t</span><br><span class="line">                    <span class="keyword">return</span> res + t</span><br><span class="line">            <span class="keyword">elif</span> j==m<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">if</span> cache[i+<span class="number">1</span>][j]:</span><br><span class="line">                    <span class="keyword">return</span> res+cache[i+<span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    t = helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">                    cache[i+<span class="number">1</span>][j] = t</span><br><span class="line">                    <span class="keyword">return</span> res + t</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> cache[i][j+<span class="number">1</span>]:</span><br><span class="line">                t1 = cache[i][j+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t1 = helper(grid, n, m, i, j+<span class="number">1</span>)</span><br><span class="line">                cache[i][j+<span class="number">1</span>] = t1</span><br><span class="line">            <span class="keyword">if</span> cache[i+<span class="number">1</span>][j]:</span><br><span class="line">                t2 = cache[i+<span class="number">1</span>][j] </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                t2 = helper(grid, n, m, i+<span class="number">1</span>, j)</span><br><span class="line">                cache[i+<span class="number">1</span>][j] = t2</span><br><span class="line">            <span class="keyword">return</span> res + min(t1, t2)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> helper(grid, n, m, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/minimum-path-sum/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a &lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt; grid filled with non-negative numbers, find a path from top&lt;br&gt;left to bottom right which &lt;em&gt;minimizes&lt;/em&gt; the sum of all numbers along its path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can only move either down or right at any point in time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1-&amp;gt;3-&amp;gt;1-&amp;gt;1-&amp;gt;1 minimizes the sum.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 200. Number of Islands</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-200-Number-of-Islands.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-200-Number-of-Islands.html</id>
    <published>2020-04-17T11:04:26.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/number-of-islands/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/number-of-islands/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of<br>islands. An island is surrounded by water and is formed by connecting adjacent<br>lands horizontally or vertically. You may assume all four edges of the grid<br>are all surrounded by water.</p><p><strong>Example 1:</strong></p><pre><code>Input:11110110101100000000Output:  1</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:11000110000010000011Output: 3</code></pre><p><strong>Tags:</strong> Depth-first Search, Breadth-first Search, Union Find</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeIsland</span><span class="params">(self, grid, i, j, n, m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=n <span class="keyword">or</span> j&gt;=m <span class="keyword">or</span> grid[i][j]==<span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        grid[i][j] = <span class="string">'0'</span></span><br><span class="line">        self.removeIsland(grid, i<span class="number">-1</span>, j, n, m)</span><br><span class="line">        self.removeIsland(grid, i+<span class="number">1</span>, j, n, m)</span><br><span class="line">        self.removeIsland(grid, i, j<span class="number">-1</span>, n, m)</span><br><span class="line">        self.removeIsland(grid, i, j+<span class="number">1</span>, n, m)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n, m = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j]==<span class="string">'1'</span>:</span><br><span class="line">                    self.removeIsland(grid, i, j, n, m)</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/number-of-islands/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a 2d grid map of &lt;code&gt;&amp;#39;1&amp;#39;&lt;/code&gt;s (land) and &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt;s (water), count the number of&lt;br&gt;islands. An island is surrounded by water and is formed by connecting adjacent&lt;br&gt;lands horizontally or vertically. You may assume all four edges of the grid&lt;br&gt;are all surrounded by water.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
11110
11010
11000
00000

Output:  1&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:
11000
11000
00100
00011

Output: 3&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Depth-first Search, Breadth-first Search, Union Find&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Breadth-first Search" scheme="https://zronghui.github.io/tags/Breadth-first-Search/"/>
    
      <category term="Depth-first Search" scheme="https://zronghui.github.io/tags/Depth-first-Search/"/>
    
      <category term="Union Find" scheme="https://zronghui.github.io/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 844. Backspace String Compare</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-8**/leetcode-844-Backspace-String-Compare.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-8**/leetcode-844-Backspace-String-Compare.html</id>
    <published>2020-04-17T09:39:09.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/backspace-string-compare/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/backspace-string-compare/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two strings <code>S</code> and <code>T</code>, return if they are equal when both are typed<br>into empty text editors. <code>#</code> means a backspace character.</p><p><strong>Example 1:</strong></p><pre><code>Input: S = &quot;ab#c&quot;, T = &quot;ad#c&quot;Output: true**Explanation** : Both S and T become &quot;ac&quot;.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: S = &quot;ab</code></pre><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/backspace-string-compare/solution/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode/">比较含退格的字符串 - 比较含退格的字符串 - 力扣（LeetCode）</a></p><p>虽然第二种看起来厉害点，space O(1), 但是time memory 都不如第一种，不知为何</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">backspace</span><span class="params">(self, S)</span>:</span></span><br><span class="line"><span class="function">        res </span>= <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i in S:</span><br><span class="line">            <span class="keyword">if</span> i!=<span class="string">'#'</span>:</span><br><span class="line">                res += i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = res[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="function">def <span class="title">backspaceCompare1</span><span class="params">(self, S: str, T: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        s </span>= self.backspace(S)</span><br><span class="line">        t = self.backspace(T)</span><br><span class="line">        <span class="keyword">return</span> s==t</span><br><span class="line">    </span><br><span class="line">    <span class="function">def <span class="title">backspaceCompare</span><span class="params">(self, S: str, T: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        def <span class="title">skip</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="function">            skip </span>= <span class="number">0</span></span><br><span class="line">            <span class="function"><span class="keyword">for</span> i in <span class="title">reversed</span><span class="params">(S)</span>:</span></span><br><span class="line"><span class="function">                <span class="keyword">if</span> i</span>==<span class="string">'#'</span>:</span><br><span class="line">                    skip += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> skip:</span><br><span class="line">                        skip -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        yield i</span><br><span class="line">        <span class="keyword">return</span> all(x==y <span class="keyword">for</span> x, y in itertools.zip_longest(skip(S), skip(T)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/backspace-string-compare/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/backspace-string-compare/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two strings &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt;, return if they are equal when both are typed&lt;br&gt;into empty text editors. &lt;code&gt;#&lt;/code&gt; means a backspace character.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: S = &amp;quot;ab#c&amp;quot;, T = &amp;quot;ad#c&amp;quot;
Output: true
**Explanation** : Both S and T become &amp;quot;ac&amp;quot;.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: S = &amp;quot;ab&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-8**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-8/"/>
    
    
      <category term="Stack" scheme="https://zronghui.github.io/tags/Stack/"/>
    
      <category term="Two Pointers" scheme="https://zronghui.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 55. Jump Game</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-5**/leetcode-55-Jump-Game.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-5**/leetcode-55-Jump-Game.html</id>
    <published>2020-04-17T04:40:04.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/jump-game/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/jump-game/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array of non-negative integers, you are initially positioned at the<br>first index of the array.</p><p>Each element in the array represents your maximum jump length at that<br>position.</p><p>Determine if you are able to reach the last index.</p><p><strong>Example 1:</strong></p><pre><code>Input: [2,3,1,1,4]Output: trueExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [3,2,1,0,4]Output: falseExplanation: You will always arrive at index 3 no matter what. Its maximum             jump length is 0, which makes it impossible to reach the last index.</code></pre><p><strong>Tags:</strong> Array, Greedy</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/">跳跃游戏 - 跳跃游戏 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump1</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 12:29-12:34  5min</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [<span class="number">0</span>]*n</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> dp[i]:</span><br><span class="line">                <span class="comment"># 0-&gt;3 1 2 3</span></span><br><span class="line">                dp[i+<span class="number">1</span>:min(n, i+<span class="number">1</span>+nums[i])] = [<span class="number">1</span>] * nums[i]</span><br><span class="line">                <span class="keyword">if</span> dp[<span class="number">-1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> bool(dp[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 贪心</span></span><br><span class="line">        <span class="comment"># 12:37-12:39.5   2.5min</span></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i&gt;m:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            m = max(m, i+nums[i])</span><br><span class="line">            <span class="keyword">if</span> m&gt;=n<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> m&gt;=n<span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/jump-game/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/jump-game/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an array of non-negative integers, you are initially positioned at the&lt;br&gt;first index of the array.&lt;/p&gt;
&lt;p&gt;Each element in the array represents your maximum jump length at that&lt;br&gt;position.&lt;/p&gt;
&lt;p&gt;Determine if you are able to reach the last index.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array, Greedy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-5**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-5/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
      <category term="Greedy" scheme="https://zronghui.github.io/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 72. Edit Distance</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-7**/leetcode-72-Edit-Distance.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-7**/leetcode-72-Edit-Distance.html</id>
    <published>2020-04-16T14:38:56.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/edit-distance/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/edit-distance/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given two words <em>word1</em> and <em>word2</em> , find the minimum number of operations<br>required to convert <em>word1</em> to <em>word2</em>.</p><p>You have the following 3 operations permitted on a word:</p><ol><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ol><p><strong>Example 1:</strong></p><pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;Output: 3Explanation: horse -&gt; rorse (replace &apos;h&apos; with &apos;r&apos;)rorse -&gt; rose (remove &apos;r&apos;)rose -&gt; ros (remove &apos;e&apos;)</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;Output: 5Explanation: intention -&gt; inention (remove &apos;t&apos;)inention -&gt; enention (replace &apos;i&apos; with &apos;e&apos;)enention -&gt; exention (replace &apos;n&apos; with &apos;x&apos;)exention -&gt; exection (replace &apos;n&apos; with &apos;c&apos;)exection -&gt; execution (insert &apos;u&apos;)</code></pre><p><strong>Tags:</strong> String, Dynamic Programming</p><p><strong>Difficulty:</strong> Hard</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/edit-distance/solution/xiong-mao-shua-ti-python3-dong-tai-gui-hua-yi-dong/">(2) 【🐼熊猫刷题Python3】用视频讲DP, 一听就懂 - 编辑距离 - 力扣（LeetCode）</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, w1: str, w2: str)</span> -&gt; int:</span></span><br><span class="line">        n, m = len(w1), len(w2)</span><br><span class="line">        <span class="keyword">if</span>  min(n, m)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> max(n, m)</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]<span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 边界值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = j</span><br><span class="line">        <span class="comment"># 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> w1[i<span class="number">-1</span>]==w2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>])+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/edit-distance/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given two words &lt;em&gt;word1&lt;/em&gt; and &lt;em&gt;word2&lt;/em&gt; , find the minimum number of operations&lt;br&gt;required to convert &lt;em&gt;word1&lt;/em&gt; to &lt;em&gt;word2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You have the following 3 operations permitted on a word:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Insert a character&lt;/li&gt;
&lt;li&gt;Delete a character&lt;/li&gt;
&lt;li&gt;Replace a character&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: word1 = &amp;quot;horse&amp;quot;, word2 = &amp;quot;ros&amp;quot;
Output: 3
Explanation: 
horse -&amp;gt; rorse (replace &amp;apos;h&amp;apos; with &amp;apos;r&amp;apos;)
rorse -&amp;gt; rose (remove &amp;apos;r&amp;apos;)
rose -&amp;gt; ros (remove &amp;apos;e&amp;apos;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: word1 = &amp;quot;intention&amp;quot;, word2 = &amp;quot;execution&amp;quot;
Output: 5
Explanation: 
intention -&amp;gt; inention (remove &amp;apos;t&amp;apos;)
inention -&amp;gt; enention (replace &amp;apos;i&amp;apos; with &amp;apos;e&amp;apos;)
enention -&amp;gt; exention (replace &amp;apos;n&amp;apos; with &amp;apos;x&amp;apos;)
exention -&amp;gt; exection (replace &amp;apos;n&amp;apos; with &amp;apos;c&amp;apos;)
exection -&amp;gt; execution (insert &amp;apos;u&amp;apos;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String, Dynamic Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Hard&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-7**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-7/"/>
    
    
      <category term="Dynamic Programming" scheme="https://zronghui.github.io/tags/Dynamic-Programming/"/>
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 678. Valid Parenthesis String</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-6**/leetcode-678-Valid-Parenthesis-String.html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-6**/leetcode-678-Valid-Parenthesis-String.html</id>
    <published>2020-04-16T11:17:33.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/valid-parenthesis-string/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/valid-parenthesis-string/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’,<br>write a function to check whether this string is valid. We define the validity<br>of a string by these rules:</p><ol><li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li><li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li><li>An empty string is also valid.</li></ol><p><strong>Example 1:</strong>  </p><pre><code>Input: &quot;()&quot;Output: True</code></pre><p><strong>Example 2:</strong>  </p><pre><code>Input: &quot;(*)&quot;Output: True</code></pre><p><strong>Example 3:</strong>  </p><pre><code>Input: &quot;(*))&quot;Output: True</code></pre><p><strong>Note:</strong>  </p><ol><li>The string size will be in the range [1, 100].</li></ol><p><strong>Tags:</strong> String</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/valid-parenthesis-string/solution/you-xiao-de-gua-hao-zi-fu-chuan-by-leetcode/">有效的括号字符串 - 有效的括号字符串 - 力扣（LeetCode）</a></p><img src="https://i.loli.net/2020/04/16/cftrJKkDhgmVRal.png" alt="cftrJKkDhgmVRal" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">checkValidString</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        lo </span>= hi = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i in s:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">'('</span>:</span><br><span class="line">                lo += <span class="number">1</span></span><br><span class="line">                hi += <span class="number">1</span></span><br><span class="line">            elif i==<span class="string">')'</span>:</span><br><span class="line">                lo = max(<span class="number">0</span>, lo-<span class="number">1</span>)</span><br><span class="line">                hi -= <span class="number">1</span></span><br><span class="line">            elif i==<span class="string">'*'</span>:</span><br><span class="line">                lo = max(<span class="number">0</span>, lo-<span class="number">1</span>)</span><br><span class="line">                hi += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> hi&lt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> False</span><br><span class="line">        print(lo, hi)</span><br><span class="line">        <span class="keyword">return</span> lo==<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parenthesis-string/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/valid-parenthesis-string/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’,&lt;br&gt;write a function to check whether this string is valid. We define the validity&lt;br&gt;of a string by these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; must have a corresponding right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt; must have a corresponding left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; must go before the corresponding right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt; could be treated as a single right parenthesis &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt; or a single left parenthesis &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; or an empty string.&lt;/li&gt;
&lt;li&gt;An empty string is also valid.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;()&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(*)&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input: &amp;quot;(*))&amp;quot;
Output: True&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The string size will be in the range [1, 100].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-6**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-6/"/>
    
    
      <category term="String" scheme="https://zronghui.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 238. Product of Array Except Self</title>
    <link href="https://zronghui.github.io/leetcode/leetcode-2**/leetcode-238-Product-of-Array-Except-Self%20(copy).html"/>
    <id>https://zronghui.github.io/leetcode/leetcode-2**/leetcode-238-Product-of-Array-Except-Self%20(copy).html</id>
    <published>2020-04-16T05:14:28.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/product-of-array-except-self/">leetcode</a><br><a href="https://www.jiuzhang.com/solution/product-of-array-except-self/">九章</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code><br>such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code><br>except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><pre><code>Input:  [1,2,3,4]Output: [24,12,8,6]</code></pre><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O( <em>n</em> ).</p><p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does<br>not</strong> count as extra space for the purpose of space complexity analysis.)</p><p><strong>Tags:</strong> Array</p><p><strong>Difficulty:</strong> Medium</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><a id="more"></a></p><p><a href="https://leetcode-cn.com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode/">除自身以外数组的乘积 - 除自身以外数组的乘积 - 力扣（LeetCode）</a></p><p>方法一：左右乘积列表<br>我们不必将所有数字的乘积除以给定索引处的数字得到相应的答案，而是可以利用索引处左侧的所有数字乘积和右侧所有数字的乘积相乘得到答案。</p><p>对于给定索引 ii，我们将使用它左边所有数字的乘积乘以右边所有数字的乘积。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        productBefore = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">        productAfter = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> nums]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            productBefore[i] = productBefore[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            productAfter[i] = productAfter[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>]</span><br><span class="line">        print(productBefore, productAfter)</span><br><span class="line">        <span class="keyword">return</span> list(i*j <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(productBefore, productAfter))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        L, R, answer = [<span class="number">0</span>]*length, [<span class="number">0</span>]*length, [<span class="number">0</span>]*length</span><br><span class="line">        L[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">            L[i] = nums[i - <span class="number">1</span>] * L[i - <span class="number">1</span>]</span><br><span class="line">        R[length - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(length - <span class="number">1</span>)):</span><br><span class="line">            R[i] = nums[i + <span class="number">1</span>] * R[i + <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>方法二：空间复杂度 O(1) 的方法<br>尽管上面的方法已经能够很好的解决这个问题，但是不是常数的空间复杂度。</p><p><strong>由于输出数组不算在空间复杂度内，那么我们可以将 L 或 R 数组在用输出数组来计算，然后再动态构造另一个</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">productExceptSelf</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        res = [<span class="number">1</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            res[i] = res[i<span class="number">-1</span>]*nums[i<span class="number">-1</span>]</span><br><span class="line">        R = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(n<span class="number">-1</span>)):</span><br><span class="line">            R *= nums[i+<span class="number">1</span>]</span><br><span class="line">            res[i] *= R</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/product-of-array-except-self/&quot;&gt;leetcode&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.jiuzhang.com/solution/product-of-array-except-self/&quot;&gt;九章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers where &lt;em&gt;n&lt;/em&gt; &amp;gt; 1,  return an array &lt;code&gt;output&lt;/code&gt;&lt;br&gt;such that &lt;code&gt;output[i]&lt;/code&gt; is equal to the product of all the elements of &lt;code&gt;nums&lt;/code&gt;&lt;br&gt;except &lt;code&gt;nums[i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Input:  [1,2,3,4]
Output: [24,12,8,6]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please solve it &lt;strong&gt;without division&lt;/strong&gt; and in O( &lt;em&gt;n&lt;/em&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up:&lt;/strong&gt;&lt;br&gt;Could you solve it with constant space complexity? (The output array &lt;strong&gt;does&lt;br&gt;not&lt;/strong&gt; count as extra space for the purpose of space complexity analysis.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tags:&lt;/strong&gt; Array&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; Medium&lt;/p&gt;
&lt;h2 id=&quot;答案&quot;&gt;&lt;a href=&quot;#答案&quot; class=&quot;headerlink&quot; title=&quot;答案&quot;&gt;&lt;/a&gt;答案&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://zronghui.github.io/categories/leetcode/"/>
    
      <category term="leetcode-2**" scheme="https://zronghui.github.io/categories/leetcode/leetcode-2/"/>
    
    
      <category term="Array" scheme="https://zronghui.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>weekly-contest-180</title>
    <link href="https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-180.html"/>
    <id>https://zronghui.github.io/Leetcode%20weekly%20contest/weekly-contest-180.html</id>
    <published>2020-04-15T03:32:33.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix">Lucky Numbers in a Matrix</a><strong>3</strong></li><li><input checked="" disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/design-a-stack-with-increment-operation">Design a Stack With Increment Operation</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/balance-a-binary-search-tree">Balance a Binary Search Tree</a><strong>4</strong></li><li><input disabled="" type="checkbox"> <a href="https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team">Maximum Performance of a Team</a><strong>6</strong></li></ul><a id="more"></a><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTo</span><span class="params">(self, d, i, m)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> d:</span><br><span class="line">            d[i].append(m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            d[i] = [m]</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">luckyNumbers</span> <span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> matrix:</span><br><span class="line">            m = min(l)</span><br><span class="line">            <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(l):</span><br><span class="line">                <span class="keyword">if</span> v==m:</span><br><span class="line">                    self.addTo(d, i, m)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items():</span><br><span class="line">            m = max(i[k] <span class="keyword">for</span> i <span class="keyword">in</span> matrix)</span><br><span class="line">            result.extend(i <span class="keyword">for</span> i <span class="keyword">in</span> v <span class="keyword">if</span> i==m)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, maxSize: int)</span>:</span></span><br><span class="line">        self.left = maxSize</span><br><span class="line">        self.l = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.left&gt;<span class="number">0</span>:</span><br><span class="line">            self.l.append(x)</span><br><span class="line">            self.left -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> self.l:</span><br><span class="line">            self.left += <span class="number">1</span></span><br><span class="line">            result = self.l[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">del</span> self.l[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(self, k: int, val: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(k, len(self.l))):</span><br><span class="line">            self.l[i] +=  val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your CustomStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = CustomStack(maxSize)</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># obj.increment(k,val)</span></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><a href="https://www.acwing.com/solution/LeetCode/content/10001/">LeetCode 1382. Balance a Binary Search Tree - AcWing</a></p><img src="https://i.loli.net/2020/04/15/OHumJwqtc6CyTNa.png" alt="OHumJwqtc6CyTNa" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNums</span><span class="params">(self, root, l)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.getNums(root.left, l)</span><br><span class="line">        l.append(root.val)</span><br><span class="line">        self.getNums(root.right, l)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, l)</span>:</span></span><br><span class="line">        n = len(l)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        mid = int(n/<span class="number">2</span>)</span><br><span class="line">        root = TreeNode(l[mid])</span><br><span class="line">        root.left = self.build(l[:mid])</span><br><span class="line">        root.right = self.build(l[mid+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balanceBST</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        l = []</span><br><span class="line">        self.getNums(root, l)</span><br><span class="line">        <span class="keyword">if</span> len(l)&lt;<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> self.build(l)</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p><a href="https://leetcode-cn.com/problems/maximum-performance-of-a-team/solution/pai-xu-dui-python-by-elmer/">排序+堆(Python) - 最大的团队表现值 - 力扣（LeetCode）</a></p><p>思路：</p><p>按efficiency进行降序排列，<br>遍历排序后的speed和efficiency，在遍历过程中进行以下操作：<br>(1)将speed放入最小堆中，<br>(2)保持堆的大小为k，<br>(3)记录堆中speed之和，<br>(4)寻找最大团队表现值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush <span class="keyword">as</span> push</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop <span class="keyword">as</span> pop</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mod = <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPerformance</span><span class="params">(self, n: int, speed: List[int], efficiency: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        l = sorted(zip(speed, efficiency), key=<span class="keyword">lambda</span> i: -i[<span class="number">1</span>])</span><br><span class="line">        speed_sum = <span class="number">0</span></span><br><span class="line">        speedl = []</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s, e <span class="keyword">in</span> l:</span><br><span class="line">            push(speedl, s)</span><br><span class="line">            speed_sum += s</span><br><span class="line">            <span class="keyword">if</span> len(speedl)&gt;k:</span><br><span class="line">                speed_sum -= pop(speedl)</span><br><span class="line">            res = max(res, speed_sum*e)</span><br><span class="line">        <span class="keyword">return</span> res%self.mod</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/lucky-numbers-in-a-matrix&quot;&gt;Lucky Numbers in a Matrix&lt;/a&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/design-a-stack-with-increment-operation&quot;&gt;Design a Stack With Increment Operation&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/balance-a-binary-search-tree&quot;&gt;Balance a Binary Search Tree&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; &lt;a href=&quot;https://leetcode.com/contest/weekly-contest-180/problems/maximum-performance-of-a-team&quot;&gt;Maximum Performance of a Team&lt;/a&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Leetcode weekly contest" scheme="https://zronghui.github.io/categories/Leetcode-weekly-contest/"/>
    
    
  </entry>
  
  <entry>
    <title>信息系统实训-0415作业</title>
    <link href="https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-0415%E4%BD%9C%E4%B8%9A.html"/>
    <id>https://zronghui.github.io/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-0415%E4%BD%9C%E4%B8%9A.html</id>
    <published>2020-04-15T02:01:07.000Z</published>
    <updated>2020-04-25T16:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><img src="https://i.loli.net/2020/04/15/JHFlfZjV6CtcXMR.png" alt="JHFlfZjV6CtcXMR" style="zoom:33%;" /><img src="https://i.loli.net/2020/04/15/EvcptA14NG6Yw5M.png" alt="EvcptA14NG6Yw5M" style="zoom:50%;" /><h2 id="插入数据代码"><a href="#插入数据代码" class="headerlink" title="插入数据代码"></a>插入数据代码</h2><img src="https://i.loli.net/2020/04/15/6l4dbpaKAR1BImz.png" alt="6l4dbpaKAR1BImz" style="zoom:50%;" /><h2 id="查询代码"><a href="#查询代码" class="headerlink" title="查询代码"></a>查询代码</h2><img src="https://i.loli.net/2020/04/15/ZTB4PLGXE3kFDHJ.png" alt="ZTB4PLGXE3kFDHJ" style="zoom:50%;" /><h2 id="搜索输出结果"><a href="#搜索输出结果" class="headerlink" title="搜索输出结果"></a>搜索输出结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">python es.py                                        </span><br><span class="line">&#123;'_shards': &#123;'failed': 0, 'skipped': 0, 'successful': 5, 'total': 5&#125;,</span><br><span class="line"> 'hits': &#123;'hits': [&#123;'_id': 'dzytX3EBBdNqBssliOYU',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '乔舒亚·克拉克《无器械健身》（女性版）epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/140592.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['乔舒亚·克拉克《无器械&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;》（女性版）epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'jDytX3EBBdNqBssleDAQ',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《无器械健身》 mobi格式下载',</span><br><span class="line">                                'book_url': 'https://pan.shudan.vip/5751.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《无器械&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;》 '</span><br><span class="line">                                                '&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;格式下载']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'JDytX3EBBdNqBsslhtSD',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《硬派健身·减肥篇》知乎盐系列/知乎斌卡自选集/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/135932.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《硬派&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;·减肥篇》知乎盐系列/知乎斌卡自选集/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': '2DytX3EBBdNqBsslhtjt',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《再见，健身房》高宇/徒手与器械体能训练天然强壮/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/137126.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《再见，&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;房》高宇/徒手与器械体能训练天然强壮/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'tTytX3EBBdNqBsslh956',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《健康脑》丹尼尔·亚蒙/常减肥健身失败原因/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/138629.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《健康脑》丹尼尔·亚蒙/常减肥&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;失败原因/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'yzytX3EBBdNqBssliOcU',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 2.0,</span><br><span class="line">                    '_source': &#123;'book_name': '蒂莫西·费里斯《每周健身4小时》实验成果epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/140928.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['蒂莫西·费里斯《每周&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;健身&lt;/span&gt;4小时》实验成果epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'hz2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《整个巴黎属于我》布鲁姆/细看野生天才的黄金时代/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161569.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《整个巴黎属于我》布鲁姆/细看野生天才的黄金时代/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'jD2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《自指引擎》圆城塔/每个故事的缝隙都隐藏着无数故事/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161574.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《自指引擎》圆城塔/每个故事的缝隙都隐藏着无数故事/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'kj2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《黑暗物质：精灵守护神》菲利普·普尔曼/奇幻经典/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161580.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《黑暗物质：精灵守护神》菲利普·普尔曼/奇幻经典/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;,</span><br><span class="line">                   &#123;'_id': 'lD2tX3EBBdNqBssljjjp',</span><br><span class="line">                    '_index': 'books',</span><br><span class="line">                    '_score': 1.0,</span><br><span class="line">                    '_source': &#123;'book_name': '《营销革命3.0》[轻携版]菲利普·科特勒/深度的关联/epub+mobi+azw3',</span><br><span class="line">                                'book_url': 'https://www.shudan.vip/161582.html'&#125;,</span><br><span class="line">                    '_type': 'books',</span><br><span class="line">                    '_version': 1,</span><br><span class="line">                    'highlight': &#123;'book_name': ['《营销革命3.0》[轻携版]菲利普·科特勒/深度的关联/epub+&lt;span '</span><br><span class="line">                                                'class="highlight"&gt;mobi&lt;/span&gt;+azw3']&#125;&#125;],</span><br><span class="line">          'max_score': 2.0,</span><br><span class="line">          'total': 18902&#125;,</span><br><span class="line"> 'timed_out': False,</span><br><span class="line"> 'took': 127&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="研究生课程" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/"/>
    
      <category term="信息系统实训" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/"/>
    
      <category term="提交作业" scheme="https://zronghui.github.io/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD/%E6%8F%90%E4%BA%A4%E4%BD%9C%E4%B8%9A/"/>
    
    
  </entry>
  
</feed>
